// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file BasicTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "BasicTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Basic.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_Basic_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_EnumStruct_type_identifier();

                register_AliasStruct_type_identifier();

                register_AliasAliasStruct_type_identifier();

                register_BoolStruct_type_identifier();

                register_OctetStruct_type_identifier();

                register_ShortStruct_type_identifier();

                register_LongStruct_type_identifier();

                register_LongLongStruct_type_identifier();

                register_UShortStruct_type_identifier();

                register_ULongStruct_type_identifier();

                register_ULongLongStruct_type_identifier();

                register_FloatStruct_type_identifier();

                register_DoubleStruct_type_identifier();

                register_LongDoubleStruct_type_identifier();

                register_CharStruct_type_identifier();

                register_WCharStruct_type_identifier();

                register_StringStruct_type_identifier();

                register_WStringStruct_type_identifier();

                register_LargeStringStruct_type_identifier();

                register_LargeWStringStruct_type_identifier();

                register_ArraytStruct_type_identifier();

                register_ArrayArrayStruct_type_identifier();

                register_SequenceStruct_type_identifier();

                register_SequenceSequenceStruct_type_identifier();

                register_MapStruct_type_identifier();

                register_MapMapStruct_type_identifier();

                register_BitsetStruct_type_identifier();

                register_StructStruct_type_identifier();

                register_StructStructStruct_type_identifier();

                register_SimpleUnion_type_identifier();

                register_UnionUnion_type_identifier();

                register_WCharUnion_type_identifier();

                register_SimpleUnionStruct_type_identifier();

                register_UnionUnionUnionStruct_type_identifier();

                register_WCharUnionStruct_type_identifier();

            });
}

void register_EnumStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_EnumStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_EnumStruct;
        TypeIdentifierPair type_ids_EnumStruct;
        QualifiedTypeName type_name_EnumStruct = "EnumStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_EnumStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_EnumStruct;
        CompleteTypeDetail detail_EnumStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_EnumStruct, ann_custom_EnumStruct, type_name_EnumStruct.to_string());
        CompleteStructHeader header_EnumStruct;
        header_EnumStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_EnumStruct);
        CompleteStructMemberSeq member_seq_EnumStruct;
        {
            return_code_EnumStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyEnum", type_ids_EnumStruct);

            if (return_code_EnumStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EnumTypeFlag enum_flags_MyEnum = 0;
                BitBound bit_bound_MyEnum = 32;
                CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                QualifiedTypeName type_name_MyEnum = "MyEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                {
                    EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                    ann_custom_MyEnum.reset();
                    MemberName name_A = "A";
                    CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                    CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                }
                {
                    EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                    ann_custom_MyEnum.reset();
                    MemberName name_B = "B";
                    CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                    CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                }
                {
                    EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                    ann_custom_MyEnum.reset();
                    MemberName name_C = "C";
                    CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                    CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                }
                CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                        literal_seq_MyEnum);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code_EnumStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyEnum", type_ids_EnumStruct);
                if (return_code_EnumStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_enum;
            MemberId member_id_my_enum = 0x00000000;
            if (EK_COMPLETE == type_ids_EnumStruct.type_identifier1()._d() || TK_NONE == type_ids_EnumStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_EnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_EnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_EnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_EnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_EnumStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_EnumStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_EnumStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_EnumStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_EnumStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_EnumStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_EnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_EnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_EnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_EnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_EnumStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_EnumStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_EnumStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_EnumStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_EnumStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_EnumStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_enum = "my_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_enum;
            ann_custom_EnumStruct.reset();
            CompleteMemberDetail detail_my_enum = TypeObjectUtils::build_complete_member_detail(name_my_enum, member_ann_builtin_my_enum, ann_custom_EnumStruct);
            CompleteStructMember member_my_enum = TypeObjectUtils::build_complete_struct_member(common_my_enum, detail_my_enum);
            TypeObjectUtils::add_complete_struct_member(member_seq_EnumStruct, member_my_enum);
        }
        CompleteStructType struct_type_EnumStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_EnumStruct, header_EnumStruct, member_seq_EnumStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_EnumStruct, type_name_EnumStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "EnumStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_EnumStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "EnumStruct", type_ids_EnumStruct);
        if (return_code_EnumStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "EnumStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_AliasStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_AliasStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_AliasStruct;
        TypeIdentifierPair type_ids_AliasStruct;
        QualifiedTypeName type_name_AliasStruct = "AliasStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AliasStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AliasStruct;
        CompleteTypeDetail detail_AliasStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AliasStruct, ann_custom_AliasStruct, type_name_AliasStruct.to_string());
        CompleteStructHeader header_AliasStruct;
        header_AliasStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_AliasStruct);
        CompleteStructMemberSeq member_seq_AliasStruct;
        {
            return_code_AliasStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyAliasEnum", type_ids_AliasStruct);

            if (return_code_AliasStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags_MyAliasEnum = 0;
                QualifiedTypeName type_name_MyAliasEnum = "MyAliasEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasEnum;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasEnum;
                CompleteTypeDetail detail_MyAliasEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasEnum, ann_custom_MyAliasEnum, type_name_MyAliasEnum.to_string());
                CompleteAliasHeader header_MyAliasEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasEnum);
                AliasMemberFlag related_flags_MyAliasEnum = 0;
                return_code_AliasStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyEnum", type_ids_AliasStruct);

                if (return_code_AliasStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EnumTypeFlag enum_flags_MyEnum = 0;
                    BitBound bit_bound_MyEnum = 32;
                    CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                    QualifiedTypeName type_name_MyEnum = "MyEnum";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                    CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                    CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                    CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                    {
                        EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                        ann_custom_MyEnum.reset();
                        MemberName name_A = "A";
                        CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                        CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                    }
                    {
                        EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                        ann_custom_MyEnum.reset();
                        MemberName name_B = "B";
                        CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                        CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                    }
                    {
                        EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                        ann_custom_MyEnum.reset();
                        MemberName name_C = "C";
                        CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                        CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                    }
                    CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                            literal_seq_MyEnum);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyEnum already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_AliasStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyEnum", type_ids_AliasStruct);
                    if (return_code_AliasStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common_MyAliasEnum;
                if (EK_COMPLETE == type_ids_AliasStruct.type_identifier1()._d() || TK_NONE == type_ids_AliasStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AliasStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AliasStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AliasStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AliasStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AliasStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AliasStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasEnum, type_ids_AliasStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AliasStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AliasStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AliasStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AliasStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AliasStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AliasStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AliasStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AliasStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasEnum, type_ids_AliasStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyAliasEnum related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasEnum;
                ann_custom_MyAliasEnum.reset();
                CompleteAliasBody body_MyAliasEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasEnum, member_ann_builtin_MyAliasEnum, ann_custom_MyAliasEnum);
                CompleteAliasType alias_type_MyAliasEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasEnum, header_MyAliasEnum, body_MyAliasEnum);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasEnum, type_name_MyAliasEnum.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyAliasEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code_AliasStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyAliasEnum", type_ids_AliasStruct);
                if (return_code_AliasStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_alias;
            MemberId member_id_my_alias = 0x00000000;
            if (EK_COMPLETE == type_ids_AliasStruct.type_identifier1()._d() || TK_NONE == type_ids_AliasStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AliasStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AliasStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AliasStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AliasStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AliasStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AliasStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_alias = TypeObjectUtils::build_common_struct_member(member_id_my_alias, member_flags_my_alias, type_ids_AliasStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AliasStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AliasStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AliasStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AliasStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AliasStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AliasStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AliasStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AliasStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_alias = TypeObjectUtils::build_common_struct_member(member_id_my_alias, member_flags_my_alias, type_ids_AliasStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_alias member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_alias = "my_alias";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_alias;
            ann_custom_AliasStruct.reset();
            CompleteMemberDetail detail_my_alias = TypeObjectUtils::build_complete_member_detail(name_my_alias, member_ann_builtin_my_alias, ann_custom_AliasStruct);
            CompleteStructMember member_my_alias = TypeObjectUtils::build_complete_struct_member(common_my_alias, detail_my_alias);
            TypeObjectUtils::add_complete_struct_member(member_seq_AliasStruct, member_my_alias);
        }
        CompleteStructType struct_type_AliasStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_AliasStruct, header_AliasStruct, member_seq_AliasStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_AliasStruct, type_name_AliasStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "AliasStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_AliasStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "AliasStruct", type_ids_AliasStruct);
        if (return_code_AliasStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "AliasStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_AliasAliasStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_AliasAliasStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_AliasAliasStruct;
        TypeIdentifierPair type_ids_AliasAliasStruct;
        QualifiedTypeName type_name_AliasAliasStruct = "AliasAliasStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_AliasAliasStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_AliasAliasStruct;
        CompleteTypeDetail detail_AliasAliasStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_AliasAliasStruct, ann_custom_AliasAliasStruct, type_name_AliasAliasStruct.to_string());
        CompleteStructHeader header_AliasAliasStruct;
        header_AliasAliasStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_AliasAliasStruct);
        CompleteStructMemberSeq member_seq_AliasAliasStruct;
        {
            return_code_AliasAliasStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyAliasAliasEnum", type_ids_AliasAliasStruct);

            if (return_code_AliasAliasStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags_MyAliasAliasEnum = 0;
                QualifiedTypeName type_name_MyAliasAliasEnum = "MyAliasAliasEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasAliasEnum;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasAliasEnum;
                CompleteTypeDetail detail_MyAliasAliasEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasAliasEnum, ann_custom_MyAliasAliasEnum, type_name_MyAliasAliasEnum.to_string());
                CompleteAliasHeader header_MyAliasAliasEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasAliasEnum);
                AliasMemberFlag related_flags_MyAliasAliasEnum = 0;
                return_code_AliasAliasStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyAliasEnum", type_ids_AliasAliasStruct);

                if (return_code_AliasAliasStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_MyAliasEnum = 0;
                    QualifiedTypeName type_name_MyAliasEnum = "MyAliasEnum";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasEnum;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasEnum;
                    CompleteTypeDetail detail_MyAliasEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasEnum, ann_custom_MyAliasEnum, type_name_MyAliasEnum.to_string());
                    CompleteAliasHeader header_MyAliasEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasEnum);
                    AliasMemberFlag related_flags_MyAliasEnum = 0;
                    return_code_AliasAliasStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyEnum", type_ids_AliasAliasStruct);

                    if (return_code_AliasAliasStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EnumTypeFlag enum_flags_MyEnum = 0;
                        BitBound bit_bound_MyEnum = 32;
                        CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                        QualifiedTypeName type_name_MyEnum = "MyEnum";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                        CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                        CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                        CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                        {
                            EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                            ann_custom_MyEnum.reset();
                            MemberName name_A = "A";
                            CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                            CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                        }
                        {
                            EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                            ann_custom_MyEnum.reset();
                            MemberName name_B = "B";
                            CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                            CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                        }
                        {
                            EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                            ann_custom_MyEnum.reset();
                            MemberName name_C = "C";
                            CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                            CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                        }
                        CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                                literal_seq_MyEnum);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyEnum already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_AliasAliasStruct =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyEnum", type_ids_AliasAliasStruct);
                        if (return_code_AliasAliasStruct != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common_MyAliasEnum;
                    if (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1()._d() || TK_NONE == type_ids_AliasAliasStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_MyAliasEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasEnum, type_ids_AliasAliasStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_MyAliasEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasEnum, type_ids_AliasAliasStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasEnum related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasEnum;
                    ann_custom_MyAliasEnum.reset();
                    CompleteAliasBody body_MyAliasEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasEnum, member_ann_builtin_MyAliasEnum, ann_custom_MyAliasEnum);
                    CompleteAliasType alias_type_MyAliasEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasEnum, header_MyAliasEnum, body_MyAliasEnum);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasEnum, type_name_MyAliasEnum.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyAliasEnum already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_AliasAliasStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyAliasEnum", type_ids_AliasAliasStruct);
                    if (return_code_AliasAliasStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common_MyAliasAliasEnum;
                if (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1()._d() || TK_NONE == type_ids_AliasAliasStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasAliasEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasAliasEnum, type_ids_AliasAliasStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasAliasEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasAliasEnum, type_ids_AliasAliasStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyAliasAliasEnum related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasAliasEnum;
                ann_custom_MyAliasAliasEnum.reset();
                CompleteAliasBody body_MyAliasAliasEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasAliasEnum, member_ann_builtin_MyAliasAliasEnum, ann_custom_MyAliasAliasEnum);
                CompleteAliasType alias_type_MyAliasAliasEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasAliasEnum, header_MyAliasAliasEnum, body_MyAliasAliasEnum);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasAliasEnum, type_name_MyAliasAliasEnum.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyAliasAliasEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code_AliasAliasStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyAliasAliasEnum", type_ids_AliasAliasStruct);
                if (return_code_AliasAliasStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_alias_alias = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_alias_alias;
            MemberId member_id_my_alias_alias = 0x00000000;
            if (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1()._d() || TK_NONE == type_ids_AliasAliasStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AliasAliasStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_alias_alias = TypeObjectUtils::build_common_struct_member(member_id_my_alias_alias, member_flags_my_alias_alias, type_ids_AliasAliasStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_AliasAliasStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_AliasAliasStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_alias_alias = TypeObjectUtils::build_common_struct_member(member_id_my_alias_alias, member_flags_my_alias_alias, type_ids_AliasAliasStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_alias_alias member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_alias_alias = "my_alias_alias";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_alias_alias;
            ann_custom_AliasAliasStruct.reset();
            CompleteMemberDetail detail_my_alias_alias = TypeObjectUtils::build_complete_member_detail(name_my_alias_alias, member_ann_builtin_my_alias_alias, ann_custom_AliasAliasStruct);
            CompleteStructMember member_my_alias_alias = TypeObjectUtils::build_complete_struct_member(common_my_alias_alias, detail_my_alias_alias);
            TypeObjectUtils::add_complete_struct_member(member_seq_AliasAliasStruct, member_my_alias_alias);
        }
        CompleteStructType struct_type_AliasAliasStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_AliasAliasStruct, header_AliasAliasStruct, member_seq_AliasAliasStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_AliasAliasStruct, type_name_AliasAliasStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "AliasAliasStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_AliasAliasStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "AliasAliasStruct", type_ids_AliasAliasStruct);
        if (return_code_AliasAliasStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "AliasAliasStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_BoolStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_BoolStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BoolStruct;
        TypeIdentifierPair type_ids_BoolStruct;
        QualifiedTypeName type_name_BoolStruct = "BoolStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BoolStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BoolStruct;
        CompleteTypeDetail detail_BoolStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BoolStruct, ann_custom_BoolStruct, type_name_BoolStruct.to_string());
        CompleteStructHeader header_BoolStruct;
        header_BoolStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BoolStruct);
        CompleteStructMemberSeq member_seq_BoolStruct;
        {
            return_code_BoolStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_BoolStruct);

            if (return_code_BoolStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_bool;
            MemberId member_id_my_bool = 0x00000000;
            if (EK_COMPLETE == type_ids_BoolStruct.type_identifier1()._d() || TK_NONE == type_ids_BoolStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoolStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoolStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoolStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoolStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoolStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoolStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoolStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BoolStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BoolStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BoolStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BoolStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BoolStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BoolStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BoolStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BoolStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoolStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BoolStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BoolStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BoolStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BoolStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bool member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_bool = "my_bool";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
            ann_custom_BoolStruct.reset();
            CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_BoolStruct);
            CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
            TypeObjectUtils::add_complete_struct_member(member_seq_BoolStruct, member_my_bool);
        }
        CompleteStructType struct_type_BoolStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_BoolStruct, header_BoolStruct, member_seq_BoolStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BoolStruct, type_name_BoolStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BoolStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BoolStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BoolStruct", type_ids_BoolStruct);
        if (return_code_BoolStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BoolStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_OctetStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_OctetStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_OctetStruct;
        TypeIdentifierPair type_ids_OctetStruct;
        QualifiedTypeName type_name_OctetStruct = "OctetStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OctetStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OctetStruct;
        CompleteTypeDetail detail_OctetStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OctetStruct, ann_custom_OctetStruct, type_name_OctetStruct.to_string());
        CompleteStructHeader header_OctetStruct;
        header_OctetStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_OctetStruct);
        CompleteStructMemberSeq member_seq_OctetStruct;
        {
            return_code_OctetStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_OctetStruct);

            if (return_code_OctetStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_octet = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_octet;
            MemberId member_id_my_octet = 0x00000000;
            if (EK_COMPLETE == type_ids_OctetStruct.type_identifier1()._d() || TK_NONE == type_ids_OctetStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_OctetStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_OctetStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_OctetStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_OctetStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_OctetStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_OctetStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_OctetStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_OctetStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_OctetStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_OctetStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_OctetStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_OctetStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_OctetStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_OctetStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_octet = TypeObjectUtils::build_common_struct_member(member_id_my_octet, member_flags_my_octet, type_ids_OctetStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_octet = "my_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_octet;
            ann_custom_OctetStruct.reset();
            CompleteMemberDetail detail_my_octet = TypeObjectUtils::build_complete_member_detail(name_my_octet, member_ann_builtin_my_octet, ann_custom_OctetStruct);
            CompleteStructMember member_my_octet = TypeObjectUtils::build_complete_struct_member(common_my_octet, detail_my_octet);
            TypeObjectUtils::add_complete_struct_member(member_seq_OctetStruct, member_my_octet);
        }
        CompleteStructType struct_type_OctetStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_OctetStruct, header_OctetStruct, member_seq_OctetStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_OctetStruct, type_name_OctetStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OctetStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_OctetStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "OctetStruct", type_ids_OctetStruct);
        if (return_code_OctetStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "OctetStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ShortStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_ShortStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ShortStruct;
        TypeIdentifierPair type_ids_ShortStruct;
        QualifiedTypeName type_name_ShortStruct = "ShortStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ShortStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ShortStruct;
        CompleteTypeDetail detail_ShortStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ShortStruct, ann_custom_ShortStruct, type_name_ShortStruct.to_string());
        CompleteStructHeader header_ShortStruct;
        header_ShortStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ShortStruct);
        CompleteStructMemberSeq member_seq_ShortStruct;
        {
            return_code_ShortStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_ShortStruct);

            if (return_code_ShortStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_int16 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_int16;
            MemberId member_id_my_int16 = 0x00000000;
            if (EK_COMPLETE == type_ids_ShortStruct.type_identifier1()._d() || TK_NONE == type_ids_ShortStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ShortStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ShortStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ShortStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ShortStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ShortStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ShortStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ShortStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ShortStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_int16 = TypeObjectUtils::build_common_struct_member(member_id_my_int16, member_flags_my_int16, type_ids_ShortStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ShortStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ShortStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ShortStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ShortStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ShortStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ShortStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ShortStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ShortStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ShortStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ShortStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_int16 = TypeObjectUtils::build_common_struct_member(member_id_my_int16, member_flags_my_int16, type_ids_ShortStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int16 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_int16 = "my_int16";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int16;
            ann_custom_ShortStruct.reset();
            CompleteMemberDetail detail_my_int16 = TypeObjectUtils::build_complete_member_detail(name_my_int16, member_ann_builtin_my_int16, ann_custom_ShortStruct);
            CompleteStructMember member_my_int16 = TypeObjectUtils::build_complete_struct_member(common_my_int16, detail_my_int16);
            TypeObjectUtils::add_complete_struct_member(member_seq_ShortStruct, member_my_int16);
        }
        CompleteStructType struct_type_ShortStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ShortStruct, header_ShortStruct, member_seq_ShortStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ShortStruct, type_name_ShortStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ShortStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ShortStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ShortStruct", type_ids_ShortStruct);
        if (return_code_ShortStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ShortStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_LongStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_LongStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_LongStruct;
        TypeIdentifierPair type_ids_LongStruct;
        QualifiedTypeName type_name_LongStruct = "LongStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LongStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LongStruct;
        CompleteTypeDetail detail_LongStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LongStruct, ann_custom_LongStruct, type_name_LongStruct.to_string());
        CompleteStructHeader header_LongStruct;
        header_LongStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LongStruct);
        CompleteStructMemberSeq member_seq_LongStruct;
        {
            return_code_LongStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_LongStruct);

            if (return_code_LongStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_int32 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_int32;
            MemberId member_id_my_int32 = 0x00000000;
            if (EK_COMPLETE == type_ids_LongStruct.type_identifier1()._d() || TK_NONE == type_ids_LongStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LongStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LongStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LongStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LongStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_LongStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LongStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LongStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LongStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LongStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LongStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_LongStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_int32 = "my_int32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int32;
            ann_custom_LongStruct.reset();
            CompleteMemberDetail detail_my_int32 = TypeObjectUtils::build_complete_member_detail(name_my_int32, member_ann_builtin_my_int32, ann_custom_LongStruct);
            CompleteStructMember member_my_int32 = TypeObjectUtils::build_complete_struct_member(common_my_int32, detail_my_int32);
            TypeObjectUtils::add_complete_struct_member(member_seq_LongStruct, member_my_int32);
        }
        CompleteStructType struct_type_LongStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_LongStruct, header_LongStruct, member_seq_LongStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LongStruct, type_name_LongStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LongStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_LongStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "LongStruct", type_ids_LongStruct);
        if (return_code_LongStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LongStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_LongLongStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_LongLongStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_LongLongStruct;
        TypeIdentifierPair type_ids_LongLongStruct;
        QualifiedTypeName type_name_LongLongStruct = "LongLongStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LongLongStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LongLongStruct;
        CompleteTypeDetail detail_LongLongStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LongLongStruct, ann_custom_LongLongStruct, type_name_LongLongStruct.to_string());
        CompleteStructHeader header_LongLongStruct;
        header_LongLongStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LongLongStruct);
        CompleteStructMemberSeq member_seq_LongLongStruct;
        {
            return_code_LongLongStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_LongLongStruct);

            if (return_code_LongLongStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_int64 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_int64;
            MemberId member_id_my_int64 = 0x00000000;
            if (EK_COMPLETE == type_ids_LongLongStruct.type_identifier1()._d() || TK_NONE == type_ids_LongLongStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LongLongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LongLongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LongLongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LongLongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LongLongStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LongLongStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LongLongStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LongLongStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_int64 = TypeObjectUtils::build_common_struct_member(member_id_my_int64, member_flags_my_int64, type_ids_LongLongStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LongLongStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LongLongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LongLongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LongLongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LongLongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LongLongStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LongLongStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LongLongStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LongLongStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongLongStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_int64 = TypeObjectUtils::build_common_struct_member(member_id_my_int64, member_flags_my_int64, type_ids_LongLongStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int64 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_int64 = "my_int64";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int64;
            ann_custom_LongLongStruct.reset();
            CompleteMemberDetail detail_my_int64 = TypeObjectUtils::build_complete_member_detail(name_my_int64, member_ann_builtin_my_int64, ann_custom_LongLongStruct);
            CompleteStructMember member_my_int64 = TypeObjectUtils::build_complete_struct_member(common_my_int64, detail_my_int64);
            TypeObjectUtils::add_complete_struct_member(member_seq_LongLongStruct, member_my_int64);
        }
        CompleteStructType struct_type_LongLongStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_LongLongStruct, header_LongLongStruct, member_seq_LongLongStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LongLongStruct, type_name_LongLongStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LongLongStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_LongLongStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "LongLongStruct", type_ids_LongLongStruct);
        if (return_code_LongLongStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LongLongStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_UShortStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_UShortStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_UShortStruct;
        TypeIdentifierPair type_ids_UShortStruct;
        QualifiedTypeName type_name_UShortStruct = "UShortStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_UShortStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_UShortStruct;
        CompleteTypeDetail detail_UShortStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_UShortStruct, ann_custom_UShortStruct, type_name_UShortStruct.to_string());
        CompleteStructHeader header_UShortStruct;
        header_UShortStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_UShortStruct);
        CompleteStructMemberSeq member_seq_UShortStruct;
        {
            return_code_UShortStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids_UShortStruct);

            if (return_code_UShortStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_uint16 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_uint16;
            MemberId member_id_my_uint16 = 0x00000000;
            if (EK_COMPLETE == type_ids_UShortStruct.type_identifier1()._d() || TK_NONE == type_ids_UShortStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_UShortStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_UShortStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_UShortStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_UShortStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_UShortStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_UShortStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_UShortStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_UShortStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_uint16 = TypeObjectUtils::build_common_struct_member(member_id_my_uint16, member_flags_my_uint16, type_ids_UShortStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_UShortStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_UShortStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_UShortStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_UShortStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_UShortStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_UShortStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_UShortStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_UShortStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_UShortStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UShortStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_uint16 = TypeObjectUtils::build_common_struct_member(member_id_my_uint16, member_flags_my_uint16, type_ids_UShortStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_uint16 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_uint16 = "my_uint16";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_uint16;
            ann_custom_UShortStruct.reset();
            CompleteMemberDetail detail_my_uint16 = TypeObjectUtils::build_complete_member_detail(name_my_uint16, member_ann_builtin_my_uint16, ann_custom_UShortStruct);
            CompleteStructMember member_my_uint16 = TypeObjectUtils::build_complete_struct_member(common_my_uint16, detail_my_uint16);
            TypeObjectUtils::add_complete_struct_member(member_seq_UShortStruct, member_my_uint16);
        }
        CompleteStructType struct_type_UShortStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_UShortStruct, header_UShortStruct, member_seq_UShortStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_UShortStruct, type_name_UShortStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "UShortStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_UShortStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "UShortStruct", type_ids_UShortStruct);
        if (return_code_UShortStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "UShortStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ULongStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_ULongStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ULongStruct;
        TypeIdentifierPair type_ids_ULongStruct;
        QualifiedTypeName type_name_ULongStruct = "ULongStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ULongStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ULongStruct;
        CompleteTypeDetail detail_ULongStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ULongStruct, ann_custom_ULongStruct, type_name_ULongStruct.to_string());
        CompleteStructHeader header_ULongStruct;
        header_ULongStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ULongStruct);
        CompleteStructMemberSeq member_seq_ULongStruct;
        {
            return_code_ULongStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_ULongStruct);

            if (return_code_ULongStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_uint32 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_uint32;
            MemberId member_id_my_uint32 = 0x00000000;
            if (EK_COMPLETE == type_ids_ULongStruct.type_identifier1()._d() || TK_NONE == type_ids_ULongStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ULongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ULongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ULongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ULongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ULongStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ULongStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ULongStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ULongStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_uint32 = TypeObjectUtils::build_common_struct_member(member_id_my_uint32, member_flags_my_uint32, type_ids_ULongStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ULongStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ULongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ULongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ULongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ULongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ULongStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ULongStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ULongStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ULongStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ULongStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_uint32 = TypeObjectUtils::build_common_struct_member(member_id_my_uint32, member_flags_my_uint32, type_ids_ULongStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_uint32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_uint32 = "my_uint32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_uint32;
            ann_custom_ULongStruct.reset();
            CompleteMemberDetail detail_my_uint32 = TypeObjectUtils::build_complete_member_detail(name_my_uint32, member_ann_builtin_my_uint32, ann_custom_ULongStruct);
            CompleteStructMember member_my_uint32 = TypeObjectUtils::build_complete_struct_member(common_my_uint32, detail_my_uint32);
            TypeObjectUtils::add_complete_struct_member(member_seq_ULongStruct, member_my_uint32);
        }
        CompleteStructType struct_type_ULongStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ULongStruct, header_ULongStruct, member_seq_ULongStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ULongStruct, type_name_ULongStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ULongStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ULongStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ULongStruct", type_ids_ULongStruct);
        if (return_code_ULongStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ULongStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ULongLongStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_ULongLongStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ULongLongStruct;
        TypeIdentifierPair type_ids_ULongLongStruct;
        QualifiedTypeName type_name_ULongLongStruct = "ULongLongStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ULongLongStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ULongLongStruct;
        CompleteTypeDetail detail_ULongLongStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ULongLongStruct, ann_custom_ULongLongStruct, type_name_ULongLongStruct.to_string());
        CompleteStructHeader header_ULongLongStruct;
        header_ULongLongStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ULongLongStruct);
        CompleteStructMemberSeq member_seq_ULongLongStruct;
        {
            return_code_ULongLongStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_ULongLongStruct);

            if (return_code_ULongLongStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_uint64 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_uint64;
            MemberId member_id_my_uint64 = 0x00000000;
            if (EK_COMPLETE == type_ids_ULongLongStruct.type_identifier1()._d() || TK_NONE == type_ids_ULongLongStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ULongLongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ULongLongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ULongLongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ULongLongStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ULongLongStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ULongLongStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ULongLongStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ULongLongStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_uint64 = TypeObjectUtils::build_common_struct_member(member_id_my_uint64, member_flags_my_uint64, type_ids_ULongLongStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ULongLongStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ULongLongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ULongLongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ULongLongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ULongLongStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ULongLongStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ULongLongStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ULongLongStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ULongLongStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ULongLongStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_uint64 = TypeObjectUtils::build_common_struct_member(member_id_my_uint64, member_flags_my_uint64, type_ids_ULongLongStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_uint64 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_uint64 = "my_uint64";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_uint64;
            ann_custom_ULongLongStruct.reset();
            CompleteMemberDetail detail_my_uint64 = TypeObjectUtils::build_complete_member_detail(name_my_uint64, member_ann_builtin_my_uint64, ann_custom_ULongLongStruct);
            CompleteStructMember member_my_uint64 = TypeObjectUtils::build_complete_struct_member(common_my_uint64, detail_my_uint64);
            TypeObjectUtils::add_complete_struct_member(member_seq_ULongLongStruct, member_my_uint64);
        }
        CompleteStructType struct_type_ULongLongStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ULongLongStruct, header_ULongLongStruct, member_seq_ULongLongStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ULongLongStruct, type_name_ULongLongStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ULongLongStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ULongLongStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ULongLongStruct", type_ids_ULongLongStruct);
        if (return_code_ULongLongStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ULongLongStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_FloatStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_FloatStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_FloatStruct;
        TypeIdentifierPair type_ids_FloatStruct;
        QualifiedTypeName type_name_FloatStruct = "FloatStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_FloatStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_FloatStruct;
        CompleteTypeDetail detail_FloatStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_FloatStruct, ann_custom_FloatStruct, type_name_FloatStruct.to_string());
        CompleteStructHeader header_FloatStruct;
        header_FloatStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_FloatStruct);
        CompleteStructMemberSeq member_seq_FloatStruct;
        {
            return_code_FloatStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids_FloatStruct);

            if (return_code_FloatStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_float32 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_float32;
            MemberId member_id_my_float32 = 0x00000000;
            if (EK_COMPLETE == type_ids_FloatStruct.type_identifier1()._d() || TK_NONE == type_ids_FloatStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_FloatStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_FloatStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_FloatStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_FloatStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_FloatStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_FloatStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_FloatStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_FloatStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_float32 = TypeObjectUtils::build_common_struct_member(member_id_my_float32, member_flags_my_float32, type_ids_FloatStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_FloatStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_FloatStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_FloatStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_FloatStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_FloatStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_FloatStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_FloatStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_FloatStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_FloatStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_FloatStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_float32 = TypeObjectUtils::build_common_struct_member(member_id_my_float32, member_flags_my_float32, type_ids_FloatStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_float32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_float32 = "my_float32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_float32;
            ann_custom_FloatStruct.reset();
            CompleteMemberDetail detail_my_float32 = TypeObjectUtils::build_complete_member_detail(name_my_float32, member_ann_builtin_my_float32, ann_custom_FloatStruct);
            CompleteStructMember member_my_float32 = TypeObjectUtils::build_complete_struct_member(common_my_float32, detail_my_float32);
            TypeObjectUtils::add_complete_struct_member(member_seq_FloatStruct, member_my_float32);
        }
        CompleteStructType struct_type_FloatStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_FloatStruct, header_FloatStruct, member_seq_FloatStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_FloatStruct, type_name_FloatStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "FloatStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_FloatStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "FloatStruct", type_ids_FloatStruct);
        if (return_code_FloatStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "FloatStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_DoubleStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_DoubleStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_DoubleStruct;
        TypeIdentifierPair type_ids_DoubleStruct;
        QualifiedTypeName type_name_DoubleStruct = "DoubleStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_DoubleStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_DoubleStruct;
        CompleteTypeDetail detail_DoubleStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_DoubleStruct, ann_custom_DoubleStruct, type_name_DoubleStruct.to_string());
        CompleteStructHeader header_DoubleStruct;
        header_DoubleStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_DoubleStruct);
        CompleteStructMemberSeq member_seq_DoubleStruct;
        {
            return_code_DoubleStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids_DoubleStruct);

            if (return_code_DoubleStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_float64 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_float64;
            MemberId member_id_my_float64 = 0x00000000;
            if (EK_COMPLETE == type_ids_DoubleStruct.type_identifier1()._d() || TK_NONE == type_ids_DoubleStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DoubleStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DoubleStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DoubleStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DoubleStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DoubleStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DoubleStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DoubleStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_DoubleStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_float64 = TypeObjectUtils::build_common_struct_member(member_id_my_float64, member_flags_my_float64, type_ids_DoubleStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_DoubleStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_DoubleStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_DoubleStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_DoubleStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_DoubleStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_DoubleStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DoubleStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_DoubleStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_DoubleStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_DoubleStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_float64 = TypeObjectUtils::build_common_struct_member(member_id_my_float64, member_flags_my_float64, type_ids_DoubleStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_float64 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_float64 = "my_float64";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_float64;
            ann_custom_DoubleStruct.reset();
            CompleteMemberDetail detail_my_float64 = TypeObjectUtils::build_complete_member_detail(name_my_float64, member_ann_builtin_my_float64, ann_custom_DoubleStruct);
            CompleteStructMember member_my_float64 = TypeObjectUtils::build_complete_struct_member(common_my_float64, detail_my_float64);
            TypeObjectUtils::add_complete_struct_member(member_seq_DoubleStruct, member_my_float64);
        }
        CompleteStructType struct_type_DoubleStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_DoubleStruct, header_DoubleStruct, member_seq_DoubleStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_DoubleStruct, type_name_DoubleStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "DoubleStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_DoubleStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "DoubleStruct", type_ids_DoubleStruct);
        if (return_code_DoubleStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "DoubleStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_LongDoubleStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_LongDoubleStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_LongDoubleStruct;
        TypeIdentifierPair type_ids_LongDoubleStruct;
        QualifiedTypeName type_name_LongDoubleStruct = "LongDoubleStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LongDoubleStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LongDoubleStruct;
        CompleteTypeDetail detail_LongDoubleStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LongDoubleStruct, ann_custom_LongDoubleStruct, type_name_LongDoubleStruct.to_string());
        CompleteStructHeader header_LongDoubleStruct;
        header_LongDoubleStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LongDoubleStruct);
        CompleteStructMemberSeq member_seq_LongDoubleStruct;
        {
            return_code_LongDoubleStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_longdouble", type_ids_LongDoubleStruct);

            if (return_code_LongDoubleStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_float128 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_float128;
            MemberId member_id_my_float128 = 0x00000000;
            if (EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier1()._d() || TK_NONE == type_ids_LongDoubleStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LongDoubleStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LongDoubleStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LongDoubleStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LongDoubleStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LongDoubleStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LongDoubleStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_float128 = TypeObjectUtils::build_common_struct_member(member_id_my_float128, member_flags_my_float128, type_ids_LongDoubleStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LongDoubleStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LongDoubleStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LongDoubleStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LongDoubleStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LongDoubleStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LongDoubleStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LongDoubleStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_float128 = TypeObjectUtils::build_common_struct_member(member_id_my_float128, member_flags_my_float128, type_ids_LongDoubleStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_float128 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_float128 = "my_float128";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_float128;
            ann_custom_LongDoubleStruct.reset();
            CompleteMemberDetail detail_my_float128 = TypeObjectUtils::build_complete_member_detail(name_my_float128, member_ann_builtin_my_float128, ann_custom_LongDoubleStruct);
            CompleteStructMember member_my_float128 = TypeObjectUtils::build_complete_struct_member(common_my_float128, detail_my_float128);
            TypeObjectUtils::add_complete_struct_member(member_seq_LongDoubleStruct, member_my_float128);
        }
        CompleteStructType struct_type_LongDoubleStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_LongDoubleStruct, header_LongDoubleStruct, member_seq_LongDoubleStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LongDoubleStruct, type_name_LongDoubleStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LongDoubleStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_LongDoubleStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "LongDoubleStruct", type_ids_LongDoubleStruct);
        if (return_code_LongDoubleStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LongDoubleStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_CharStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_CharStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_CharStruct;
        TypeIdentifierPair type_ids_CharStruct;
        QualifiedTypeName type_name_CharStruct = "CharStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_CharStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_CharStruct;
        CompleteTypeDetail detail_CharStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_CharStruct, ann_custom_CharStruct, type_name_CharStruct.to_string());
        CompleteStructHeader header_CharStruct;
        header_CharStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_CharStruct);
        CompleteStructMemberSeq member_seq_CharStruct;
        {
            return_code_CharStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids_CharStruct);

            if (return_code_CharStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_char = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_char;
            MemberId member_id_my_char = 0x00000000;
            if (EK_COMPLETE == type_ids_CharStruct.type_identifier1()._d() || TK_NONE == type_ids_CharStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_CharStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_CharStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_CharStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_CharStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_CharStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_CharStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_CharStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_CharStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_CharStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_CharStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_CharStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_CharStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_CharStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_CharStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_CharStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_CharStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_CharStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_CharStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_CharStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_CharStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_CharStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_CharStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_CharStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_CharStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_CharStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_CharStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_CharStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_CharStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_CharStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_CharStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_char = TypeObjectUtils::build_common_struct_member(member_id_my_char, member_flags_my_char, type_ids_CharStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_char = "my_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_char;
            ann_custom_CharStruct.reset();
            CompleteMemberDetail detail_my_char = TypeObjectUtils::build_complete_member_detail(name_my_char, member_ann_builtin_my_char, ann_custom_CharStruct);
            CompleteStructMember member_my_char = TypeObjectUtils::build_complete_struct_member(common_my_char, detail_my_char);
            TypeObjectUtils::add_complete_struct_member(member_seq_CharStruct, member_my_char);
        }
        CompleteStructType struct_type_CharStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_CharStruct, header_CharStruct, member_seq_CharStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_CharStruct, type_name_CharStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "CharStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_CharStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "CharStruct", type_ids_CharStruct);
        if (return_code_CharStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "CharStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_WCharStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_WCharStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_WCharStruct;
        TypeIdentifierPair type_ids_WCharStruct;
        QualifiedTypeName type_name_WCharStruct = "WCharStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_WCharStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_WCharStruct;
        CompleteTypeDetail detail_WCharStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_WCharStruct, ann_custom_WCharStruct, type_name_WCharStruct.to_string());
        CompleteStructHeader header_WCharStruct;
        header_WCharStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_WCharStruct);
        CompleteStructMemberSeq member_seq_WCharStruct;
        {
            return_code_WCharStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_wchar_t", type_ids_WCharStruct);

            if (return_code_WCharStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_wchar Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_wchar = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_wchar;
            MemberId member_id_my_wchar = 0x00000000;
            if (EK_COMPLETE == type_ids_WCharStruct.type_identifier1()._d() || TK_NONE == type_ids_WCharStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_WCharStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_WCharStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_wchar = TypeObjectUtils::build_common_struct_member(member_id_my_wchar, member_flags_my_wchar, type_ids_WCharStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_wchar member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_wchar = "my_wchar";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wchar;
            ann_custom_WCharStruct.reset();
            CompleteMemberDetail detail_my_wchar = TypeObjectUtils::build_complete_member_detail(name_my_wchar, member_ann_builtin_my_wchar, ann_custom_WCharStruct);
            CompleteStructMember member_my_wchar = TypeObjectUtils::build_complete_struct_member(common_my_wchar, detail_my_wchar);
            TypeObjectUtils::add_complete_struct_member(member_seq_WCharStruct, member_my_wchar);
        }
        CompleteStructType struct_type_WCharStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_WCharStruct, header_WCharStruct, member_seq_WCharStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_WCharStruct, type_name_WCharStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WCharStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_WCharStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "WCharStruct", type_ids_WCharStruct);
        if (return_code_WCharStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "WCharStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StringStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_StringStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StringStruct;
        TypeIdentifierPair type_ids_StringStruct;
        QualifiedTypeName type_name_StringStruct = "StringStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StringStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StringStruct;
        CompleteTypeDetail detail_StringStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StringStruct, ann_custom_StringStruct, type_name_StringStruct.to_string());
        CompleteStructHeader header_StringStruct;
        header_StringStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StringStruct);
        CompleteStructMemberSeq member_seq_StringStruct;
        {
            return_code_StringStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_StringStruct);

            if (return_code_StringStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_StringStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_StringStruct);
                if (return_code_StringStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_string;
            MemberId member_id_my_string = 0x00000000;
            if (EK_COMPLETE == type_ids_StringStruct.type_identifier1()._d() || TK_NONE == type_ids_StringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StringStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StringStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_StringStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StringStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StringStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_StringStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_string = "my_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
            ann_custom_StringStruct.reset();
            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_StringStruct);
            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_StringStruct, member_my_string);
        }
        CompleteStructType struct_type_StringStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_StringStruct, header_StringStruct, member_seq_StringStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StringStruct, type_name_StringStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StringStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StringStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StringStruct", type_ids_StringStruct);
        if (return_code_StringStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StringStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_WStringStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_WStringStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_WStringStruct;
        TypeIdentifierPair type_ids_WStringStruct;
        QualifiedTypeName type_name_WStringStruct = "WStringStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_WStringStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_WStringStruct;
        CompleteTypeDetail detail_WStringStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_WStringStruct, ann_custom_WStringStruct, type_name_WStringStruct.to_string());
        CompleteStructHeader header_WStringStruct;
        header_WStringStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_WStringStruct);
        CompleteStructMemberSeq member_seq_WStringStruct;
        {
            return_code_WStringStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_wstring_unbounded", type_ids_WStringStruct);

            if (return_code_WStringStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_wstring_unbounded", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_wstring_unbounded", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded: Unknown WString kind.");
                    return;
                }
                return_code_WStringStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_WStringStruct);
                if (return_code_WStringStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_wstring;
            MemberId member_id_my_wstring = 0x00000000;
            if (EK_COMPLETE == type_ids_WStringStruct.type_identifier1()._d() || TK_NONE == type_ids_WStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WStringStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WStringStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_WStringStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_WStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WStringStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WStringStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_WStringStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_wstring = "my_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wstring;
            ann_custom_WStringStruct.reset();
            CompleteMemberDetail detail_my_wstring = TypeObjectUtils::build_complete_member_detail(name_my_wstring, member_ann_builtin_my_wstring, ann_custom_WStringStruct);
            CompleteStructMember member_my_wstring = TypeObjectUtils::build_complete_struct_member(common_my_wstring, detail_my_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_WStringStruct, member_my_wstring);
        }
        CompleteStructType struct_type_WStringStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_WStringStruct, header_WStringStruct, member_seq_WStringStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_WStringStruct, type_name_WStringStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WStringStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_WStringStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "WStringStruct", type_ids_WStringStruct);
        if (return_code_WStringStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "WStringStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_LargeStringStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_LargeStringStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_LargeStringStruct;
        TypeIdentifierPair type_ids_LargeStringStruct;
        QualifiedTypeName type_name_LargeStringStruct = "LargeStringStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LargeStringStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LargeStringStruct;
        CompleteTypeDetail detail_LargeStringStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LargeStringStruct, ann_custom_LargeStringStruct, type_name_LargeStringStruct.to_string());
        CompleteStructHeader header_LargeStringStruct;
        header_LargeStringStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LargeStringStruct);
        CompleteStructMemberSeq member_seq_LargeStringStruct;
        {
            return_code_LargeStringStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_41925", type_ids_LargeStringStruct);

            if (return_code_LargeStringStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_41925("TI_STRING8_LARGE");
                if (type_id_kind_anonymous_string_41925 == "TI_STRING8_SMALL")
                {
                    SBound bound = static_cast<SBound>(41925);
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_41925"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_41925 == "TI_STRING8_LARGE")
                {
                    LBound bound = 41925;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_41925"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_41925: Unknown String kind.");
                    return;
                }
                return_code_LargeStringStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_41925", type_ids_LargeStringStruct);
                if (return_code_LargeStringStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_41925: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_large_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_large_string;
            MemberId member_id_my_large_string = 0x00000000;
            if (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1()._d() || TK_NONE == type_ids_LargeStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_large_string = TypeObjectUtils::build_common_struct_member(member_id_my_large_string, member_flags_my_large_string, type_ids_LargeStringStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_large_string = TypeObjectUtils::build_common_struct_member(member_id_my_large_string, member_flags_my_large_string, type_ids_LargeStringStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_large_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_large_string = "my_large_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_large_string;
            ann_custom_LargeStringStruct.reset();
            CompleteMemberDetail detail_my_large_string = TypeObjectUtils::build_complete_member_detail(name_my_large_string, member_ann_builtin_my_large_string, ann_custom_LargeStringStruct);
            CompleteStructMember member_my_large_string = TypeObjectUtils::build_complete_struct_member(common_my_large_string, detail_my_large_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_LargeStringStruct, member_my_large_string);
        }
        CompleteStructType struct_type_LargeStringStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_LargeStringStruct, header_LargeStringStruct, member_seq_LargeStringStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LargeStringStruct, type_name_LargeStringStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LargeStringStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_LargeStringStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "LargeStringStruct", type_ids_LargeStringStruct);
        if (return_code_LargeStringStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LargeStringStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_LargeWStringStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_LargeWStringStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_LargeWStringStruct;
        TypeIdentifierPair type_ids_LargeWStringStruct;
        QualifiedTypeName type_name_LargeWStringStruct = "LargeWStringStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LargeWStringStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LargeWStringStruct;
        CompleteTypeDetail detail_LargeWStringStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LargeWStringStruct, ann_custom_LargeWStringStruct, type_name_LargeWStringStruct.to_string());
        CompleteStructHeader header_LargeWStringStruct;
        header_LargeWStringStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LargeWStringStruct);
        CompleteStructMemberSeq member_seq_LargeWStringStruct;
        {
            return_code_LargeWStringStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_wstring_41925", type_ids_LargeWStringStruct);

            if (return_code_LargeWStringStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_wstring_41925("TI_STRING16_LARGE");
                if (type_id_kind_anonymous_wstring_41925 == "TI_STRING16_SMALL")
                {
                    SBound bound = static_cast<SBound>(41925);
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_wstring_41925", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_wstring_41925 == "TI_STRING16_LARGE")
                {
                    LBound bound = 41925;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_wstring_41925", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_41925: Unknown WString kind.");
                    return;
                }
                return_code_LargeWStringStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_41925", type_ids_LargeWStringStruct);
                if (return_code_LargeWStringStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_41925: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_large_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_large_wstring;
            MemberId member_id_my_large_wstring = 0x00000000;
            if (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1()._d() || TK_NONE == type_ids_LargeWStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_large_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_large_wstring, member_flags_my_large_wstring, type_ids_LargeWStringStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_large_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_large_wstring, member_flags_my_large_wstring, type_ids_LargeWStringStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_large_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_large_wstring = "my_large_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_large_wstring;
            ann_custom_LargeWStringStruct.reset();
            CompleteMemberDetail detail_my_large_wstring = TypeObjectUtils::build_complete_member_detail(name_my_large_wstring, member_ann_builtin_my_large_wstring, ann_custom_LargeWStringStruct);
            CompleteStructMember member_my_large_wstring = TypeObjectUtils::build_complete_struct_member(common_my_large_wstring, detail_my_large_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_LargeWStringStruct, member_my_large_wstring);
        }
        CompleteStructType struct_type_LargeWStringStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_LargeWStringStruct, header_LargeWStringStruct, member_seq_LargeWStringStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LargeWStringStruct, type_name_LargeWStringStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LargeWStringStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_LargeWStringStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "LargeWStringStruct", type_ids_LargeWStringStruct);
        if (return_code_LargeWStringStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LargeWStringStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ArraytStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_ArraytStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ArraytStruct;
        TypeIdentifierPair type_ids_ArraytStruct;
        QualifiedTypeName type_name_ArraytStruct = "ArraytStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ArraytStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ArraytStruct;
        CompleteTypeDetail detail_ArraytStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ArraytStruct, ann_custom_ArraytStruct, type_name_ArraytStruct.to_string());
        CompleteStructHeader header_ArraytStruct;
        header_ArraytStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ArraytStruct);
        CompleteStructMemberSeq member_seq_ArraytStruct;
        {
            return_code_ArraytStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int32_t_2_2_2", type_ids_ArraytStruct);

            if (return_code_ArraytStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_ArraytStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_ArraytStruct);

                if (return_code_ArraytStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_array_int32_t_2_2_2 {nullptr};
                if (EK_COMPLETE == type_ids_ArraytStruct.type_identifier1()._d() || TK_NONE == type_ids_ArraytStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArraytStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArraytStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArraytStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArraytStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArraytStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArraytStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2_2_2 = new TypeIdentifier(type_ids_ArraytStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_ArraytStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArraytStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArraytStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArraytStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArraytStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArraytStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArraytStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2_2_2 = new TypeIdentifier(type_ids_ArraytStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int32_t_2_2_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_ArraytStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int32_t_2_2_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int32_t_2_2_2 = 0;
                PlainCollectionHeader header_anonymous_array_int32_t_2_2_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2_2_2, element_flags_anonymous_array_int32_t_2_2_2);
                std::string type_id_kind_anonymous_array_int32_t_2_2_2("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_int32_t_2_2_2 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2_2_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2_2_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_ArraytStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_int32_t_2_2_2", type_ids_ArraytStruct);
                if (return_code_ArraytStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_int32_t_2_2_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_array;
            MemberId member_id_my_array = 0x00000000;
            if (EK_COMPLETE == type_ids_ArraytStruct.type_identifier1()._d() || TK_NONE == type_ids_ArraytStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArraytStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArraytStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArraytStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArraytStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArraytStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArraytStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArraytStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ArraytStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArraytStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArraytStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArraytStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArraytStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArraytStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArraytStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArraytStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArraytStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_array = "my_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_array;
            ann_custom_ArraytStruct.reset();
            CompleteMemberDetail detail_my_array = TypeObjectUtils::build_complete_member_detail(name_my_array, member_ann_builtin_my_array, ann_custom_ArraytStruct);
            CompleteStructMember member_my_array = TypeObjectUtils::build_complete_struct_member(common_my_array, detail_my_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_ArraytStruct, member_my_array);
        }
        CompleteStructType struct_type_ArraytStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ArraytStruct, header_ArraytStruct, member_seq_ArraytStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ArraytStruct, type_name_ArraytStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ArraytStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ArraytStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ArraytStruct", type_ids_ArraytStruct);
        if (return_code_ArraytStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ArraytStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ArrayArrayStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_ArrayArrayStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ArrayArrayStruct;
        TypeIdentifierPair type_ids_ArrayArrayStruct;
        QualifiedTypeName type_name_ArrayArrayStruct = "ArrayArrayStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ArrayArrayStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ArrayArrayStruct;
        CompleteTypeDetail detail_ArrayArrayStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ArrayArrayStruct, ann_custom_ArrayArrayStruct, type_name_ArrayArrayStruct.to_string());
        CompleteStructHeader header_ArrayArrayStruct;
        header_ArrayArrayStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ArrayArrayStruct);
        CompleteStructMemberSeq member_seq_ArrayArrayStruct;
        {
            return_code_ArrayArrayStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_anonymous_array_int32_t_2_2_2_2", type_ids_ArrayArrayStruct);

            if (return_code_ArrayArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_ArrayArrayStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyArray", type_ids_ArrayArrayStruct);

                if (return_code_ArrayArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags_MyArray = 0;
                    QualifiedTypeName type_name_MyArray = "MyArray";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyArray;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyArray;
                    CompleteTypeDetail detail_MyArray = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyArray, ann_custom_MyArray, type_name_MyArray.to_string());
                    CompleteAliasHeader header_MyArray = TypeObjectUtils::build_complete_alias_header(detail_MyArray);
                    AliasMemberFlag related_flags_MyArray = 0;
                    return_code_ArrayArrayStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_array_int32_t_2_2", type_ids_ArrayArrayStruct);

                    if (return_code_ArrayArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        return_code_ArrayArrayStruct =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_ArrayArrayStruct);

                        if (return_code_ArrayArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        TypeIdentifier* element_identifier_anonymous_array_int32_t_2_2 {nullptr};
                        if (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayArrayStruct.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            element_identifier_anonymous_array_int32_t_2_2 = new TypeIdentifier(type_ids_ArrayArrayStruct.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            element_identifier_anonymous_array_int32_t_2_2 = new TypeIdentifier(type_ids_ArrayArrayStruct.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Array element TypeIdentifier inconsistent.");
                            return;
                        }
                        EquivalenceKind equiv_kind_anonymous_array_int32_t_2_2 = EK_COMPLETE;
                        if (TK_NONE == type_ids_ArrayArrayStruct.type_identifier2()._d())
                        {
                            equiv_kind_anonymous_array_int32_t_2_2 = EK_BOTH;
                        }
                        CollectionElementFlag element_flags_anonymous_array_int32_t_2_2 = 0;
                        PlainCollectionHeader header_anonymous_array_int32_t_2_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2_2, element_flags_anonymous_array_int32_t_2_2);
                        std::string type_id_kind_anonymous_array_int32_t_2_2("TI_PLAIN_ARRAY_SMALL");
                        if (type_id_kind_anonymous_array_int32_t_2_2 == "TI_PLAIN_ARRAY_SMALL")
                        {
                            SBoundSeq array_bound_seq;
                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2_2, array_bound_seq,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_2));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2_2"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_int32_t_2_2 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            LBoundSeq array_bound_seq;
                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2_2, array_bound_seq,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_2));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2_2"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_int32_t_2_2 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        return_code_ArrayArrayStruct =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_int32_t_2_2", type_ids_ArrayArrayStruct);
                        if (return_code_ArrayArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_int32_t_2_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common_MyArray;
                    if (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayArrayStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_MyArray = TypeObjectUtils::build_common_alias_body(related_flags_MyArray, type_ids_ArrayArrayStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_MyArray = TypeObjectUtils::build_common_alias_body(related_flags_MyArray, type_ids_ArrayArrayStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyArray related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyArray;
                    ann_custom_MyArray.reset();
                    CompleteAliasBody body_MyArray = TypeObjectUtils::build_complete_alias_body(common_MyArray, member_ann_builtin_MyArray, ann_custom_MyArray);
                    CompleteAliasType alias_type_MyArray = TypeObjectUtils::build_complete_alias_type(alias_flags_MyArray, header_MyArray, body_MyArray);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyArray, type_name_MyArray.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyArray already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_ArrayArrayStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyArray", type_ids_ArrayArrayStruct);
                    if (return_code_ArrayArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyArray: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_array_anonymous_array_int32_t_2_2_2_2 {nullptr};
                if (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayArrayStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_anonymous_array_int32_t_2_2_2_2 = new TypeIdentifier(type_ids_ArrayArrayStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_anonymous_array_int32_t_2_2_2_2 = new TypeIdentifier(type_ids_ArrayArrayStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_anonymous_array_int32_t_2_2_2_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_ArrayArrayStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_anonymous_array_int32_t_2_2_2_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_anonymous_array_int32_t_2_2_2_2 = 0;
                PlainCollectionHeader header_anonymous_array_anonymous_array_int32_t_2_2_2_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_anonymous_array_int32_t_2_2_2_2, element_flags_anonymous_array_anonymous_array_int32_t_2_2_2_2);
                std::string type_id_kind_anonymous_array_anonymous_array_int32_t_2_2_2_2("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_anonymous_array_int32_t_2_2_2_2 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_anonymous_array_int32_t_2_2_2_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_anonymous_array_int32_t_2_2_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_array_int32_t_2_2_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_anonymous_array_int32_t_2_2_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_anonymous_array_int32_t_2_2_2_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_anonymous_array_int32_t_2_2_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_array_int32_t_2_2_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_anonymous_array_int32_t_2_2_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_ArrayArrayStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_anonymous_array_int32_t_2_2_2_2", type_ids_ArrayArrayStruct);
                if (return_code_ArrayArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_anonymous_array_int32_t_2_2_2_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_array_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_array_array;
            MemberId member_id_my_array_array = 0x00000000;
            if (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayArrayStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayArrayStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_array_array = TypeObjectUtils::build_common_struct_member(member_id_my_array_array, member_flags_my_array_array, type_ids_ArrayArrayStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayArrayStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayArrayStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_array_array = TypeObjectUtils::build_common_struct_member(member_id_my_array_array, member_flags_my_array_array, type_ids_ArrayArrayStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_array_array = "my_array_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_array_array;
            ann_custom_ArrayArrayStruct.reset();
            CompleteMemberDetail detail_my_array_array = TypeObjectUtils::build_complete_member_detail(name_my_array_array, member_ann_builtin_my_array_array, ann_custom_ArrayArrayStruct);
            CompleteStructMember member_my_array_array = TypeObjectUtils::build_complete_struct_member(common_my_array_array, detail_my_array_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_ArrayArrayStruct, member_my_array_array);
        }
        CompleteStructType struct_type_ArrayArrayStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ArrayArrayStruct, header_ArrayArrayStruct, member_seq_ArrayArrayStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ArrayArrayStruct, type_name_ArrayArrayStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ArrayArrayStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ArrayArrayStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ArrayArrayStruct", type_ids_ArrayArrayStruct);
        if (return_code_ArrayArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ArrayArrayStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceStruct;
        TypeIdentifierPair type_ids_SequenceStruct;
        QualifiedTypeName type_name_SequenceStruct = "SequenceStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceStruct;
        CompleteTypeDetail detail_SequenceStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceStruct, ann_custom_SequenceStruct, type_name_SequenceStruct.to_string());
        CompleteStructHeader header_SequenceStruct;
        header_SequenceStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceStruct);
        CompleteStructMemberSeq member_seq_SequenceStruct;
        {
            return_code_SequenceStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int32_t_2", type_ids_SequenceStruct);

            if (return_code_SequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_SequenceStruct);

                if (return_code_SequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int32_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int32_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_sequence_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_2, element_flags_anonymous_sequence_int32_t_2);
                std::string type_id_kind_anonymous_sequence_int32_t_2("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int32_t_2 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int32_t_2", type_ids_SequenceStruct);
                if (return_code_SequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_2: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_sequence;
            MemberId member_id_my_sequence = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence, member_flags_my_sequence, type_ids_SequenceStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence, member_flags_my_sequence, type_ids_SequenceStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_sequence = "my_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_sequence;
            ann_custom_SequenceStruct.reset();
            CompleteMemberDetail detail_my_sequence = TypeObjectUtils::build_complete_member_detail(name_my_sequence, member_ann_builtin_my_sequence, ann_custom_SequenceStruct);
            CompleteStructMember member_my_sequence = TypeObjectUtils::build_complete_struct_member(common_my_sequence, detail_my_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceStruct, member_my_sequence);
        }
        CompleteStructType struct_type_SequenceStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceStruct, header_SequenceStruct, member_seq_SequenceStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceStruct, type_name_SequenceStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceStruct", type_ids_SequenceStruct);
        if (return_code_SequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceSequenceStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceSequenceStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceSequenceStruct;
        TypeIdentifierPair type_ids_SequenceSequenceStruct;
        QualifiedTypeName type_name_SequenceSequenceStruct = "SequenceSequenceStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceSequenceStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceSequenceStruct;
        CompleteTypeDetail detail_SequenceSequenceStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceSequenceStruct, ann_custom_SequenceSequenceStruct, type_name_SequenceSequenceStruct.to_string());
        CompleteStructHeader header_SequenceSequenceStruct;
        header_SequenceSequenceStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceSequenceStruct);
        CompleteStructMemberSeq member_seq_SequenceSequenceStruct;
        {
            return_code_SequenceSequenceStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_sequence_int32_t_2_3", type_ids_SequenceSequenceStruct);

            if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceSequenceStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int32_t_2", type_ids_SequenceSequenceStruct);

                if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code_SequenceSequenceStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SequenceSequenceStruct);

                    if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* element_identifier_anonymous_sequence_int32_t_2 {nullptr};
                    if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceSequenceStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceSequenceStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier inconsistent.");
                        return;
                    }
                    EquivalenceKind equiv_kind_anonymous_sequence_int32_t_2 = EK_COMPLETE;
                    if (TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d())
                    {
                        equiv_kind_anonymous_sequence_int32_t_2 = EK_BOTH;
                    }
                    CollectionElementFlag element_flags_anonymous_sequence_int32_t_2 = 0;
                    PlainCollectionHeader header_anonymous_sequence_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_2, element_flags_anonymous_sequence_int32_t_2);
                    std::string type_id_kind_anonymous_sequence_int32_t_2("TI_PLAIN_SEQUENCE_SMALL");
                    if (type_id_kind_anonymous_sequence_int32_t_2 == "TI_PLAIN_SEQUENCE_SMALL")
                    {
                        SBound bound = static_cast<SBound>(2);
                        PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_2"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBound bound = 2;
                        PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_2"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code_SequenceSequenceStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_sequence_int32_t_2", type_ids_SequenceSequenceStruct);
                    if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_int32_t_2: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3 {nullptr};
                if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3 = new TypeIdentifier(type_ids_SequenceSequenceStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3 = new TypeIdentifier(type_ids_SequenceSequenceStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3 = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_sequence_int32_t_2_3 = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_sequence_int32_t_2_3 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3, element_flags_anonymous_sequence_anonymous_sequence_int32_t_2_3);
                std::string type_id_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(3);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_sequence_int32_t_2_3, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_sequence_int32_t_2_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_sequence_int32_t_2_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 3;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_sequence_int32_t_2_3, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_sequence_int32_t_2_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_sequence_int32_t_2_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceSequenceStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_sequence_int32_t_2_3", type_ids_SequenceSequenceStruct);
                if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_sequence_int32_t_2_3: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_sequence_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_sequence_sequence;
            MemberId member_id_my_sequence_sequence = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence_sequence, member_flags_my_sequence_sequence, type_ids_SequenceSequenceStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence_sequence, member_flags_my_sequence_sequence, type_ids_SequenceSequenceStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_sequence_sequence = "my_sequence_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_sequence_sequence;
            ann_custom_SequenceSequenceStruct.reset();
            CompleteMemberDetail detail_my_sequence_sequence = TypeObjectUtils::build_complete_member_detail(name_my_sequence_sequence, member_ann_builtin_my_sequence_sequence, ann_custom_SequenceSequenceStruct);
            CompleteStructMember member_my_sequence_sequence = TypeObjectUtils::build_complete_struct_member(common_my_sequence_sequence, detail_my_sequence_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceSequenceStruct, member_my_sequence_sequence);
        }
        CompleteStructType struct_type_SequenceSequenceStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceSequenceStruct, header_SequenceSequenceStruct, member_seq_SequenceSequenceStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceSequenceStruct, type_name_SequenceSequenceStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceSequenceStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceSequenceStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceSequenceStruct", type_ids_SequenceSequenceStruct);
        if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceSequenceStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MapStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MapStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MapStruct;
        TypeIdentifierPair type_ids_MapStruct;
        QualifiedTypeName type_name_MapStruct = "MapStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStruct;
        CompleteTypeDetail detail_MapStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStruct, ann_custom_MapStruct, type_name_MapStruct.to_string());
        CompleteStructHeader header_MapStruct;
        header_MapStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStruct);
        CompleteStructMemberSeq member_seq_MapStruct;
        {
            return_code_MapStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int32_t_2", type_ids_MapStruct);

            if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_MapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapStruct);

                if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_2 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_MapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapStruct);

                if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_2 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_BOTH;
                if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_ldefn().header().equiv_kind()))
                {
                    equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_2 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_2, element_flags_anonymous_map_int32_t_int32_t_2);
                std::string type_id_kind_anonymous_map_int32_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int32_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_MapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_int32_t_2", type_ids_MapStruct);
                if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_map;
            MemberId member_id_my_map = 0x00000000;
            if (EK_COMPLETE == type_ids_MapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MapStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_map = "my_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_map;
            ann_custom_MapStruct.reset();
            CompleteMemberDetail detail_my_map = TypeObjectUtils::build_complete_member_detail(name_my_map, member_ann_builtin_my_map, ann_custom_MapStruct);
            CompleteStructMember member_my_map = TypeObjectUtils::build_complete_struct_member(common_my_map, detail_my_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStruct, member_my_map);
        }
        CompleteStructType struct_type_MapStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStruct, header_MapStruct, member_seq_MapStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStruct, type_name_MapStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MapStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MapStruct", type_ids_MapStruct);
        if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MapStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MapMapStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MapMapStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MapMapStruct;
        TypeIdentifierPair type_ids_MapMapStruct;
        QualifiedTypeName type_name_MapMapStruct = "MapMapStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapMapStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapMapStruct;
        CompleteTypeDetail detail_MapMapStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapMapStruct, ann_custom_MapMapStruct, type_name_MapMapStruct.to_string());
        CompleteStructHeader header_MapMapStruct;
        header_MapMapStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapMapStruct);
        CompleteStructMemberSeq member_seq_MapMapStruct;
        {
            return_code_MapMapStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2", type_ids_MapMapStruct);

            if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_MapMapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_int32_t_2", type_ids_MapMapStruct);

                if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code_MapMapStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_MapMapStruct);

                    if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                    if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 inconsistent element TypeIdentifier.");
                        return;
                    }
                    return_code_MapMapStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_MapMapStruct);

                    if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                    if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 inconsistent key TypeIdentifier.");
                        return;
                    }
                    EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_BOTH;
                    if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_ldefn().header().equiv_kind()))
                    {
                        equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_COMPLETE;
                    }
                    CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_2 = 0;
                    CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_2 = 0;
                    PlainCollectionHeader header_anonymous_map_int32_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_2, element_flags_anonymous_map_int32_t_int32_t_2);
                    std::string type_id_kind_anonymous_map_int32_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                    if (type_id_kind_anonymous_map_int32_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                    {
                        SBound bound = static_cast<SBound>(2);
                        PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                    eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_2"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBound bound = 2;
                        PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                    eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_2"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code_MapMapStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_map_int32_t_int32_t_2", type_ids_MapMapStruct);
                    if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_MapMapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapMapStruct);

                if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = EK_BOTH;
                if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->map_ldefn().header().equiv_kind()))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2, element_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2);
                std::string type_id_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2), key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2), key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_MapMapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2", type_ids_MapMapStruct);
                if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_map_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_map_map;
            MemberId member_id_my_map_map = 0x00000000;
            if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_map_map = TypeObjectUtils::build_common_struct_member(member_id_my_map_map, member_flags_my_map_map, type_ids_MapMapStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_map_map = TypeObjectUtils::build_common_struct_member(member_id_my_map_map, member_flags_my_map_map, type_ids_MapMapStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_map_map = "my_map_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_map_map;
            ann_custom_MapMapStruct.reset();
            CompleteMemberDetail detail_my_map_map = TypeObjectUtils::build_complete_member_detail(name_my_map_map, member_ann_builtin_my_map_map, ann_custom_MapMapStruct);
            CompleteStructMember member_my_map_map = TypeObjectUtils::build_complete_struct_member(common_my_map_map, detail_my_map_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapMapStruct, member_my_map_map);
        }
        CompleteStructType struct_type_MapMapStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MapMapStruct, header_MapMapStruct, member_seq_MapMapStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapMapStruct, type_name_MapMapStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapMapStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MapMapStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MapMapStruct", type_ids_MapMapStruct);
        if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MapMapStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_BitsetStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_BitsetStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BitsetStruct;
        TypeIdentifierPair type_ids_BitsetStruct;
        QualifiedTypeName type_name_BitsetStruct = "BitsetStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BitsetStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BitsetStruct;
        CompleteTypeDetail detail_BitsetStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BitsetStruct, ann_custom_BitsetStruct, type_name_BitsetStruct.to_string());
        CompleteStructHeader header_BitsetStruct;
        header_BitsetStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BitsetStruct);
        CompleteStructMemberSeq member_seq_BitsetStruct;
        {
            return_code_BitsetStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyBitset", type_ids_BitsetStruct);

            if (return_code_BitsetStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                BitsetTypeFlag bitset_flags_MyBitset = 0;
                QualifiedTypeName type_name_MyBitset = "MyBitset";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBitset;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBitset;
                CompleteTypeDetail detail_MyBitset = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBitset, ann_custom_MyBitset, type_name_MyBitset.to_string());
                CompleteBitsetHeader header_MyBitset = TypeObjectUtils::build_complete_bitset_header(detail_MyBitset);
                CompleteBitfieldSeq field_seq_MyBitset;
                {
                    uint16_t position_a = 0;
                    BitsetMemberFlag flags_a = 0;
                    uint8_t bitcount_a = 2;
                    TypeKind holder_type_a = TK_BYTE;
                    CommonBitfield common_a = TypeObjectUtils::build_common_bitfield(position_a, flags_a, bitcount_a, holder_type_a);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                    ann_custom_MyBitset.reset();
                    MemberName name_a = "a";
                    CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_MyBitset);
                    CompleteBitfield bitfield_a = TypeObjectUtils::build_complete_bitfield(common_a, detail_a);
                    TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_a);
                }
                {
                    uint16_t position_b = 10;
                    BitsetMemberFlag flags_b = 0;
                    uint8_t bitcount_b = 20;
                    TypeKind holder_type_b = TK_UINT32;
                    CommonBitfield common_b = TypeObjectUtils::build_common_bitfield(position_b, flags_b, bitcount_b, holder_type_b);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                    ann_custom_MyBitset.reset();
                    MemberName name_b = "b";
                    CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_MyBitset);
                    CompleteBitfield bitfield_b = TypeObjectUtils::build_complete_bitfield(common_b, detail_b);
                    TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_b);
                }
                CompleteBitsetType bitset_type_MyBitset = TypeObjectUtils::build_complete_bitset_type(bitset_flags_MyBitset, header_MyBitset, field_seq_MyBitset);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_bitset_type_object(bitset_type_MyBitset, type_name_MyBitset.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyBitset already registered in TypeObjectRegistry for a different type.");
                }
                return_code_BitsetStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyBitset", type_ids_BitsetStruct);
                if (return_code_BitsetStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyBitset: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_a = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_a;
            MemberId member_id_a = 0x00000000;
            if (EK_COMPLETE == type_ids_BitsetStruct.type_identifier1()._d() || TK_NONE == type_ids_BitsetStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BitsetStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BitsetStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BitsetStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BitsetStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_BitsetStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BitsetStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BitsetStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BitsetStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BitsetStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BitsetStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_BitsetStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure a member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_a = "a";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
            ann_custom_BitsetStruct.reset();
            CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_BitsetStruct);
            CompleteStructMember member_a = TypeObjectUtils::build_complete_struct_member(common_a, detail_a);
            TypeObjectUtils::add_complete_struct_member(member_seq_BitsetStruct, member_a);
        }
        CompleteStructType struct_type_BitsetStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_BitsetStruct, header_BitsetStruct, member_seq_BitsetStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BitsetStruct, type_name_BitsetStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BitsetStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BitsetStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BitsetStruct", type_ids_BitsetStruct);
        if (return_code_BitsetStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BitsetStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructStruct;
        TypeIdentifierPair type_ids_StructStruct;
        QualifiedTypeName type_name_StructStruct = "StructStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructStruct;
        CompleteTypeDetail detail_StructStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructStruct, ann_custom_StructStruct, type_name_StructStruct.to_string());
        CompleteStructHeader header_StructStruct;
        header_StructStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructStruct);
        CompleteStructMemberSeq member_seq_StructStruct;
        {
            return_code_StructStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_StructStruct);

            if (return_code_StructStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "a Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_a = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_a;
            MemberId member_id_a = 0x00000000;
            if (EK_COMPLETE == type_ids_StructStruct.type_identifier1()._d() || TK_NONE == type_ids_StructStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_StructStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_StructStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure a member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_a = "a";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
            ann_custom_StructStruct.reset();
            CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_StructStruct);
            CompleteStructMember member_a = TypeObjectUtils::build_complete_struct_member(common_a, detail_a);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructStruct, member_a);
        }
        {
            return_code_StructStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_StructStruct);

            if (return_code_StructStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "b Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_b = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_b;
            MemberId member_id_b = 0x00000001;
            if (EK_COMPLETE == type_ids_StructStruct.type_identifier1()._d() || TK_NONE == type_ids_StructStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_StructStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_StructStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure b member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_b = "b";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
            ann_custom_StructStruct.reset();
            CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_StructStruct);
            CompleteStructMember member_b = TypeObjectUtils::build_complete_struct_member(common_b, detail_b);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructStruct, member_b);
        }
        CompleteStructType struct_type_StructStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_StructStruct, header_StructStruct, member_seq_StructStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructStruct, type_name_StructStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructStruct", type_ids_StructStruct);
        if (return_code_StructStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StructStructStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructStructStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructStructStruct;
        TypeIdentifierPair type_ids_StructStructStruct;
        QualifiedTypeName type_name_StructStructStruct = "StructStructStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructStructStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructStructStruct;
        CompleteTypeDetail detail_StructStructStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructStructStruct, ann_custom_StructStructStruct, type_name_StructStructStruct.to_string());
        CompleteStructHeader header_StructStructStruct;
        header_StructStructStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructStructStruct);
        CompleteStructMemberSeq member_seq_StructStructStruct;
        {
            return_code_StructStructStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "StructStruct", type_ids_StructStructStruct);

            if (return_code_StructStructStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_StructStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_StructStruct;
                    TypeIdentifierPair type_ids_StructStruct;
                    QualifiedTypeName type_name_StructStruct = "StructStruct";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructStruct;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructStruct;
                    CompleteTypeDetail detail_StructStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructStruct, ann_custom_StructStruct, type_name_StructStruct.to_string());
                    CompleteStructHeader header_StructStruct;
                    header_StructStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StructStruct);
                    CompleteStructMemberSeq member_seq_StructStruct;
                    {
                        return_code_StructStruct =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_StructStruct);

                        if (return_code_StructStruct != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "a Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_a = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_a;
                        MemberId member_id_a = 0x00000000;
                        if (EK_COMPLETE == type_ids_StructStruct.type_identifier1()._d() || TK_NONE == type_ids_StructStruct.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_StructStruct.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructStruct.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_a = TypeObjectUtils::build_common_struct_member(member_id_a, member_flags_a, type_ids_StructStruct.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure a member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_a = "a";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                        ann_custom_StructStruct.reset();
                        CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_StructStruct);
                        CompleteStructMember member_a = TypeObjectUtils::build_complete_struct_member(common_a, detail_a);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructStruct, member_a);
                    }
                    {
                        return_code_StructStruct =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_StructStruct);

                        if (return_code_StructStruct != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "b Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_b = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_b;
                        MemberId member_id_b = 0x00000001;
                        if (EK_COMPLETE == type_ids_StructStruct.type_identifier1()._d() || TK_NONE == type_ids_StructStruct.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructStruct.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructStruct.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_StructStruct.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_StructStruct.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_StructStruct.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_StructStruct.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_StructStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_b = TypeObjectUtils::build_common_struct_member(member_id_b, member_flags_b, type_ids_StructStruct.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure b member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_b = "b";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                        ann_custom_StructStruct.reset();
                        CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_StructStruct);
                        CompleteStructMember member_b = TypeObjectUtils::build_complete_struct_member(common_b, detail_b);
                        TypeObjectUtils::add_complete_struct_member(member_seq_StructStruct, member_b);
                    }
                    CompleteStructType struct_type_StructStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_StructStruct, header_StructStruct, member_seq_StructStruct);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructStruct, type_name_StructStruct.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "StructStruct already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_StructStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "StructStruct", type_ids_StructStruct);
                    if (return_code_StructStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "StructStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_child_struct = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_child_struct;
            MemberId member_id_child_struct = 0x00000000;
            if (EK_COMPLETE == type_ids_StructStructStruct.type_identifier1()._d() || TK_NONE == type_ids_StructStructStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStructStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStructStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_child_struct = TypeObjectUtils::build_common_struct_member(member_id_child_struct, member_flags_child_struct, type_ids_StructStructStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructStructStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStructStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStructStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_child_struct = TypeObjectUtils::build_common_struct_member(member_id_child_struct, member_flags_child_struct, type_ids_StructStructStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure child_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_child_struct = "child_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_child_struct;
            ann_custom_StructStructStruct.reset();
            CompleteMemberDetail detail_child_struct = TypeObjectUtils::build_complete_member_detail(name_child_struct, member_ann_builtin_child_struct, ann_custom_StructStructStruct);
            CompleteStructMember member_child_struct = TypeObjectUtils::build_complete_struct_member(common_child_struct, detail_child_struct);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructStructStruct, member_child_struct);
        }
        {
            return_code_StructStructStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_StructStructStruct);

            if (return_code_StructStructStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "child_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_child_int64 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_child_int64;
            MemberId member_id_child_int64 = 0x00000001;
            if (EK_COMPLETE == type_ids_StructStructStruct.type_identifier1()._d() || TK_NONE == type_ids_StructStructStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStructStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStructStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStructStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_child_int64 = TypeObjectUtils::build_common_struct_member(member_id_child_int64, member_flags_child_int64, type_ids_StructStructStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructStructStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructStructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructStructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructStructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructStructStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructStructStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructStructStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructStructStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_child_int64 = TypeObjectUtils::build_common_struct_member(member_id_child_int64, member_flags_child_int64, type_ids_StructStructStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure child_int64 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_child_int64 = "child_int64";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_child_int64;
            ann_custom_StructStructStruct.reset();
            CompleteMemberDetail detail_child_int64 = TypeObjectUtils::build_complete_member_detail(name_child_int64, member_ann_builtin_child_int64, ann_custom_StructStructStruct);
            CompleteStructMember member_child_int64 = TypeObjectUtils::build_complete_struct_member(common_child_int64, detail_child_int64);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructStructStruct, member_child_int64);
        }
        CompleteStructType struct_type_StructStructStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_StructStructStruct, header_StructStructStruct, member_seq_StructStructStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructStructStruct, type_name_StructStructStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructStructStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructStructStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructStructStruct", type_ids_StructStructStruct);
        if (return_code_StructStructStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructStructStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleUnion_type_identifier()
{
    {
        ReturnCode_t return_code_SimpleUnion;
        TypeIdentifierPair type_ids_SimpleUnion;
        UnionTypeFlag union_flags_SimpleUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_SimpleUnion = "SimpleUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnion;
        CompleteTypeDetail detail_SimpleUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion, type_name_SimpleUnion.to_string());
        CompleteUnionHeader header_SimpleUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleUnion);
        UnionDiscriminatorFlag member_flags_SimpleUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_SimpleUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_SimpleUnion);

        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_SimpleUnion;
        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d())
        {
            common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d())
        {
            common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_SimpleUnion.reset();
        ann_custom_SimpleUnion.reset();
        CompleteDiscriminatorMember discriminator_SimpleUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleUnion,
                type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion);
        CompleteUnionMemberSeq member_seq_SimpleUnion;
        {
            return_code_SimpleUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_SimpleUnion);

            if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_first;
            TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
            CommonUnionMember common_first;
            MemberId member_id_first = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier1(),
                        label_seq_first);
            }
            else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier2(),
                        label_seq_first);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
            ann_custom_SimpleUnion.reset();
            CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleUnion);
            CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_first);
        }
        {
            return_code_SimpleUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_SimpleUnion);

            if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_second;
            TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
            CommonUnionMember common_second;
            MemberId member_id_second = 0x00000001;
            if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier1(),
                        label_seq_second);
            }
            else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier2(),
                        label_seq_second);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
            ann_custom_SimpleUnion.reset();
            CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleUnion);
            CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_second);
        }
        CompleteUnionType union_type_SimpleUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleUnion, header_SimpleUnion, discriminator_SimpleUnion,
                member_seq_SimpleUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleUnion, type_name_SimpleUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleUnion", type_ids_SimpleUnion);
        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_UnionUnion_type_identifier()
{
    {
        ReturnCode_t return_code_UnionUnion;
        TypeIdentifierPair type_ids_UnionUnion;
        UnionTypeFlag union_flags_UnionUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_UnionUnion = "UnionUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_UnionUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_UnionUnion;
        CompleteTypeDetail detail_UnionUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_UnionUnion, ann_custom_UnionUnion, type_name_UnionUnion.to_string());
        CompleteUnionHeader header_UnionUnion = TypeObjectUtils::build_complete_union_header(detail_UnionUnion);
        UnionDiscriminatorFlag member_flags_UnionUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_UnionUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_UnionUnion);

        if (return_code_UnionUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_UnionUnion;
        if (EK_COMPLETE == type_ids_UnionUnion.type_identifier1()._d() || TK_NONE == type_ids_UnionUnion.type_identifier2()._d())
        {
            common_UnionUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_UnionUnion, type_ids_UnionUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_UnionUnion.type_identifier2()._d())
        {
            common_UnionUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_UnionUnion, type_ids_UnionUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "UnionUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_UnionUnion.reset();
        ann_custom_UnionUnion.reset();
        CompleteDiscriminatorMember discriminator_UnionUnion = TypeObjectUtils::build_complete_discriminator_member(common_UnionUnion,
                type_ann_builtin_UnionUnion, ann_custom_UnionUnion);
        CompleteUnionMemberSeq member_seq_UnionUnion;
        {
            return_code_UnionUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_UnionUnion);

            if (return_code_UnionUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_first;
            TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
            CommonUnionMember common_first;
            MemberId member_id_first = 0x00000000;
            if (EK_COMPLETE == type_ids_UnionUnion.type_identifier1()._d() || TK_NONE == type_ids_UnionUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_UnionUnion.type_identifier1(),
                        label_seq_first);
            }
            else if (EK_COMPLETE == type_ids_UnionUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_UnionUnion.type_identifier2(),
                        label_seq_first);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
            ann_custom_UnionUnion.reset();
            CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_UnionUnion);
            CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
            TypeObjectUtils::add_complete_union_member(member_seq_UnionUnion, member_first);
        }
        {
            return_code_UnionUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SimpleUnion", type_ids_UnionUnion);

            if (return_code_UnionUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_SimpleUnion;
                    TypeIdentifierPair type_ids_SimpleUnion;
                    UnionTypeFlag union_flags_SimpleUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_SimpleUnion = "SimpleUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnion;
                    CompleteTypeDetail detail_SimpleUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion, type_name_SimpleUnion.to_string());
                    CompleteUnionHeader header_SimpleUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleUnion);
                    UnionDiscriminatorFlag member_flags_SimpleUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_SimpleUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SimpleUnion);

                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_SimpleUnion;
                    if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d())
                    {
                        common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d())
                    {
                        common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_SimpleUnion.reset();
                    ann_custom_SimpleUnion.reset();
                    CompleteDiscriminatorMember discriminator_SimpleUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleUnion,
                            type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion);
                    CompleteUnionMemberSeq member_seq_SimpleUnion;
                    {
                        return_code_SimpleUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_SimpleUnion);

                        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first;
                        TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
                        CommonUnionMember common_first;
                        MemberId member_id_first = 0x00000000;
                        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier1(),
                                    label_seq_first);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier2(),
                                    label_seq_first);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                        ann_custom_SimpleUnion.reset();
                        CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleUnion);
                        CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_first);
                    }
                    {
                        return_code_SimpleUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_SimpleUnion);

                        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second;
                        TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
                        CommonUnionMember common_second;
                        MemberId member_id_second = 0x00000001;
                        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier1(),
                                    label_seq_second);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier2(),
                                    label_seq_second);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                        ann_custom_SimpleUnion.reset();
                        CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleUnion);
                        CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_second);
                    }
                    CompleteUnionType union_type_SimpleUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleUnion, header_SimpleUnion, discriminator_SimpleUnion,
                            member_seq_SimpleUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleUnion, type_name_SimpleUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SimpleUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "SimpleUnion", type_ids_SimpleUnion);
                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "SimpleUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_second;
            TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
            CommonUnionMember common_second;
            MemberId member_id_second = 0x00000001;
            if (EK_COMPLETE == type_ids_UnionUnion.type_identifier1()._d() || TK_NONE == type_ids_UnionUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_UnionUnion.type_identifier1(),
                        label_seq_second);
            }
            else if (EK_COMPLETE == type_ids_UnionUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_UnionUnion.type_identifier2(),
                        label_seq_second);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
            ann_custom_UnionUnion.reset();
            CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_UnionUnion);
            CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
            TypeObjectUtils::add_complete_union_member(member_seq_UnionUnion, member_second);
        }
        CompleteUnionType union_type_UnionUnion = TypeObjectUtils::build_complete_union_type(union_flags_UnionUnion, header_UnionUnion, discriminator_UnionUnion,
                member_seq_UnionUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_UnionUnion, type_name_UnionUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "UnionUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_UnionUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "UnionUnion", type_ids_UnionUnion);
        if (return_code_UnionUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "UnionUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_WCharUnion_type_identifier()
{
    {
        ReturnCode_t return_code_WCharUnion;
        TypeIdentifierPair type_ids_WCharUnion;
        UnionTypeFlag union_flags_WCharUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_WCharUnion = "WCharUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_WCharUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_WCharUnion;
        CompleteTypeDetail detail_WCharUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_WCharUnion, ann_custom_WCharUnion, type_name_WCharUnion.to_string());
        CompleteUnionHeader header_WCharUnion = TypeObjectUtils::build_complete_union_header(detail_WCharUnion);
        UnionDiscriminatorFlag member_flags_WCharUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_WCharUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_wchar_t", type_ids_WCharUnion);

        if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_WCharUnion;
        if (EK_COMPLETE == type_ids_WCharUnion.type_identifier1()._d() || TK_NONE == type_ids_WCharUnion.type_identifier2()._d())
        {
            common_WCharUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_WCharUnion, type_ids_WCharUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_WCharUnion.type_identifier2()._d())
        {
            common_WCharUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_WCharUnion, type_ids_WCharUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WCharUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_WCharUnion.reset();
        ann_custom_WCharUnion.reset();
        CompleteDiscriminatorMember discriminator_WCharUnion = TypeObjectUtils::build_complete_discriminator_member(common_WCharUnion,
                type_ann_builtin_WCharUnion, ann_custom_WCharUnion);
        CompleteUnionMemberSeq member_seq_WCharUnion;
        {
            return_code_WCharUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_WCharUnion);

            if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_first;
            TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>('A'));
            CommonUnionMember common_first;
            MemberId member_id_first = 0x00000000;
            if (EK_COMPLETE == type_ids_WCharUnion.type_identifier1()._d() || TK_NONE == type_ids_WCharUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_WCharUnion.type_identifier1(),
                        label_seq_first);
            }
            else if (EK_COMPLETE == type_ids_WCharUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_WCharUnion.type_identifier2(),
                        label_seq_first);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
            ann_custom_WCharUnion.reset();
            CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_WCharUnion);
            CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
            TypeObjectUtils::add_complete_union_member(member_seq_WCharUnion, member_first);
        }
        {
            return_code_WCharUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_WCharUnion);

            if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_second;
            TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>('B'));
            CommonUnionMember common_second;
            MemberId member_id_second = 0x00000001;
            if (EK_COMPLETE == type_ids_WCharUnion.type_identifier1()._d() || TK_NONE == type_ids_WCharUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_WCharUnion.type_identifier1(),
                        label_seq_second);
            }
            else if (EK_COMPLETE == type_ids_WCharUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_WCharUnion.type_identifier2(),
                        label_seq_second);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
            ann_custom_WCharUnion.reset();
            CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_WCharUnion);
            CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
            TypeObjectUtils::add_complete_union_member(member_seq_WCharUnion, member_second);
        }
        CompleteUnionType union_type_WCharUnion = TypeObjectUtils::build_complete_union_type(union_flags_WCharUnion, header_WCharUnion, discriminator_WCharUnion,
                member_seq_WCharUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_WCharUnion, type_name_WCharUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WCharUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_WCharUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "WCharUnion", type_ids_WCharUnion);
        if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "WCharUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleUnionStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SimpleUnionStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SimpleUnionStruct;
        TypeIdentifierPair type_ids_SimpleUnionStruct;
        QualifiedTypeName type_name_SimpleUnionStruct = "SimpleUnionStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnionStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnionStruct;
        CompleteTypeDetail detail_SimpleUnionStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnionStruct, ann_custom_SimpleUnionStruct, type_name_SimpleUnionStruct.to_string());
        CompleteStructHeader header_SimpleUnionStruct;
        header_SimpleUnionStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SimpleUnionStruct);
        CompleteStructMemberSeq member_seq_SimpleUnionStruct;
        {
            return_code_SimpleUnionStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SimpleUnion", type_ids_SimpleUnionStruct);

            if (return_code_SimpleUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_SimpleUnion;
                    TypeIdentifierPair type_ids_SimpleUnion;
                    UnionTypeFlag union_flags_SimpleUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_SimpleUnion = "SimpleUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnion;
                    CompleteTypeDetail detail_SimpleUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion, type_name_SimpleUnion.to_string());
                    CompleteUnionHeader header_SimpleUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleUnion);
                    UnionDiscriminatorFlag member_flags_SimpleUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_SimpleUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SimpleUnion);

                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_SimpleUnion;
                    if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d())
                    {
                        common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d())
                    {
                        common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_SimpleUnion.reset();
                    ann_custom_SimpleUnion.reset();
                    CompleteDiscriminatorMember discriminator_SimpleUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleUnion,
                            type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion);
                    CompleteUnionMemberSeq member_seq_SimpleUnion;
                    {
                        return_code_SimpleUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_SimpleUnion);

                        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first;
                        TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
                        CommonUnionMember common_first;
                        MemberId member_id_first = 0x00000000;
                        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier1(),
                                    label_seq_first);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier2(),
                                    label_seq_first);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                        ann_custom_SimpleUnion.reset();
                        CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleUnion);
                        CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_first);
                    }
                    {
                        return_code_SimpleUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_SimpleUnion);

                        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second;
                        TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
                        CommonUnionMember common_second;
                        MemberId member_id_second = 0x00000001;
                        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier1(),
                                    label_seq_second);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier2(),
                                    label_seq_second);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                        ann_custom_SimpleUnion.reset();
                        CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleUnion);
                        CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_second);
                    }
                    CompleteUnionType union_type_SimpleUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleUnion, header_SimpleUnion, discriminator_SimpleUnion,
                            member_seq_SimpleUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleUnion, type_name_SimpleUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SimpleUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "SimpleUnion", type_ids_SimpleUnion);
                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "SimpleUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_my_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_union;
            MemberId member_id_my_union = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleUnionStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleUnionStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_union = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_union;
            ann_custom_SimpleUnionStruct.reset();
            CompleteMemberDetail detail_my_union = TypeObjectUtils::build_complete_member_detail(name_my_union, member_ann_builtin_my_union, ann_custom_SimpleUnionStruct);
            CompleteStructMember member_my_union = TypeObjectUtils::build_complete_struct_member(common_my_union, detail_my_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleUnionStruct, member_my_union);
        }
        CompleteStructType struct_type_SimpleUnionStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SimpleUnionStruct, header_SimpleUnionStruct, member_seq_SimpleUnionStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SimpleUnionStruct, type_name_SimpleUnionStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnionStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleUnionStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleUnionStruct", type_ids_SimpleUnionStruct);
        if (return_code_SimpleUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleUnionStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_UnionUnionUnionStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_UnionUnionUnionStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_UnionUnionUnionStruct;
        TypeIdentifierPair type_ids_UnionUnionUnionStruct;
        QualifiedTypeName type_name_UnionUnionUnionStruct = "UnionUnionUnionStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_UnionUnionUnionStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_UnionUnionUnionStruct;
        CompleteTypeDetail detail_UnionUnionUnionStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_UnionUnionUnionStruct, ann_custom_UnionUnionUnionStruct, type_name_UnionUnionUnionStruct.to_string());
        CompleteStructHeader header_UnionUnionUnionStruct;
        header_UnionUnionUnionStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_UnionUnionUnionStruct);
        CompleteStructMemberSeq member_seq_UnionUnionUnionStruct;
        {
            return_code_UnionUnionUnionStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "UnionUnion", type_ids_UnionUnionUnionStruct);

            if (return_code_UnionUnionUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_UnionUnion;
                    TypeIdentifierPair type_ids_UnionUnion;
                    UnionTypeFlag union_flags_UnionUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_UnionUnion = "UnionUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_UnionUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_UnionUnion;
                    CompleteTypeDetail detail_UnionUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_UnionUnion, ann_custom_UnionUnion, type_name_UnionUnion.to_string());
                    CompleteUnionHeader header_UnionUnion = TypeObjectUtils::build_complete_union_header(detail_UnionUnion);
                    UnionDiscriminatorFlag member_flags_UnionUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_UnionUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_UnionUnion);

                    if (return_code_UnionUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_UnionUnion;
                    if (EK_COMPLETE == type_ids_UnionUnion.type_identifier1()._d() || TK_NONE == type_ids_UnionUnion.type_identifier2()._d())
                    {
                        common_UnionUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_UnionUnion, type_ids_UnionUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_UnionUnion.type_identifier2()._d())
                    {
                        common_UnionUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_UnionUnion, type_ids_UnionUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "UnionUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_UnionUnion.reset();
                    ann_custom_UnionUnion.reset();
                    CompleteDiscriminatorMember discriminator_UnionUnion = TypeObjectUtils::build_complete_discriminator_member(common_UnionUnion,
                            type_ann_builtin_UnionUnion, ann_custom_UnionUnion);
                    CompleteUnionMemberSeq member_seq_UnionUnion;
                    {
                        return_code_UnionUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_UnionUnion);

                        if (return_code_UnionUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first;
                        TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
                        CommonUnionMember common_first;
                        MemberId member_id_first = 0x00000000;
                        if (EK_COMPLETE == type_ids_UnionUnion.type_identifier1()._d() || TK_NONE == type_ids_UnionUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_UnionUnion.type_identifier1(),
                                    label_seq_first);
                        }
                        else if (EK_COMPLETE == type_ids_UnionUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_UnionUnion.type_identifier2(),
                                    label_seq_first);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                        ann_custom_UnionUnion.reset();
                        CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_UnionUnion);
                        CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                        TypeObjectUtils::add_complete_union_member(member_seq_UnionUnion, member_first);
                    }
                    {
                        return_code_UnionUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "SimpleUnion", type_ids_UnionUnion);

                        if (return_code_UnionUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                ReturnCode_t return_code_SimpleUnion;
                                TypeIdentifierPair type_ids_SimpleUnion;
                                UnionTypeFlag union_flags_SimpleUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                QualifiedTypeName type_name_SimpleUnion = "SimpleUnion";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnion;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnion;
                                CompleteTypeDetail detail_SimpleUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion, type_name_SimpleUnion.to_string());
                                CompleteUnionHeader header_SimpleUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleUnion);
                                UnionDiscriminatorFlag member_flags_SimpleUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false);
                                return_code_SimpleUnion =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_int32_t", type_ids_SimpleUnion);

                                if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                CommonDiscriminatorMember common_SimpleUnion;
                                if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d())
                                {
                                    common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d())
                                {
                                    common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "SimpleUnion discriminator TypeIdentifier inconsistent.");
                                    return;
                                }
                                type_ann_builtin_SimpleUnion.reset();
                                ann_custom_SimpleUnion.reset();
                                CompleteDiscriminatorMember discriminator_SimpleUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleUnion,
                                        type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion);
                                CompleteUnionMemberSeq member_seq_SimpleUnion;
                                {
                                    return_code_SimpleUnion =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids_SimpleUnion);

                                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false);
                                    UnionCaseLabelSeq label_seq_first;
                                    TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
                                    CommonUnionMember common_first;
                                    MemberId member_id_first = 0x00000000;
                                    if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier1(),
                                                label_seq_first);
                                    }
                                    else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier2(),
                                                label_seq_first);
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Union first member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_first = "first";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                                    ann_custom_SimpleUnion.reset();
                                    CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleUnion);
                                    CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                                    TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_first);
                                }
                                {
                                    return_code_SimpleUnion =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int64_t", type_ids_SimpleUnion);

                                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                            false, false);
                                    UnionCaseLabelSeq label_seq_second;
                                    TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
                                    CommonUnionMember common_second;
                                    MemberId member_id_second = 0x00000001;
                                    if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                            (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier1(),
                                                label_seq_second);
                                    }
                                    else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                            (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                            EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                                    {
                                        common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier2(),
                                                label_seq_second);
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Union second member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name_second = "second";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                                    ann_custom_SimpleUnion.reset();
                                    CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleUnion);
                                    CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                                    TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_second);
                                }
                                CompleteUnionType union_type_SimpleUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleUnion, header_SimpleUnion, discriminator_SimpleUnion,
                                        member_seq_SimpleUnion);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleUnion, type_name_SimpleUnion.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "SimpleUnion already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code_SimpleUnion =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "SimpleUnion", type_ids_SimpleUnion);
                                if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "SimpleUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second;
                        TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
                        CommonUnionMember common_second;
                        MemberId member_id_second = 0x00000001;
                        if (EK_COMPLETE == type_ids_UnionUnion.type_identifier1()._d() || TK_NONE == type_ids_UnionUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_UnionUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_UnionUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_UnionUnion.type_identifier1(),
                                    label_seq_second);
                        }
                        else if (EK_COMPLETE == type_ids_UnionUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_UnionUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_UnionUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_UnionUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_UnionUnion.type_identifier2(),
                                    label_seq_second);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                        ann_custom_UnionUnion.reset();
                        CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_UnionUnion);
                        CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                        TypeObjectUtils::add_complete_union_member(member_seq_UnionUnion, member_second);
                    }
                    CompleteUnionType union_type_UnionUnion = TypeObjectUtils::build_complete_union_type(union_flags_UnionUnion, header_UnionUnion, discriminator_UnionUnion,
                            member_seq_UnionUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_UnionUnion, type_name_UnionUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "UnionUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_UnionUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "UnionUnion", type_ids_UnionUnion);
                    if (return_code_UnionUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "UnionUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_my_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_union;
            MemberId member_id_my_union = 0x00000000;
            if (EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier1()._d() || TK_NONE == type_ids_UnionUnionUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnionUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnionUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnionUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnionUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_UnionUnionUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_UnionUnionUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_UnionUnionUnionStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_UnionUnionUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_UnionUnionUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_UnionUnionUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_UnionUnionUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_UnionUnionUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_UnionUnionUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_UnionUnionUnionStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_UnionUnionUnionStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_union = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_union;
            ann_custom_UnionUnionUnionStruct.reset();
            CompleteMemberDetail detail_my_union = TypeObjectUtils::build_complete_member_detail(name_my_union, member_ann_builtin_my_union, ann_custom_UnionUnionUnionStruct);
            CompleteStructMember member_my_union = TypeObjectUtils::build_complete_struct_member(common_my_union, detail_my_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_UnionUnionUnionStruct, member_my_union);
        }
        CompleteStructType struct_type_UnionUnionUnionStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_UnionUnionUnionStruct, header_UnionUnionUnionStruct, member_seq_UnionUnionUnionStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_UnionUnionUnionStruct, type_name_UnionUnionUnionStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "UnionUnionUnionStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_UnionUnionUnionStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "UnionUnionUnionStruct", type_ids_UnionUnionUnionStruct);
        if (return_code_UnionUnionUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "UnionUnionUnionStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_WCharUnionStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_WCharUnionStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_WCharUnionStruct;
        TypeIdentifierPair type_ids_WCharUnionStruct;
        QualifiedTypeName type_name_WCharUnionStruct = "WCharUnionStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_WCharUnionStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_WCharUnionStruct;
        CompleteTypeDetail detail_WCharUnionStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_WCharUnionStruct, ann_custom_WCharUnionStruct, type_name_WCharUnionStruct.to_string());
        CompleteStructHeader header_WCharUnionStruct;
        header_WCharUnionStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_WCharUnionStruct);
        CompleteStructMemberSeq member_seq_WCharUnionStruct;
        {
            return_code_WCharUnionStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "WCharUnion", type_ids_WCharUnionStruct);

            if (return_code_WCharUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_WCharUnion;
                    TypeIdentifierPair type_ids_WCharUnion;
                    UnionTypeFlag union_flags_WCharUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_WCharUnion = "WCharUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_WCharUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_WCharUnion;
                    CompleteTypeDetail detail_WCharUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_WCharUnion, ann_custom_WCharUnion, type_name_WCharUnion.to_string());
                    CompleteUnionHeader header_WCharUnion = TypeObjectUtils::build_complete_union_header(detail_WCharUnion);
                    UnionDiscriminatorFlag member_flags_WCharUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_WCharUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_wchar_t", type_ids_WCharUnion);

                    if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_WCharUnion;
                    if (EK_COMPLETE == type_ids_WCharUnion.type_identifier1()._d() || TK_NONE == type_ids_WCharUnion.type_identifier2()._d())
                    {
                        common_WCharUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_WCharUnion, type_ids_WCharUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_WCharUnion.type_identifier2()._d())
                    {
                        common_WCharUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_WCharUnion, type_ids_WCharUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "WCharUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_WCharUnion.reset();
                    ann_custom_WCharUnion.reset();
                    CompleteDiscriminatorMember discriminator_WCharUnion = TypeObjectUtils::build_complete_discriminator_member(common_WCharUnion,
                            type_ann_builtin_WCharUnion, ann_custom_WCharUnion);
                    CompleteUnionMemberSeq member_seq_WCharUnion;
                    {
                        return_code_WCharUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_WCharUnion);

                        if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first;
                        TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>('A'));
                        CommonUnionMember common_first;
                        MemberId member_id_first = 0x00000000;
                        if (EK_COMPLETE == type_ids_WCharUnion.type_identifier1()._d() || TK_NONE == type_ids_WCharUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_WCharUnion.type_identifier1(),
                                    label_seq_first);
                        }
                        else if (EK_COMPLETE == type_ids_WCharUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_WCharUnion.type_identifier2(),
                                    label_seq_first);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                        ann_custom_WCharUnion.reset();
                        CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_WCharUnion);
                        CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                        TypeObjectUtils::add_complete_union_member(member_seq_WCharUnion, member_first);
                    }
                    {
                        return_code_WCharUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_WCharUnion);

                        if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second;
                        TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>('B'));
                        CommonUnionMember common_second;
                        MemberId member_id_second = 0x00000001;
                        if (EK_COMPLETE == type_ids_WCharUnion.type_identifier1()._d() || TK_NONE == type_ids_WCharUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_WCharUnion.type_identifier1(),
                                    label_seq_second);
                        }
                        else if (EK_COMPLETE == type_ids_WCharUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_WCharUnion.type_identifier2(),
                                    label_seq_second);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                        ann_custom_WCharUnion.reset();
                        CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_WCharUnion);
                        CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                        TypeObjectUtils::add_complete_union_member(member_seq_WCharUnion, member_second);
                    }
                    CompleteUnionType union_type_WCharUnion = TypeObjectUtils::build_complete_union_type(union_flags_WCharUnion, header_WCharUnion, discriminator_WCharUnion,
                            member_seq_WCharUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_WCharUnion, type_name_WCharUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "WCharUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_WCharUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "WCharUnion", type_ids_WCharUnion);
                    if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "WCharUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_my_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_union;
            MemberId member_id_my_union = 0x00000000;
            if (EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier1()._d() || TK_NONE == type_ids_WCharUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_WCharUnionStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnionStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_WCharUnionStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_union = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_union;
            ann_custom_WCharUnionStruct.reset();
            CompleteMemberDetail detail_my_union = TypeObjectUtils::build_complete_member_detail(name_my_union, member_ann_builtin_my_union, ann_custom_WCharUnionStruct);
            CompleteStructMember member_my_union = TypeObjectUtils::build_complete_struct_member(common_my_union, detail_my_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_WCharUnionStruct, member_my_union);
        }
        CompleteStructType struct_type_WCharUnionStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_WCharUnionStruct, header_WCharUnionStruct, member_seq_WCharUnionStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_WCharUnionStruct, type_name_WCharUnionStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WCharUnionStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_WCharUnionStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "WCharUnionStruct", type_ids_WCharUnionStruct);
        if (return_code_WCharUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "WCharUnionStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

