// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestCdrAux.ipp
 * This source file contains some declarations of CDR related functions.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_TESTCDRAUX_IPP_
#define _FAST_DDS_GENERATED_TESTCDRAUX_IPP_

#include "TestCdrAux.hpp"

#include <fastcdr/Cdr.h>
#if FASTCDR_VERSION_MAJOR > 1
#include <fastcdr/CdrSizeCalculator.hpp>
#endif // FASTCDR_VERSION_MAJOR > 1



#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

namespace eprosima {
namespace fastcdr {









template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const BasicStruct& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64


            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.my_string().size() + 1;



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.my_bool(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.my_octet(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.my_int16(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.my_int32(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.my_int64(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.my_uint16(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.my_uint32(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.my_uint64(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.my_float32(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(9),
                data.my_float64(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(10),
                data.my_float128(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(11),
                data.my_char(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(12),
                data.my_string(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const BasicStruct& data)
{
#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.my_bool()
            ;


            scdr << data.my_octet()
            ;


            scdr << data.my_int16()
            ;


            scdr << data.my_int32()
            ;


            scdr << data.my_int64()
            ;


            scdr << data.my_uint16()
            ;


            scdr << data.my_uint32()
            ;


            scdr << data.my_uint64()
            ;


            scdr << data.my_float32()
            ;


            scdr << data.my_float64()
            ;


            scdr << data.my_float128()
            ;


            scdr << data.my_char()
            ;


            scdr << data.my_string()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.my_bool()
        << eprosima::fastcdr::MemberId(1) << data.my_octet()
        << eprosima::fastcdr::MemberId(2) << data.my_int16()
        << eprosima::fastcdr::MemberId(3) << data.my_int32()
        << eprosima::fastcdr::MemberId(4) << data.my_int64()
        << eprosima::fastcdr::MemberId(5) << data.my_uint16()
        << eprosima::fastcdr::MemberId(6) << data.my_uint32()
        << eprosima::fastcdr::MemberId(7) << data.my_uint64()
        << eprosima::fastcdr::MemberId(8) << data.my_float32()
        << eprosima::fastcdr::MemberId(9) << data.my_float64()
        << eprosima::fastcdr::MemberId(10) << data.my_float128()
        << eprosima::fastcdr::MemberId(11) << data.my_char()
        << eprosima::fastcdr::MemberId(12) << data.my_string()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        BasicStruct& data)
{
#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.my_bool();
                cdr >> data.my_octet();
                cdr >> data.my_int16();
                cdr >> data.my_int32();
                cdr >> data.my_int64();
                cdr >> data.my_uint16();
                cdr >> data.my_uint32();
                cdr >> data.my_uint64();
                cdr >> data.my_float32();
                cdr >> data.my_float64();
                cdr >> data.my_float128();
                cdr >> data.my_char();
                cdr >> data.my_string();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.my_bool();
                                            break;

                                        case 1:
                                                dcdr >> data.my_octet();
                                            break;

                                        case 2:
                                                dcdr >> data.my_int16();
                                            break;

                                        case 3:
                                                dcdr >> data.my_int32();
                                            break;

                                        case 4:
                                                dcdr >> data.my_int64();
                                            break;

                                        case 5:
                                                dcdr >> data.my_uint16();
                                            break;

                                        case 6:
                                                dcdr >> data.my_uint32();
                                            break;

                                        case 7:
                                                dcdr >> data.my_uint64();
                                            break;

                                        case 8:
                                                dcdr >> data.my_float32();
                                            break;

                                        case 9:
                                                dcdr >> data.my_float64();
                                            break;

                                        case 10:
                                                dcdr >> data.my_float128();
                                            break;

                                        case 11:
                                                dcdr >> data.my_char();
                                            break;

                                        case 12:
                                                dcdr >> data.my_string();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const BasicStruct& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}
















template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const ComplexStruct& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


            calculate_serialized_size(calculator, data.my_basic_struct(), current_alignment);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (data.my_sequence_octet().size() > 0)
            {
                current_alignment += (data.my_sequence_octet().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
            }




            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


            for(size_t a = 0; a < data.my_sequence_struct().size(); ++a)
            {
                calculate_serialized_size(calculator, data.my_sequence_struct().at(a), current_alignment);
            }



            current_alignment += ((500 * 5 * 4) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




            current_alignment += ((500) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);





            for(size_t a = 0; a < data.my_array_struct().size(); ++a)
            {
                    calculate_serialized_size(calculator, data.my_array_struct().at(a), current_alignment);

            }



            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto a : data.my_map_octet_short())
            {
                (void)a;

                    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

                    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

            }


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto a : data.my_map_long_struct())
            {
                (void)a;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

                    calculate_serialized_size(calculator, a.second, current_alignment);

            }


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto a : data.my_map_long_seq_octet())
            {
                (void)a;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


                    for(size_t b = 0; b < a.second.size(); ++b)
                    {
                        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

                        if (a.second.at(b).size() > 0)
                        {
                            current_alignment += (a.second.at(b).size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
                        }


                    }


            }


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto a : data.my_map_long_octet_array_500())
            {
                (void)a;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

                    current_alignment += ((500) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



            }


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto a : data.my_map_long_lol_type())
            {
                (void)a;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

                    for(auto b : a.second)
                    {
                        (void)b;

                            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


                            for(size_t c = 0; c < b.second.size(); ++c)
                            {
                                    calculate_serialized_size(calculator, b.second.at(c), current_alignment);

                            }


                    }

            }


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.my_small_string_8().size() + 1;


            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.my_large_string_8().size() + 1;



            for(size_t a = 0; a < data.my_array_string().size(); ++a)
            {

                for(size_t b = 0; b < data.my_array_string().at(a).size(); ++b)
                {
                        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.my_array_string().at(a).at(b).size() + 1;

                }

            }



            current_alignment += ((42) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);





            for(size_t a = 0; a < data.my_array_arrays().size(); ++a)
            {
                    current_alignment += ((2) * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



            }




            for(size_t a = 0; a < data.my_sequences_array().size(); ++a)
            {
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

                    if (data.my_sequences_array().at(a).size() > 0)
                    {
                        current_alignment += (data.my_sequences_array().at(a).size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    }



            }




    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.my_octet(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.my_basic_struct(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                data.my_alias_enum(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(3),
                data.my_enum(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(4),
                data.my_sequence_octet(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(5),
                data.my_sequence_struct(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(6),
                data.my_array_octet(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(7),
                data.my_octet_array_500(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(8),
                data.my_array_struct(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(9),
                data.my_map_octet_short(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(10),
                data.my_map_long_struct(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(11),
                data.my_map_long_seq_octet(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(12),
                data.my_map_long_octet_array_500(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(13),
                data.my_map_long_lol_type(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(14),
                data.my_small_string_8(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(15),
                data.my_large_string_8(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(16),
                data.my_array_string(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(17),
                data.multi_alias_array_42(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(18),
                data.my_array_arrays(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(19),
                data.my_sequences_array(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const ComplexStruct& data)
{
#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.my_octet()
            ;


            scdr << data.my_basic_struct()
            ;


            scdr << (uint32_t)data.my_alias_enum()
            ;


            scdr << (uint32_t)data.my_enum()
            ;


            scdr << data.my_sequence_octet()
            ;


            scdr << data.my_sequence_struct()
            ;


            scdr << data.my_array_octet();

            scdr << data.my_octet_array_500();

            scdr << data.my_array_struct();

            scdr << data.my_map_octet_short()
            ;


            scdr << data.my_map_long_struct()
            ;


            scdr << data.my_map_long_seq_octet()
            ;


            scdr << data.my_map_long_octet_array_500()
            ;


            scdr << data.my_map_long_lol_type()
            ;


            scdr << data.my_small_string_8()
                .c_str()
            ;


            scdr << data.my_large_string_8()
                .c_str()
            ;


                    for (size_t index_1 = 0; index_1 < 5; ++index_1)
                    {

                    for (size_t index_2 = 0; index_2 < 5; ++index_2)
                    {

                scdr << data.my_array_string()
                            [index_1]
                            [index_2]

                    .c_str();
                    }

                    }


            scdr << (std::array<uint32_t, (42)>&)data.multi_alias_array_42();

            scdr << data.my_array_arrays();

            scdr << data.my_sequences_array();

#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.my_octet()
        << eprosima::fastcdr::MemberId(1) << data.my_basic_struct()
        << eprosima::fastcdr::MemberId(2) << data.my_alias_enum()
        << eprosima::fastcdr::MemberId(3) << data.my_enum()
        << eprosima::fastcdr::MemberId(4) << data.my_sequence_octet()
        << eprosima::fastcdr::MemberId(5) << data.my_sequence_struct()
        << eprosima::fastcdr::MemberId(6) << data.my_array_octet()
        << eprosima::fastcdr::MemberId(7) << data.my_octet_array_500()
        << eprosima::fastcdr::MemberId(8) << data.my_array_struct()
        << eprosima::fastcdr::MemberId(9) << data.my_map_octet_short()
        << eprosima::fastcdr::MemberId(10) << data.my_map_long_struct()
        << eprosima::fastcdr::MemberId(11) << data.my_map_long_seq_octet()
        << eprosima::fastcdr::MemberId(12) << data.my_map_long_octet_array_500()
        << eprosima::fastcdr::MemberId(13) << data.my_map_long_lol_type()
        << eprosima::fastcdr::MemberId(14) << data.my_small_string_8()
        << eprosima::fastcdr::MemberId(15) << data.my_large_string_8()
        << eprosima::fastcdr::MemberId(16) << data.my_array_string()
        << eprosima::fastcdr::MemberId(17) << data.multi_alias_array_42()
        << eprosima::fastcdr::MemberId(18) << data.my_array_arrays()
        << eprosima::fastcdr::MemberId(19) << data.my_sequences_array()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        ComplexStruct& data)
{
#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.my_octet();
                cdr >> data.my_basic_struct();
                {
                    uint32_t enum_value = 0;
                    cdr >> enum_value;
                    data.my_alias_enum() = (MyAliasEnum)enum_value;
                }
                {
                    uint32_t enum_value = 0;
                    cdr >> enum_value;
                    data.my_enum() = (MyEnum)enum_value;
                }
                    cdr >> data.my_sequence_octet();
                    cdr >> data.my_sequence_struct();
                cdr >> data.my_array_octet();
                cdr >> data.my_octet_array_500();
                cdr >> data.my_array_struct();
                cdr >> data.my_map_octet_short();
                cdr >> data.my_map_long_struct();
                cdr >> data.my_map_long_seq_octet();
                cdr >> data.my_map_long_octet_array_500();
                cdr >> data.my_map_long_lol_type();
                {
                    std::string aux;
                    cdr >> aux;
                    data.my_small_string_8() = aux.c_str();
                }
                {
                    std::string aux;
                    cdr >> aux;
                    data.my_large_string_8() = aux.c_str();
                }
                            for (size_t index_1 = 0; index_1 < 5; ++index_1)
                            {

                            for (size_t index_2 = 0; index_2 < 5; ++index_2)
                            {

                    std::string aux;
                    cdr >> aux;
                    data.my_array_string()
                                    [index_1]
                                    [index_2]

                        = aux.c_str();
                            }

                            }

                {
                    for (size_t index = 0; index < data.multi_alias_array_42().size(); ++index)
                    {
                        uint32_t enum_value = 0;
                        cdr >> enum_value;
                        data.multi_alias_array_42()[index] = (MyAliasEnum3)enum_value;
                    }
                }
                        cdr >> data.my_array_arrays();
                        cdr >> data.my_sequences_array();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.my_octet();
                                            break;

                                        case 1:
                                                dcdr >> data.my_basic_struct();
                                            break;

                                        case 2:
                                                dcdr >> data.my_alias_enum();
                                            break;

                                        case 3:
                                                dcdr >> data.my_enum();
                                            break;

                                        case 4:
                                                dcdr >> data.my_sequence_octet();
                                            break;

                                        case 5:
                                                dcdr >> data.my_sequence_struct();
                                            break;

                                        case 6:
                                                dcdr >> data.my_array_octet();
                                            break;

                                        case 7:
                                                dcdr >> data.my_octet_array_500();
                                            break;

                                        case 8:
                                                dcdr >> data.my_array_struct();
                                            break;

                                        case 9:
                                                dcdr >> data.my_map_octet_short();
                                            break;

                                        case 10:
                                                dcdr >> data.my_map_long_struct();
                                            break;

                                        case 11:
                                                dcdr >> data.my_map_long_seq_octet();
                                            break;

                                        case 12:
                                                dcdr >> data.my_map_long_octet_array_500();
                                            break;

                                        case 13:
                                                dcdr >> data.my_map_long_lol_type();
                                            break;

                                        case 14:
                                                dcdr >> data.my_small_string_8();
                                            break;

                                        case 15:
                                                dcdr >> data.my_large_string_8();
                                            break;

                                        case 16:
                                                dcdr >> data.my_array_string();
                                            break;

                                        case 17:
                                                dcdr >> data.multi_alias_array_42();
                                            break;

                                        case 18:
                                                dcdr >> data.my_array_arrays();
                                            break;

                                        case 19:
                                                dcdr >> data.my_sequences_array();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const ComplexStruct& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const MyUnion& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    switch(data._d())
    {
        case ::A:
        calculate_serialized_size(calculator, data.basic(), current_alignment);

        break;


        case ::B:
        case ::C:
        calculate_serialized_size(calculator, data.complex(), current_alignment);

        break;

        default:
        break;
    }

    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};

    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0), data._d(),
                    current_alignment);

    switch (data._d())
    {
        case ::A:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                                data.basic(), current_alignment);
                    break;

        case ::B:
        case ::C:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                                data.complex(), current_alignment);
                    break;

        default:
            break;
    }

    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}


template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const MyUnion& data)
{
#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
    scdr << (uint32_t)data._d();

    switch (data._d())
    {
                case ::A:
                    scdr << data.basic()
                        ;
                    break;

                case ::B:
                case ::C:
                    scdr << data.complex()
                        ;
                    break;

        default:
            break;
    }
#else
    scdr << eprosima::fastcdr::MemberId(0) << data._d();

    switch (data._d())
    {
                case ::A:
                    scdr << eprosima::fastcdr::MemberId(0) << data.basic();
                    break;

                case ::B:
                case ::C:
                    scdr << eprosima::fastcdr::MemberId(1) << data.complex();
                    break;

        default:
            break;
    }
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        MyUnion& data)
{
#if FASTCDR_VERSION_MAJOR == 1

    {
        uint32_t enum_value = 0;
        cdr >> enum_value;
        data._d() = (MyEnum)enum_value;
    }
    switch (data._d())
    {
                        case ::A:
                            cdr >> data.basic();
                        break;

                        case ::B:
                        case ::C:
                            cdr >> data.complex();
                        break;

    }
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                    case 0:
                        dcdr >> data._d();
                        break;
                    default:
                        switch (data._d())
                        {
                                                        case ::A:
                                                            dcdr >> data.basic();
                                                            break;

                                                        case ::B:
                                                        case ::C:
                                                            dcdr >> data.complex();
                                                            break;

                            default:
                                break;
                        }
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}



template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const MyUnion2& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    switch(data._d())
    {
        case A:
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

        break;


        case B:
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.imString().size() + 1;

        break;


        case C:
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

        break;

        default:
        break;
    }

    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};

    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0), data._d(),
                    current_alignment);

    switch (data._d())
    {
        case A:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                                data.uno(), current_alignment);
                    break;

        case B:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                                data.imString(), current_alignment);
                    break;

        case C:
                    calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(2),
                                data.tres(), current_alignment);
                    break;

        default:
            break;
    }

    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}


template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const MyUnion2& data)
{
#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
    scdr << data._d();

    switch (data._d())
    {
                case A:
                    scdr << data.uno()
                        ;
                    break;

                case B:
                    scdr << data.imString()
                        ;
                    break;

                case C:
                    scdr << data.tres()
                        ;
                    break;

        default:
            break;
    }
#else
    scdr << eprosima::fastcdr::MemberId(0) << data._d();

    switch (data._d())
    {
                case A:
                    scdr << eprosima::fastcdr::MemberId(0) << data.uno();
                    break;

                case B:
                    scdr << eprosima::fastcdr::MemberId(1) << data.imString();
                    break;

                case C:
                    scdr << eprosima::fastcdr::MemberId(2) << data.tres();
                    break;

        default:
            break;
    }
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        MyUnion2& data)
{
#if FASTCDR_VERSION_MAJOR == 1

    cdr >> data._d();

    switch (data._d())
    {
                        case A:
                            cdr >> data.uno();
                        break;

                        case B:
                            cdr >> data.imString();
                        break;

                        case C:
                            cdr >> data.tres();
                        break;

    }
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                    case 0:
                        dcdr >> data._d();
                        break;
                    default:
                        switch (data._d())
                        {
                                                        case A:
                                                            dcdr >> data.uno();
                                                            break;

                                                        case B:
                                                            dcdr >> data.imString();
                                                            break;

                                                        case C:
                                                            dcdr >> data.tres();
                                                            break;

                            default:
                                break;
                        }
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}



template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const CompleteStruct& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            calculate_serialized_size(calculator, data.my_union(), current_alignment);


            calculate_serialized_size(calculator, data.my_union_2(), current_alignment);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.my_union(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.my_union_2(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const CompleteStruct& data)
{
#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.my_union()
            ;


            scdr << data.my_union_2()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.my_union()
        << eprosima::fastcdr::MemberId(1) << data.my_union_2()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        CompleteStruct& data)
{
#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.my_union();
                cdr >> data.my_union_2();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.my_union();
                                            break;

                                        case 1:
                                                dcdr >> data.my_union_2();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const CompleteStruct& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);
}




template<>
eProsima_user_DllExport size_t calculate_serialized_size(
        eprosima::fastcdr::CdrSizeCalculator& calculator,
        const KeyedStruct& data,
        size_t& current_alignment)
{
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR == 1

    static_cast<void>(calculator);
    static_cast<void>(current_alignment);

    size_t initial_alignment {current_alignment};

            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


            calculate_serialized_size(calculator, data.basic(), current_alignment);



    return current_alignment - initial_alignment;

#else

    eprosima::fastcdr::EncodingAlgorithmFlag previous_encoding = calculator.get_encoding();
    size_t calculated_size {calculator.begin_calculate_type_serialized_size(
                                eprosima::fastcdr::CdrVersion::XCDRv2 == calculator.get_cdr_version() ?
                                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
                                current_alignment)};


        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(0),
                data.key(), current_alignment);

        calculated_size += calculator.calculate_member_serialized_size(eprosima::fastcdr::MemberId(1),
                data.basic(), current_alignment);


    calculated_size += calculator.end_calculate_type_serialized_size(previous_encoding, current_alignment);

    return calculated_size;

#endif // FASTCDR_VERSION_MAJOR == 1
}

template<>
eProsima_user_DllExport void serialize(
        eprosima::fastcdr::Cdr& scdr,
        const KeyedStruct& data)
{
#if FASTCDR_VERSION_MAJOR > 1
    eprosima::fastcdr::Cdr::state current_state(scdr);
    scdr.begin_serialize_type(current_state,
            eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
            scdr << data.key()
            ;


            scdr << data.basic()
            ;


#else
    scdr
        << eprosima::fastcdr::MemberId(0) << data.key()
        << eprosima::fastcdr::MemberId(1) << data.basic()
;
#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
    scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}

template<>
eProsima_user_DllExport void deserialize(
        eprosima::fastcdr::Cdr& cdr,
        KeyedStruct& data)
{
#if FASTCDR_VERSION_MAJOR == 1
                cdr >> data.key();
                cdr >> data.basic();
;
#else
    cdr.deserialize_type(eprosima::fastcdr::CdrVersion::XCDRv2 == cdr.get_cdr_version() ?
            eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
            eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR,
            [&data](eprosima::fastcdr::Cdr& dcdr, const eprosima::fastcdr::MemberId& mid) -> bool
            {
                bool ret_value = true;
                switch (mid.id)
                {
                                        case 0:
                                                dcdr >> data.key();
                                            break;

                                        case 1:
                                                dcdr >> data.basic();
                                            break;

                    default:
                        ret_value = false;
                        break;
                }
                return ret_value;
            });
#endif // FASTCDR_VERSION_MAJOR == 1
}

void serialize_key(
        eprosima::fastcdr::Cdr& scdr,
        const KeyedStruct& data)
{
    static_cast<void>(scdr);
    static_cast<void>(data);

#if FASTCDR_VERSION_MAJOR > 1
        eprosima::fastcdr::Cdr::state current_state(scdr);
        scdr.begin_serialize_type(current_state,
                eprosima::fastcdr::CdrVersion::XCDRv2 == scdr.get_cdr_version() ?
                eprosima::fastcdr::EncodingAlgorithmFlag::DELIMIT_CDR2 :
                eprosima::fastcdr::EncodingAlgorithmFlag::PLAIN_CDR);
#endif // FASTCDR_VERSION_MAJOR > 1

#if FASTCDR_VERSION_MAJOR == 1
                            scdr <<
        data.key()
                            ;


#else
                            scdr << data.key();


#endif // FASTCDR_VERSION_MAJOR == 1

#if FASTCDR_VERSION_MAJOR > 1
        scdr.end_serialize_type(current_state);
#endif // FASTCDR_VERSION_MAJOR > 1
}



} // namespace fastcdr
} // namespace eprosima

#endif // _FAST_DDS_GENERATED_TESTCDRAUX_IPP_

