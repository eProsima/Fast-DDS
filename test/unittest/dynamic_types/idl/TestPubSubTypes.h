// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _FAST_DDS_GENERATED_TEST_PUBSUBTYPES_H_
#define _FAST_DDS_GENERATED_TEST_PUBSUBTYPES_H_

#include <fastdds/dds/topic/TopicDataType.hpp>
#include <fastrtps/utils/md5.h>
#include <fastrtps/utils/data_sizeof.hpp>

#include "Test.h"

#if !defined(GEN_API_VER) || (GEN_API_VER != 1)
#error \
    Generated Test is not compatible with current installed Fast DDS. Please, regenerate it with fastddsgen.
#endif  // GEN_API_VER


typedef MyEnum MyAliasEnum;
typedef MyAliasEnum MyAliasEnum2;
typedef MyAliasEnum2 MyAliasEnum3;

namespace detail {

    template<typename Tag, typename Tag::type M>
    struct BasicStruct_rob
    {
        friend typename Tag::type get(
                Tag)
        {
            return M;
        }
    };

    struct BasicStruct_f
    {
        typedef std::wstring BasicStruct::* type;
        friend type get(
                BasicStruct_f);
    };

    template struct BasicStruct_rob<BasicStruct_f, &BasicStruct::m_my_wstring>;
}

/*!
 * @brief This class represents the TopicDataType of the type BasicStruct defined by the user in the IDL file.
 * @ingroup TEST
 */
class BasicStructPubSubType : public eprosima::fastdds::dds::TopicDataType
{
public:

    typedef BasicStruct type;

    eProsima_user_DllExport BasicStructPubSubType();

    eProsima_user_DllExport virtual ~BasicStructPubSubType() override;

    eProsima_user_DllExport virtual bool serialize(
            void* data,
            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

    eProsima_user_DllExport virtual bool deserialize(
            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
            void* data) override;

    eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
            void* data) override;

    eProsima_user_DllExport virtual bool getKey(
            void* data,
            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
            bool force_md5 = false) override;

    eProsima_user_DllExport virtual void* createData() override;

    eProsima_user_DllExport virtual void deleteData(
            void* data) override;

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
    eProsima_user_DllExport inline bool is_bounded() const override
    {
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
    eProsima_user_DllExport inline bool is_plain() const override
    {
        return 1356ULL == eprosima::fastrtps::size_of_<BasicStruct, detail::BasicStruct_f, std::wstring>();
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
    eProsima_user_DllExport inline bool construct_sample(
            void* memory) const override
    {
        (void)memory;
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

    MD5 m_md5;
    unsigned char* m_keyBuffer;
};
typedef std::array<uint8_t, 500> MyOctetArray500;
typedef std::array<BasicStruct, 5> BSAlias5;
typedef std::array<MyAliasEnum3, 42> MA3;
typedef std::array<int32_t, 2> MyMiniArray;
typedef std::vector<int32_t> MySequenceLong;

namespace detail {

    template<typename Tag, typename Tag::type M>
    struct ComplexStruct_rob
    {
        friend typename Tag::type get(
                Tag)
        {
            return M;
        }
    };

    struct ComplexStruct_f
    {
        typedef std::array<MySequenceLong, 23> ComplexStruct::* type;
        friend type get(
                ComplexStruct_f);
    };

    template struct ComplexStruct_rob<ComplexStruct_f, &ComplexStruct::m_my_sequences_array>;
}

/*!
 * @brief This class represents the TopicDataType of the type ComplexStruct defined by the user in the IDL file.
 * @ingroup TEST
 */
class ComplexStructPubSubType : public eprosima::fastdds::dds::TopicDataType
{
public:

    typedef ComplexStruct type;

    eProsima_user_DllExport ComplexStructPubSubType();

    eProsima_user_DllExport virtual ~ComplexStructPubSubType() override;

    eProsima_user_DllExport virtual bool serialize(
            void* data,
            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

    eProsima_user_DllExport virtual bool deserialize(
            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
            void* data) override;

    eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
            void* data) override;

    eProsima_user_DllExport virtual bool getKey(
            void* data,
            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
            bool force_md5 = false) override;

    eProsima_user_DllExport virtual void* createData() override;

    eProsima_user_DllExport virtual void deleteData(
            void* data) override;

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
    eProsima_user_DllExport inline bool is_bounded() const override
    {
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
    eProsima_user_DllExport inline bool is_plain() const override
    {
        return 69399660ULL == eprosima::fastrtps::size_of_<ComplexStruct, detail::ComplexStruct_f, std::array<MySequenceLong, 23>>();
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
    eProsima_user_DllExport inline bool construct_sample(
            void* memory) const override
    {
        (void)memory;
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

    MD5 m_md5;
    unsigned char* m_keyBuffer;
};



namespace detail {

    template<typename Tag, typename Tag::type M>
    struct CompleteStruct_rob
    {
        friend typename Tag::type get(
                Tag)
        {
            return M;
        }
    };

    struct CompleteStruct_f
    {
        typedef MyUnion2 CompleteStruct::* type;
        friend type get(
                CompleteStruct_f);
    };

    template struct CompleteStruct_rob<CompleteStruct_f, &CompleteStruct::m_my_union_2>;
}

/*!
 * @brief This class represents the TopicDataType of the type CompleteStruct defined by the user in the IDL file.
 * @ingroup TEST
 */
class CompleteStructPubSubType : public eprosima::fastdds::dds::TopicDataType
{
public:

    typedef CompleteStruct type;

    eProsima_user_DllExport CompleteStructPubSubType();

    eProsima_user_DllExport virtual ~CompleteStructPubSubType() override;

    eProsima_user_DllExport virtual bool serialize(
            void* data,
            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

    eProsima_user_DllExport virtual bool deserialize(
            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
            void* data) override;

    eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
            void* data) override;

    eProsima_user_DllExport virtual bool getKey(
            void* data,
            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
            bool force_md5 = false) override;

    eProsima_user_DllExport virtual void* createData() override;

    eProsima_user_DllExport virtual void deleteData(
            void* data) override;

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
    eProsima_user_DllExport inline bool is_bounded() const override
    {
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
    eProsima_user_DllExport inline bool is_plain() const override
    {
        return 69399924ULL == eprosima::fastrtps::size_of_<CompleteStruct, detail::CompleteStruct_f, MyUnion2>();
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
    eProsima_user_DllExport inline bool construct_sample(
            void* memory) const override
    {
        (void)memory;
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

    MD5 m_md5;
    unsigned char* m_keyBuffer;
};

namespace detail {

    template<typename Tag, typename Tag::type M>
    struct KeyedStruct_rob
    {
        friend typename Tag::type get(
                Tag)
        {
            return M;
        }
    };

    struct KeyedStruct_f
    {
        typedef BasicStruct KeyedStruct::* type;
        friend type get(
                KeyedStruct_f);
    };

    template struct KeyedStruct_rob<KeyedStruct_f, &KeyedStruct::m_basic>;
}

/*!
 * @brief This class represents the TopicDataType of the type KeyedStruct defined by the user in the IDL file.
 * @ingroup TEST
 */
class KeyedStructPubSubType : public eprosima::fastdds::dds::TopicDataType
{
public:

    typedef KeyedStruct type;

    eProsima_user_DllExport KeyedStructPubSubType();

    eProsima_user_DllExport virtual ~KeyedStructPubSubType() override;

    eProsima_user_DllExport virtual bool serialize(
            void* data,
            eprosima::fastrtps::rtps::SerializedPayload_t* payload) override;

    eProsima_user_DllExport virtual bool deserialize(
            eprosima::fastrtps::rtps::SerializedPayload_t* payload,
            void* data) override;

    eProsima_user_DllExport virtual std::function<uint32_t()> getSerializedSizeProvider(
            void* data) override;

    eProsima_user_DllExport virtual bool getKey(
            void* data,
            eprosima::fastrtps::rtps::InstanceHandle_t* ihandle,
            bool force_md5 = false) override;

    eProsima_user_DllExport virtual void* createData() override;

    eProsima_user_DllExport virtual void deleteData(
            void* data) override;

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED
    eProsima_user_DllExport inline bool is_bounded() const override
    {
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_BOUNDED

#ifdef TOPIC_DATA_TYPE_API_HAS_IS_PLAIN
    eProsima_user_DllExport inline bool is_plain() const override
    {
        return 1364ULL == eprosima::fastrtps::size_of_<KeyedStruct, detail::KeyedStruct_f, BasicStruct>();
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_IS_PLAIN

#ifdef TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE
    eProsima_user_DllExport inline bool construct_sample(
            void* memory) const override
    {
        (void)memory;
        return false;
    }

#endif  // TOPIC_DATA_TYPE_API_HAS_CONSTRUCT_SAMPLE

    MD5 m_md5;
    unsigned char* m_keyBuffer;
};

#endif // _FAST_DDS_GENERATED_TEST_PUBSUBTYPES_H_