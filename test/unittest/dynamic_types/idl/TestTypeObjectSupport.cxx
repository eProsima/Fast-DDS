// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TestTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "TestTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/dynamic_types/Types.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>


using namespace eprosima::fastdds::dds::xtypes;

void register_Test_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_BasicStruct_type_identifier();

                register_ComplexStruct_type_identifier();

                register_MyUnion_type_identifier();

                register_MyUnion2_type_identifier();

                register_CompleteStruct_type_identifier();

                register_KeyedStruct_type_identifier();

            });
}

void register_BasicStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "BasicStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bool member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_bool";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int16 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_int16";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000003;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_int32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000004;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int64 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_int64";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000005;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_uint16 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_uint16";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000006;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_uint32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_uint32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000007;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_uint64 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_uint64";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_float", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000008;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_float32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_float32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_double", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000009;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_float64 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_float64";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_longdouble", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000a;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_float128 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_float128";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_char", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000b;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_char member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_char";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000c;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BasicStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BasicStruct", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ComplexStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "ComplexStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "BasicStruct", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "BasicStruct";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_bool", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_bool member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_bool";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_octet member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_octet";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int16_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_int16 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_int16";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000003;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_int32 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_int32";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000004;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_int64 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_int64";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint16_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000005;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_uint16 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_uint16";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000006;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_uint32 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_uint32";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000007;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_uint64 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_uint64";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000008;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_float32 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_float32";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_double", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000009;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_float64 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_float64";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_longdouble", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000a;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_float128 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_float128";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_char", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000b;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_char member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_char";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000c;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_string member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_string";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "BasicStruct already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "BasicStruct", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_basic_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_basic_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyAliasEnum", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags = 0;
                QualifiedTypeName type_name = "MyAliasEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                AliasMemberFlag related_flags = 0;
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyEnum", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EnumTypeFlag enum_flags = 0;
                    BitBound bit_bound = 32;
                    CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                    QualifiedTypeName type_name = "MyEnum";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                    CompleteEnumeratedLiteralSeq literal_seq;
                    int32_t value = 0; // TODO(jlbueno): remove
                    {
                        EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                        // TODO(jlbueno): getIndex
                        CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                        value++; // TODO(jlbueno): remove
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        MemberName name = "A";
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                    }
                    {
                        EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                        // TODO(jlbueno): getIndex
                        CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                        value++; // TODO(jlbueno): remove
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        MemberName name = "B";
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                    }
                    {
                        EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                        // TODO(jlbueno): getIndex
                        CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                        value++; // TODO(jlbueno): remove
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        MemberName name = "C";
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                    }
                    CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                            literal_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyEnum already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyEnum", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyAliasEnum related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyAliasEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyAliasEnum", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_alias_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_alias_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyEnum", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EnumTypeFlag enum_flags = 0;
                BitBound bit_bound = 32;
                CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                QualifiedTypeName type_name = "MyEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                CompleteEnumeratedLiteralSeq literal_seq;
                int32_t value = 0; // TODO(jlbueno): remove
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    // TODO(jlbueno): getIndex
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                    value++; // TODO(jlbueno): remove
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "A";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    // TODO(jlbueno): getIndex
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                    value++; // TODO(jlbueno): remove
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "B";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    // TODO(jlbueno): getIndex
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                    value++; // TODO(jlbueno): remove
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "C";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                        literal_seq);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyEnum", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000003;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_uint8_t_55", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(55);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint8_t_55"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint8_t_55 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 55;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint8_t_55"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint8_t_55 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_uint8_t_55", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_uint8_t_55: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000004;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_sequence_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_BasicStruct_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "BasicStruct", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    {
                        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                false, false);
                        ReturnCode_t return_code;
                        TypeIdentifierPair type_ids;
                        QualifiedTypeName type_name = "BasicStruct";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                        CompleteStructHeader header;
                        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                        CompleteStructMemberSeq member_seq;
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_bool", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000000;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_bool member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_bool";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000001;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_octet member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_octet";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int16_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000002;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_int16 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_int16";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000003;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_int32 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_int32";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int64_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000004;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_int64 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_int64";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_uint16_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000005;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_uint16 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_uint16";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_uint32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000006;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_uint32 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_uint32";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_uint64_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000007;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_uint64 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_uint64";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_float", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000008;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_float32 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_float32";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_double", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000009;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_float64 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_float64";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_longdouble", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x0000000a;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_float128 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_float128";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_char", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x0000000b;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_char member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_char";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind("TI_STRING8_SMALL");
                                if (type_id_kind == "TI_STRING8_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Unknown String kind.");
                                    return;
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x0000000c;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "BasicStruct already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "BasicStruct", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = 0;
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_BasicStruct_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_BasicStruct_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_BasicStruct_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_BasicStruct_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000005;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_sequence_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_char_500_5_4", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_char", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_ARRAY_LARGE");
                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(500));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_char_500_5_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_char_500_5_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(500));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_char_500_5_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_char_500_5_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_char_500_5_4", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_char_500_5_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000006;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_array_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyOctetArray500", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags = 0;
                QualifiedTypeName type_name = "MyOctetArray500";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                AliasMemberFlag related_flags = 0;
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_uint8_t_500", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_byte", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* element_identifier;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier inconsistent.");
                    }
                    EquivalenceKind equiv_kind = EK_COMPLETE;
                    if (TK_NONE == type_ids.type_identifier2()._d())
                    {
                        equiv_kind = EK_BOTH;
                    }
                    CollectionElementFlag element_flags = 0;
                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                    std::string type_id_kind("TI_PLAIN_ARRAY_LARGE");
                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                    {
                        SBoundSeq array_bound_seq;
                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(500));

                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_500"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBoundSeq array_bound_seq;
                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(500));

                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_500"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_array_uint8_t_500", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_uint8_t_500: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyOctetArray500 related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyOctetArray500 already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyOctetArray500", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyOctetArray500: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000007;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_octet_array_500 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_octet_array_500";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_BasicStruct_5", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "BasicStruct", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    {
                        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                false, false);
                        ReturnCode_t return_code;
                        TypeIdentifierPair type_ids;
                        QualifiedTypeName type_name = "BasicStruct";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                        CompleteStructHeader header;
                        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                        CompleteStructMemberSeq member_seq;
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_bool", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000000;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_bool member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_bool";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000001;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_octet member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_octet";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int16_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000002;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_int16 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_int16";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000003;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_int32 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_int32";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int64_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000004;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_int64 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_int64";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_uint16_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000005;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_uint16 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_uint16";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_uint32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000006;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_uint32 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_uint32";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_uint64_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000007;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_uint64 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_uint64";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_float", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000008;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_float32 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_float32";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_double", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000009;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_float64 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_float64";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_longdouble", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x0000000a;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_float128 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_float128";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_char", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x0000000b;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_char member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_char";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind("TI_STRING8_SMALL");
                                if (type_id_kind == "TI_STRING8_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Unknown String kind.");
                                    return;
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x0000000c;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "BasicStruct already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "BasicStruct", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_BasicStruct_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_BasicStruct_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_BasicStruct_5", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_BasicStruct_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000008;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_array_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint8_t_int16_t_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int16_t", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint8_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint8_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                }
                EquivalenceKind equiv_kind = EK_BOTH;
                if (EK_COMPLETE == element_identifier->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                        TK_NONE != type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_COMPLETE;
                }
                CollectionElementFlag element_flags = 0;
                CollectionElementFlag key_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint8_t_int16_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint8_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_uint8_t_int16_t_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint8_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_uint8_t_int16_t_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_uint8_t_int16_t_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000009;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map_octet_short member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_map_octet_short";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_BasicStruct_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "BasicStruct", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    {
                        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                false, false);
                        ReturnCode_t return_code;
                        TypeIdentifierPair type_ids;
                        QualifiedTypeName type_name = "BasicStruct";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                        CompleteStructHeader header;
                        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                        CompleteStructMemberSeq member_seq;
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_bool", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000000;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_bool member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_bool";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000001;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_octet member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_octet";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int16_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000002;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_int16 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_int16";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000003;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_int32 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_int32";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int64_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000004;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_int64 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_int64";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_uint16_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000005;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_uint16 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_uint16";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_uint32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000006;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_uint32 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_uint32";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_uint64_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000007;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_uint64 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_uint64";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_float", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000008;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_float32 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_float32";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_double", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x00000009;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_float64 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_float64";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_longdouble", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x0000000a;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_float128 member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_float128";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_char", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x0000000b;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_char member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_char";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        {
                            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                    false, false, false, false);
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind("TI_STRING8_SMALL");
                                if (type_id_kind == "TI_STRING8_SMALL")
                                {
                                    SBound bound = 0;
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 255;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Unknown String kind.");
                                    return;
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_unbounded", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonStructMember common;
                            MemberId member_id = 0x0000000c;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Structure my_string member TypeIdentifier inconsistent.");
                                return;
                            }
                            MemberName name = "my_string";
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                            TypeObjectUtils::add_complete_struct_member(member_seq, member);
                        }
                        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "BasicStruct already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "BasicStruct", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_BasicStruct_unbounded inconsistent element TypeIdentifier.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_BasicStruct_unbounded inconsistent key TypeIdentifier.");
                }
                EquivalenceKind equiv_kind = EK_BOTH;
                if (EK_COMPLETE == element_identifier->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                        TK_NONE != type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_COMPLETE;
                }
                CollectionElementFlag element_flags = 0;
                CollectionElementFlag key_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_BasicStruct_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_BasicStruct_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_BasicStruct_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_BasicStruct_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000a;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map_long_struct member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_map_long_struct";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_sequence_uint8_t_unbounded", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        TypeIdentifier* element_identifier;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Sequence element TypeIdentifier inconsistent.");
                        }
                        EquivalenceKind equiv_kind = EK_COMPLETE;
                        if (TK_NONE == type_ids.type_identifier2()._d())
                        {
                            equiv_kind = EK_BOTH;
                        }
                        CollectionElementFlag element_flags = 0;
                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                        std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                        if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                        {
                            SBound bound = 0;
                            PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint8_t_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_uint8_t_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            LBound bound = 0;
                            PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint8_t_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_uint8_t_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_sequence_uint8_t_unbounded", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_uint8_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    TypeIdentifier* element_identifier;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier inconsistent.");
                    }
                    EquivalenceKind equiv_kind = EK_COMPLETE;
                    if (TK_NONE == type_ids.type_identifier2()._d())
                    {
                        equiv_kind = EK_BOTH;
                    }
                    CollectionElementFlag element_flags = 0;
                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                    std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                    if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                    {
                        SBound bound = 0;
                        PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBound bound = 0;
                        PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded inconsistent element TypeIdentifier.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded inconsistent key TypeIdentifier.");
                }
                EquivalenceKind equiv_kind = EK_BOTH;
                if (EK_COMPLETE == element_identifier->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                        TK_NONE != type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_COMPLETE;
                }
                CollectionElementFlag element_flags = 0;
                CollectionElementFlag key_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000b;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map_long_seq_octet member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_map_long_seq_octet";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyOctetArray500", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags = 0;
                    QualifiedTypeName type_name = "MyOctetArray500";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                    AliasMemberFlag related_flags = 0;
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_array_uint8_t_500", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        TypeIdentifier* element_identifier;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Array element TypeIdentifier inconsistent.");
                        }
                        EquivalenceKind equiv_kind = EK_COMPLETE;
                        if (TK_NONE == type_ids.type_identifier2()._d())
                        {
                            equiv_kind = EK_BOTH;
                        }
                        CollectionElementFlag element_flags = 0;
                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                        std::string type_id_kind("TI_PLAIN_ARRAY_LARGE");
                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                        {
                            SBoundSeq array_bound_seq;
                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(500));

                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_500"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            LBoundSeq array_bound_seq;
                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(500));

                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_500"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_uint8_t_500", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_uint8_t_500: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyOctetArray500 related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                    CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyOctetArray500 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyOctetArray500", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyOctetArray500: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded inconsistent element TypeIdentifier.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded inconsistent key TypeIdentifier.");
                }
                EquivalenceKind equiv_kind = EK_BOTH;
                if (EK_COMPLETE == element_identifier->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                        TK_NONE != type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_COMPLETE;
                }
                CollectionElementFlag element_flags = 0;
                CollectionElementFlag key_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000c;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map_long_octet_array_500 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_map_long_octet_array_500";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "BSAlias5", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        AliasTypeFlag alias_flags = 0;
                        QualifiedTypeName type_name = "BSAlias5";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                        CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                        AliasMemberFlag related_flags = 0;
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_BasicStruct_5", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "BasicStruct", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                {
                                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                            false, false);
                                    ReturnCode_t return_code;
                                    TypeIdentifierPair type_ids;
                                    QualifiedTypeName type_name = "BasicStruct";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                    CompleteStructHeader header;
                                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                    CompleteStructMemberSeq member_seq;
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_bool", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000000;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_bool member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_bool";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000001;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_octet member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_octet";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int16_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000002;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int16 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int16";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000003;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int64_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000004;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint16_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000005;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint16 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint16";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000006;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint64_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000007;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_float", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000008;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_double", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000009;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_longdouble", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000a;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float128 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float128";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_char", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000b;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_char member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_char";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_unbounded", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            std::string type_id_kind("TI_STRING8_SMALL");
                                            if (type_id_kind == "TI_STRING8_SMALL")
                                            {
                                                SBound bound = 0;
                                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                        "anonymous_string_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else if (type_id_kind == "TI_STRING8_LARGE")
                                            {
                                                LBound bound = 255;
                                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                        "anonymous_string_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_unbounded: Unknown String kind.");
                                                return;
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_string_unbounded", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000c;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_string member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_string";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "BasicStruct", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_BasicStruct_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_BasicStruct_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_BasicStruct_5", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_BasicStruct_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonAliasBody common;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "BSAlias5 related TypeIdentifier inconsistent.");
                            return;
                        }
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                        CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "BSAlias5 already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "BSAlias5", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "BSAlias5: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    TypeIdentifier* element_identifier;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded inconsistent element TypeIdentifier.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_byte", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* key_identifier;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded inconsistent key TypeIdentifier.");
                    }
                    EquivalenceKind equiv_kind = EK_BOTH;
                    if (EK_COMPLETE == element_identifier->_d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                            TK_NONE != type_ids.type_identifier2()._d())
                    {
                        equiv_kind = EK_COMPLETE;
                    }
                    CollectionElementFlag element_flags = 0;
                    CollectionElementFlag key_flags = 0;
                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                    std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                    if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                    {
                        SBound bound = 0;
                        PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                    eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBound bound = 0;
                        PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                    eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded inconsistent element TypeIdentifier.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded inconsistent key TypeIdentifier.");
                }
                EquivalenceKind equiv_kind = EK_BOTH;
                if (EK_COMPLETE == element_identifier->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                        TK_NONE != type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_COMPLETE;
                }
                CollectionElementFlag element_flags = 0;
                CollectionElementFlag key_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = 0;
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 0;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000d;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map_long_lol_type member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_map_long_lol_type";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_128", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = static_cast<SBound>(128);
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_128"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_128 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 128;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_128"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_128 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_128: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_128", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_128: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000e;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_small_string_8 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_small_string_8";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_500", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_LARGE");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = static_cast<SBound>(500);
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_500"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_500 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 500;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_500"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_500 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_500: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_500", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_500: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000f;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_large_string_8 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_large_string_8";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_anonymous_string_75_5_5", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_75", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    std::string type_id_kind("TI_STRING8_SMALL");
                    if (type_id_kind == "TI_STRING8_SMALL")
                    {
                        SBound bound = static_cast<SBound>(75);
                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                "anonymous_string_75"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_75 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else if (type_id_kind == "TI_STRING8_LARGE")
                    {
                        LBound bound = 75;
                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                "anonymous_string_75"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_75 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_75: Unknown String kind.");
                        return;
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_75", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_75: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_string_75_5_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_anonymous_string_75_5_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_string_75_5_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_anonymous_string_75_5_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_anonymous_string_75_5_5", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_anonymous_string_75_5_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000010;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_array_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MA3", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags = 0;
                QualifiedTypeName type_name = "MA3";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                AliasMemberFlag related_flags = 0;
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_MyAliasEnum3_42", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyAliasEnum3", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        AliasTypeFlag alias_flags = 0;
                        QualifiedTypeName type_name = "MyAliasEnum3";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                        CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                        AliasMemberFlag related_flags = 0;
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyAliasEnum2", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags = 0;
                            QualifiedTypeName type_name = "MyAliasEnum2";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                            CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                            AliasMemberFlag related_flags = 0;
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasEnum", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags = 0;
                                QualifiedTypeName type_name = "MyAliasEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                AliasMemberFlag related_flags = 0;
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EnumTypeFlag enum_flags = 0;
                                    BitBound bit_bound = 32;
                                    CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                                    QualifiedTypeName type_name = "MyEnum";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                    CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                                    CompleteEnumeratedLiteralSeq literal_seq;
                                    int32_t value = 0; // TODO(jlbueno): remove
                                    {
                                        EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        // TODO(jlbueno): getIndex
                                        CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                        value++; // TODO(jlbueno): remove
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "A";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        // TODO(jlbueno): getIndex
                                        CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                        value++; // TODO(jlbueno): remove
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "B";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                    }
                                    {
                                        EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                        // TODO(jlbueno): getIndex
                                        CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                        value++; // TODO(jlbueno): remove
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "C";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                    }
                                    CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                                            literal_seq);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyEnum already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyEnum", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasEnum related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasEnum", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasEnum2 related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                            CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyAliasEnum2 already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasEnum2", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasEnum2: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonAliasBody common;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyAliasEnum3 related TypeIdentifier inconsistent.");
                            return;
                        }
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                        CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasEnum3 already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyAliasEnum3", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasEnum3: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    TypeIdentifier* element_identifier;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier inconsistent.");
                    }
                    EquivalenceKind equiv_kind = EK_COMPLETE;
                    if (TK_NONE == type_ids.type_identifier2()._d())
                    {
                        equiv_kind = EK_BOTH;
                    }
                    CollectionElementFlag element_flags = 0;
                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                    {
                        SBoundSeq array_bound_seq;
                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(42));

                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_MyAliasEnum3_42"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_MyAliasEnum3_42 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBoundSeq array_bound_seq;
                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(42));

                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_MyAliasEnum3_42"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_MyAliasEnum3_42 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_array_MyAliasEnum3_42", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_MyAliasEnum3_42: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MA3 related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MA3 already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MA3", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MA3: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000011;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure multi_alias_array_42 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "multi_alias_array_42";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_anonymous_array_int32_t_2_5", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyMiniArray", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags = 0;
                    QualifiedTypeName type_name = "MyMiniArray";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                    AliasMemberFlag related_flags = 0;
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_array_int32_t_2", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        TypeIdentifier* element_identifier;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Array element TypeIdentifier inconsistent.");
                        }
                        EquivalenceKind equiv_kind = EK_COMPLETE;
                        if (TK_NONE == type_ids.type_identifier2()._d())
                        {
                            equiv_kind = EK_BOTH;
                        }
                        CollectionElementFlag element_flags = 0;
                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                        {
                            SBoundSeq array_bound_seq;
                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            LBoundSeq array_bound_seq;
                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_int32_t_2", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_int32_t_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyMiniArray related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                    CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyMiniArray already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyMiniArray", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyMiniArray: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_array_int32_t_2_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_anonymous_array_int32_t_2_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_array_int32_t_2_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_anonymous_array_int32_t_2_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_anonymous_array_int32_t_2_5", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_anonymous_array_int32_t_2_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000012;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array_arrays member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_array_arrays";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_anonymous_sequence_int32_t_unbounded_23", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MySequenceLong", type_ids);

                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    AliasTypeFlag alias_flags = 0;
                    QualifiedTypeName type_name = "MySequenceLong";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                    AliasMemberFlag related_flags = 0;
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_sequence_int32_t_unbounded", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        TypeIdentifier* element_identifier;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Sequence element TypeIdentifier inconsistent.");
                        }
                        EquivalenceKind equiv_kind = EK_COMPLETE;
                        if (TK_NONE == type_ids.type_identifier2()._d())
                        {
                            equiv_kind = EK_BOTH;
                        }
                        CollectionElementFlag element_flags = 0;
                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                        std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                        if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                        {
                            SBound bound = 0;
                            PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            LBound bound = 0;
                            PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_sequence_int32_t_unbounded", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_int32_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonAliasBody common;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MySequenceLong related TypeIdentifier inconsistent.");
                        return;
                    }
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                    CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MySequenceLong already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MySequenceLong", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MySequenceLong: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier;
                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                {
                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                }
                EquivalenceKind equiv_kind = EK_COMPLETE;
                if (TK_NONE == type_ids.type_identifier2()._d())
                {
                    equiv_kind = EK_BOTH;
                }
                CollectionElementFlag element_flags = 0;
                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(23));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_sequence_int32_t_unbounded_23"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_anonymous_sequence_int32_t_unbounded_23 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(23));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_sequence_int32_t_unbounded_23"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_anonymous_sequence_int32_t_unbounded_23 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_anonymous_sequence_int32_t_unbounded_23", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_anonymous_sequence_int32_t_unbounded_23: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000013;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequences_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_sequences_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ComplexStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ComplexStruct", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ComplexStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MyUnion_type_identifier()
{
    {
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name = "MyUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
        UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(TryConstructKind::NOT_APPLIED,
                false);
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MyEnum", type_ids);

        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EnumTypeFlag enum_flags = 0;
            BitBound bit_bound = 32;
            CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
            QualifiedTypeName type_name = "MyEnum";
            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
            CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
            CompleteEnumeratedLiteralSeq literal_seq;
            int32_t value = 0; // TODO(jlbueno): remove
            {
                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                // TODO(jlbueno): getIndex
                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                value++; // TODO(jlbueno): remove
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                MemberName name = "A";
                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
            }
            {
                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                // TODO(jlbueno): getIndex
                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                value++; // TODO(jlbueno): remove
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                MemberName name = "B";
                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
            }
            {
                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                // TODO(jlbueno): getIndex
                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                value++; // TODO(jlbueno): remove
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                MemberName name = "C";
                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
            }
            CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                    literal_seq);
            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                    TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyEnum already registered in TypeObjectRegistry for a different type.");
            }
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyEnum", type_ids);
            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
        }
        CommonDiscriminatorMember common;
        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin.reset();
        ann_custom.reset();
        CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                type_ann_builtin, ann_custom);
        CompleteUnionMemberSeq member_seq;
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "BasicStruct", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "BasicStruct";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_bool", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_bool member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_bool";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_octet member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_octet";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int16_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_int16 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_int16";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000003;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_int32 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_int32";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000004;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_int64 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_int64";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint16_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000005;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_uint16 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_uint16";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000006;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_uint32 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_uint32";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000007;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_uint64 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_uint64";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000008;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_float32 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_float32";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_double", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000009;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_float64 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_float64";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_longdouble", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000a;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_float128 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_float128";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_char", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000b;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_char member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_char";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000c;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_string member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_string";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "BasicStruct already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "BasicStruct", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnum::A));
            CommonUnionMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union basic member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "basic";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "ComplexStruct", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "ComplexStruct";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_octet member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_octet";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "BasicStruct", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "BasicStruct";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_bool", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_bool member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_bool";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_byte", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_octet";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int16_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000002;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_int16 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_int16";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000003;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_int32 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_int32";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int64_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000004;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_int64 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_int64";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint16_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000005;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_uint16 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_uint16";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000006;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_uint32 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_uint32";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint64_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000007;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_uint64 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_uint64";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_float", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000008;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_float32 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_float32";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_double", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000009;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_float64 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_float64";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_longdouble", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000a;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_float128 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_float128";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_char", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000b;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_char member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_char";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        std::string type_id_kind("TI_STRING8_SMALL");
                                        if (type_id_kind == "TI_STRING8_SMALL")
                                        {
                                            SBound bound = 0;
                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                    "anonymous_string_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else if (type_id_kind == "TI_STRING8_LARGE")
                                        {
                                            LBound bound = 255;
                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                    "anonymous_string_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded: Unknown String kind.");
                                            return;
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_unbounded", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000c;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_string member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_string";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "BasicStruct", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_basic_struct member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_basic_struct";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyAliasEnum", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags = 0;
                            QualifiedTypeName type_name = "MyAliasEnum";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                            CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                            AliasMemberFlag related_flags = 0;
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyEnum", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EnumTypeFlag enum_flags = 0;
                                BitBound bit_bound = 32;
                                CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                                QualifiedTypeName type_name = "MyEnum";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                                CompleteEnumeratedLiteralSeq literal_seq;
                                int32_t value = 0; // TODO(jlbueno): remove
                                {
                                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    // TODO(jlbueno): getIndex
                                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                    value++; // TODO(jlbueno): remove
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    MemberName name = "A";
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                }
                                {
                                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    // TODO(jlbueno): getIndex
                                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                    value++; // TODO(jlbueno): remove
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    MemberName name = "B";
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                }
                                {
                                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                    // TODO(jlbueno): getIndex
                                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                    value++; // TODO(jlbueno): remove
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    MemberName name = "C";
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                }
                                CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                                        literal_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyEnum", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyAliasEnum related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                            CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyAliasEnum already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyAliasEnum", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_alias_enum member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_alias_enum";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyEnum", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EnumTypeFlag enum_flags = 0;
                            BitBound bit_bound = 32;
                            CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                            QualifiedTypeName type_name = "MyEnum";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                            CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                            CompleteEnumeratedLiteralSeq literal_seq;
                            int32_t value = 0; // TODO(jlbueno): remove
                            {
                                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                // TODO(jlbueno): getIndex
                                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                value++; // TODO(jlbueno): remove
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                MemberName name = "A";
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                            }
                            {
                                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                // TODO(jlbueno): getIndex
                                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                value++; // TODO(jlbueno): remove
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                MemberName name = "B";
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                            }
                            {
                                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                // TODO(jlbueno): getIndex
                                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                value++; // TODO(jlbueno): remove
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                MemberName name = "C";
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                            }
                            CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                                    literal_seq);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyEnum already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyEnum", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000003;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_enum member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_enum";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_sequence_uint8_t_55", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Sequence element TypeIdentifier inconsistent.");
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                            if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                            {
                                SBound bound = static_cast<SBound>(55);
                                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint8_t_55"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_uint8_t_55 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 55;
                                PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint8_t_55"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_uint8_t_55 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_sequence_uint8_t_55", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_uint8_t_55: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000004;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_sequence_octet member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_sequence_octet";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_sequence_BasicStruct_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "BasicStruct", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                {
                                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                            false, false);
                                    ReturnCode_t return_code;
                                    TypeIdentifierPair type_ids;
                                    QualifiedTypeName type_name = "BasicStruct";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                    CompleteStructHeader header;
                                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                    CompleteStructMemberSeq member_seq;
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_bool", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000000;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_bool member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_bool";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000001;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_octet member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_octet";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int16_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000002;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int16 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int16";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000003;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int64_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000004;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint16_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000005;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint16 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint16";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000006;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint64_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000007;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_float", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000008;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_double", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000009;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_longdouble", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000a;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float128 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float128";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_char", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000b;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_char member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_char";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_unbounded", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            std::string type_id_kind("TI_STRING8_SMALL");
                                            if (type_id_kind == "TI_STRING8_SMALL")
                                            {
                                                SBound bound = 0;
                                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                        "anonymous_string_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else if (type_id_kind == "TI_STRING8_LARGE")
                                            {
                                                LBound bound = 255;
                                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                        "anonymous_string_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_unbounded: Unknown String kind.");
                                                return;
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_string_unbounded", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000c;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_string member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_string";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "BasicStruct", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Sequence element TypeIdentifier inconsistent.");
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                            if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                            {
                                SBound bound = 0;
                                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_BasicStruct_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_BasicStruct_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_sequence_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_sequence_BasicStruct_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_BasicStruct_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000005;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_sequence_struct member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_sequence_struct";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_char_500_5_4", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_char", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_LARGE");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(500));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_char_500_5_4"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_char_500_5_4 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(500));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_char_500_5_4"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_char_500_5_4 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_char_500_5_4", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_char_500_5_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000006;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_array_octet member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_array_octet";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyOctetArray500", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags = 0;
                            QualifiedTypeName type_name = "MyOctetArray500";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                            CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                            AliasMemberFlag related_flags = 0;
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_uint8_t_500", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_byte", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* element_identifier;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier inconsistent.");
                                }
                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                if (TK_NONE == type_ids.type_identifier2()._d())
                                {
                                    equiv_kind = EK_BOTH;
                                }
                                CollectionElementFlag element_flags = 0;
                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                std::string type_id_kind("TI_PLAIN_ARRAY_LARGE");
                                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                {
                                    SBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(500));

                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_500"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(500));

                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_500"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_array_uint8_t_500", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_uint8_t_500: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyOctetArray500 related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                            CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyOctetArray500 already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyOctetArray500", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyOctetArray500: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000007;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_octet_array_500 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_octet_array_500";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_BasicStruct_5", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "BasicStruct", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                {
                                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                            false, false);
                                    ReturnCode_t return_code;
                                    TypeIdentifierPair type_ids;
                                    QualifiedTypeName type_name = "BasicStruct";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                    CompleteStructHeader header;
                                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                    CompleteStructMemberSeq member_seq;
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_bool", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000000;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_bool member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_bool";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000001;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_octet member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_octet";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int16_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000002;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int16 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int16";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000003;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int64_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000004;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint16_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000005;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint16 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint16";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000006;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint64_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000007;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_float", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000008;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_double", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000009;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_longdouble", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000a;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float128 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float128";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_char", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000b;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_char member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_char";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_unbounded", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            std::string type_id_kind("TI_STRING8_SMALL");
                                            if (type_id_kind == "TI_STRING8_SMALL")
                                            {
                                                SBound bound = 0;
                                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                        "anonymous_string_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else if (type_id_kind == "TI_STRING8_LARGE")
                                            {
                                                LBound bound = 255;
                                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                        "anonymous_string_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_unbounded: Unknown String kind.");
                                                return;
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_string_unbounded", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000c;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_string member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_string";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "BasicStruct", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_BasicStruct_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_BasicStruct_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_BasicStruct_5", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_BasicStruct_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000008;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_array_struct member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_array_struct";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_uint8_t_int16_t_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int16_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_uint8_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_byte", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* key_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_uint8_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                            }
                            EquivalenceKind equiv_kind = EK_BOTH;
                            if (EK_COMPLETE == element_identifier->_d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                    TK_NONE != type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_COMPLETE;
                            }
                            CollectionElementFlag element_flags = 0;
                            CollectionElementFlag key_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                            if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                            {
                                SBound bound = 0;
                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint8_t_int16_t_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_uint8_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_uint8_t_int16_t_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_uint8_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_uint8_t_int16_t_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_uint8_t_int16_t_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000009;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_map_octet_short member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_map_octet_short";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_int32_t_BasicStruct_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "BasicStruct", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                {
                                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                            false, false);
                                    ReturnCode_t return_code;
                                    TypeIdentifierPair type_ids;
                                    QualifiedTypeName type_name = "BasicStruct";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                    CompleteStructHeader header;
                                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                    CompleteStructMemberSeq member_seq;
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_bool", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000000;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_bool member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_bool";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000001;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_octet member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_octet";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int16_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000002;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int16 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int16";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000003;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int64_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000004;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_int64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_int64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint16_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000005;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint16 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint16";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000006;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_uint64_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000007;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_uint64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_uint64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_float", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000008;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float32 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float32";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_double", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x00000009;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float64 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float64";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_longdouble", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000a;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_float128 member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_float128";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_char", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000b;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_char member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_char";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    {
                                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                false, false, false, false);
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_unbounded", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            std::string type_id_kind("TI_STRING8_SMALL");
                                            if (type_id_kind == "TI_STRING8_SMALL")
                                            {
                                                SBound bound = 0;
                                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                        "anonymous_string_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else if (type_id_kind == "TI_STRING8_LARGE")
                                            {
                                                LBound bound = 255;
                                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                        "anonymous_string_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_unbounded: Unknown String kind.");
                                                return;
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_string_unbounded", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonStructMember common;
                                        MemberId member_id = 0x0000000c;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Structure my_string member TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        MemberName name = "my_string";
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                    }
                                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "BasicStruct", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_BasicStruct_unbounded inconsistent element TypeIdentifier.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* key_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_BasicStruct_unbounded inconsistent key TypeIdentifier.");
                            }
                            EquivalenceKind equiv_kind = EK_BOTH;
                            if (EK_COMPLETE == element_identifier->_d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                    TK_NONE != type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_COMPLETE;
                            }
                            CollectionElementFlag element_flags = 0;
                            CollectionElementFlag key_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                            if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                            {
                                SBound bound = 0;
                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_BasicStruct_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_BasicStruct_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_int32_t_BasicStruct_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int32_t_BasicStruct_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000a;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_map_long_struct member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_map_long_struct";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_sequence_uint8_t_unbounded", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_byte", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    TypeIdentifier* element_identifier;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Sequence element TypeIdentifier inconsistent.");
                                    }
                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                    {
                                        equiv_kind = EK_BOTH;
                                    }
                                    CollectionElementFlag element_flags = 0;
                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                    std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                                    if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                                    {
                                        SBound bound = 0;
                                        PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint8_t_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_sequence_uint8_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        LBound bound = 0;
                                        PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint8_t_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_sequence_uint8_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_sequence_uint8_t_unbounded", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_sequence_uint8_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* element_identifier;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Sequence element TypeIdentifier inconsistent.");
                                }
                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                if (TK_NONE == type_ids.type_identifier2()._d())
                                {
                                    equiv_kind = EK_BOTH;
                                }
                                CollectionElementFlag element_flags = 0;
                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                                if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                                {
                                    SBound bound = 0;
                                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 0;
                                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded inconsistent element TypeIdentifier.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* key_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded inconsistent key TypeIdentifier.");
                            }
                            EquivalenceKind equiv_kind = EK_BOTH;
                            if (EK_COMPLETE == element_identifier->_d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                    TK_NONE != type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_COMPLETE;
                            }
                            CollectionElementFlag element_flags = 0;
                            CollectionElementFlag key_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                            if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                            {
                                SBound bound = 0;
                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000b;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_map_long_seq_octet member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_map_long_seq_octet";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyOctetArray500", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags = 0;
                                QualifiedTypeName type_name = "MyOctetArray500";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                AliasMemberFlag related_flags = 0;
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_array_uint8_t_500", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_byte", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    TypeIdentifier* element_identifier;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Array element TypeIdentifier inconsistent.");
                                    }
                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                    {
                                        equiv_kind = EK_BOTH;
                                    }
                                    CollectionElementFlag element_flags = 0;
                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                    std::string type_id_kind("TI_PLAIN_ARRAY_LARGE");
                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                    {
                                        SBoundSeq array_bound_seq;
                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(500));

                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_500"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        LBoundSeq array_bound_seq;
                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(500));

                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_500"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_uint8_t_500", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_uint8_t_500: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyOctetArray500 related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyOctetArray500 already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyOctetArray500", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyOctetArray500: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded inconsistent element TypeIdentifier.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* key_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded inconsistent key TypeIdentifier.");
                            }
                            EquivalenceKind equiv_kind = EK_BOTH;
                            if (EK_COMPLETE == element_identifier->_d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                    TK_NONE != type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_COMPLETE;
                            }
                            CollectionElementFlag element_flags = 0;
                            CollectionElementFlag key_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                            if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                            {
                                SBound bound = 0;
                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000c;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_map_long_octet_array_500 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_map_long_octet_array_500";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "BSAlias5", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    AliasTypeFlag alias_flags = 0;
                                    QualifiedTypeName type_name = "BSAlias5";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                    CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                    AliasMemberFlag related_flags = 0;
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_BasicStruct_5", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "BasicStruct", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            {
                                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                                        false, false);
                                                ReturnCode_t return_code;
                                                TypeIdentifierPair type_ids;
                                                QualifiedTypeName type_name = "BasicStruct";
                                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                CompleteStructHeader header;
                                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                                CompleteStructMemberSeq member_seq;
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_bool", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000000;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_bool member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_bool";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000001;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_octet";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int16_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000002;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int16 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int16";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int32_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000003;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int64_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000004;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint16_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000005;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint16 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint16";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint32_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000006;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint64_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000007;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_float", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000008;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_double", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000009;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_longdouble", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000a;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float128 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float128";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_char", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000b;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_char member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_char";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_string_unbounded", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        std::string type_id_kind("TI_STRING8_SMALL");
                                                        if (type_id_kind == "TI_STRING8_SMALL")
                                                        {
                                                            SBound bound = 0;
                                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                                    "anonymous_string_unbounded"))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                        }
                                                        else if (type_id_kind == "TI_STRING8_LARGE")
                                                        {
                                                            LBound bound = 255;
                                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                                    "anonymous_string_unbounded"))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "anonymous_string_unbounded: Unknown String kind.");
                                                            return;
                                                        }
                                                        return_code =
                                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                            "anonymous_string_unbounded", type_ids);
                                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                            return;
                                                        }
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000c;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_string member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_string";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "BasicStruct", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_BasicStruct_5"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_BasicStruct_5"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_BasicStruct_5", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_BasicStruct_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonAliasBody common;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "BSAlias5 related TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                    CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "BSAlias5 already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "BSAlias5", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "BSAlias5: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* element_identifier;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded inconsistent element TypeIdentifier.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "_byte", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                                TypeIdentifier* key_identifier;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded inconsistent key TypeIdentifier.");
                                }
                                EquivalenceKind equiv_kind = EK_BOTH;
                                if (EK_COMPLETE == element_identifier->_d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                        TK_NONE != type_ids.type_identifier2()._d())
                                {
                                    equiv_kind = EK_COMPLETE;
                                }
                                CollectionElementFlag element_flags = 0;
                                CollectionElementFlag key_flags = 0;
                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                                if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                                {
                                    SBound bound = 0;
                                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBound bound = 0;
                                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded inconsistent element TypeIdentifier.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "_int32_t", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                            TypeIdentifier* key_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded inconsistent key TypeIdentifier.");
                            }
                            EquivalenceKind equiv_kind = EK_BOTH;
                            if (EK_COMPLETE == element_identifier->_d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                    TK_NONE != type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_COMPLETE;
                            }
                            CollectionElementFlag element_flags = 0;
                            CollectionElementFlag key_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                            if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                            {
                                SBound bound = 0;
                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBound bound = 0;
                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000d;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_map_long_lol_type member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_map_long_lol_type";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_128", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = static_cast<SBound>(128);
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_128"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_128 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 128;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_128"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_128 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_128: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_128", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_128: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000e;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_small_string_8 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_small_string_8";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_500", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_LARGE");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = static_cast<SBound>(500);
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_500"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_500 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 500;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_500"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_500 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_500: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_500", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_500: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000f;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_large_string_8 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_large_string_8";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_anonymous_string_75_5_5", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_75", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                std::string type_id_kind("TI_STRING8_SMALL");
                                if (type_id_kind == "TI_STRING8_SMALL")
                                {
                                    SBound bound = static_cast<SBound>(75);
                                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                            "anonymous_string_75"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_75 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else if (type_id_kind == "TI_STRING8_LARGE")
                                {
                                    LBound bound = 75;
                                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                            "anonymous_string_75"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_75 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_75: Unknown String kind.");
                                    return;
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_string_75", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_string_75: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_string_75_5_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_anonymous_string_75_5_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_string_75_5_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_anonymous_string_75_5_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_anonymous_string_75_5_5", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_anonymous_string_75_5_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000010;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_array_string member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_array_string";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MA3", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            AliasTypeFlag alias_flags = 0;
                            QualifiedTypeName type_name = "MA3";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                            CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                            AliasMemberFlag related_flags = 0;
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_MyAliasEnum3_42", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyAliasEnum3", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    AliasTypeFlag alias_flags = 0;
                                    QualifiedTypeName type_name = "MyAliasEnum3";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                    CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                    AliasMemberFlag related_flags = 0;
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyAliasEnum2", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        AliasTypeFlag alias_flags = 0;
                                        QualifiedTypeName type_name = "MyAliasEnum2";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                        CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                        AliasMemberFlag related_flags = 0;
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyAliasEnum", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            AliasTypeFlag alias_flags = 0;
                                            QualifiedTypeName type_name = "MyAliasEnum";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                            AliasMemberFlag related_flags = 0;
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "MyEnum", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EnumTypeFlag enum_flags = 0;
                                                BitBound bit_bound = 32;
                                                CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                                                QualifiedTypeName type_name = "MyEnum";
                                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                                                CompleteEnumeratedLiteralSeq literal_seq;
                                                int32_t value = 0; // TODO(jlbueno): remove
                                                {
                                                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                                    // TODO(jlbueno): getIndex
                                                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                                    value++; // TODO(jlbueno): remove
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    MemberName name = "A";
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                                }
                                                {
                                                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                                    // TODO(jlbueno): getIndex
                                                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                                    value++; // TODO(jlbueno): remove
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    MemberName name = "B";
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                                }
                                                {
                                                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                                    // TODO(jlbueno): getIndex
                                                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                                    value++; // TODO(jlbueno): remove
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    MemberName name = "C";
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                                }
                                                CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                                                        literal_seq);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "MyEnum", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                            CommonAliasBody common;
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyAliasEnum related TypeIdentifier inconsistent.");
                                                return;
                                            }
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                            ann_custom.reset();
                                            CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                            CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasEnum already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "MyAliasEnum", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "MyAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonAliasBody common;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasEnum2 related TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                        CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasEnum2 already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyAliasEnum2", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyAliasEnum2: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonAliasBody common;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasEnum3 related TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                    CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyAliasEnum3 already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyAliasEnum3", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasEnum3: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                TypeIdentifier* element_identifier;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "Array element TypeIdentifier inconsistent.");
                                }
                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                if (TK_NONE == type_ids.type_identifier2()._d())
                                {
                                    equiv_kind = EK_BOTH;
                                }
                                CollectionElementFlag element_flags = 0;
                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                {
                                    SBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(42));

                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_MyAliasEnum3_42"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_MyAliasEnum3_42 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                else
                                {
                                    LBoundSeq array_bound_seq;
                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(42));

                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_MyAliasEnum3_42"))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_MyAliasEnum3_42 already registered in TypeObjectRegistry for a different type.");
                                    }
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_array_MyAliasEnum3_42", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_MyAliasEnum3_42: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            CommonAliasBody common;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MA3 related TypeIdentifier inconsistent.");
                                return;
                            }
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                            CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MA3 already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MA3", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MA3: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000011;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure multi_alias_array_42 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "multi_alias_array_42";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_anonymous_array_int32_t_2_5", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MyMiniArray", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags = 0;
                                QualifiedTypeName type_name = "MyMiniArray";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                AliasMemberFlag related_flags = 0;
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_array_int32_t_2", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    TypeIdentifier* element_identifier;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Array element TypeIdentifier inconsistent.");
                                    }
                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                    {
                                        equiv_kind = EK_BOTH;
                                    }
                                    CollectionElementFlag element_flags = 0;
                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                    {
                                        SBoundSeq array_bound_seq;
                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        LBoundSeq array_bound_seq;
                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_int32_t_2", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_int32_t_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MyMiniArray related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyMiniArray already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MyMiniArray", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyMiniArray: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_array_int32_t_2_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_anonymous_array_int32_t_2_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_array_int32_t_2_5"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_anonymous_array_int32_t_2_5 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_anonymous_array_int32_t_2_5", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_anonymous_array_int32_t_2_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000012;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_array_arrays member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_array_arrays";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_array_anonymous_sequence_int32_t_unbounded_23", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "MySequenceLong", type_ids);

                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                AliasTypeFlag alias_flags = 0;
                                QualifiedTypeName type_name = "MySequenceLong";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                AliasMemberFlag related_flags = 0;
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "anonymous_sequence_int32_t_unbounded", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    TypeIdentifier* element_identifier;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Sequence element TypeIdentifier inconsistent.");
                                    }
                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                    {
                                        equiv_kind = EK_BOTH;
                                    }
                                    CollectionElementFlag element_flags = 0;
                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                    std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                                    if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                                    {
                                        SBound bound = 0;
                                        PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    else
                                    {
                                        LBound bound = 0;
                                        PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_unbounded"))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                        }
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_sequence_int32_t_unbounded", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_sequence_int32_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonAliasBody common;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "MySequenceLong related TypeIdentifier inconsistent.");
                                    return;
                                }
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MySequenceLong already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "MySequenceLong", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MySequenceLong: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                            TypeIdentifier* element_identifier;
                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                            }
                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                            {
                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Array element TypeIdentifier inconsistent.");
                            }
                            EquivalenceKind equiv_kind = EK_COMPLETE;
                            if (TK_NONE == type_ids.type_identifier2()._d())
                            {
                                equiv_kind = EK_BOTH;
                            }
                            CollectionElementFlag element_flags = 0;
                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                            {
                                SBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(23));

                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_sequence_int32_t_unbounded_23"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_anonymous_sequence_int32_t_unbounded_23 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                LBoundSeq array_bound_seq;
                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(23));

                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_sequence_int32_t_unbounded_23"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_array_anonymous_sequence_int32_t_unbounded_23 already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_array_anonymous_sequence_int32_t_unbounded_23", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_array_anonymous_sequence_int32_t_unbounded_23: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000013;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_sequences_array member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_sequences_array";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "ComplexStruct already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "ComplexStruct", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "ComplexStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnum::B));
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnum::C));
            CommonUnionMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union complex member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "complex";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MyUnion", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MyUnion2_type_identifier()
{
    {
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name = "MyUnion2";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
        UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(TryConstructKind::NOT_APPLIED,
                false);
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_byte", type_ids);

        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common;
        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyUnion2 discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin.reset();
        ann_custom.reset();
        CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                type_ann_builtin, ann_custom);
        CompleteUnionMemberSeq member_seq;
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "uno Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(0));
            CommonUnionMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union uno member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "uno";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(1));
            CommonUnionMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union imString member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "imString";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "tres Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(2));
            CommonUnionMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union tres member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "tres";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyUnion2 already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MyUnion2", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyUnion2: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_CompleteStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "CompleteStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyUnion", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name = "MyUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
                    UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(TryConstructKind::NOT_APPLIED,
                            false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyEnum", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EnumTypeFlag enum_flags = 0;
                        BitBound bit_bound = 32;
                        CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                        QualifiedTypeName type_name = "MyEnum";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                        CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                        CompleteEnumeratedLiteralSeq literal_seq;
                        int32_t value = 0; // TODO(jlbueno): remove
                        {
                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                            // TODO(jlbueno): getIndex
                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                            value++; // TODO(jlbueno): remove
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "A";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                        }
                        {
                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                            // TODO(jlbueno): getIndex
                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                            value++; // TODO(jlbueno): remove
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "B";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                        }
                        {
                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                            // TODO(jlbueno): getIndex
                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                            value++; // TODO(jlbueno): remove
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "C";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                        }
                        CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                                literal_seq);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyEnum already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyEnum", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonDiscriminatorMember common;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin.reset();
                    ann_custom.reset();
                    CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                            type_ann_builtin, ann_custom);
                    CompleteUnionMemberSeq member_seq;
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "BasicStruct", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "BasicStruct";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_bool", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_bool member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_bool";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_byte", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_octet";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int16_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000002;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_int16 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_int16";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000003;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_int32 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_int32";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_int64_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000004;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_int64 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_int64";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint16_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000005;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_uint16 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_uint16";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint32_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000006;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_uint32 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_uint32";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_uint64_t", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000007;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_uint64 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_uint64";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_float", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000008;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_float32 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_float32";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_double", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000009;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_float64 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_float64";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_longdouble", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000a;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_float128 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_float128";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_char", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000b;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_char member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_char";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_unbounded", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        std::string type_id_kind("TI_STRING8_SMALL");
                                        if (type_id_kind == "TI_STRING8_SMALL")
                                        {
                                            SBound bound = 0;
                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                    "anonymous_string_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else if (type_id_kind == "TI_STRING8_LARGE")
                                        {
                                            LBound bound = 255;
                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                    "anonymous_string_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded: Unknown String kind.");
                                            return;
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_unbounded", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000c;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_string member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_string";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "BasicStruct", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnum::A));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union basic member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "basic";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "ComplexStruct", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            {
                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                        false, false);
                                ReturnCode_t return_code;
                                TypeIdentifierPair type_ids;
                                QualifiedTypeName type_name = "ComplexStruct";
                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                CompleteStructHeader header;
                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                CompleteStructMemberSeq member_seq;
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "_byte", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000000;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_octet";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "BasicStruct", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        {
                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                                    false, false);
                                            ReturnCode_t return_code;
                                            TypeIdentifierPair type_ids;
                                            QualifiedTypeName type_name = "BasicStruct";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteStructHeader header;
                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                            CompleteStructMemberSeq member_seq;
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_bool", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000000;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_bool member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_bool";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_byte", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000001;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_octet member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_octet";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_int16_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000002;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_int16 member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_int16";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_int32_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000003;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_int32 member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_int32";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_int64_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000004;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_int64 member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_int64";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_uint16_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000005;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_uint16 member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_uint16";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_uint32_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000006;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_uint32 member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_uint32";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_uint64_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000007;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_uint64 member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_uint64";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_float", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000008;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_float32 member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_float32";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_double", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x00000009;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_float64 member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_float64";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_longdouble", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x0000000a;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_float128 member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_float128";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_char", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x0000000b;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_char member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_char";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            {
                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                        false, false, false, false);
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_string_unbounded", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    std::string type_id_kind("TI_STRING8_SMALL");
                                                    if (type_id_kind == "TI_STRING8_SMALL")
                                                    {
                                                        SBound bound = 0;
                                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                                "anonymous_string_unbounded"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else if (type_id_kind == "TI_STRING8_LARGE")
                                                    {
                                                        LBound bound = 255;
                                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                                "anonymous_string_unbounded"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded: Unknown String kind.");
                                                        return;
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_string_unbounded", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonStructMember common;
                                                MemberId member_id = 0x0000000c;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Structure my_string member TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                MemberName name = "my_string";
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                            }
                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "BasicStruct", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000001;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_basic_struct member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_basic_struct";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyAliasEnum", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        AliasTypeFlag alias_flags = 0;
                                        QualifiedTypeName type_name = "MyAliasEnum";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                        CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                        AliasMemberFlag related_flags = 0;
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyEnum", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EnumTypeFlag enum_flags = 0;
                                            BitBound bit_bound = 32;
                                            CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                                            QualifiedTypeName type_name = "MyEnum";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                                            CompleteEnumeratedLiteralSeq literal_seq;
                                            int32_t value = 0; // TODO(jlbueno): remove
                                            {
                                                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                                // TODO(jlbueno): getIndex
                                                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                                value++; // TODO(jlbueno): remove
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                MemberName name = "A";
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                            }
                                            {
                                                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                                // TODO(jlbueno): getIndex
                                                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                                value++; // TODO(jlbueno): remove
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                MemberName name = "B";
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                            }
                                            {
                                                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                                // TODO(jlbueno): getIndex
                                                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                                value++; // TODO(jlbueno): remove
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                MemberName name = "C";
                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                            }
                                            CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                                                    literal_seq);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyEnum already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "MyEnum", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonAliasBody common;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyAliasEnum related TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                        CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyAliasEnum already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyAliasEnum", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000002;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_alias_enum member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_alias_enum";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyEnum", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EnumTypeFlag enum_flags = 0;
                                        BitBound bit_bound = 32;
                                        CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                                        QualifiedTypeName type_name = "MyEnum";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                        CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                                        CompleteEnumeratedLiteralSeq literal_seq;
                                        int32_t value = 0; // TODO(jlbueno): remove
                                        {
                                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            // TODO(jlbueno): getIndex
                                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                            value++; // TODO(jlbueno): remove
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                            ann_custom.reset();
                                            MemberName name = "A";
                                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                        }
                                        {
                                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            // TODO(jlbueno): getIndex
                                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                            value++; // TODO(jlbueno): remove
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                            ann_custom.reset();
                                            MemberName name = "B";
                                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                        }
                                        {
                                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                            // TODO(jlbueno): getIndex
                                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                            value++; // TODO(jlbueno): remove
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                            ann_custom.reset();
                                            MemberName name = "C";
                                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                        }
                                        CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                                                literal_seq);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyEnum already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyEnum", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000003;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_enum member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_enum";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_sequence_uint8_t_55", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Sequence element TypeIdentifier inconsistent.");
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                                        if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                                        {
                                            SBound bound = static_cast<SBound>(55);
                                            PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint8_t_55"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_sequence_uint8_t_55 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBound bound = 55;
                                            PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint8_t_55"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_sequence_uint8_t_55 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_sequence_uint8_t_55", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_sequence_uint8_t_55: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000004;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_sequence_octet member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_sequence_octet";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_sequence_BasicStruct_unbounded", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "BasicStruct", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            {
                                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                                        false, false);
                                                ReturnCode_t return_code;
                                                TypeIdentifierPair type_ids;
                                                QualifiedTypeName type_name = "BasicStruct";
                                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                CompleteStructHeader header;
                                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                                CompleteStructMemberSeq member_seq;
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_bool", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000000;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_bool member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_bool";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000001;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_octet";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int16_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000002;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int16 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int16";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int32_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000003;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int64_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000004;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint16_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000005;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint16 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint16";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint32_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000006;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint64_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000007;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_float", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000008;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_double", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000009;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_longdouble", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000a;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float128 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float128";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_char", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000b;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_char member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_char";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_string_unbounded", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        std::string type_id_kind("TI_STRING8_SMALL");
                                                        if (type_id_kind == "TI_STRING8_SMALL")
                                                        {
                                                            SBound bound = 0;
                                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                                    "anonymous_string_unbounded"))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                        }
                                                        else if (type_id_kind == "TI_STRING8_LARGE")
                                                        {
                                                            LBound bound = 255;
                                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                                    "anonymous_string_unbounded"))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "anonymous_string_unbounded: Unknown String kind.");
                                                            return;
                                                        }
                                                        return_code =
                                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                            "anonymous_string_unbounded", type_ids);
                                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                            return;
                                                        }
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000c;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_string member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_string";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "BasicStruct", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Sequence element TypeIdentifier inconsistent.");
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                                        if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                                        {
                                            SBound bound = 0;
                                            PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_BasicStruct_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_sequence_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBound bound = 0;
                                            PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_BasicStruct_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_sequence_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_sequence_BasicStruct_unbounded", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_sequence_BasicStruct_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000005;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_sequence_struct member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_sequence_struct";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_char_500_5_4", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_char", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_LARGE");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(500));

                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(4));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_char_500_5_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_char_500_5_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(500));

                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(4));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_char_500_5_4"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_char_500_5_4 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_char_500_5_4", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_char_500_5_4: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000006;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_array_octet member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_array_octet";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MyOctetArray500", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        AliasTypeFlag alias_flags = 0;
                                        QualifiedTypeName type_name = "MyOctetArray500";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                        CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                        AliasMemberFlag related_flags = 0;
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_uint8_t_500", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "_byte", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                            TypeIdentifier* element_identifier;
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier inconsistent.");
                                            }
                                            EquivalenceKind equiv_kind = EK_COMPLETE;
                                            if (TK_NONE == type_ids.type_identifier2()._d())
                                            {
                                                equiv_kind = EK_BOTH;
                                            }
                                            CollectionElementFlag element_flags = 0;
                                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                            std::string type_id_kind("TI_PLAIN_ARRAY_LARGE");
                                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                            {
                                                SBoundSeq array_bound_seq;
                                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(500));

                                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_500"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                LBoundSeq array_bound_seq;
                                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(500));

                                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_500"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_array_uint8_t_500", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_array_uint8_t_500: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonAliasBody common;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyOctetArray500 related TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                        CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MyOctetArray500 already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyOctetArray500", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyOctetArray500: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000007;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_octet_array_500 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_octet_array_500";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_BasicStruct_5", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "BasicStruct", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            {
                                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                                        false, false);
                                                ReturnCode_t return_code;
                                                TypeIdentifierPair type_ids;
                                                QualifiedTypeName type_name = "BasicStruct";
                                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                CompleteStructHeader header;
                                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                                CompleteStructMemberSeq member_seq;
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_bool", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000000;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_bool member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_bool";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000001;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_octet";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int16_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000002;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int16 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int16";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int32_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000003;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int64_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000004;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint16_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000005;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint16 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint16";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint32_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000006;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint64_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000007;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_float", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000008;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_double", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000009;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_longdouble", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000a;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float128 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float128";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_char", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000b;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_char member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_char";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_string_unbounded", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        std::string type_id_kind("TI_STRING8_SMALL");
                                                        if (type_id_kind == "TI_STRING8_SMALL")
                                                        {
                                                            SBound bound = 0;
                                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                                    "anonymous_string_unbounded"))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                        }
                                                        else if (type_id_kind == "TI_STRING8_LARGE")
                                                        {
                                                            LBound bound = 255;
                                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                                    "anonymous_string_unbounded"))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "anonymous_string_unbounded: Unknown String kind.");
                                                            return;
                                                        }
                                                        return_code =
                                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                            "anonymous_string_unbounded", type_ids);
                                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                            return;
                                                        }
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000c;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_string member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_string";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "BasicStruct", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_BasicStruct_5"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_BasicStruct_5"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_BasicStruct_5", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_BasicStruct_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000008;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_array_struct member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_array_struct";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_map_uint8_t_int16_t_unbounded", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int16_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_uint8_t_int16_t_unbounded inconsistent element TypeIdentifier.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_byte", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* key_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_uint8_t_int16_t_unbounded inconsistent key TypeIdentifier.");
                                        }
                                        EquivalenceKind equiv_kind = EK_BOTH;
                                        if (EK_COMPLETE == element_identifier->_d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                                TK_NONE != type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_COMPLETE;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        CollectionElementFlag key_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                                        if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                                        {
                                            SBound bound = 0;
                                            PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint8_t_int16_t_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_uint8_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBound bound = 0;
                                            PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_uint8_t_int16_t_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_uint8_t_int16_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_map_uint8_t_int16_t_unbounded", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_map_uint8_t_int16_t_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000009;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_map_octet_short member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_map_octet_short";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_map_int32_t_BasicStruct_unbounded", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "BasicStruct", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            {
                                                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                                        false, false);
                                                ReturnCode_t return_code;
                                                TypeIdentifierPair type_ids;
                                                QualifiedTypeName type_name = "BasicStruct";
                                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                CompleteStructHeader header;
                                                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                                CompleteStructMemberSeq member_seq;
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_bool", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000000;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_bool member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_bool";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_byte", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000001;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_octet member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_octet";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int16_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000002;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int16 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int16";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int32_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000003;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_int64_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000004;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_int64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_int64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint16_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000005;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint16 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint16";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint32_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000006;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_uint64_t", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000007;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_uint64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_uint64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_float", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000008;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float32 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float32";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_double", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x00000009;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float64 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float64";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_longdouble", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000a;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_float128 member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_float128";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "_char", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000b;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_char member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_char";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                {
                                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                            false, false, false, false);
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_string_unbounded", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        std::string type_id_kind("TI_STRING8_SMALL");
                                                        if (type_id_kind == "TI_STRING8_SMALL")
                                                        {
                                                            SBound bound = 0;
                                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                                    "anonymous_string_unbounded"))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                        }
                                                        else if (type_id_kind == "TI_STRING8_LARGE")
                                                        {
                                                            LBound bound = 255;
                                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                                    "anonymous_string_unbounded"))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "anonymous_string_unbounded: Unknown String kind.");
                                                            return;
                                                        }
                                                        return_code =
                                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                            "anonymous_string_unbounded", type_ids);
                                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                            return;
                                                        }
                                                    }
                                                    CommonStructMember common;
                                                    MemberId member_id = 0x0000000c;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "Structure my_string member TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    MemberName name = "my_string";
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                }
                                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "BasicStruct", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int32_t_BasicStruct_unbounded inconsistent element TypeIdentifier.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* key_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int32_t_BasicStruct_unbounded inconsistent key TypeIdentifier.");
                                        }
                                        EquivalenceKind equiv_kind = EK_BOTH;
                                        if (EK_COMPLETE == element_identifier->_d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                                TK_NONE != type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_COMPLETE;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        CollectionElementFlag key_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                                        if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                                        {
                                            SBound bound = 0;
                                            PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_BasicStruct_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_int32_t_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBound bound = 0;
                                            PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_BasicStruct_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_int32_t_BasicStruct_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_map_int32_t_BasicStruct_unbounded", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_map_int32_t_BasicStruct_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000a;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_map_long_struct member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_map_long_struct";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_sequence_uint8_t_unbounded", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_byte", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                TypeIdentifier* element_identifier;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "Sequence element TypeIdentifier inconsistent.");
                                                }
                                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                                if (TK_NONE == type_ids.type_identifier2()._d())
                                                {
                                                    equiv_kind = EK_BOTH;
                                                }
                                                CollectionElementFlag element_flags = 0;
                                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                                                if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                                                {
                                                    SBound bound = 0;
                                                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint8_t_unbounded"))
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_sequence_uint8_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                                    }
                                                }
                                                else
                                                {
                                                    LBound bound = 0;
                                                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint8_t_unbounded"))
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_sequence_uint8_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                                    }
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_sequence_uint8_t_unbounded", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_sequence_uint8_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                            TypeIdentifier* element_identifier;
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Sequence element TypeIdentifier inconsistent.");
                                            }
                                            EquivalenceKind equiv_kind = EK_COMPLETE;
                                            if (TK_NONE == type_ids.type_identifier2()._d())
                                            {
                                                equiv_kind = EK_BOTH;
                                            }
                                            CollectionElementFlag element_flags = 0;
                                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                            std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                                            if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                                            {
                                                SBound bound = 0;
                                                PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                LBound bound = 0;
                                                PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded inconsistent element TypeIdentifier.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* key_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded inconsistent key TypeIdentifier.");
                                        }
                                        EquivalenceKind equiv_kind = EK_BOTH;
                                        if (EK_COMPLETE == element_identifier->_d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                                TK_NONE != type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_COMPLETE;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        CollectionElementFlag key_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                                        if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                                        {
                                            SBound bound = 0;
                                            PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBound bound = 0;
                                            PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_map_int32_t_anonymous_sequence_anonymous_sequence_uint8_t_unbounded_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000b;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_map_long_seq_octet member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_map_long_seq_octet";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyOctetArray500", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            AliasTypeFlag alias_flags = 0;
                                            QualifiedTypeName type_name = "MyOctetArray500";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                            AliasMemberFlag related_flags = 0;
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_array_uint8_t_500", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_byte", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                TypeIdentifier* element_identifier;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "Array element TypeIdentifier inconsistent.");
                                                }
                                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                                if (TK_NONE == type_ids.type_identifier2()._d())
                                                {
                                                    equiv_kind = EK_BOTH;
                                                }
                                                CollectionElementFlag element_flags = 0;
                                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                std::string type_id_kind("TI_PLAIN_ARRAY_LARGE");
                                                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                {
                                                    SBoundSeq array_bound_seq;
                                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(500));

                                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_500"))
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                                                    }
                                                }
                                                else
                                                {
                                                    LBoundSeq array_bound_seq;
                                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(500));

                                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_500"))
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_array_uint8_t_500 already registered in TypeObjectRegistry for a different type.");
                                                    }
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_uint8_t_500", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_uint8_t_500: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                            CommonAliasBody common;
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyOctetArray500 related TypeIdentifier inconsistent.");
                                                return;
                                            }
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                            ann_custom.reset();
                                            CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                            CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyOctetArray500 already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "MyOctetArray500", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "MyOctetArray500: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded inconsistent element TypeIdentifier.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* key_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded inconsistent key TypeIdentifier.");
                                        }
                                        EquivalenceKind equiv_kind = EK_BOTH;
                                        if (EK_COMPLETE == element_identifier->_d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                                TK_NONE != type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_COMPLETE;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        CollectionElementFlag key_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                                        if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                                        {
                                            SBound bound = 0;
                                            PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBound bound = 0;
                                            PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_map_int32_t_anonymous_array_uint8_t_500_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000c;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_map_long_octet_array_500 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_map_long_octet_array_500";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "BSAlias5", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                AliasTypeFlag alias_flags = 0;
                                                QualifiedTypeName type_name = "BSAlias5";
                                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                                AliasMemberFlag related_flags = 0;
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_BasicStruct_5", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "BasicStruct", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        {
                                                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                                                    false, false);
                                                            ReturnCode_t return_code;
                                                            TypeIdentifierPair type_ids;
                                                            QualifiedTypeName type_name = "BasicStruct";
                                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                            CompleteStructHeader header;
                                                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                                                            CompleteStructMemberSeq member_seq;
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_bool", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000000;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_bool member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_bool";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_byte", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000001;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_octet member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_octet";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_int16_t", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000002;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_int16 member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_int16";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_int32_t", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000003;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_int32 member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_int32";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_int64_t", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000004;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_int64 member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_int64";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_uint16_t", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000005;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_uint16 member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_uint16";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_uint32_t", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000006;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_uint32 member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_uint32";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_uint64_t", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000007;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_uint64 member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_uint64";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_float", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000008;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_float32 member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_float32";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_double", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x00000009;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_float64 member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_float64";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_longdouble", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x0000000a;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_float128 member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_float128";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "_char", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                                                                    return;
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x0000000b;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_char member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_char";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            {
                                                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                                                        false, false, false, false);
                                                                return_code =
                                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                    "anonymous_string_unbounded", type_ids);

                                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                {
                                                                    std::string type_id_kind("TI_STRING8_SMALL");
                                                                    if (type_id_kind == "TI_STRING8_SMALL")
                                                                    {
                                                                        SBound bound = 0;
                                                                        StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                                TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                                                "anonymous_string_unbounded"))
                                                                        {
                                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                                        }
                                                                    }
                                                                    else if (type_id_kind == "TI_STRING8_LARGE")
                                                                    {
                                                                        LBound bound = 255;
                                                                        StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                                TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                                                "anonymous_string_unbounded"))
                                                                        {
                                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                                "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                                    "anonymous_string_unbounded: Unknown String kind.");
                                                                        return;
                                                                    }
                                                                    return_code =
                                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                        "anonymous_string_unbounded", type_ids);
                                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                                    {
                                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                                    "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                                        return;
                                                                    }
                                                                }
                                                                CommonStructMember common;
                                                                MemberId member_id = 0x0000000c;
                                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                                                }
                                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                                {
                                                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                                                }
                                                                else
                                                                {
                                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "Structure my_string member TypeIdentifier inconsistent.");
                                                                    return;
                                                                }
                                                                MemberName name = "my_string";
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                                            }
                                                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "BasicStruct already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                            return_code =
                                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                "BasicStruct", type_ids);
                                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    TypeIdentifier* element_identifier;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier inconsistent.");
                                                    }
                                                    EquivalenceKind equiv_kind = EK_COMPLETE;
                                                    if (TK_NONE == type_ids.type_identifier2()._d())
                                                    {
                                                        equiv_kind = EK_BOTH;
                                                    }
                                                    CollectionElementFlag element_flags = 0;
                                                    PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                    std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                    if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                    {
                                                        SBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                                        PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_BasicStruct_5"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        LBoundSeq array_bound_seq;
                                                            TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                                        PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_BasicStruct_5"))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_BasicStruct_5 already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "anonymous_array_BasicStruct_5", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "anonymous_array_BasicStruct_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonAliasBody common;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "BSAlias5 related TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "BSAlias5 already registered in TypeObjectRegistry for a different type.");
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "BSAlias5", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "BSAlias5: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                            TypeIdentifier* element_identifier;
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded inconsistent element TypeIdentifier.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "_byte", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                            TypeIdentifier* key_identifier;
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded inconsistent key TypeIdentifier.");
                                            }
                                            EquivalenceKind equiv_kind = EK_BOTH;
                                            if (EK_COMPLETE == element_identifier->_d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                                    TK_NONE != type_ids.type_identifier2()._d())
                                            {
                                                equiv_kind = EK_COMPLETE;
                                            }
                                            CollectionElementFlag element_flags = 0;
                                            CollectionElementFlag key_flags = 0;
                                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                            std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                                            if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                                            {
                                                SBound bound = 0;
                                                PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                LBound bound = 0;
                                                PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                            eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded inconsistent element TypeIdentifier.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "_int32_t", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                        TypeIdentifier* key_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            key_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded inconsistent key TypeIdentifier.");
                                        }
                                        EquivalenceKind equiv_kind = EK_BOTH;
                                        if (EK_COMPLETE == element_identifier->_d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == element_identifier->_d() && EK_COMPLETE == element_identifier->map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == element_identifier->_d() && EK_COMPLETE == element_identifier->map_ldefn().header().equiv_kind()) ||
                                                TK_NONE != type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_COMPLETE;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        CollectionElementFlag key_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_MAP_SMALL");
                                        if (type_id_kind == "TI_PLAIN_MAP_SMALL")
                                        {
                                            SBound bound = 0;
                                            PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBound bound = 0;
                                            PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header, bound,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier), key_flags,
                                                        eprosima::fastcdr::external<TypeIdentifier>(key_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_map_int32_t_anonymous_map_uint8_t_anonymous_array_BasicStruct_5_unbounded_unbounded: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000d;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_map_long_lol_type member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_map_long_lol_type";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_128", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        std::string type_id_kind("TI_STRING8_SMALL");
                                        if (type_id_kind == "TI_STRING8_SMALL")
                                        {
                                            SBound bound = static_cast<SBound>(128);
                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                    "anonymous_string_128"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_128 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else if (type_id_kind == "TI_STRING8_LARGE")
                                        {
                                            LBound bound = 128;
                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                    "anonymous_string_128"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_128 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_128: Unknown String kind.");
                                            return;
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_128", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_128: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000e;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_small_string_8 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_small_string_8";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_string_500", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        std::string type_id_kind("TI_STRING8_LARGE");
                                        if (type_id_kind == "TI_STRING8_SMALL")
                                        {
                                            SBound bound = static_cast<SBound>(500);
                                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                    "anonymous_string_500"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_500 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else if (type_id_kind == "TI_STRING8_LARGE")
                                        {
                                            LBound bound = 500;
                                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                    "anonymous_string_500"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_string_500 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_500: Unknown String kind.");
                                            return;
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_500", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_500: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x0000000f;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_large_string_8 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_large_string_8";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_anonymous_string_75_5_5", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_string_75", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            std::string type_id_kind("TI_STRING8_SMALL");
                                            if (type_id_kind == "TI_STRING8_SMALL")
                                            {
                                                SBound bound = static_cast<SBound>(75);
                                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                                        "anonymous_string_75"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_75 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else if (type_id_kind == "TI_STRING8_LARGE")
                                            {
                                                LBound bound = 75;
                                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                                        "anonymous_string_75"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_string_75 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_75: Unknown String kind.");
                                                return;
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_string_75", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_string_75: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_string_75_5_5"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_anonymous_string_75_5_5 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_string_75_5_5"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_anonymous_string_75_5_5 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_anonymous_string_75_5_5", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_anonymous_string_75_5_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000010;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_array_string member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_array_string";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "MA3", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        AliasTypeFlag alias_flags = 0;
                                        QualifiedTypeName type_name = "MA3";
                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                        CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                        AliasMemberFlag related_flags = 0;
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_MyAliasEnum3_42", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "MyAliasEnum3", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                AliasTypeFlag alias_flags = 0;
                                                QualifiedTypeName type_name = "MyAliasEnum3";
                                                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                                AliasMemberFlag related_flags = 0;
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "MyAliasEnum2", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    AliasTypeFlag alias_flags = 0;
                                                    QualifiedTypeName type_name = "MyAliasEnum2";
                                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                    CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                                    AliasMemberFlag related_flags = 0;
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "MyAliasEnum", type_ids);

                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        AliasTypeFlag alias_flags = 0;
                                                        QualifiedTypeName type_name = "MyAliasEnum";
                                                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                        CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                                        AliasMemberFlag related_flags = 0;
                                                        return_code =
                                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                            "MyEnum", type_ids);

                                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                        {
                                                            EnumTypeFlag enum_flags = 0;
                                                            BitBound bit_bound = 32;
                                                            CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                                                            QualifiedTypeName type_name = "MyEnum";
                                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                                            CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                                                            CompleteEnumeratedLiteralSeq literal_seq;
                                                            int32_t value = 0; // TODO(jlbueno): remove
                                                            {
                                                                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                                                // TODO(jlbueno): getIndex
                                                                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                                                value++; // TODO(jlbueno): remove
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                MemberName name = "A";
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                                            }
                                                            {
                                                                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                                                // TODO(jlbueno): getIndex
                                                                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                                                value++; // TODO(jlbueno): remove
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                MemberName name = "B";
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                                            }
                                                            {
                                                                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                                                                // TODO(jlbueno): getIndex
                                                                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(value, flags);
                                                                value++; // TODO(jlbueno): remove
                                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                                ann_custom.reset();
                                                                MemberName name = "C";
                                                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                                                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                                                                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                                                            }
                                                            CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                                                                    literal_seq);
                                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                    TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "MyEnum already registered in TypeObjectRegistry for a different type.");
                                                            }
                                                            return_code =
                                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                                "MyEnum", type_ids);
                                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                            {
                                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                            "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                                                return;
                                                            }
                                                        }
                                                        CommonAliasBody common;
                                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                        {
                                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                                        }
                                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                        {
                                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                                        }
                                                        else
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "MyAliasEnum related TypeIdentifier inconsistent.");
                                                            return;
                                                        }
                                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                        ann_custom.reset();
                                                        CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                                        CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                                TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "MyAliasEnum already registered in TypeObjectRegistry for a different type.");
                                                        }
                                                        return_code =
                                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                            "MyAliasEnum", type_ids);
                                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                        {
                                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                        "MyAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                                            return;
                                                        }
                                                    }
                                                    CommonAliasBody common;
                                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                                    }
                                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                    {
                                                        common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                                    }
                                                    else
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "MyAliasEnum2 related TypeIdentifier inconsistent.");
                                                        return;
                                                    }
                                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                    ann_custom.reset();
                                                    CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                                    CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                            TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "MyAliasEnum2 already registered in TypeObjectRegistry for a different type.");
                                                    }
                                                    return_code =
                                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                        "MyAliasEnum2", type_ids);
                                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                    "MyAliasEnum2: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                                        return;
                                                    }
                                                }
                                                CommonAliasBody common;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "MyAliasEnum3 related TypeIdentifier inconsistent.");
                                                    return;
                                                }
                                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                                ann_custom.reset();
                                                CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                                CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyAliasEnum3 already registered in TypeObjectRegistry for a different type.");
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "MyAliasEnum3", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "MyAliasEnum3: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                            TypeIdentifier* element_identifier;
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "Array element TypeIdentifier inconsistent.");
                                            }
                                            EquivalenceKind equiv_kind = EK_COMPLETE;
                                            if (TK_NONE == type_ids.type_identifier2()._d())
                                            {
                                                equiv_kind = EK_BOTH;
                                            }
                                            CollectionElementFlag element_flags = 0;
                                            PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                            std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                            if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                            {
                                                SBoundSeq array_bound_seq;
                                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(42));

                                                PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_MyAliasEnum3_42"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_MyAliasEnum3_42 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            else
                                            {
                                                LBoundSeq array_bound_seq;
                                                    TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(42));

                                                PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                            eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                        TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_MyAliasEnum3_42"))
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_MyAliasEnum3_42 already registered in TypeObjectRegistry for a different type.");
                                                }
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_array_MyAliasEnum3_42", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_array_MyAliasEnum3_42: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        CommonAliasBody common;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MA3 related TypeIdentifier inconsistent.");
                                            return;
                                        }
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                        CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "MA3 already registered in TypeObjectRegistry for a different type.");
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MA3", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MA3: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000011;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure multi_alias_array_42 member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "multi_alias_array_42";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_anonymous_array_int32_t_2_5", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MyMiniArray", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            AliasTypeFlag alias_flags = 0;
                                            QualifiedTypeName type_name = "MyMiniArray";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                            AliasMemberFlag related_flags = 0;
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_array_int32_t_2", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_int32_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                TypeIdentifier* element_identifier;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "Array element TypeIdentifier inconsistent.");
                                                }
                                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                                if (TK_NONE == type_ids.type_identifier2()._d())
                                                {
                                                    equiv_kind = EK_BOTH;
                                                }
                                                CollectionElementFlag element_flags = 0;
                                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                                if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                                {
                                                    SBoundSeq array_bound_seq;
                                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                                                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2"))
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                                    }
                                                }
                                                else
                                                {
                                                    LBoundSeq array_bound_seq;
                                                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                                                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2"))
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                                                    }
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_array_int32_t_2", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_array_int32_t_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                            CommonAliasBody common;
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MyMiniArray related TypeIdentifier inconsistent.");
                                                return;
                                            }
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                            ann_custom.reset();
                                            CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                            CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MyMiniArray already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "MyMiniArray", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "MyMiniArray: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_array_int32_t_2_5"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_anonymous_array_int32_t_2_5 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_array_int32_t_2_5"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_anonymous_array_int32_t_2_5 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_anonymous_array_int32_t_2_5", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_anonymous_array_int32_t_2_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000012;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_array_arrays member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_array_arrays";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                {
                                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                            false, false, false, false);
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "anonymous_array_anonymous_sequence_int32_t_unbounded_23", type_ids);

                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "MySequenceLong", type_ids);

                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            AliasTypeFlag alias_flags = 0;
                                            QualifiedTypeName type_name = "MySequenceLong";
                                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                            CompleteAliasHeader header = TypeObjectUtils::build_complete_alias_header(detail);
                                            AliasMemberFlag related_flags = 0;
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "anonymous_sequence_int32_t_unbounded", type_ids);

                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "_int32_t", type_ids);

                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                                TypeIdentifier* element_identifier;
                                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                                {
                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                                }
                                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                                {
                                                    element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                                }
                                                else
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "Sequence element TypeIdentifier inconsistent.");
                                                }
                                                EquivalenceKind equiv_kind = EK_COMPLETE;
                                                if (TK_NONE == type_ids.type_identifier2()._d())
                                                {
                                                    equiv_kind = EK_BOTH;
                                                }
                                                CollectionElementFlag element_flags = 0;
                                                PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                                std::string type_id_kind("TI_PLAIN_SEQUENCE_SMALL");
                                                if (type_id_kind == "TI_PLAIN_SEQUENCE_SMALL")
                                                {
                                                    SBound bound = 0;
                                                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header, bound,
                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_unbounded"))
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                                    }
                                                }
                                                else
                                                {
                                                    LBound bound = 0;
                                                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header, bound,
                                                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_unbounded"))
                                                    {
                                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "anonymous_sequence_int32_t_unbounded already registered in TypeObjectRegistry for a different type.");
                                                    }
                                                }
                                                return_code =
                                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                    "anonymous_sequence_int32_t_unbounded", type_ids);
                                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                                {
                                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                                "anonymous_sequence_int32_t_unbounded: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                                                    return;
                                                }
                                            }
                                            CommonAliasBody common;
                                            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                            {
                                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier1());
                                            }
                                            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                            {
                                                common = TypeObjectUtils::build_common_alias_body(related_flags, type_ids.type_identifier2());
                                            }
                                            else
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "MySequenceLong related TypeIdentifier inconsistent.");
                                                return;
                                            }
                                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                            ann_custom.reset();
                                            CompleteAliasBody body = TypeObjectUtils::build_complete_alias_body(common, member_ann_builtin, ann_custom);
                                            CompleteAliasType alias_type = TypeObjectUtils::build_complete_alias_type(alias_flags, header, body);
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_alias_type_object(alias_type, type_name.to_string()))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "MySequenceLong already registered in TypeObjectRegistry for a different type.");
                                            }
                                            return_code =
                                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                                "MySequenceLong", type_ids);
                                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                            "MySequenceLong: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                                                return;
                                            }
                                        }
                                        TypeIdentifier* element_identifier;
                                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier1());
                                        }
                                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                        {
                                            element_identifier = new TypeIdentifier(type_ids.type_identifier2());
                                        }
                                        else
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Array element TypeIdentifier inconsistent.");
                                        }
                                        EquivalenceKind equiv_kind = EK_COMPLETE;
                                        if (TK_NONE == type_ids.type_identifier2()._d())
                                        {
                                            equiv_kind = EK_BOTH;
                                        }
                                        CollectionElementFlag element_flags = 0;
                                        PlainCollectionHeader header = TypeObjectUtils::build_plain_collection_header(equiv_kind, element_flags);
                                        std::string type_id_kind("TI_PLAIN_ARRAY_SMALL");
                                        if (type_id_kind == "TI_PLAIN_ARRAY_SMALL")
                                        {
                                            SBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(23));

                                            PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_anonymous_sequence_int32_t_unbounded_23"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_anonymous_sequence_int32_t_unbounded_23 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        else
                                        {
                                            LBoundSeq array_bound_seq;
                                                TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(23));

                                            PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header, array_bound_seq,
                                                        eprosima::fastcdr::external<TypeIdentifier>(element_identifier));
                                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                                    TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_anonymous_sequence_int32_t_unbounded_23"))
                                            {
                                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "anonymous_array_anonymous_sequence_int32_t_unbounded_23 already registered in TypeObjectRegistry for a different type.");
                                            }
                                        }
                                        return_code =
                                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                            "anonymous_array_anonymous_sequence_int32_t_unbounded_23", type_ids);
                                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                        {
                                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                        "anonymous_array_anonymous_sequence_int32_t_unbounded_23: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                                            return;
                                        }
                                    }
                                    CommonStructMember common;
                                    MemberId member_id = 0x00000013;
                                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                    }
                                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                    {
                                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                    }
                                    else
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "Structure my_sequences_array member TypeIdentifier inconsistent.");
                                        return;
                                    }
                                    MemberName name = "my_sequences_array";
                                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                    ann_custom.reset();
                                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                                }
                                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "ComplexStruct already registered in TypeObjectRegistry for a different type.");
                                }
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "ComplexStruct", type_ids);
                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                "ComplexStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                    return;
                                }
                            }
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnum::B));
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnum::C));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union complex member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "complex";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                            member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyUnion", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyUnion2", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name = "MyUnion2";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
                    UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(TryConstructKind::NOT_APPLIED,
                            false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_byte", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyUnion2 discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin.reset();
                    ann_custom.reset();
                    CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                            type_ann_builtin, ann_custom);
                    CompleteUnionMemberSeq member_seq;
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "uno Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(0));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union uno member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "uno";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(1));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union imString member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "imString";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "tres Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(2));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union tres member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "tres";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                            member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyUnion2 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyUnion2", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyUnion2: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union_2 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_union_2";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "CompleteStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "CompleteStruct", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "CompleteStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_KeyedStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "KeyedStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, true, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "key Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure key member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "key";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "BasicStruct", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    QualifiedTypeName type_name = "BasicStruct";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_bool", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_bool member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_bool";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_octet Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_octet member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_octet";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int16_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_int16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_int16 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_int16";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000003;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_int32 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_int32";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_int64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000004;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_int64 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_int64";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint16_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_uint16 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000005;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_uint16 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_uint16";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_uint32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000006;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_uint32 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_uint32";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_uint64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_uint64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000007;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_uint64 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_uint64";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_float", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_float32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000008;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_float32 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_float32";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_double", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_float64 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000009;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_float64 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_float64";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_longdouble", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_float128 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000a;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_float128 member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_float128";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_char", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "my_char Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000b;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_char member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_char";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            std::string type_id_kind("TI_STRING8_SMALL");
                            if (type_id_kind == "TI_STRING8_SMALL")
                            {
                                SBound bound = 0;
                                StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else if (type_id_kind == "TI_STRING8_LARGE")
                            {
                                LBound bound = 255;
                                StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                        TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                        "anonymous_string_unbounded"))
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                                }
                            }
                            else
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Unknown String kind.");
                                return;
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "anonymous_string_unbounded", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x0000000c;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure my_string member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "my_string";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "BasicStruct already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "BasicStruct", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure basic member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "basic";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "KeyedStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "KeyedStruct", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "KeyedStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

