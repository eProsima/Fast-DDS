// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file aliases.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_ALIASES_H_
#define _FAST_DDS_GENERATED_ALIASES_H_

#include "helpers/basic_inner_types.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ALIASES_SOURCE)
#define ALIASES_DllAPI __declspec( dllexport )
#else
#define ALIASES_DllAPI __declspec( dllimport )
#endif // ALIASES_SOURCE
#else
#define ALIASES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ALIASES_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


typedef int32_t InnerAliasHelper;
typedef eprosima::fastrtps::fixed_string<10> Inner_alias_bounded_string_helper;
typedef std::wstring Inner_alias_bounded_wstring_helper;
typedef std::array<int16_t, 2> Inner_alias_array_helper;
typedef std::vector<int16_t> Inner_alias_sequence_helper;
typedef std::map<int32_t, int32_t> Inner_alias_map_helper;
typedef int16_t alias_int16;
typedef uint16_t alias_uint16;
typedef int32_t alias_int32;
typedef uint32_t alias_uint32;
typedef int64_t alias_int64;
typedef uint64_t alias_uint64;
typedef float alias_float32;
typedef double alias_float64;
typedef long double alias_float128;
typedef bool alias_bool;
typedef uint8_t alias_octet;
typedef char alias_char8;
typedef wchar_t alias_char16;
typedef std::string alias_string8;
typedef std::wstring alias_string16;
typedef InnerEnumHelper alias_enum;
typedef InnerBitMaskHelper alias_bitmask;
typedef InnerAliasHelper alias_alias;
typedef std::array<int16_t, 2> alias_array;
typedef std::array<std::array<int16_t, 2>, 2> alias_multiarray;
typedef std::vector<int16_t> alias_sequence;
typedef std::map<int16_t, int16_t> alias_map;
typedef InnerEnumHelper alias_union;
typedef InnerStructureHelper alias_structure;
typedef InnerBitsetHelper alias_bitset;
/*!
 * @brief This class represents the structure AliasInt16 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasInt16
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasInt16();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasInt16();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasInt16 that will be copied.
     */
    eProsima_user_DllExport AliasInt16(
            const AliasInt16& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasInt16 that will be copied.
     */
    eProsima_user_DllExport AliasInt16(
            AliasInt16&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasInt16 that will be copied.
     */
    eProsima_user_DllExport AliasInt16& operator =(
            const AliasInt16& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasInt16 that will be copied.
     */
    eProsima_user_DllExport AliasInt16& operator =(
            AliasInt16&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasInt16 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasInt16& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasInt16 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasInt16& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_int16 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_int16 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_int16& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasInt16& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_int16 m_value;

};
/*!
 * @brief This class represents the structure AliasUint16 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasUint16
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasUint16();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasUint16();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasUint16 that will be copied.
     */
    eProsima_user_DllExport AliasUint16(
            const AliasUint16& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasUint16 that will be copied.
     */
    eProsima_user_DllExport AliasUint16(
            AliasUint16&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasUint16 that will be copied.
     */
    eProsima_user_DllExport AliasUint16& operator =(
            const AliasUint16& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasUint16 that will be copied.
     */
    eProsima_user_DllExport AliasUint16& operator =(
            AliasUint16&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasUint16 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasUint16& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasUint16 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasUint16& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_uint16 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_uint16 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_uint16& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasUint16& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_uint16 m_value;

};
/*!
 * @brief This class represents the structure AliasInt32 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasInt32
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasInt32();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasInt32();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasInt32 that will be copied.
     */
    eProsima_user_DllExport AliasInt32(
            const AliasInt32& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasInt32 that will be copied.
     */
    eProsima_user_DllExport AliasInt32(
            AliasInt32&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasInt32 that will be copied.
     */
    eProsima_user_DllExport AliasInt32& operator =(
            const AliasInt32& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasInt32 that will be copied.
     */
    eProsima_user_DllExport AliasInt32& operator =(
            AliasInt32&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasInt32 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasInt32& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasInt32 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasInt32& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_int32 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_int32 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_int32& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasInt32& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_int32 m_value;

};
/*!
 * @brief This class represents the structure AliasUInt32 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasUInt32
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasUInt32();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasUInt32();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasUInt32 that will be copied.
     */
    eProsima_user_DllExport AliasUInt32(
            const AliasUInt32& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasUInt32 that will be copied.
     */
    eProsima_user_DllExport AliasUInt32(
            AliasUInt32&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasUInt32 that will be copied.
     */
    eProsima_user_DllExport AliasUInt32& operator =(
            const AliasUInt32& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasUInt32 that will be copied.
     */
    eProsima_user_DllExport AliasUInt32& operator =(
            AliasUInt32&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasUInt32 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasUInt32& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasUInt32 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasUInt32& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_uint32 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_uint32 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_uint32& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasUInt32& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_uint32 m_value;

};
/*!
 * @brief This class represents the structure AliasInt64 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasInt64
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasInt64();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasInt64();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasInt64 that will be copied.
     */
    eProsima_user_DllExport AliasInt64(
            const AliasInt64& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasInt64 that will be copied.
     */
    eProsima_user_DllExport AliasInt64(
            AliasInt64&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasInt64 that will be copied.
     */
    eProsima_user_DllExport AliasInt64& operator =(
            const AliasInt64& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasInt64 that will be copied.
     */
    eProsima_user_DllExport AliasInt64& operator =(
            AliasInt64&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasInt64 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasInt64& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasInt64 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasInt64& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_int64 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_int64 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_int64& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasInt64& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_int64 m_value;

};
/*!
 * @brief This class represents the structure AliasUInt64 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasUInt64
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasUInt64();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasUInt64();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasUInt64 that will be copied.
     */
    eProsima_user_DllExport AliasUInt64(
            const AliasUInt64& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasUInt64 that will be copied.
     */
    eProsima_user_DllExport AliasUInt64(
            AliasUInt64&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasUInt64 that will be copied.
     */
    eProsima_user_DllExport AliasUInt64& operator =(
            const AliasUInt64& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasUInt64 that will be copied.
     */
    eProsima_user_DllExport AliasUInt64& operator =(
            AliasUInt64&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasUInt64 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasUInt64& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasUInt64 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasUInt64& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_uint64 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_uint64 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_uint64& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasUInt64& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_uint64 m_value;

};
/*!
 * @brief This class represents the structure AliasFloat32 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasFloat32
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasFloat32();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasFloat32();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasFloat32 that will be copied.
     */
    eProsima_user_DllExport AliasFloat32(
            const AliasFloat32& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasFloat32 that will be copied.
     */
    eProsima_user_DllExport AliasFloat32(
            AliasFloat32&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasFloat32 that will be copied.
     */
    eProsima_user_DllExport AliasFloat32& operator =(
            const AliasFloat32& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasFloat32 that will be copied.
     */
    eProsima_user_DllExport AliasFloat32& operator =(
            AliasFloat32&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasFloat32 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasFloat32& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasFloat32 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasFloat32& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_float32 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_float32 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_float32& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasFloat32& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_float32 m_value;

};
/*!
 * @brief This class represents the structure AliasFloat64 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasFloat64
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasFloat64();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasFloat64();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasFloat64 that will be copied.
     */
    eProsima_user_DllExport AliasFloat64(
            const AliasFloat64& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasFloat64 that will be copied.
     */
    eProsima_user_DllExport AliasFloat64(
            AliasFloat64&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasFloat64 that will be copied.
     */
    eProsima_user_DllExport AliasFloat64& operator =(
            const AliasFloat64& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasFloat64 that will be copied.
     */
    eProsima_user_DllExport AliasFloat64& operator =(
            AliasFloat64&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasFloat64 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasFloat64& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasFloat64 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasFloat64& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_float64 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_float64 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_float64& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasFloat64& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_float64 m_value;

};
/*!
 * @brief This class represents the structure AliasFloat128 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasFloat128
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasFloat128();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasFloat128();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasFloat128 that will be copied.
     */
    eProsima_user_DllExport AliasFloat128(
            const AliasFloat128& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasFloat128 that will be copied.
     */
    eProsima_user_DllExport AliasFloat128(
            AliasFloat128&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasFloat128 that will be copied.
     */
    eProsima_user_DllExport AliasFloat128& operator =(
            const AliasFloat128& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasFloat128 that will be copied.
     */
    eProsima_user_DllExport AliasFloat128& operator =(
            AliasFloat128&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasFloat128 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasFloat128& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasFloat128 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasFloat128& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_float128 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_float128 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_float128& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasFloat128& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_float128 m_value;

};
/*!
 * @brief This class represents the structure AliasBool defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasBool
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasBool();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasBool();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasBool that will be copied.
     */
    eProsima_user_DllExport AliasBool(
            const AliasBool& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasBool that will be copied.
     */
    eProsima_user_DllExport AliasBool(
            AliasBool&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasBool that will be copied.
     */
    eProsima_user_DllExport AliasBool& operator =(
            const AliasBool& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasBool that will be copied.
     */
    eProsima_user_DllExport AliasBool& operator =(
            AliasBool&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasBool object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasBool& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasBool object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasBool& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_bool _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_bool value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_bool& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasBool& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_bool m_value;

};
/*!
 * @brief This class represents the structure AliasOctet defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasOctet
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasOctet();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasOctet();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasOctet that will be copied.
     */
    eProsima_user_DllExport AliasOctet(
            const AliasOctet& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasOctet that will be copied.
     */
    eProsima_user_DllExport AliasOctet(
            AliasOctet&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasOctet that will be copied.
     */
    eProsima_user_DllExport AliasOctet& operator =(
            const AliasOctet& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasOctet that will be copied.
     */
    eProsima_user_DllExport AliasOctet& operator =(
            AliasOctet&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasOctet object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasOctet& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasOctet object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasOctet& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_octet _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_octet value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_octet& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasOctet& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_octet m_value;

};
/*!
 * @brief This class represents the structure AliasChar8 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasChar8
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasChar8();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasChar8();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasChar8 that will be copied.
     */
    eProsima_user_DllExport AliasChar8(
            const AliasChar8& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasChar8 that will be copied.
     */
    eProsima_user_DllExport AliasChar8(
            AliasChar8&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasChar8 that will be copied.
     */
    eProsima_user_DllExport AliasChar8& operator =(
            const AliasChar8& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasChar8 that will be copied.
     */
    eProsima_user_DllExport AliasChar8& operator =(
            AliasChar8&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasChar8 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasChar8& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasChar8 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasChar8& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_char8 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_char8 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_char8& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasChar8& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_char8 m_value;

};
/*!
 * @brief This class represents the structure AliasChar16 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasChar16
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasChar16();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasChar16();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasChar16 that will be copied.
     */
    eProsima_user_DllExport AliasChar16(
            const AliasChar16& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasChar16 that will be copied.
     */
    eProsima_user_DllExport AliasChar16(
            AliasChar16&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasChar16 that will be copied.
     */
    eProsima_user_DllExport AliasChar16& operator =(
            const AliasChar16& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasChar16 that will be copied.
     */
    eProsima_user_DllExport AliasChar16& operator =(
            AliasChar16&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasChar16 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasChar16& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasChar16 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasChar16& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_char16 _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_char16 value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_char16& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasChar16& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_char16 m_value;

};
/*!
 * @brief This class represents the structure AliasString8 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasString8
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasString8();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasString8();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasString8 that will be copied.
     */
    eProsima_user_DllExport AliasString8(
            const AliasString8& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasString8 that will be copied.
     */
    eProsima_user_DllExport AliasString8(
            AliasString8&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasString8 that will be copied.
     */
    eProsima_user_DllExport AliasString8& operator =(
            const AliasString8& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasString8 that will be copied.
     */
    eProsima_user_DllExport AliasString8& operator =(
            AliasString8&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasString8 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasString8& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasString8 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasString8& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const alias_string8& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            alias_string8&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const alias_string8& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_string8& value();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasString8& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_string8 m_value;

};
/*!
 * @brief This class represents the structure AliasString16 defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasString16
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasString16();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasString16();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasString16 that will be copied.
     */
    eProsima_user_DllExport AliasString16(
            const AliasString16& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasString16 that will be copied.
     */
    eProsima_user_DllExport AliasString16(
            AliasString16&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasString16 that will be copied.
     */
    eProsima_user_DllExport AliasString16& operator =(
            const AliasString16& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasString16 that will be copied.
     */
    eProsima_user_DllExport AliasString16& operator =(
            AliasString16&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasString16 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasString16& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasString16 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasString16& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const alias_string16& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            alias_string16&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const alias_string16& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_string16& value();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasString16& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_string16 m_value;

};
/*!
 * @brief This class represents the structure AliasEnum defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasEnum
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasEnum();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasEnum();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasEnum that will be copied.
     */
    eProsima_user_DllExport AliasEnum(
            const AliasEnum& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasEnum that will be copied.
     */
    eProsima_user_DllExport AliasEnum(
            AliasEnum&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasEnum that will be copied.
     */
    eProsima_user_DllExport AliasEnum& operator =(
            const AliasEnum& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasEnum that will be copied.
     */
    eProsima_user_DllExport AliasEnum& operator =(
            AliasEnum&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasEnum object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasEnum& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasEnum object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasEnum& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_enum _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_enum value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_enum& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasEnum& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_enum m_value;

};
/*!
 * @brief This class represents the structure AliasBitmask defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasBitmask
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasBitmask();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasBitmask();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasBitmask that will be copied.
     */
    eProsima_user_DllExport AliasBitmask(
            const AliasBitmask& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasBitmask that will be copied.
     */
    eProsima_user_DllExport AliasBitmask(
            AliasBitmask&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasBitmask that will be copied.
     */
    eProsima_user_DllExport AliasBitmask& operator =(
            const AliasBitmask& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasBitmask that will be copied.
     */
    eProsima_user_DllExport AliasBitmask& operator =(
            AliasBitmask&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasBitmask object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasBitmask& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasBitmask object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasBitmask& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_bitmask _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_bitmask value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_bitmask& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasBitmask& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_bitmask m_value;

};
/*!
 * @brief This class represents the structure AliasAlias defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasAlias
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasAlias();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasAlias();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasAlias that will be copied.
     */
    eProsima_user_DllExport AliasAlias(
            const AliasAlias& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasAlias that will be copied.
     */
    eProsima_user_DllExport AliasAlias(
            AliasAlias&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasAlias that will be copied.
     */
    eProsima_user_DllExport AliasAlias& operator =(
            const AliasAlias& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasAlias that will be copied.
     */
    eProsima_user_DllExport AliasAlias& operator =(
            AliasAlias&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasAlias object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasAlias& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasAlias object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasAlias& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_alias _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_alias value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_alias& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasAlias& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_alias m_value;

};
/*!
 * @brief This class represents the structure AliasArray defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasArray
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasArray();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasArray();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasArray that will be copied.
     */
    eProsima_user_DllExport AliasArray(
            const AliasArray& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasArray that will be copied.
     */
    eProsima_user_DllExport AliasArray(
            AliasArray&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasArray that will be copied.
     */
    eProsima_user_DllExport AliasArray& operator =(
            const AliasArray& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasArray that will be copied.
     */
    eProsima_user_DllExport AliasArray& operator =(
            AliasArray&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasArray object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasArray& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasArray object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasArray& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const alias_array& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            alias_array&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const alias_array& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_array& value();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasArray& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_array m_value;

};
/*!
 * @brief This class represents the structure AliasMultiArray defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasMultiArray
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasMultiArray();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasMultiArray();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasMultiArray that will be copied.
     */
    eProsima_user_DllExport AliasMultiArray(
            const AliasMultiArray& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasMultiArray that will be copied.
     */
    eProsima_user_DllExport AliasMultiArray(
            AliasMultiArray&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasMultiArray that will be copied.
     */
    eProsima_user_DllExport AliasMultiArray& operator =(
            const AliasMultiArray& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasMultiArray that will be copied.
     */
    eProsima_user_DllExport AliasMultiArray& operator =(
            AliasMultiArray&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasMultiArray object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasMultiArray& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasMultiArray object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasMultiArray& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const alias_multiarray& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            alias_multiarray&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const alias_multiarray& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_multiarray& value();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasMultiArray& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_multiarray m_value;

};
/*!
 * @brief This class represents the structure AliasSequence defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasSequence
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasSequence();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasSequence();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasSequence that will be copied.
     */
    eProsima_user_DllExport AliasSequence(
            const AliasSequence& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasSequence that will be copied.
     */
    eProsima_user_DllExport AliasSequence(
            AliasSequence&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasSequence that will be copied.
     */
    eProsima_user_DllExport AliasSequence& operator =(
            const AliasSequence& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasSequence that will be copied.
     */
    eProsima_user_DllExport AliasSequence& operator =(
            AliasSequence&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasSequence object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasSequence& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasSequence object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasSequence& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const alias_sequence& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            alias_sequence&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const alias_sequence& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_sequence& value();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasSequence& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_sequence m_value;

};
/*!
 * @brief This class represents the structure AliasMap defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasMap
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasMap();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasMap();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasMap that will be copied.
     */
    eProsima_user_DllExport AliasMap(
            const AliasMap& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasMap that will be copied.
     */
    eProsima_user_DllExport AliasMap(
            AliasMap&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasMap that will be copied.
     */
    eProsima_user_DllExport AliasMap& operator =(
            const AliasMap& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasMap that will be copied.
     */
    eProsima_user_DllExport AliasMap& operator =(
            AliasMap&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasMap object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasMap& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasMap object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasMap& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const alias_map& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            alias_map&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const alias_map& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_map& value();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasMap& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_map m_value;

};
/*!
 * @brief This class represents the structure AliasUnion defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasUnion();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasUnion();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasUnion that will be copied.
     */
    eProsima_user_DllExport AliasUnion(
            const AliasUnion& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasUnion that will be copied.
     */
    eProsima_user_DllExport AliasUnion(
            AliasUnion&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasUnion that will be copied.
     */
    eProsima_user_DllExport AliasUnion& operator =(
            const AliasUnion& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasUnion that will be copied.
     */
    eProsima_user_DllExport AliasUnion& operator =(
            AliasUnion&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasUnion& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasUnion& x) const;

    /*!
     * @brief This function sets a value in member value
     * @param _value New value for member value
     */
    eProsima_user_DllExport void value(
            alias_union _value);

    /*!
     * @brief This function returns the value of member value
     * @return Value of member value
     */
    eProsima_user_DllExport alias_union value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_union& value();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasUnion& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_union m_value;

};
/*!
 * @brief This class represents the structure AliasStruct defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasStruct that will be copied.
     */
    eProsima_user_DllExport AliasStruct(
            const AliasStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasStruct that will be copied.
     */
    eProsima_user_DllExport AliasStruct(
            AliasStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasStruct that will be copied.
     */
    eProsima_user_DllExport AliasStruct& operator =(
            const AliasStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasStruct that will be copied.
     */
    eProsima_user_DllExport AliasStruct& operator =(
            AliasStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasStruct& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const alias_structure& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            alias_structure&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const alias_structure& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_structure& value();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_structure m_value;

};
/*!
 * @brief This class represents the structure AliasBitset defined by the user in the IDL file.
 * @ingroup aliases
 */
class AliasBitset
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasBitset();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasBitset();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasBitset that will be copied.
     */
    eProsima_user_DllExport AliasBitset(
            const AliasBitset& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasBitset that will be copied.
     */
    eProsima_user_DllExport AliasBitset(
            AliasBitset&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasBitset that will be copied.
     */
    eProsima_user_DllExport AliasBitset& operator =(
            const AliasBitset& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasBitset that will be copied.
     */
    eProsima_user_DllExport AliasBitset& operator =(
            AliasBitset&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasBitset object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasBitset& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasBitset object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasBitset& x) const;

    /*!
     * @brief This function copies the value in member value
     * @param _value New value to be copied in member value
     */
    eProsima_user_DllExport void value(
            const alias_bitset& _value);

    /*!
     * @brief This function moves the value in member value
     * @param _value New value to be moved in member value
     */
    eProsima_user_DllExport void value(
            alias_bitset&& _value);

    /*!
     * @brief This function returns a constant reference to member value
     * @return Constant reference to member value
     */
    eProsima_user_DllExport const alias_bitset& value() const;

    /*!
     * @brief This function returns a reference to member value
     * @return Reference to member value
     */
    eProsima_user_DllExport alias_bitset& value();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasBitset& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    alias_bitset m_value;

};

#endif // _FAST_DDS_GENERATED_ALIASES_H_

