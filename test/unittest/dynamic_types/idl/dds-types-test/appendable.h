// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file appendable.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_APPENDABLE_H_
#define _FAST_DDS_GENERATED_APPENDABLE_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(APPENDABLE_SOURCE)
#define APPENDABLE_DllAPI __declspec( dllexport )
#else
#define APPENDABLE_DllAPI __declspec( dllimport )
#endif // APPENDABLE_SOURCE
#else
#define APPENDABLE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define APPENDABLE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure AppendableShortStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableShortStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableShortStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableShortStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableShortStruct that will be copied.
     */
    eProsima_user_DllExport AppendableShortStruct(
            const AppendableShortStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableShortStruct that will be copied.
     */
    eProsima_user_DllExport AppendableShortStruct(
            AppendableShortStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableShortStruct that will be copied.
     */
    eProsima_user_DllExport AppendableShortStruct& operator =(
            const AppendableShortStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableShortStruct that will be copied.
     */
    eProsima_user_DllExport AppendableShortStruct& operator =(
            AppendableShortStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableShortStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableShortStruct& x) const;

    /*!
     * @brief This function sets a value in member var_short
     * @param _var_short New value for member var_short
     */
    eProsima_user_DllExport void var_short(
            int16_t _var_short);

    /*!
     * @brief This function returns the value of member var_short
     * @return Value of member var_short
     */
    eProsima_user_DllExport int16_t var_short() const;

    /*!
     * @brief This function returns a reference to member var_short
     * @return Reference to member var_short
     */
    eProsima_user_DllExport int16_t& var_short();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableShortStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_var_short;

};
/*!
 * @brief This class represents the structure AppendableUShortStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableUShortStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableUShortStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableUShortStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableUShortStruct that will be copied.
     */
    eProsima_user_DllExport AppendableUShortStruct(
            const AppendableUShortStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableUShortStruct that will be copied.
     */
    eProsima_user_DllExport AppendableUShortStruct(
            AppendableUShortStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableUShortStruct that will be copied.
     */
    eProsima_user_DllExport AppendableUShortStruct& operator =(
            const AppendableUShortStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableUShortStruct that will be copied.
     */
    eProsima_user_DllExport AppendableUShortStruct& operator =(
            AppendableUShortStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableUShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableUShortStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableUShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableUShortStruct& x) const;

    /*!
     * @brief This function sets a value in member var_ushort
     * @param _var_ushort New value for member var_ushort
     */
    eProsima_user_DllExport void var_ushort(
            uint16_t _var_ushort);

    /*!
     * @brief This function returns the value of member var_ushort
     * @return Value of member var_ushort
     */
    eProsima_user_DllExport uint16_t var_ushort() const;

    /*!
     * @brief This function returns a reference to member var_ushort
     * @return Reference to member var_ushort
     */
    eProsima_user_DllExport uint16_t& var_ushort();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableUShortStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint16_t m_var_ushort;

};
/*!
 * @brief This class represents the structure AppendableLongStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableLongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableLongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableLongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongStruct(
            const AppendableLongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongStruct(
            AppendableLongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongStruct& operator =(
            const AppendableLongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongStruct& operator =(
            AppendableLongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableLongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableLongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_long
     * @param _var_long New value for member var_long
     */
    eProsima_user_DllExport void var_long(
            int32_t _var_long);

    /*!
     * @brief This function returns the value of member var_long
     * @return Value of member var_long
     */
    eProsima_user_DllExport int32_t var_long() const;

    /*!
     * @brief This function returns a reference to member var_long
     * @return Reference to member var_long
     */
    eProsima_user_DllExport int32_t& var_long();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableLongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_var_long;

};
/*!
 * @brief This class represents the structure AppendableULongStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableULongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableULongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableULongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableULongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableULongStruct(
            const AppendableULongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableULongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableULongStruct(
            AppendableULongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableULongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableULongStruct& operator =(
            const AppendableULongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableULongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableULongStruct& operator =(
            AppendableULongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableULongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableULongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableULongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableULongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_ulong
     * @param _var_ulong New value for member var_ulong
     */
    eProsima_user_DllExport void var_ulong(
            uint32_t _var_ulong);

    /*!
     * @brief This function returns the value of member var_ulong
     * @return Value of member var_ulong
     */
    eProsima_user_DllExport uint32_t var_ulong() const;

    /*!
     * @brief This function returns a reference to member var_ulong
     * @return Reference to member var_ulong
     */
    eProsima_user_DllExport uint32_t& var_ulong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableULongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_var_ulong;

};
/*!
 * @brief This class represents the structure AppendableLongLongStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableLongLongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableLongLongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableLongLongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableLongLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongLongStruct(
            const AppendableLongLongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableLongLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongLongStruct(
            AppendableLongLongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableLongLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongLongStruct& operator =(
            const AppendableLongLongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableLongLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongLongStruct& operator =(
            AppendableLongLongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableLongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableLongLongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableLongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableLongLongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_longlong
     * @param _var_longlong New value for member var_longlong
     */
    eProsima_user_DllExport void var_longlong(
            int64_t _var_longlong);

    /*!
     * @brief This function returns the value of member var_longlong
     * @return Value of member var_longlong
     */
    eProsima_user_DllExport int64_t var_longlong() const;

    /*!
     * @brief This function returns a reference to member var_longlong
     * @return Reference to member var_longlong
     */
    eProsima_user_DllExport int64_t& var_longlong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableLongLongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_var_longlong;

};
/*!
 * @brief This class represents the structure AppendableULongLongStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableULongLongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableULongLongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableULongLongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableULongLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableULongLongStruct(
            const AppendableULongLongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableULongLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableULongLongStruct(
            AppendableULongLongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableULongLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableULongLongStruct& operator =(
            const AppendableULongLongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableULongLongStruct that will be copied.
     */
    eProsima_user_DllExport AppendableULongLongStruct& operator =(
            AppendableULongLongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableULongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableULongLongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableULongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableULongLongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_ulonglong
     * @param _var_ulonglong New value for member var_ulonglong
     */
    eProsima_user_DllExport void var_ulonglong(
            uint64_t _var_ulonglong);

    /*!
     * @brief This function returns the value of member var_ulonglong
     * @return Value of member var_ulonglong
     */
    eProsima_user_DllExport uint64_t var_ulonglong() const;

    /*!
     * @brief This function returns a reference to member var_ulonglong
     * @return Reference to member var_ulonglong
     */
    eProsima_user_DllExport uint64_t& var_ulonglong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableULongLongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_var_ulonglong;

};
/*!
 * @brief This class represents the structure AppendableFloatStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableFloatStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableFloatStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableFloatStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableFloatStruct that will be copied.
     */
    eProsima_user_DllExport AppendableFloatStruct(
            const AppendableFloatStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableFloatStruct that will be copied.
     */
    eProsima_user_DllExport AppendableFloatStruct(
            AppendableFloatStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableFloatStruct that will be copied.
     */
    eProsima_user_DllExport AppendableFloatStruct& operator =(
            const AppendableFloatStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableFloatStruct that will be copied.
     */
    eProsima_user_DllExport AppendableFloatStruct& operator =(
            AppendableFloatStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableFloatStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableFloatStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableFloatStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableFloatStruct& x) const;

    /*!
     * @brief This function sets a value in member var_float
     * @param _var_float New value for member var_float
     */
    eProsima_user_DllExport void var_float(
            float _var_float);

    /*!
     * @brief This function returns the value of member var_float
     * @return Value of member var_float
     */
    eProsima_user_DllExport float var_float() const;

    /*!
     * @brief This function returns a reference to member var_float
     * @return Reference to member var_float
     */
    eProsima_user_DllExport float& var_float();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableFloatStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_var_float;

};
/*!
 * @brief This class represents the structure AppendableDoubleStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableDoubleStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableDoubleStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableDoubleStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableDoubleStruct that will be copied.
     */
    eProsima_user_DllExport AppendableDoubleStruct(
            const AppendableDoubleStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableDoubleStruct that will be copied.
     */
    eProsima_user_DllExport AppendableDoubleStruct(
            AppendableDoubleStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableDoubleStruct that will be copied.
     */
    eProsima_user_DllExport AppendableDoubleStruct& operator =(
            const AppendableDoubleStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableDoubleStruct that will be copied.
     */
    eProsima_user_DllExport AppendableDoubleStruct& operator =(
            AppendableDoubleStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableDoubleStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableDoubleStruct& x) const;

    /*!
     * @brief This function sets a value in member var_double
     * @param _var_double New value for member var_double
     */
    eProsima_user_DllExport void var_double(
            double _var_double);

    /*!
     * @brief This function returns the value of member var_double
     * @return Value of member var_double
     */
    eProsima_user_DllExport double var_double() const;

    /*!
     * @brief This function returns a reference to member var_double
     * @return Reference to member var_double
     */
    eProsima_user_DllExport double& var_double();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableDoubleStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_var_double;

};
/*!
 * @brief This class represents the structure AppendableLongDoubleStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableLongDoubleStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableLongDoubleStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableLongDoubleStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableLongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongDoubleStruct(
            const AppendableLongDoubleStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableLongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongDoubleStruct(
            AppendableLongDoubleStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableLongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongDoubleStruct& operator =(
            const AppendableLongDoubleStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableLongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport AppendableLongDoubleStruct& operator =(
            AppendableLongDoubleStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableLongDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableLongDoubleStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableLongDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableLongDoubleStruct& x) const;

    /*!
     * @brief This function sets a value in member var_longdouble
     * @param _var_longdouble New value for member var_longdouble
     */
    eProsima_user_DllExport void var_longdouble(
            long double _var_longdouble);

    /*!
     * @brief This function returns the value of member var_longdouble
     * @return Value of member var_longdouble
     */
    eProsima_user_DllExport long double var_longdouble() const;

    /*!
     * @brief This function returns a reference to member var_longdouble
     * @return Reference to member var_longdouble
     */
    eProsima_user_DllExport long double& var_longdouble();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableLongDoubleStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    long double m_var_longdouble;

};
/*!
 * @brief This class represents the structure AppendableBooleanStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableBooleanStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableBooleanStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableBooleanStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableBooleanStruct that will be copied.
     */
    eProsima_user_DllExport AppendableBooleanStruct(
            const AppendableBooleanStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableBooleanStruct that will be copied.
     */
    eProsima_user_DllExport AppendableBooleanStruct(
            AppendableBooleanStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableBooleanStruct that will be copied.
     */
    eProsima_user_DllExport AppendableBooleanStruct& operator =(
            const AppendableBooleanStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableBooleanStruct that will be copied.
     */
    eProsima_user_DllExport AppendableBooleanStruct& operator =(
            AppendableBooleanStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableBooleanStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableBooleanStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableBooleanStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableBooleanStruct& x) const;

    /*!
     * @brief This function sets a value in member var_boolean
     * @param _var_boolean New value for member var_boolean
     */
    eProsima_user_DllExport void var_boolean(
            bool _var_boolean);

    /*!
     * @brief This function returns the value of member var_boolean
     * @return Value of member var_boolean
     */
    eProsima_user_DllExport bool var_boolean() const;

    /*!
     * @brief This function returns a reference to member var_boolean
     * @return Reference to member var_boolean
     */
    eProsima_user_DllExport bool& var_boolean();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableBooleanStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_var_boolean;

};
/*!
 * @brief This class represents the structure AppendableOctetStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableOctetStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableOctetStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableOctetStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableOctetStruct that will be copied.
     */
    eProsima_user_DllExport AppendableOctetStruct(
            const AppendableOctetStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableOctetStruct that will be copied.
     */
    eProsima_user_DllExport AppendableOctetStruct(
            AppendableOctetStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableOctetStruct that will be copied.
     */
    eProsima_user_DllExport AppendableOctetStruct& operator =(
            const AppendableOctetStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableOctetStruct that will be copied.
     */
    eProsima_user_DllExport AppendableOctetStruct& operator =(
            AppendableOctetStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableOctetStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableOctetStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableOctetStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableOctetStruct& x) const;

    /*!
     * @brief This function sets a value in member var_octet
     * @param _var_octet New value for member var_octet
     */
    eProsima_user_DllExport void var_octet(
            uint8_t _var_octet);

    /*!
     * @brief This function returns the value of member var_octet
     * @return Value of member var_octet
     */
    eProsima_user_DllExport uint8_t var_octet() const;

    /*!
     * @brief This function returns a reference to member var_octet
     * @return Reference to member var_octet
     */
    eProsima_user_DllExport uint8_t& var_octet();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableOctetStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint8_t m_var_octet;

};
/*!
 * @brief This class represents the structure AppendableCharStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableCharStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableCharStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableCharStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableCharStruct that will be copied.
     */
    eProsima_user_DllExport AppendableCharStruct(
            const AppendableCharStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableCharStruct that will be copied.
     */
    eProsima_user_DllExport AppendableCharStruct(
            AppendableCharStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableCharStruct that will be copied.
     */
    eProsima_user_DllExport AppendableCharStruct& operator =(
            const AppendableCharStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableCharStruct that will be copied.
     */
    eProsima_user_DllExport AppendableCharStruct& operator =(
            AppendableCharStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableCharStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableCharStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableCharStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableCharStruct& x) const;

    /*!
     * @brief This function sets a value in member var_char8
     * @param _var_char8 New value for member var_char8
     */
    eProsima_user_DllExport void var_char8(
            char _var_char8);

    /*!
     * @brief This function returns the value of member var_char8
     * @return Value of member var_char8
     */
    eProsima_user_DllExport char var_char8() const;

    /*!
     * @brief This function returns a reference to member var_char8
     * @return Reference to member var_char8
     */
    eProsima_user_DllExport char& var_char8();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableCharStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    char m_var_char8;

};
/*!
 * @brief This class represents the structure AppendableWCharStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableWCharStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableWCharStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableWCharStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableWCharStruct that will be copied.
     */
    eProsima_user_DllExport AppendableWCharStruct(
            const AppendableWCharStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableWCharStruct that will be copied.
     */
    eProsima_user_DllExport AppendableWCharStruct(
            AppendableWCharStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableWCharStruct that will be copied.
     */
    eProsima_user_DllExport AppendableWCharStruct& operator =(
            const AppendableWCharStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableWCharStruct that will be copied.
     */
    eProsima_user_DllExport AppendableWCharStruct& operator =(
            AppendableWCharStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableWCharStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableWCharStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableWCharStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableWCharStruct& x) const;

    /*!
     * @brief This function sets a value in member var_char16
     * @param _var_char16 New value for member var_char16
     */
    eProsima_user_DllExport void var_char16(
            wchar_t _var_char16);

    /*!
     * @brief This function returns the value of member var_char16
     * @return Value of member var_char16
     */
    eProsima_user_DllExport wchar_t var_char16() const;

    /*!
     * @brief This function returns a reference to member var_char16
     * @return Reference to member var_char16
     */
    eProsima_user_DllExport wchar_t& var_char16();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableWCharStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    wchar_t m_var_char16;

};
/*!
 * @brief This class represents the structure AppendableEmptyStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableEmptyStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableEmptyStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableEmptyStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableEmptyStruct that will be copied.
     */
    eProsima_user_DllExport AppendableEmptyStruct(
            const AppendableEmptyStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableEmptyStruct that will be copied.
     */
    eProsima_user_DllExport AppendableEmptyStruct(
            AppendableEmptyStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableEmptyStruct that will be copied.
     */
    eProsima_user_DllExport AppendableEmptyStruct& operator =(
            const AppendableEmptyStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableEmptyStruct that will be copied.
     */
    eProsima_user_DllExport AppendableEmptyStruct& operator =(
            AppendableEmptyStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableEmptyStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableEmptyStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableEmptyStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableEmptyStruct& x) const;


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableEmptyStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:


};
/*!
 * @brief This class represents the structure AppendableEmptyInheritanceStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableEmptyInheritanceStruct : public AppendableEmptyStruct 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableEmptyInheritanceStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableEmptyInheritanceStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableEmptyInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AppendableEmptyInheritanceStruct(
            const AppendableEmptyInheritanceStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableEmptyInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AppendableEmptyInheritanceStruct(
            AppendableEmptyInheritanceStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableEmptyInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AppendableEmptyInheritanceStruct& operator =(
            const AppendableEmptyInheritanceStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableEmptyInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AppendableEmptyInheritanceStruct& operator =(
            AppendableEmptyInheritanceStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableEmptyInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableEmptyInheritanceStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableEmptyInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableEmptyInheritanceStruct& x) const;

    /*!
     * @brief This function copies the value in member var_str
     * @param _var_str New value to be copied in member var_str
     */
    eProsima_user_DllExport void var_str(
            const std::string& _var_str);

    /*!
     * @brief This function moves the value in member var_str
     * @param _var_str New value to be moved in member var_str
     */
    eProsima_user_DllExport void var_str(
            std::string&& _var_str);

    /*!
     * @brief This function returns a constant reference to member var_str
     * @return Constant reference to member var_str
     */
    eProsima_user_DllExport const std::string& var_str() const;

    /*!
     * @brief This function returns a reference to member var_str
     * @return Reference to member var_str
     */
    eProsima_user_DllExport std::string& var_str();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableEmptyInheritanceStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_var_str;

};
/*!
 * @brief This class represents the structure AppendableInheritanceStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableInheritanceStruct : public AppendableShortStruct 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableInheritanceStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableInheritanceStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AppendableInheritanceStruct(
            const AppendableInheritanceStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AppendableInheritanceStruct(
            AppendableInheritanceStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AppendableInheritanceStruct& operator =(
            const AppendableInheritanceStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport AppendableInheritanceStruct& operator =(
            AppendableInheritanceStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableInheritanceStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableInheritanceStruct& x) const;

    /*!
     * @brief This function copies the value in member var_str
     * @param _var_str New value to be copied in member var_str
     */
    eProsima_user_DllExport void var_str(
            const std::string& _var_str);

    /*!
     * @brief This function moves the value in member var_str
     * @param _var_str New value to be moved in member var_str
     */
    eProsima_user_DllExport void var_str(
            std::string&& _var_str);

    /*!
     * @brief This function returns a constant reference to member var_str
     * @return Constant reference to member var_str
     */
    eProsima_user_DllExport const std::string& var_str() const;

    /*!
     * @brief This function returns a reference to member var_str
     * @return Reference to member var_str
     */
    eProsima_user_DllExport std::string& var_str();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableInheritanceStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_var_str;

};
/*!
 * @brief This class represents the structure AppendableInheritanceEmptyStruct defined by the user in the IDL file.
 * @ingroup appendable
 */
class AppendableInheritanceEmptyStruct : public AppendableShortStruct 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AppendableInheritanceEmptyStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AppendableInheritanceEmptyStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AppendableInheritanceEmptyStruct that will be copied.
     */
    eProsima_user_DllExport AppendableInheritanceEmptyStruct(
            const AppendableInheritanceEmptyStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AppendableInheritanceEmptyStruct that will be copied.
     */
    eProsima_user_DllExport AppendableInheritanceEmptyStruct(
            AppendableInheritanceEmptyStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AppendableInheritanceEmptyStruct that will be copied.
     */
    eProsima_user_DllExport AppendableInheritanceEmptyStruct& operator =(
            const AppendableInheritanceEmptyStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AppendableInheritanceEmptyStruct that will be copied.
     */
    eProsima_user_DllExport AppendableInheritanceEmptyStruct& operator =(
            AppendableInheritanceEmptyStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AppendableInheritanceEmptyStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AppendableInheritanceEmptyStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AppendableInheritanceEmptyStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AppendableInheritanceEmptyStruct& x) const;


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AppendableInheritanceEmptyStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:


};

#endif // _FAST_DDS_GENERATED_APPENDABLE_H_

