// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file bitsets.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "bitsets.h"
#include "bitsetsTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define InnerStructureHelper_max_cdr_typesize 8ULL;

#define InnerEmptyStructureHelper_max_cdr_typesize 0ULL;
#define BitsetStruct_max_cdr_typesize 8ULL;









#define InnerStructureHelper_max_key_cdr_typesize 0ULL;

#define InnerEmptyStructureHelper_max_key_cdr_typesize 0ULL;
#define BitsetStruct_max_key_cdr_typesize 0ULL;










BitsetStruct::BitsetStruct()
{
    // InnerBitsetHelper m_var_InnerBitsetHelper


    // Just to register all known types
    registerbitsetsTypes();
}

BitsetStruct::~BitsetStruct()
{
}

BitsetStruct::BitsetStruct(
        const BitsetStruct& x)
{
    m_var_InnerBitsetHelper = x.m_var_InnerBitsetHelper;
}

BitsetStruct::BitsetStruct(
        BitsetStruct&& x) noexcept 
{
    m_var_InnerBitsetHelper = std::move(x.m_var_InnerBitsetHelper);
}

BitsetStruct& BitsetStruct::operator =(
        const BitsetStruct& x)
{

    m_var_InnerBitsetHelper = x.m_var_InnerBitsetHelper;

    return *this;
}

BitsetStruct& BitsetStruct::operator =(
        BitsetStruct&& x) noexcept
{

    m_var_InnerBitsetHelper = std::move(x.m_var_InnerBitsetHelper);

    return *this;
}

bool BitsetStruct::operator ==(
        const BitsetStruct& x) const
{

    return (m_var_InnerBitsetHelper == x.m_var_InnerBitsetHelper);
}

bool BitsetStruct::operator !=(
        const BitsetStruct& x) const
{
    return !(*this == x);
}

size_t BitsetStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BitsetStruct_max_cdr_typesize;
}

size_t BitsetStruct::getCdrSerializedSize(
        const BitsetStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += InnerBitsetHelper::getCdrSerializedSize(data.var_InnerBitsetHelper(), current_alignment);

    return current_alignment - initial_alignment;
}

void BitsetStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_var_InnerBitsetHelper;
}

void BitsetStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_var_InnerBitsetHelper;
}

/*!
 * @brief This function copies the value in member var_InnerBitsetHelper
 * @param _var_InnerBitsetHelper New value to be copied in member var_InnerBitsetHelper
 */
void BitsetStruct::var_InnerBitsetHelper(
        const InnerBitsetHelper& _var_InnerBitsetHelper)
{
    m_var_InnerBitsetHelper = _var_InnerBitsetHelper;
}

/*!
 * @brief This function moves the value in member var_InnerBitsetHelper
 * @param _var_InnerBitsetHelper New value to be moved in member var_InnerBitsetHelper
 */
void BitsetStruct::var_InnerBitsetHelper(
        InnerBitsetHelper&& _var_InnerBitsetHelper)
{
    m_var_InnerBitsetHelper = std::move(_var_InnerBitsetHelper);
}

/*!
 * @brief This function returns a constant reference to member var_InnerBitsetHelper
 * @return Constant reference to member var_InnerBitsetHelper
 */
const InnerBitsetHelper& BitsetStruct::var_InnerBitsetHelper() const
{
    return m_var_InnerBitsetHelper;
}

/*!
 * @brief This function returns a reference to member var_InnerBitsetHelper
 * @return Reference to member var_InnerBitsetHelper
 */
InnerBitsetHelper& BitsetStruct::var_InnerBitsetHelper()
{
    return m_var_InnerBitsetHelper;
}


size_t BitsetStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BitsetStruct_max_key_cdr_typesize;
}

bool BitsetStruct::isKeyDefined()
{
    return false;
}

void BitsetStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

