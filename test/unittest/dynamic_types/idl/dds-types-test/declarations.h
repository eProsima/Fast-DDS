// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file declarations.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_DECLARATIONS_H_
#define _FAST_DDS_GENERATED_DECLARATIONS_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DECLARATIONS_SOURCE)
#define DECLARATIONS_DllAPI __declspec( dllexport )
#else
#define DECLARATIONS_DllAPI __declspec( dllimport )
#endif // DECLARATIONS_SOURCE
#else
#define DECLARATIONS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DECLARATIONS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


class ForwardStruct;

class ForwardUnion;

typedef std::vector<ForwardStruct> RecursiveUnboundedSeqForwardStruct;
typedef std::vector<ForwardStruct> RecursiveBoundedSeqForwardStruct;
typedef std::vector<ForwardUnion> RecursiveUnboundedSeqForwardUnion;
typedef std::vector<ForwardUnion> RecursiveBoundedSeqForwardUnion;
/*!
 * @brief This class represents the structure ForwardDeclarationsStruct defined by the user in the IDL file.
 * @ingroup declarations
 */
class ForwardDeclarationsStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ForwardDeclarationsStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ForwardDeclarationsStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ForwardDeclarationsStruct that will be copied.
     */
    eProsima_user_DllExport ForwardDeclarationsStruct(
            const ForwardDeclarationsStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ForwardDeclarationsStruct that will be copied.
     */
    eProsima_user_DllExport ForwardDeclarationsStruct(
            ForwardDeclarationsStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ForwardDeclarationsStruct that will be copied.
     */
    eProsima_user_DllExport ForwardDeclarationsStruct& operator =(
            const ForwardDeclarationsStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ForwardDeclarationsStruct that will be copied.
     */
    eProsima_user_DllExport ForwardDeclarationsStruct& operator =(
            ForwardDeclarationsStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ForwardDeclarationsStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ForwardDeclarationsStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ForwardDeclarationsStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ForwardDeclarationsStruct& x) const;

    /*!
     * @brief This function copies the value in member var_ForwardStruct
     * @param _var_ForwardStruct New value to be copied in member var_ForwardStruct
     */
    eProsima_user_DllExport void var_ForwardStruct(
            const ForwardStruct& _var_ForwardStruct);

    /*!
     * @brief This function moves the value in member var_ForwardStruct
     * @param _var_ForwardStruct New value to be moved in member var_ForwardStruct
     */
    eProsima_user_DllExport void var_ForwardStruct(
            ForwardStruct&& _var_ForwardStruct);

    /*!
     * @brief This function returns a constant reference to member var_ForwardStruct
     * @return Constant reference to member var_ForwardStruct
     */
    eProsima_user_DllExport const ForwardStruct& var_ForwardStruct() const;

    /*!
     * @brief This function returns a reference to member var_ForwardStruct
     * @return Reference to member var_ForwardStruct
     */
    eProsima_user_DllExport ForwardStruct& var_ForwardStruct();
    /*!
     * @brief This function copies the value in member var_ForwardUnion
     * @param _var_ForwardUnion New value to be copied in member var_ForwardUnion
     */
    eProsima_user_DllExport void var_ForwardUnion(
            const ForwardUnion& _var_ForwardUnion);

    /*!
     * @brief This function moves the value in member var_ForwardUnion
     * @param _var_ForwardUnion New value to be moved in member var_ForwardUnion
     */
    eProsima_user_DllExport void var_ForwardUnion(
            ForwardUnion&& _var_ForwardUnion);

    /*!
     * @brief This function returns a constant reference to member var_ForwardUnion
     * @return Constant reference to member var_ForwardUnion
     */
    eProsima_user_DllExport const ForwardUnion& var_ForwardUnion() const;

    /*!
     * @brief This function returns a reference to member var_ForwardUnion
     * @return Reference to member var_ForwardUnion
     */
    eProsima_user_DllExport ForwardUnion& var_ForwardUnion();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ForwardDeclarationsStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    ForwardStruct* m_var_ForwardStruct;
    ForwardUnion* m_var_ForwardUnion;

};
/*!
 * @brief This class represents the structure ForwardDeclarationsRecursiveStruct defined by the user in the IDL file.
 * @ingroup declarations
 */
class ForwardDeclarationsRecursiveStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ForwardDeclarationsRecursiveStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ForwardDeclarationsRecursiveStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ForwardDeclarationsRecursiveStruct that will be copied.
     */
    eProsima_user_DllExport ForwardDeclarationsRecursiveStruct(
            const ForwardDeclarationsRecursiveStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ForwardDeclarationsRecursiveStruct that will be copied.
     */
    eProsima_user_DllExport ForwardDeclarationsRecursiveStruct(
            ForwardDeclarationsRecursiveStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ForwardDeclarationsRecursiveStruct that will be copied.
     */
    eProsima_user_DllExport ForwardDeclarationsRecursiveStruct& operator =(
            const ForwardDeclarationsRecursiveStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ForwardDeclarationsRecursiveStruct that will be copied.
     */
    eProsima_user_DllExport ForwardDeclarationsRecursiveStruct& operator =(
            ForwardDeclarationsRecursiveStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ForwardDeclarationsRecursiveStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ForwardDeclarationsRecursiveStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ForwardDeclarationsRecursiveStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ForwardDeclarationsRecursiveStruct& x) const;

    /*!
     * @brief This function copies the value in member var_RecursiveUnboundedSeqForwardStruct
     * @param _var_RecursiveUnboundedSeqForwardStruct New value to be copied in member var_RecursiveUnboundedSeqForwardStruct
     */
    eProsima_user_DllExport void var_RecursiveUnboundedSeqForwardStruct(
            const RecursiveUnboundedSeqForwardStruct& _var_RecursiveUnboundedSeqForwardStruct);

    /*!
     * @brief This function moves the value in member var_RecursiveUnboundedSeqForwardStruct
     * @param _var_RecursiveUnboundedSeqForwardStruct New value to be moved in member var_RecursiveUnboundedSeqForwardStruct
     */
    eProsima_user_DllExport void var_RecursiveUnboundedSeqForwardStruct(
            RecursiveUnboundedSeqForwardStruct&& _var_RecursiveUnboundedSeqForwardStruct);

    /*!
     * @brief This function returns a constant reference to member var_RecursiveUnboundedSeqForwardStruct
     * @return Constant reference to member var_RecursiveUnboundedSeqForwardStruct
     */
    eProsima_user_DllExport const RecursiveUnboundedSeqForwardStruct& var_RecursiveUnboundedSeqForwardStruct() const;

    /*!
     * @brief This function returns a reference to member var_RecursiveUnboundedSeqForwardStruct
     * @return Reference to member var_RecursiveUnboundedSeqForwardStruct
     */
    eProsima_user_DllExport RecursiveUnboundedSeqForwardStruct& var_RecursiveUnboundedSeqForwardStruct();
    /*!
     * @brief This function copies the value in member var_RecursiveBoundedSeqForwardStruct
     * @param _var_RecursiveBoundedSeqForwardStruct New value to be copied in member var_RecursiveBoundedSeqForwardStruct
     */
    eProsima_user_DllExport void var_RecursiveBoundedSeqForwardStruct(
            const RecursiveBoundedSeqForwardStruct& _var_RecursiveBoundedSeqForwardStruct);

    /*!
     * @brief This function moves the value in member var_RecursiveBoundedSeqForwardStruct
     * @param _var_RecursiveBoundedSeqForwardStruct New value to be moved in member var_RecursiveBoundedSeqForwardStruct
     */
    eProsima_user_DllExport void var_RecursiveBoundedSeqForwardStruct(
            RecursiveBoundedSeqForwardStruct&& _var_RecursiveBoundedSeqForwardStruct);

    /*!
     * @brief This function returns a constant reference to member var_RecursiveBoundedSeqForwardStruct
     * @return Constant reference to member var_RecursiveBoundedSeqForwardStruct
     */
    eProsima_user_DllExport const RecursiveBoundedSeqForwardStruct& var_RecursiveBoundedSeqForwardStruct() const;

    /*!
     * @brief This function returns a reference to member var_RecursiveBoundedSeqForwardStruct
     * @return Reference to member var_RecursiveBoundedSeqForwardStruct
     */
    eProsima_user_DllExport RecursiveBoundedSeqForwardStruct& var_RecursiveBoundedSeqForwardStruct();
    /*!
     * @brief This function copies the value in member var_RecursiveUnboundedSeqForwardUnion
     * @param _var_RecursiveUnboundedSeqForwardUnion New value to be copied in member var_RecursiveUnboundedSeqForwardUnion
     */
    eProsima_user_DllExport void var_RecursiveUnboundedSeqForwardUnion(
            const RecursiveUnboundedSeqForwardUnion& _var_RecursiveUnboundedSeqForwardUnion);

    /*!
     * @brief This function moves the value in member var_RecursiveUnboundedSeqForwardUnion
     * @param _var_RecursiveUnboundedSeqForwardUnion New value to be moved in member var_RecursiveUnboundedSeqForwardUnion
     */
    eProsima_user_DllExport void var_RecursiveUnboundedSeqForwardUnion(
            RecursiveUnboundedSeqForwardUnion&& _var_RecursiveUnboundedSeqForwardUnion);

    /*!
     * @brief This function returns a constant reference to member var_RecursiveUnboundedSeqForwardUnion
     * @return Constant reference to member var_RecursiveUnboundedSeqForwardUnion
     */
    eProsima_user_DllExport const RecursiveUnboundedSeqForwardUnion& var_RecursiveUnboundedSeqForwardUnion() const;

    /*!
     * @brief This function returns a reference to member var_RecursiveUnboundedSeqForwardUnion
     * @return Reference to member var_RecursiveUnboundedSeqForwardUnion
     */
    eProsima_user_DllExport RecursiveUnboundedSeqForwardUnion& var_RecursiveUnboundedSeqForwardUnion();
    /*!
     * @brief This function copies the value in member var_RecursiveBoundedSeqForwardUnion
     * @param _var_RecursiveBoundedSeqForwardUnion New value to be copied in member var_RecursiveBoundedSeqForwardUnion
     */
    eProsima_user_DllExport void var_RecursiveBoundedSeqForwardUnion(
            const RecursiveBoundedSeqForwardUnion& _var_RecursiveBoundedSeqForwardUnion);

    /*!
     * @brief This function moves the value in member var_RecursiveBoundedSeqForwardUnion
     * @param _var_RecursiveBoundedSeqForwardUnion New value to be moved in member var_RecursiveBoundedSeqForwardUnion
     */
    eProsima_user_DllExport void var_RecursiveBoundedSeqForwardUnion(
            RecursiveBoundedSeqForwardUnion&& _var_RecursiveBoundedSeqForwardUnion);

    /*!
     * @brief This function returns a constant reference to member var_RecursiveBoundedSeqForwardUnion
     * @return Constant reference to member var_RecursiveBoundedSeqForwardUnion
     */
    eProsima_user_DllExport const RecursiveBoundedSeqForwardUnion& var_RecursiveBoundedSeqForwardUnion() const;

    /*!
     * @brief This function returns a reference to member var_RecursiveBoundedSeqForwardUnion
     * @return Reference to member var_RecursiveBoundedSeqForwardUnion
     */
    eProsima_user_DllExport RecursiveBoundedSeqForwardUnion& var_RecursiveBoundedSeqForwardUnion();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ForwardDeclarationsRecursiveStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    RecursiveUnboundedSeqForwardStruct m_var_RecursiveUnboundedSeqForwardStruct;
    RecursiveBoundedSeqForwardStruct m_var_RecursiveBoundedSeqForwardStruct;
    RecursiveUnboundedSeqForwardUnion m_var_RecursiveUnboundedSeqForwardUnion;
    RecursiveBoundedSeqForwardUnion m_var_RecursiveBoundedSeqForwardUnion;

};
/*!
 * @brief This class represents the union ForwardUnion defined by the user in the IDL file.
 * @ingroup declarations
 */
class ForwardUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ForwardUnion();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ForwardUnion();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ForwardUnion that will be copied.
     */
    eProsima_user_DllExport ForwardUnion(
            const ForwardUnion& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ForwardUnion that will be copied.
     */
    eProsima_user_DllExport ForwardUnion(
            ForwardUnion&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ForwardUnion that will be copied.
     */
    eProsima_user_DllExport ForwardUnion& operator =(
            const ForwardUnion& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ForwardUnion that will be copied.
     */
    eProsima_user_DllExport ForwardUnion& operator =(
            ForwardUnion&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ForwardUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ForwardUnion& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ForwardUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ForwardUnion& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*!
     * @brief This function sets a value in member case_zero
     * @param _case_zero New value for member case_zero
     */
    eProsima_user_DllExport void case_zero(
            int32_t _case_zero);

    /*!
     * @brief This function returns the value of member case_zero
     * @return Value of member case_zero
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t case_zero() const;

    /*!
     * @brief This function returns a reference to member case_zero
     * @return Reference to member case_zero
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& case_zero();

    /*!
     * @brief This function sets a value in member case_one
     * @param _case_one New value for member case_one
     */
    eProsima_user_DllExport void case_one(
            int32_t _case_one);

    /*!
     * @brief This function returns the value of member case_one
     * @return Value of member case_one
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t case_one() const;

    /*!
     * @brief This function returns a reference to member case_one
     * @return Reference to member case_one
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& case_one();


    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ForwardUnion& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




private:

    int32_t m__d;

    int32_t m_case_zero;
    int32_t m_case_one;
};
/*!
 * @brief This class represents the structure ForwardStruct defined by the user in the IDL file.
 * @ingroup declarations
 */
class ForwardStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ForwardStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ForwardStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ForwardStruct that will be copied.
     */
    eProsima_user_DllExport ForwardStruct(
            const ForwardStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ForwardStruct that will be copied.
     */
    eProsima_user_DllExport ForwardStruct(
            ForwardStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ForwardStruct that will be copied.
     */
    eProsima_user_DllExport ForwardStruct& operator =(
            const ForwardStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ForwardStruct that will be copied.
     */
    eProsima_user_DllExport ForwardStruct& operator =(
            ForwardStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ForwardStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ForwardStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ForwardStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ForwardStruct& x) const;

    /*!
     * @brief This function sets a value in member var_short
     * @param _var_short New value for member var_short
     */
    eProsima_user_DllExport void var_short(
            int16_t _var_short);

    /*!
     * @brief This function returns the value of member var_short
     * @return Value of member var_short
     */
    eProsima_user_DllExport int16_t var_short() const;

    /*!
     * @brief This function returns a reference to member var_short
     * @return Reference to member var_short
     */
    eProsima_user_DllExport int16_t& var_short();

    /*!
     * @brief This function sets a value in member var_long
     * @param _var_long New value for member var_long
     */
    eProsima_user_DllExport void var_long(
            int32_t _var_long);

    /*!
     * @brief This function returns the value of member var_long
     * @return Value of member var_long
     */
    eProsima_user_DllExport int32_t var_long() const;

    /*!
     * @brief This function returns a reference to member var_long
     * @return Reference to member var_long
     */
    eProsima_user_DllExport int32_t& var_long();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ForwardStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_var_short;
    int32_t m_var_long;

};
namespace declarations_module {
    class ModuledForwardStruct;

    class ModuledForwardUnion;

    typedef std::vector<declarations_module::ModuledForwardStruct> ModuledRecursiveUnboundedSeqForwardStruct;
    typedef std::vector<declarations_module::ModuledForwardStruct> ModuledRecursiveBoundedSeqForwardStruct;
    typedef std::vector<declarations_module::ModuledForwardUnion> ModuledRecursiveUnboundedSeqForwardUnion;
    typedef std::vector<declarations_module::ModuledForwardUnion> ModuledRecursiveBoundedSeqForwardUnion;
} // namespace declarations_module
/*!
 * @brief This class represents the structure ModuledForwardDeclarationsStruct defined by the user in the IDL file.
 * @ingroup declarations
 */
class ModuledForwardDeclarationsStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ModuledForwardDeclarationsStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ModuledForwardDeclarationsStruct that will be copied.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsStruct(
            const ModuledForwardDeclarationsStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ModuledForwardDeclarationsStruct that will be copied.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsStruct(
            ModuledForwardDeclarationsStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ModuledForwardDeclarationsStruct that will be copied.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsStruct& operator =(
            const ModuledForwardDeclarationsStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ModuledForwardDeclarationsStruct that will be copied.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsStruct& operator =(
            ModuledForwardDeclarationsStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ModuledForwardDeclarationsStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ModuledForwardDeclarationsStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ModuledForwardDeclarationsStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ModuledForwardDeclarationsStruct& x) const;

    /*!
     * @brief This function copies the value in member var_ModuledForwardStruct
     * @param _var_ModuledForwardStruct New value to be copied in member var_ModuledForwardStruct
     */
    eProsima_user_DllExport void var_ModuledForwardStruct(
            const declarations_module::ModuledForwardStruct& _var_ModuledForwardStruct);

    /*!
     * @brief This function moves the value in member var_ModuledForwardStruct
     * @param _var_ModuledForwardStruct New value to be moved in member var_ModuledForwardStruct
     */
    eProsima_user_DllExport void var_ModuledForwardStruct(
            declarations_module::ModuledForwardStruct&& _var_ModuledForwardStruct);

    /*!
     * @brief This function returns a constant reference to member var_ModuledForwardStruct
     * @return Constant reference to member var_ModuledForwardStruct
     */
    eProsima_user_DllExport const declarations_module::ModuledForwardStruct& var_ModuledForwardStruct() const;

    /*!
     * @brief This function returns a reference to member var_ModuledForwardStruct
     * @return Reference to member var_ModuledForwardStruct
     */
    eProsima_user_DllExport declarations_module::ModuledForwardStruct& var_ModuledForwardStruct();
    /*!
     * @brief This function copies the value in member var_ModuledForwardUnion
     * @param _var_ModuledForwardUnion New value to be copied in member var_ModuledForwardUnion
     */
    eProsima_user_DllExport void var_ModuledForwardUnion(
            const declarations_module::ModuledForwardUnion& _var_ModuledForwardUnion);

    /*!
     * @brief This function moves the value in member var_ModuledForwardUnion
     * @param _var_ModuledForwardUnion New value to be moved in member var_ModuledForwardUnion
     */
    eProsima_user_DllExport void var_ModuledForwardUnion(
            declarations_module::ModuledForwardUnion&& _var_ModuledForwardUnion);

    /*!
     * @brief This function returns a constant reference to member var_ModuledForwardUnion
     * @return Constant reference to member var_ModuledForwardUnion
     */
    eProsima_user_DllExport const declarations_module::ModuledForwardUnion& var_ModuledForwardUnion() const;

    /*!
     * @brief This function returns a reference to member var_ModuledForwardUnion
     * @return Reference to member var_ModuledForwardUnion
     */
    eProsima_user_DllExport declarations_module::ModuledForwardUnion& var_ModuledForwardUnion();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ModuledForwardDeclarationsStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    declarations_module::ModuledForwardStruct* m_var_ModuledForwardStruct;
    declarations_module::ModuledForwardUnion* m_var_ModuledForwardUnion;

};
/*!
 * @brief This class represents the structure ModuledForwardDeclarationsRecursiveStruct defined by the user in the IDL file.
 * @ingroup declarations
 */
class ModuledForwardDeclarationsRecursiveStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsRecursiveStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ModuledForwardDeclarationsRecursiveStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ModuledForwardDeclarationsRecursiveStruct that will be copied.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsRecursiveStruct(
            const ModuledForwardDeclarationsRecursiveStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ModuledForwardDeclarationsRecursiveStruct that will be copied.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsRecursiveStruct(
            ModuledForwardDeclarationsRecursiveStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ModuledForwardDeclarationsRecursiveStruct that will be copied.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsRecursiveStruct& operator =(
            const ModuledForwardDeclarationsRecursiveStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ModuledForwardDeclarationsRecursiveStruct that will be copied.
     */
    eProsima_user_DllExport ModuledForwardDeclarationsRecursiveStruct& operator =(
            ModuledForwardDeclarationsRecursiveStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ModuledForwardDeclarationsRecursiveStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ModuledForwardDeclarationsRecursiveStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ModuledForwardDeclarationsRecursiveStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ModuledForwardDeclarationsRecursiveStruct& x) const;

    /*!
     * @brief This function copies the value in member var_ModuledRecursiveUnboundedSeqForwardStruct
     * @param _var_ModuledRecursiveUnboundedSeqForwardStruct New value to be copied in member var_ModuledRecursiveUnboundedSeqForwardStruct
     */
    eProsima_user_DllExport void var_ModuledRecursiveUnboundedSeqForwardStruct(
            const declarations_module::ModuledRecursiveUnboundedSeqForwardStruct& _var_ModuledRecursiveUnboundedSeqForwardStruct);

    /*!
     * @brief This function moves the value in member var_ModuledRecursiveUnboundedSeqForwardStruct
     * @param _var_ModuledRecursiveUnboundedSeqForwardStruct New value to be moved in member var_ModuledRecursiveUnboundedSeqForwardStruct
     */
    eProsima_user_DllExport void var_ModuledRecursiveUnboundedSeqForwardStruct(
            declarations_module::ModuledRecursiveUnboundedSeqForwardStruct&& _var_ModuledRecursiveUnboundedSeqForwardStruct);

    /*!
     * @brief This function returns a constant reference to member var_ModuledRecursiveUnboundedSeqForwardStruct
     * @return Constant reference to member var_ModuledRecursiveUnboundedSeqForwardStruct
     */
    eProsima_user_DllExport const declarations_module::ModuledRecursiveUnboundedSeqForwardStruct& var_ModuledRecursiveUnboundedSeqForwardStruct() const;

    /*!
     * @brief This function returns a reference to member var_ModuledRecursiveUnboundedSeqForwardStruct
     * @return Reference to member var_ModuledRecursiveUnboundedSeqForwardStruct
     */
    eProsima_user_DllExport declarations_module::ModuledRecursiveUnboundedSeqForwardStruct& var_ModuledRecursiveUnboundedSeqForwardStruct();
    /*!
     * @brief This function copies the value in member var_ModuledRecursiveBoundedSeqForwardStruct
     * @param _var_ModuledRecursiveBoundedSeqForwardStruct New value to be copied in member var_ModuledRecursiveBoundedSeqForwardStruct
     */
    eProsima_user_DllExport void var_ModuledRecursiveBoundedSeqForwardStruct(
            const declarations_module::ModuledRecursiveBoundedSeqForwardStruct& _var_ModuledRecursiveBoundedSeqForwardStruct);

    /*!
     * @brief This function moves the value in member var_ModuledRecursiveBoundedSeqForwardStruct
     * @param _var_ModuledRecursiveBoundedSeqForwardStruct New value to be moved in member var_ModuledRecursiveBoundedSeqForwardStruct
     */
    eProsima_user_DllExport void var_ModuledRecursiveBoundedSeqForwardStruct(
            declarations_module::ModuledRecursiveBoundedSeqForwardStruct&& _var_ModuledRecursiveBoundedSeqForwardStruct);

    /*!
     * @brief This function returns a constant reference to member var_ModuledRecursiveBoundedSeqForwardStruct
     * @return Constant reference to member var_ModuledRecursiveBoundedSeqForwardStruct
     */
    eProsima_user_DllExport const declarations_module::ModuledRecursiveBoundedSeqForwardStruct& var_ModuledRecursiveBoundedSeqForwardStruct() const;

    /*!
     * @brief This function returns a reference to member var_ModuledRecursiveBoundedSeqForwardStruct
     * @return Reference to member var_ModuledRecursiveBoundedSeqForwardStruct
     */
    eProsima_user_DllExport declarations_module::ModuledRecursiveBoundedSeqForwardStruct& var_ModuledRecursiveBoundedSeqForwardStruct();
    /*!
     * @brief This function copies the value in member var_ModuledRecursiveUnboundedSeqForwardUnion
     * @param _var_ModuledRecursiveUnboundedSeqForwardUnion New value to be copied in member var_ModuledRecursiveUnboundedSeqForwardUnion
     */
    eProsima_user_DllExport void var_ModuledRecursiveUnboundedSeqForwardUnion(
            const declarations_module::ModuledRecursiveUnboundedSeqForwardUnion& _var_ModuledRecursiveUnboundedSeqForwardUnion);

    /*!
     * @brief This function moves the value in member var_ModuledRecursiveUnboundedSeqForwardUnion
     * @param _var_ModuledRecursiveUnboundedSeqForwardUnion New value to be moved in member var_ModuledRecursiveUnboundedSeqForwardUnion
     */
    eProsima_user_DllExport void var_ModuledRecursiveUnboundedSeqForwardUnion(
            declarations_module::ModuledRecursiveUnboundedSeqForwardUnion&& _var_ModuledRecursiveUnboundedSeqForwardUnion);

    /*!
     * @brief This function returns a constant reference to member var_ModuledRecursiveUnboundedSeqForwardUnion
     * @return Constant reference to member var_ModuledRecursiveUnboundedSeqForwardUnion
     */
    eProsima_user_DllExport const declarations_module::ModuledRecursiveUnboundedSeqForwardUnion& var_ModuledRecursiveUnboundedSeqForwardUnion() const;

    /*!
     * @brief This function returns a reference to member var_ModuledRecursiveUnboundedSeqForwardUnion
     * @return Reference to member var_ModuledRecursiveUnboundedSeqForwardUnion
     */
    eProsima_user_DllExport declarations_module::ModuledRecursiveUnboundedSeqForwardUnion& var_ModuledRecursiveUnboundedSeqForwardUnion();
    /*!
     * @brief This function copies the value in member var_ModuledRecursiveBoundedSeqForwardUnion
     * @param _var_ModuledRecursiveBoundedSeqForwardUnion New value to be copied in member var_ModuledRecursiveBoundedSeqForwardUnion
     */
    eProsima_user_DllExport void var_ModuledRecursiveBoundedSeqForwardUnion(
            const declarations_module::ModuledRecursiveBoundedSeqForwardUnion& _var_ModuledRecursiveBoundedSeqForwardUnion);

    /*!
     * @brief This function moves the value in member var_ModuledRecursiveBoundedSeqForwardUnion
     * @param _var_ModuledRecursiveBoundedSeqForwardUnion New value to be moved in member var_ModuledRecursiveBoundedSeqForwardUnion
     */
    eProsima_user_DllExport void var_ModuledRecursiveBoundedSeqForwardUnion(
            declarations_module::ModuledRecursiveBoundedSeqForwardUnion&& _var_ModuledRecursiveBoundedSeqForwardUnion);

    /*!
     * @brief This function returns a constant reference to member var_ModuledRecursiveBoundedSeqForwardUnion
     * @return Constant reference to member var_ModuledRecursiveBoundedSeqForwardUnion
     */
    eProsima_user_DllExport const declarations_module::ModuledRecursiveBoundedSeqForwardUnion& var_ModuledRecursiveBoundedSeqForwardUnion() const;

    /*!
     * @brief This function returns a reference to member var_ModuledRecursiveBoundedSeqForwardUnion
     * @return Reference to member var_ModuledRecursiveBoundedSeqForwardUnion
     */
    eProsima_user_DllExport declarations_module::ModuledRecursiveBoundedSeqForwardUnion& var_ModuledRecursiveBoundedSeqForwardUnion();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ModuledForwardDeclarationsRecursiveStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    declarations_module::ModuledRecursiveUnboundedSeqForwardStruct m_var_ModuledRecursiveUnboundedSeqForwardStruct;
    declarations_module::ModuledRecursiveBoundedSeqForwardStruct m_var_ModuledRecursiveBoundedSeqForwardStruct;
    declarations_module::ModuledRecursiveUnboundedSeqForwardUnion m_var_ModuledRecursiveUnboundedSeqForwardUnion;
    declarations_module::ModuledRecursiveBoundedSeqForwardUnion m_var_ModuledRecursiveBoundedSeqForwardUnion;

};
namespace declarations_module {
    /*!
     * @brief This class represents the structure ModuledForwardStruct defined by the user in the IDL file.
     * @ingroup declarations
     */
    class ModuledForwardStruct
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ModuledForwardStruct();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ModuledForwardStruct();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object declarations_module::ModuledForwardStruct that will be copied.
         */
        eProsima_user_DllExport ModuledForwardStruct(
                const ModuledForwardStruct& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object declarations_module::ModuledForwardStruct that will be copied.
         */
        eProsima_user_DllExport ModuledForwardStruct(
                ModuledForwardStruct&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object declarations_module::ModuledForwardStruct that will be copied.
         */
        eProsima_user_DllExport ModuledForwardStruct& operator =(
                const ModuledForwardStruct& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object declarations_module::ModuledForwardStruct that will be copied.
         */
        eProsima_user_DllExport ModuledForwardStruct& operator =(
                ModuledForwardStruct&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x declarations_module::ModuledForwardStruct object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ModuledForwardStruct& x) const;

        /*!
         * @brief Comparison operator.
         * @param x declarations_module::ModuledForwardStruct object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ModuledForwardStruct& x) const;

        /*!
         * @brief This function sets a value in member var_short
         * @param _var_short New value for member var_short
         */
        eProsima_user_DllExport void var_short(
                int16_t _var_short);

        /*!
         * @brief This function returns the value of member var_short
         * @return Value of member var_short
         */
        eProsima_user_DllExport int16_t var_short() const;

        /*!
         * @brief This function returns a reference to member var_short
         * @return Reference to member var_short
         */
        eProsima_user_DllExport int16_t& var_short();

        /*!
         * @brief This function sets a value in member var_long
         * @param _var_long New value for member var_long
         */
        eProsima_user_DllExport void var_long(
                int32_t _var_long);

        /*!
         * @brief This function returns the value of member var_long
         * @return Value of member var_long
         */
        eProsima_user_DllExport int32_t var_long() const;

        /*!
         * @brief This function returns a reference to member var_long
         * @return Reference to member var_long
         */
        eProsima_user_DllExport int32_t& var_long();


        /*!
        * @brief This function returns the maximum serialized size of an object
        * depending on the buffer alignment.
        * @param current_alignment Buffer alignment.
        * @return Maximum serialized size.
        */
        eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const declarations_module::ModuledForwardStruct& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);



        /*!
         * @brief This function returns the maximum serialized size of the Key of an object
         * depending on the buffer alignment.
         * @param current_alignment Buffer alignment.
         * @return Maximum serialized size.
         */
        eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
                size_t current_alignment = 0);

        /*!
         * @brief This function tells you if the Key has been defined for this type
         */
        eProsima_user_DllExport static bool isKeyDefined();

        /*!
         * @brief This function serializes the key members of an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serializeKey(
                eprosima::fastcdr::Cdr& cdr) const;

    private:

        int16_t m_var_short;
        int32_t m_var_long;

    };
    /*!
     * @brief This class represents the union ModuledForwardUnion defined by the user in the IDL file.
     * @ingroup declarations
     */
    class ModuledForwardUnion
    {
    public:

        /*!
         * @brief Default constructor.
         */
        eProsima_user_DllExport ModuledForwardUnion();

        /*!
         * @brief Default destructor.
         */
        eProsima_user_DllExport ~ModuledForwardUnion();

        /*!
         * @brief Copy constructor.
         * @param x Reference to the object declarations_module::ModuledForwardUnion that will be copied.
         */
        eProsima_user_DllExport ModuledForwardUnion(
                const ModuledForwardUnion& x);

        /*!
         * @brief Move constructor.
         * @param x Reference to the object declarations_module::ModuledForwardUnion that will be copied.
         */
        eProsima_user_DllExport ModuledForwardUnion(
                ModuledForwardUnion&& x) noexcept;

        /*!
         * @brief Copy assignment.
         * @param x Reference to the object declarations_module::ModuledForwardUnion that will be copied.
         */
        eProsima_user_DllExport ModuledForwardUnion& operator =(
                const ModuledForwardUnion& x);

        /*!
         * @brief Move assignment.
         * @param x Reference to the object declarations_module::ModuledForwardUnion that will be copied.
         */
        eProsima_user_DllExport ModuledForwardUnion& operator =(
                ModuledForwardUnion&& x) noexcept;

        /*!
         * @brief Comparison operator.
         * @param x declarations_module::ModuledForwardUnion object to compare.
         */
        eProsima_user_DllExport bool operator ==(
                const ModuledForwardUnion& x) const;

        /*!
         * @brief Comparison operator.
         * @param x declarations_module::ModuledForwardUnion object to compare.
         */
        eProsima_user_DllExport bool operator !=(
                const ModuledForwardUnion& x) const;

        /*!
         * @brief This function sets the discriminator value.
         * @param __d New value for the discriminator.
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
         */
        eProsima_user_DllExport void _d(
                int32_t __d);

        /*!
         * @brief This function returns the value of the discriminator.
         * @return Value of the discriminator
         */
        eProsima_user_DllExport int32_t _d() const;

        /*!
         * @brief This function returns a reference to the discriminator.
         * @return Reference to the discriminator.
         */
        eProsima_user_DllExport int32_t& _d();

        /*!
         * @brief This function sets a value in member case_zero
         * @param _case_zero New value for member case_zero
         */
        eProsima_user_DllExport void case_zero(
                int32_t _case_zero);

        /*!
         * @brief This function returns the value of member case_zero
         * @return Value of member case_zero
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport int32_t case_zero() const;

        /*!
         * @brief This function returns a reference to member case_zero
         * @return Reference to member case_zero
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport int32_t& case_zero();

        /*!
         * @brief This function sets a value in member case_one
         * @param _case_one New value for member case_one
         */
        eProsima_user_DllExport void case_one(
                int32_t _case_one);

        /*!
         * @brief This function returns the value of member case_one
         * @return Value of member case_one
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport int32_t case_one() const;

        /*!
         * @brief This function returns a reference to member case_one
         * @return Reference to member case_one
         * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
         */
        eProsima_user_DllExport int32_t& case_one();


        /*!
         * @brief This function returns the serialized size of a data depending on the buffer alignment.
         * @param data Data which is calculated its serialized size.
         * @param current_alignment Buffer alignment.
         * @return Serialized size.
         */
        eProsima_user_DllExport static size_t getCdrSerializedSize(
                const declarations_module::ModuledForwardUnion& data,
                size_t current_alignment = 0);


        /*!
         * @brief This function serializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void serialize(
                eprosima::fastcdr::Cdr& cdr) const;

        /*!
         * @brief This function deserializes an object using CDR serialization.
         * @param cdr CDR serialization object.
         */
        eProsima_user_DllExport void deserialize(
                eprosima::fastcdr::Cdr& cdr);




    private:

        int32_t m__d;

        int32_t m_case_zero;
        int32_t m_case_one;
    };
} // namespace declarations_module

#endif // _FAST_DDS_GENERATED_DECLARATIONS_H_

