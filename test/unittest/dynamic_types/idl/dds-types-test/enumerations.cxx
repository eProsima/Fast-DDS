// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file enumerations.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "enumerations.h"
#include "enumerationsTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define InnerStructureHelper_max_cdr_typesize 8ULL;

#define InnerEmptyStructureHelper_max_cdr_typesize 0ULL;


#define EnumStructure_max_cdr_typesize 4ULL;


#define BitMaskStructure_max_cdr_typesize 4ULL;





#define InnerStructureHelper_max_key_cdr_typesize 0ULL;

#define InnerEmptyStructureHelper_max_key_cdr_typesize 0ULL;


#define EnumStructure_max_key_cdr_typesize 0ULL;


#define BitMaskStructure_max_key_cdr_typesize 0ULL;












EnumStructure::EnumStructure()
{
    // InnerEnumHelper m_var_InnerEnumHelper
    m_var_InnerEnumHelper = ::ENUM_VALUE_1;

    // Just to register all known types
    registerenumerationsTypes();
}

EnumStructure::~EnumStructure()
{
}

EnumStructure::EnumStructure(
        const EnumStructure& x)
{
    m_var_InnerEnumHelper = x.m_var_InnerEnumHelper;
}

EnumStructure::EnumStructure(
        EnumStructure&& x) noexcept 
{
    m_var_InnerEnumHelper = x.m_var_InnerEnumHelper;
}

EnumStructure& EnumStructure::operator =(
        const EnumStructure& x)
{

    m_var_InnerEnumHelper = x.m_var_InnerEnumHelper;

    return *this;
}

EnumStructure& EnumStructure::operator =(
        EnumStructure&& x) noexcept
{

    m_var_InnerEnumHelper = x.m_var_InnerEnumHelper;

    return *this;
}

bool EnumStructure::operator ==(
        const EnumStructure& x) const
{

    return (m_var_InnerEnumHelper == x.m_var_InnerEnumHelper);
}

bool EnumStructure::operator !=(
        const EnumStructure& x) const
{
    return !(*this == x);
}

size_t EnumStructure::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return EnumStructure_max_cdr_typesize;
}

size_t EnumStructure::getCdrSerializedSize(
        const EnumStructure& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void EnumStructure::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_var_InnerEnumHelper;
}

void EnumStructure::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_var_InnerEnumHelper = (InnerEnumHelper)enum_value;
    }

}

/*!
 * @brief This function sets a value in member var_InnerEnumHelper
 * @param _var_InnerEnumHelper New value for member var_InnerEnumHelper
 */
void EnumStructure::var_InnerEnumHelper(
        InnerEnumHelper _var_InnerEnumHelper)
{
    m_var_InnerEnumHelper = _var_InnerEnumHelper;
}

/*!
 * @brief This function returns the value of member var_InnerEnumHelper
 * @return Value of member var_InnerEnumHelper
 */
InnerEnumHelper EnumStructure::var_InnerEnumHelper() const
{
    return m_var_InnerEnumHelper;
}

/*!
 * @brief This function returns a reference to member var_InnerEnumHelper
 * @return Reference to member var_InnerEnumHelper
 */
InnerEnumHelper& EnumStructure::var_InnerEnumHelper()
{
    return m_var_InnerEnumHelper;
}



size_t EnumStructure::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return EnumStructure_max_key_cdr_typesize;
}

bool EnumStructure::isKeyDefined()
{
    return false;
}

void EnumStructure::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


BitMaskStructure::BitMaskStructure()
{
    // InnerBitMaskHelper m_var_InnerBitMaskHelper
    m_var_InnerBitMaskHelper = static_cast<InnerBitMaskHelper>(0);

    // Just to register all known types
    registerenumerationsTypes();
}

BitMaskStructure::~BitMaskStructure()
{
}

BitMaskStructure::BitMaskStructure(
        const BitMaskStructure& x)
{
    m_var_InnerBitMaskHelper = x.m_var_InnerBitMaskHelper;
}

BitMaskStructure::BitMaskStructure(
        BitMaskStructure&& x) noexcept 
{
    m_var_InnerBitMaskHelper = x.m_var_InnerBitMaskHelper;
}

BitMaskStructure& BitMaskStructure::operator =(
        const BitMaskStructure& x)
{

    m_var_InnerBitMaskHelper = x.m_var_InnerBitMaskHelper;

    return *this;
}

BitMaskStructure& BitMaskStructure::operator =(
        BitMaskStructure&& x) noexcept
{

    m_var_InnerBitMaskHelper = x.m_var_InnerBitMaskHelper;

    return *this;
}

bool BitMaskStructure::operator ==(
        const BitMaskStructure& x) const
{

    return (m_var_InnerBitMaskHelper == x.m_var_InnerBitMaskHelper);
}

bool BitMaskStructure::operator !=(
        const BitMaskStructure& x) const
{
    return !(*this == x);
}

size_t BitMaskStructure::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BitMaskStructure_max_cdr_typesize;
}

size_t BitMaskStructure::getCdrSerializedSize(
        const BitMaskStructure& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    return current_alignment - initial_alignment;
}

void BitMaskStructure::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << (uint32_t)m_var_InnerBitMaskHelper;
}

void BitMaskStructure::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        uint32_t bitmask_value = 0;
        dcdr >> bitmask_value;
        m_var_InnerBitMaskHelper = (InnerBitMaskHelper)bitmask_value;
    }

}

/*!
 * @brief This function sets a value in member var_InnerBitMaskHelper
 * @param _var_InnerBitMaskHelper New value for member var_InnerBitMaskHelper
 */
void BitMaskStructure::var_InnerBitMaskHelper(
        InnerBitMaskHelper _var_InnerBitMaskHelper)
{
    m_var_InnerBitMaskHelper = _var_InnerBitMaskHelper;
}

/*!
 * @brief This function returns the value of member var_InnerBitMaskHelper
 * @return Value of member var_InnerBitMaskHelper
 */
InnerBitMaskHelper BitMaskStructure::var_InnerBitMaskHelper() const
{
    return m_var_InnerBitMaskHelper;
}

/*!
 * @brief This function returns a reference to member var_InnerBitMaskHelper
 * @return Reference to member var_InnerBitMaskHelper
 */
InnerBitMaskHelper& BitMaskStructure::var_InnerBitMaskHelper()
{
    return m_var_InnerBitMaskHelper;
}



size_t BitMaskStructure::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BitMaskStructure_max_key_cdr_typesize;
}

bool BitMaskStructure::isKeyDefined()
{
    return false;
}

void BitMaskStructure::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

