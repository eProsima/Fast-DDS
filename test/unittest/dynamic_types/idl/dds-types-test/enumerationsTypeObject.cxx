// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file enumerationsTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "enumerations.h"
#include "enumerationsTypeObject.h"
#include <mutex>
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerenumerationsTypes()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                TypeObjectFactory *factory = TypeObjectFactory::get_instance();
                factory->add_type_object("InnerEnumHelper", GetInnerEnumHelperIdentifier(true),
                GetInnerEnumHelperObject(true));
                factory->add_type_object("InnerEnumHelper", GetInnerEnumHelperIdentifier(false),
                GetInnerEnumHelperObject(false));

                factory->add_type_object("InnerBitMaskHelper", GetInnerBitMaskHelperIdentifier(true),
                GetInnerBitMaskHelperObject(true));
                factory->add_type_object("InnerBitMaskHelper", GetInnerBitMaskHelperIdentifier(false),
                GetInnerBitMaskHelperObject(false));

                factory->add_type_object("InnerAliasHelper", GetInnerAliasHelperIdentifier(true),
                GetInnerAliasHelperObject(true));
                factory->add_type_object("InnerAliasHelper", GetInnerAliasHelperIdentifier(false),
                GetInnerAliasHelperObject(false));

                factory->add_type_object("InnerStructureHelper", GetInnerStructureHelperIdentifier(true),
                GetInnerStructureHelperObject(true));
                factory->add_type_object("InnerStructureHelper", GetInnerStructureHelperIdentifier(false),
                GetInnerStructureHelperObject(false));

                factory->add_type_object("InnerEmptyStructureHelper", GetInnerEmptyStructureHelperIdentifier(true),
                GetInnerEmptyStructureHelperObject(true));
                factory->add_type_object("InnerEmptyStructureHelper", GetInnerEmptyStructureHelperIdentifier(false),
                GetInnerEmptyStructureHelperObject(false));

                factory->add_type_object("InnerUnionHelper", GetInnerUnionHelperIdentifier(true),
                GetInnerUnionHelperObject(true));
                factory->add_type_object("InnerUnionHelper", GetInnerUnionHelperIdentifier(false),
                GetInnerUnionHelperObject(false));

                factory->add_type_object("InnerBitsetHelper", GetInnerBitsetHelperIdentifier(true),
                GetInnerBitsetHelperObject(true));
                factory->add_type_object("InnerBitsetHelper", GetInnerBitsetHelperIdentifier(false),
                GetInnerBitsetHelperObject(false));

                factory->add_type_object("Inner_alias_bounded_string_helper", GetInner_alias_bounded_string_helperIdentifier(true),
                GetInner_alias_bounded_string_helperObject(true));
                factory->add_type_object("Inner_alias_bounded_string_helper", GetInner_alias_bounded_string_helperIdentifier(false),
                GetInner_alias_bounded_string_helperObject(false));

                factory->add_type_object("Inner_alias_bounded_wstring_helper", GetInner_alias_bounded_wstring_helperIdentifier(true),
                GetInner_alias_bounded_wstring_helperObject(true));
                factory->add_type_object("Inner_alias_bounded_wstring_helper", GetInner_alias_bounded_wstring_helperIdentifier(false),
                GetInner_alias_bounded_wstring_helperObject(false));

                factory->add_type_object("Inner_alias_array_helper", GetInner_alias_array_helperIdentifier(true),
                GetInner_alias_array_helperObject(true));
                factory->add_type_object("Inner_alias_array_helper", GetInner_alias_array_helperIdentifier(false),
                GetInner_alias_array_helperObject(false));

                factory->add_type_object("Inner_alias_sequence_helper", GetInner_alias_sequence_helperIdentifier(true),
                GetInner_alias_sequence_helperObject(true));
                factory->add_type_object("Inner_alias_sequence_helper", GetInner_alias_sequence_helperIdentifier(false),
                GetInner_alias_sequence_helperObject(false));

                factory->add_type_object("Inner_alias_map_helper", GetInner_alias_map_helperIdentifier(true),
                GetInner_alias_map_helperObject(true));
                factory->add_type_object("Inner_alias_map_helper", GetInner_alias_map_helperIdentifier(false),
                GetInner_alias_map_helperObject(false));

                factory->add_type_object("EnumStructure", GetEnumStructureIdentifier(true),
                GetEnumStructureObject(true));
                factory->add_type_object("EnumStructure", GetEnumStructureIdentifier(false),
                GetEnumStructureObject(false));

                factory->add_type_object("BitMaskStructure", GetBitMaskStructureIdentifier(true),
                GetBitMaskStructureObject(true));
                factory->add_type_object("BitMaskStructure", GetBitMaskStructureIdentifier(false),
                GetBitMaskStructureObject(false));

            });
}

const TypeIdentifier* GetEnumStructureIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("EnumStructure", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetEnumStructureObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("EnumStructure", complete);
}

const TypeObject* GetEnumStructureObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("EnumStructure", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteEnumStructureObject();
    }
    //else
    return GetMinimalEnumStructureObject();
}

const TypeObject* GetMinimalEnumStructureObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("EnumStructure", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_var_InnerEnumHelper;
    mst_var_InnerEnumHelper.common().member_id(memberId++);
    mst_var_InnerEnumHelper.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_InnerEnumHelper.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_InnerEnumHelper.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_InnerEnumHelper.common().member_flags().IS_OPTIONAL(false);
    mst_var_InnerEnumHelper.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_InnerEnumHelper.common().member_flags().IS_KEY(false);
    mst_var_InnerEnumHelper.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_InnerEnumHelper.common().member_type_id(*GetInnerEnumHelperIdentifier(false));
    MD5 var_InnerEnumHelper_hash("var_InnerEnumHelper");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_InnerEnumHelper.detail().name_hash()[i] = var_InnerEnumHelper_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_InnerEnumHelper);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("EnumStructure", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("EnumStructure", false);
}

const TypeObject* GetCompleteEnumStructureObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("EnumStructure", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_var_InnerEnumHelper;
    cst_var_InnerEnumHelper.common().member_id(memberId++);
    cst_var_InnerEnumHelper.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_InnerEnumHelper.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_InnerEnumHelper.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_InnerEnumHelper.common().member_flags().IS_OPTIONAL(false);
    cst_var_InnerEnumHelper.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_InnerEnumHelper.common().member_flags().IS_KEY(false);
    cst_var_InnerEnumHelper.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_InnerEnumHelper.common().member_type_id(*GetInnerEnumHelperIdentifier(true));
    cst_var_InnerEnumHelper.detail().name("var_InnerEnumHelper");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_InnerEnumHelper);


    // Header
    type_object->complete().struct_type().header().detail().type_name("EnumStructure");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("EnumStructure", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("EnumStructure", true);
}

const TypeIdentifier* GetBitMaskStructureIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("BitMaskStructure", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetBitMaskStructureObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("BitMaskStructure", complete);
}

const TypeObject* GetBitMaskStructureObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("BitMaskStructure", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteBitMaskStructureObject();
    }
    //else
    return GetMinimalBitMaskStructureObject();
}

const TypeObject* GetMinimalBitMaskStructureObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("BitMaskStructure", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_var_InnerBitMaskHelper;
    mst_var_InnerBitMaskHelper.common().member_id(memberId++);
    mst_var_InnerBitMaskHelper.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_InnerBitMaskHelper.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_InnerBitMaskHelper.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_InnerBitMaskHelper.common().member_flags().IS_OPTIONAL(false);
    mst_var_InnerBitMaskHelper.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_InnerBitMaskHelper.common().member_flags().IS_KEY(false);
    mst_var_InnerBitMaskHelper.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_InnerBitMaskHelper.common().member_type_id(*GetInnerBitMaskHelperIdentifier(false));
    MD5 var_InnerBitMaskHelper_hash("var_InnerBitMaskHelper");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_InnerBitMaskHelper.detail().name_hash()[i] = var_InnerBitMaskHelper_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_InnerBitMaskHelper);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("BitMaskStructure", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("BitMaskStructure", false);
}

const TypeObject* GetCompleteBitMaskStructureObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("BitMaskStructure", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_var_InnerBitMaskHelper;
    cst_var_InnerBitMaskHelper.common().member_id(memberId++);
    cst_var_InnerBitMaskHelper.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_InnerBitMaskHelper.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_InnerBitMaskHelper.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_InnerBitMaskHelper.common().member_flags().IS_OPTIONAL(false);
    cst_var_InnerBitMaskHelper.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_InnerBitMaskHelper.common().member_flags().IS_KEY(false);
    cst_var_InnerBitMaskHelper.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_InnerBitMaskHelper.common().member_type_id(*GetInnerBitMaskHelperIdentifier(true));
    cst_var_InnerBitMaskHelper.detail().name("var_InnerBitMaskHelper");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_InnerBitMaskHelper);


    // Header
    type_object->complete().struct_type().header().detail().type_name("BitMaskStructure");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("BitMaskStructure", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("BitMaskStructure", true);
}
