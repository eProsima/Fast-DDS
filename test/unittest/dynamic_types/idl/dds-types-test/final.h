// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file final.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_FINAL_H_
#define _FAST_DDS_GENERATED_FINAL_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(FINAL_SOURCE)
#define FINAL_DllAPI __declspec( dllexport )
#else
#define FINAL_DllAPI __declspec( dllimport )
#endif // FINAL_SOURCE
#else
#define FINAL_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define FINAL_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure FinalShortStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalShortStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalShortStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalShortStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalShortStruct that will be copied.
     */
    eProsima_user_DllExport FinalShortStruct(
            const FinalShortStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalShortStruct that will be copied.
     */
    eProsima_user_DllExport FinalShortStruct(
            FinalShortStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalShortStruct that will be copied.
     */
    eProsima_user_DllExport FinalShortStruct& operator =(
            const FinalShortStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalShortStruct that will be copied.
     */
    eProsima_user_DllExport FinalShortStruct& operator =(
            FinalShortStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalShortStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalShortStruct& x) const;

    /*!
     * @brief This function sets a value in member var_short
     * @param _var_short New value for member var_short
     */
    eProsima_user_DllExport void var_short(
            int16_t _var_short);

    /*!
     * @brief This function returns the value of member var_short
     * @return Value of member var_short
     */
    eProsima_user_DllExport int16_t var_short() const;

    /*!
     * @brief This function returns a reference to member var_short
     * @return Reference to member var_short
     */
    eProsima_user_DllExport int16_t& var_short();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalShortStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_var_short;

};
/*!
 * @brief This class represents the structure FinalUShortStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalUShortStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalUShortStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalUShortStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalUShortStruct that will be copied.
     */
    eProsima_user_DllExport FinalUShortStruct(
            const FinalUShortStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalUShortStruct that will be copied.
     */
    eProsima_user_DllExport FinalUShortStruct(
            FinalUShortStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalUShortStruct that will be copied.
     */
    eProsima_user_DllExport FinalUShortStruct& operator =(
            const FinalUShortStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalUShortStruct that will be copied.
     */
    eProsima_user_DllExport FinalUShortStruct& operator =(
            FinalUShortStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalUShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalUShortStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalUShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalUShortStruct& x) const;

    /*!
     * @brief This function sets a value in member var_ushort
     * @param _var_ushort New value for member var_ushort
     */
    eProsima_user_DllExport void var_ushort(
            uint16_t _var_ushort);

    /*!
     * @brief This function returns the value of member var_ushort
     * @return Value of member var_ushort
     */
    eProsima_user_DllExport uint16_t var_ushort() const;

    /*!
     * @brief This function returns a reference to member var_ushort
     * @return Reference to member var_ushort
     */
    eProsima_user_DllExport uint16_t& var_ushort();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalUShortStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint16_t m_var_ushort;

};
/*!
 * @brief This class represents the structure FinalLongStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalLongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalLongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalLongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongStruct(
            const FinalLongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongStruct(
            FinalLongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongStruct& operator =(
            const FinalLongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongStruct& operator =(
            FinalLongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalLongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalLongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_long
     * @param _var_long New value for member var_long
     */
    eProsima_user_DllExport void var_long(
            int32_t _var_long);

    /*!
     * @brief This function returns the value of member var_long
     * @return Value of member var_long
     */
    eProsima_user_DllExport int32_t var_long() const;

    /*!
     * @brief This function returns a reference to member var_long
     * @return Reference to member var_long
     */
    eProsima_user_DllExport int32_t& var_long();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalLongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_var_long;

};
/*!
 * @brief This class represents the structure FinalULongStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalULongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalULongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalULongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalULongStruct that will be copied.
     */
    eProsima_user_DllExport FinalULongStruct(
            const FinalULongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalULongStruct that will be copied.
     */
    eProsima_user_DllExport FinalULongStruct(
            FinalULongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalULongStruct that will be copied.
     */
    eProsima_user_DllExport FinalULongStruct& operator =(
            const FinalULongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalULongStruct that will be copied.
     */
    eProsima_user_DllExport FinalULongStruct& operator =(
            FinalULongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalULongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalULongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalULongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalULongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_ulong
     * @param _var_ulong New value for member var_ulong
     */
    eProsima_user_DllExport void var_ulong(
            uint32_t _var_ulong);

    /*!
     * @brief This function returns the value of member var_ulong
     * @return Value of member var_ulong
     */
    eProsima_user_DllExport uint32_t var_ulong() const;

    /*!
     * @brief This function returns a reference to member var_ulong
     * @return Reference to member var_ulong
     */
    eProsima_user_DllExport uint32_t& var_ulong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalULongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_var_ulong;

};
/*!
 * @brief This class represents the structure FinalLongLongStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalLongLongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalLongLongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalLongLongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalLongLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongLongStruct(
            const FinalLongLongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalLongLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongLongStruct(
            FinalLongLongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalLongLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongLongStruct& operator =(
            const FinalLongLongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalLongLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongLongStruct& operator =(
            FinalLongLongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalLongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalLongLongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalLongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalLongLongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_longlong
     * @param _var_longlong New value for member var_longlong
     */
    eProsima_user_DllExport void var_longlong(
            int64_t _var_longlong);

    /*!
     * @brief This function returns the value of member var_longlong
     * @return Value of member var_longlong
     */
    eProsima_user_DllExport int64_t var_longlong() const;

    /*!
     * @brief This function returns a reference to member var_longlong
     * @return Reference to member var_longlong
     */
    eProsima_user_DllExport int64_t& var_longlong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalLongLongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_var_longlong;

};
/*!
 * @brief This class represents the structure FinalULongLongStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalULongLongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalULongLongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalULongLongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalULongLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalULongLongStruct(
            const FinalULongLongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalULongLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalULongLongStruct(
            FinalULongLongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalULongLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalULongLongStruct& operator =(
            const FinalULongLongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalULongLongStruct that will be copied.
     */
    eProsima_user_DllExport FinalULongLongStruct& operator =(
            FinalULongLongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalULongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalULongLongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalULongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalULongLongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_ulonglong
     * @param _var_ulonglong New value for member var_ulonglong
     */
    eProsima_user_DllExport void var_ulonglong(
            uint64_t _var_ulonglong);

    /*!
     * @brief This function returns the value of member var_ulonglong
     * @return Value of member var_ulonglong
     */
    eProsima_user_DllExport uint64_t var_ulonglong() const;

    /*!
     * @brief This function returns a reference to member var_ulonglong
     * @return Reference to member var_ulonglong
     */
    eProsima_user_DllExport uint64_t& var_ulonglong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalULongLongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_var_ulonglong;

};
/*!
 * @brief This class represents the structure FinalFloatStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalFloatStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalFloatStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalFloatStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalFloatStruct that will be copied.
     */
    eProsima_user_DllExport FinalFloatStruct(
            const FinalFloatStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalFloatStruct that will be copied.
     */
    eProsima_user_DllExport FinalFloatStruct(
            FinalFloatStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalFloatStruct that will be copied.
     */
    eProsima_user_DllExport FinalFloatStruct& operator =(
            const FinalFloatStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalFloatStruct that will be copied.
     */
    eProsima_user_DllExport FinalFloatStruct& operator =(
            FinalFloatStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalFloatStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalFloatStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalFloatStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalFloatStruct& x) const;

    /*!
     * @brief This function sets a value in member var_float
     * @param _var_float New value for member var_float
     */
    eProsima_user_DllExport void var_float(
            float _var_float);

    /*!
     * @brief This function returns the value of member var_float
     * @return Value of member var_float
     */
    eProsima_user_DllExport float var_float() const;

    /*!
     * @brief This function returns a reference to member var_float
     * @return Reference to member var_float
     */
    eProsima_user_DllExport float& var_float();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalFloatStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_var_float;

};
/*!
 * @brief This class represents the structure FinalDoubleStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalDoubleStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalDoubleStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalDoubleStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalDoubleStruct that will be copied.
     */
    eProsima_user_DllExport FinalDoubleStruct(
            const FinalDoubleStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalDoubleStruct that will be copied.
     */
    eProsima_user_DllExport FinalDoubleStruct(
            FinalDoubleStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalDoubleStruct that will be copied.
     */
    eProsima_user_DllExport FinalDoubleStruct& operator =(
            const FinalDoubleStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalDoubleStruct that will be copied.
     */
    eProsima_user_DllExport FinalDoubleStruct& operator =(
            FinalDoubleStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalDoubleStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalDoubleStruct& x) const;

    /*!
     * @brief This function sets a value in member var_double
     * @param _var_double New value for member var_double
     */
    eProsima_user_DllExport void var_double(
            double _var_double);

    /*!
     * @brief This function returns the value of member var_double
     * @return Value of member var_double
     */
    eProsima_user_DllExport double var_double() const;

    /*!
     * @brief This function returns a reference to member var_double
     * @return Reference to member var_double
     */
    eProsima_user_DllExport double& var_double();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalDoubleStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_var_double;

};
/*!
 * @brief This class represents the structure FinalLongDoubleStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalLongDoubleStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalLongDoubleStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalLongDoubleStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalLongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongDoubleStruct(
            const FinalLongDoubleStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalLongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongDoubleStruct(
            FinalLongDoubleStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalLongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongDoubleStruct& operator =(
            const FinalLongDoubleStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalLongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport FinalLongDoubleStruct& operator =(
            FinalLongDoubleStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalLongDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalLongDoubleStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalLongDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalLongDoubleStruct& x) const;

    /*!
     * @brief This function sets a value in member var_longdouble
     * @param _var_longdouble New value for member var_longdouble
     */
    eProsima_user_DllExport void var_longdouble(
            long double _var_longdouble);

    /*!
     * @brief This function returns the value of member var_longdouble
     * @return Value of member var_longdouble
     */
    eProsima_user_DllExport long double var_longdouble() const;

    /*!
     * @brief This function returns a reference to member var_longdouble
     * @return Reference to member var_longdouble
     */
    eProsima_user_DllExport long double& var_longdouble();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalLongDoubleStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    long double m_var_longdouble;

};
/*!
 * @brief This class represents the structure FinalBooleanStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalBooleanStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalBooleanStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalBooleanStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalBooleanStruct that will be copied.
     */
    eProsima_user_DllExport FinalBooleanStruct(
            const FinalBooleanStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalBooleanStruct that will be copied.
     */
    eProsima_user_DllExport FinalBooleanStruct(
            FinalBooleanStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalBooleanStruct that will be copied.
     */
    eProsima_user_DllExport FinalBooleanStruct& operator =(
            const FinalBooleanStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalBooleanStruct that will be copied.
     */
    eProsima_user_DllExport FinalBooleanStruct& operator =(
            FinalBooleanStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalBooleanStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalBooleanStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalBooleanStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalBooleanStruct& x) const;

    /*!
     * @brief This function sets a value in member var_boolean
     * @param _var_boolean New value for member var_boolean
     */
    eProsima_user_DllExport void var_boolean(
            bool _var_boolean);

    /*!
     * @brief This function returns the value of member var_boolean
     * @return Value of member var_boolean
     */
    eProsima_user_DllExport bool var_boolean() const;

    /*!
     * @brief This function returns a reference to member var_boolean
     * @return Reference to member var_boolean
     */
    eProsima_user_DllExport bool& var_boolean();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalBooleanStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_var_boolean;

};
/*!
 * @brief This class represents the structure FinalOctetStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalOctetStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalOctetStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalOctetStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalOctetStruct that will be copied.
     */
    eProsima_user_DllExport FinalOctetStruct(
            const FinalOctetStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalOctetStruct that will be copied.
     */
    eProsima_user_DllExport FinalOctetStruct(
            FinalOctetStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalOctetStruct that will be copied.
     */
    eProsima_user_DllExport FinalOctetStruct& operator =(
            const FinalOctetStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalOctetStruct that will be copied.
     */
    eProsima_user_DllExport FinalOctetStruct& operator =(
            FinalOctetStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalOctetStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalOctetStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalOctetStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalOctetStruct& x) const;

    /*!
     * @brief This function sets a value in member var_octet
     * @param _var_octet New value for member var_octet
     */
    eProsima_user_DllExport void var_octet(
            uint8_t _var_octet);

    /*!
     * @brief This function returns the value of member var_octet
     * @return Value of member var_octet
     */
    eProsima_user_DllExport uint8_t var_octet() const;

    /*!
     * @brief This function returns a reference to member var_octet
     * @return Reference to member var_octet
     */
    eProsima_user_DllExport uint8_t& var_octet();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalOctetStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint8_t m_var_octet;

};
/*!
 * @brief This class represents the structure FinalCharStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalCharStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalCharStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalCharStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalCharStruct that will be copied.
     */
    eProsima_user_DllExport FinalCharStruct(
            const FinalCharStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalCharStruct that will be copied.
     */
    eProsima_user_DllExport FinalCharStruct(
            FinalCharStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalCharStruct that will be copied.
     */
    eProsima_user_DllExport FinalCharStruct& operator =(
            const FinalCharStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalCharStruct that will be copied.
     */
    eProsima_user_DllExport FinalCharStruct& operator =(
            FinalCharStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalCharStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalCharStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalCharStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalCharStruct& x) const;

    /*!
     * @brief This function sets a value in member var_char8
     * @param _var_char8 New value for member var_char8
     */
    eProsima_user_DllExport void var_char8(
            char _var_char8);

    /*!
     * @brief This function returns the value of member var_char8
     * @return Value of member var_char8
     */
    eProsima_user_DllExport char var_char8() const;

    /*!
     * @brief This function returns a reference to member var_char8
     * @return Reference to member var_char8
     */
    eProsima_user_DllExport char& var_char8();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalCharStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    char m_var_char8;

};
/*!
 * @brief This class represents the structure FinalWCharStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalWCharStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalWCharStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalWCharStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalWCharStruct that will be copied.
     */
    eProsima_user_DllExport FinalWCharStruct(
            const FinalWCharStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalWCharStruct that will be copied.
     */
    eProsima_user_DllExport FinalWCharStruct(
            FinalWCharStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalWCharStruct that will be copied.
     */
    eProsima_user_DllExport FinalWCharStruct& operator =(
            const FinalWCharStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalWCharStruct that will be copied.
     */
    eProsima_user_DllExport FinalWCharStruct& operator =(
            FinalWCharStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalWCharStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalWCharStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalWCharStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalWCharStruct& x) const;

    /*!
     * @brief This function sets a value in member var_char16
     * @param _var_char16 New value for member var_char16
     */
    eProsima_user_DllExport void var_char16(
            wchar_t _var_char16);

    /*!
     * @brief This function returns the value of member var_char16
     * @return Value of member var_char16
     */
    eProsima_user_DllExport wchar_t var_char16() const;

    /*!
     * @brief This function returns a reference to member var_char16
     * @return Reference to member var_char16
     */
    eProsima_user_DllExport wchar_t& var_char16();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalWCharStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    wchar_t m_var_char16;

};
/*!
 * @brief This class represents the structure FinalEmptyStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalEmptyStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalEmptyStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalEmptyStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalEmptyStruct that will be copied.
     */
    eProsima_user_DllExport FinalEmptyStruct(
            const FinalEmptyStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalEmptyStruct that will be copied.
     */
    eProsima_user_DllExport FinalEmptyStruct(
            FinalEmptyStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalEmptyStruct that will be copied.
     */
    eProsima_user_DllExport FinalEmptyStruct& operator =(
            const FinalEmptyStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalEmptyStruct that will be copied.
     */
    eProsima_user_DllExport FinalEmptyStruct& operator =(
            FinalEmptyStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalEmptyStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalEmptyStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalEmptyStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalEmptyStruct& x) const;


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalEmptyStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:


};
/*!
 * @brief This class represents the structure FinalEmptyInheritanceStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalEmptyInheritanceStruct : public FinalEmptyStruct 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalEmptyInheritanceStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalEmptyInheritanceStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalEmptyInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport FinalEmptyInheritanceStruct(
            const FinalEmptyInheritanceStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalEmptyInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport FinalEmptyInheritanceStruct(
            FinalEmptyInheritanceStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalEmptyInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport FinalEmptyInheritanceStruct& operator =(
            const FinalEmptyInheritanceStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalEmptyInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport FinalEmptyInheritanceStruct& operator =(
            FinalEmptyInheritanceStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalEmptyInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalEmptyInheritanceStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalEmptyInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalEmptyInheritanceStruct& x) const;

    /*!
     * @brief This function copies the value in member var_str
     * @param _var_str New value to be copied in member var_str
     */
    eProsima_user_DllExport void var_str(
            const std::string& _var_str);

    /*!
     * @brief This function moves the value in member var_str
     * @param _var_str New value to be moved in member var_str
     */
    eProsima_user_DllExport void var_str(
            std::string&& _var_str);

    /*!
     * @brief This function returns a constant reference to member var_str
     * @return Constant reference to member var_str
     */
    eProsima_user_DllExport const std::string& var_str() const;

    /*!
     * @brief This function returns a reference to member var_str
     * @return Reference to member var_str
     */
    eProsima_user_DllExport std::string& var_str();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalEmptyInheritanceStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_var_str;

};
/*!
 * @brief This class represents the structure FinalInheritanceStruct defined by the user in the IDL file.
 * @ingroup final
 */
class FinalInheritanceStruct : public FinalShortStruct 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FinalInheritanceStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FinalInheritanceStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FinalInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport FinalInheritanceStruct(
            const FinalInheritanceStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FinalInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport FinalInheritanceStruct(
            FinalInheritanceStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FinalInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport FinalInheritanceStruct& operator =(
            const FinalInheritanceStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FinalInheritanceStruct that will be copied.
     */
    eProsima_user_DllExport FinalInheritanceStruct& operator =(
            FinalInheritanceStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FinalInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FinalInheritanceStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FinalInheritanceStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FinalInheritanceStruct& x) const;

    /*!
     * @brief This function copies the value in member var_str
     * @param _var_str New value to be copied in member var_str
     */
    eProsima_user_DllExport void var_str(
            const std::string& _var_str);

    /*!
     * @brief This function moves the value in member var_str
     * @param _var_str New value to be moved in member var_str
     */
    eProsima_user_DllExport void var_str(
            std::string&& _var_str);

    /*!
     * @brief This function returns a constant reference to member var_str
     * @return Constant reference to member var_str
     */
    eProsima_user_DllExport const std::string& var_str() const;

    /*!
     * @brief This function returns a reference to member var_str
     * @return Reference to member var_str
     */
    eProsima_user_DllExport std::string& var_str();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FinalInheritanceStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_var_str;

};
/*!
 * @brief This class represents the structure InheritanceEmptyStruct defined by the user in the IDL file.
 * @ingroup final
 */
class InheritanceEmptyStruct : public FinalShortStruct 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InheritanceEmptyStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InheritanceEmptyStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object InheritanceEmptyStruct that will be copied.
     */
    eProsima_user_DllExport InheritanceEmptyStruct(
            const InheritanceEmptyStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object InheritanceEmptyStruct that will be copied.
     */
    eProsima_user_DllExport InheritanceEmptyStruct(
            InheritanceEmptyStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object InheritanceEmptyStruct that will be copied.
     */
    eProsima_user_DllExport InheritanceEmptyStruct& operator =(
            const InheritanceEmptyStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object InheritanceEmptyStruct that will be copied.
     */
    eProsima_user_DllExport InheritanceEmptyStruct& operator =(
            InheritanceEmptyStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x InheritanceEmptyStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InheritanceEmptyStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x InheritanceEmptyStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InheritanceEmptyStruct& x) const;


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const InheritanceEmptyStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:


};

#endif // _FAST_DDS_GENERATED_FINAL_H_

