// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file basic_inner_types.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "basic_inner_types.h"
#include "basic_inner_typesTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define InnerStructureHelper_max_cdr_typesize 8ULL;

#define InnerEmptyStructureHelper_max_cdr_typesize 0ULL;









#define InnerStructureHelper_max_key_cdr_typesize 0ULL;

#define InnerEmptyStructureHelper_max_key_cdr_typesize 0ULL;













InnerStructureHelper::InnerStructureHelper()
{
    // long m_field1
    m_field1 = 0;
    // float m_field2
    m_field2 = 0.0;

    // Just to register all known types
    registerbasic_inner_typesTypes();
}

InnerStructureHelper::~InnerStructureHelper()
{


}

InnerStructureHelper::InnerStructureHelper(
        const InnerStructureHelper& x)
{
    m_field1 = x.m_field1;
    m_field2 = x.m_field2;
}

InnerStructureHelper::InnerStructureHelper(
        InnerStructureHelper&& x) noexcept 
{
    m_field1 = x.m_field1;
    m_field2 = x.m_field2;
}

InnerStructureHelper& InnerStructureHelper::operator =(
        const InnerStructureHelper& x)
{

    m_field1 = x.m_field1;
    m_field2 = x.m_field2;

    return *this;
}

InnerStructureHelper& InnerStructureHelper::operator =(
        InnerStructureHelper&& x) noexcept
{

    m_field1 = x.m_field1;
    m_field2 = x.m_field2;

    return *this;
}

bool InnerStructureHelper::operator ==(
        const InnerStructureHelper& x) const
{

    return (m_field1 == x.m_field1 && m_field2 == x.m_field2);
}

bool InnerStructureHelper::operator !=(
        const InnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t InnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerStructureHelper_max_cdr_typesize;
}

size_t InnerStructureHelper::getCdrSerializedSize(
        const InnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void InnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_field1;scdr << m_field2;
}

void InnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_field1;
    dcdr >> m_field2;
}

/*!
 * @brief This function sets a value in member field1
 * @param _field1 New value for member field1
 */
void InnerStructureHelper::field1(
        int32_t _field1)
{
    m_field1 = _field1;
}

/*!
 * @brief This function returns the value of member field1
 * @return Value of member field1
 */
int32_t InnerStructureHelper::field1() const
{
    return m_field1;
}

/*!
 * @brief This function returns a reference to member field1
 * @return Reference to member field1
 */
int32_t& InnerStructureHelper::field1()
{
    return m_field1;
}

/*!
 * @brief This function sets a value in member field2
 * @param _field2 New value for member field2
 */
void InnerStructureHelper::field2(
        float _field2)
{
    m_field2 = _field2;
}

/*!
 * @brief This function returns the value of member field2
 * @return Value of member field2
 */
float InnerStructureHelper::field2() const
{
    return m_field2;
}

/*!
 * @brief This function returns a reference to member field2
 * @return Reference to member field2
 */
float& InnerStructureHelper::field2()
{
    return m_field2;
}



size_t InnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerStructureHelper_max_key_cdr_typesize;
}

bool InnerStructureHelper::isKeyDefined()
{
    return false;
}

void InnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


InnerEmptyStructureHelper::InnerEmptyStructureHelper()
{

    // Just to register all known types
    registerbasic_inner_typesTypes();
}

InnerEmptyStructureHelper::~InnerEmptyStructureHelper()
{
}

InnerEmptyStructureHelper::InnerEmptyStructureHelper(
        const InnerEmptyStructureHelper& x)
{
}

InnerEmptyStructureHelper::InnerEmptyStructureHelper(
        InnerEmptyStructureHelper&& x) noexcept 
{
}

InnerEmptyStructureHelper& InnerEmptyStructureHelper::operator =(
        const InnerEmptyStructureHelper& x)
{


    return *this;
}

InnerEmptyStructureHelper& InnerEmptyStructureHelper::operator =(
        InnerEmptyStructureHelper&& x) noexcept
{


    return *this;
}

bool InnerEmptyStructureHelper::operator ==(
        const InnerEmptyStructureHelper& x) const
{

    return true;
}

bool InnerEmptyStructureHelper::operator !=(
        const InnerEmptyStructureHelper& x) const
{
    return !(*this == x);
}

size_t InnerEmptyStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerEmptyStructureHelper_max_cdr_typesize;
}

size_t InnerEmptyStructureHelper::getCdrSerializedSize(
        const InnerEmptyStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;



    return current_alignment - initial_alignment;
}

void InnerEmptyStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

}

void InnerEmptyStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

}



size_t InnerEmptyStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerEmptyStructureHelper_max_key_cdr_typesize;
}

bool InnerEmptyStructureHelper::isKeyDefined()
{
    return false;
}

void InnerEmptyStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


InnerUnionHelper::InnerUnionHelper()
{
    m__d = 2;
    // long m_longValue
    m_longValue = 0;
    // float m_floatValue
    m_floatValue = 0.0;
    // short m_shortValue
    m_shortValue = 0;
}

InnerUnionHelper::~InnerUnionHelper()
{
}

InnerUnionHelper::InnerUnionHelper(
        const InnerUnionHelper& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_longValue = x.m_longValue;
        break;
        case 1:
        m_floatValue = x.m_floatValue;
        break;

        default:
        m_shortValue = x.m_shortValue;
        break;
    }
}

InnerUnionHelper::InnerUnionHelper(
        InnerUnionHelper&& x) noexcept
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_longValue = x.m_longValue;
        break;
        case 1:
        m_floatValue = x.m_floatValue;
        break;

        default:
        m_shortValue = x.m_shortValue;
        break;
    }
}

InnerUnionHelper& InnerUnionHelper::operator =(
        const InnerUnionHelper& x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_longValue = x.m_longValue;
        break;
        case 1:
        m_floatValue = x.m_floatValue;
        break;

        default:
        m_shortValue = x.m_shortValue;
        break;
    }

    return *this;
}

InnerUnionHelper& InnerUnionHelper::operator =(
        InnerUnionHelper&& x) noexcept
{
    m__d = x.m__d;

    switch(m__d)
    {
        case 0:
        m_longValue = x.m_longValue;
        break;
        case 1:
        m_floatValue = x.m_floatValue;
        break;

        default:
        m_shortValue = x.m_shortValue;
        break;
    }

    return *this;
}

bool InnerUnionHelper::operator ==(
        const InnerUnionHelper& x) const
{
    if (m__d != x.m__d)
    {
        return false;
    }

    switch(m__d)
    {
        case 0:
            return (m_longValue == x.m_longValue);
            break;
        case 1:
            return (m_floatValue == x.m_floatValue);
            break;

        default:
        return m_shortValue == x.m_shortValue;
        break;
    }
    return false;
}

bool InnerUnionHelper::operator !=(
        const InnerUnionHelper& x) const
{
    return !(*this == x);
}

void InnerUnionHelper::_d(
        int32_t __d)
{
    bool b = false;

    switch(m__d)
    {
        case 0:
        switch(__d)
        {
            case 0:
            b = true;
            break;
            default:
            break;
        }
        break;
        case 1:
        switch(__d)
        {
            case 1:
            b = true;
            break;
            default:
            break;
        }
        break;
        default:
        b = true;
        switch(__d)
        {
            case 0:
            case 1:
            b = false;
            break;
            default:
            break;
        }
        break;
    }

    if(!b)
    {
        throw BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t InnerUnionHelper::_d() const
{
    return m__d;
}

int32_t& InnerUnionHelper::_d()
{
    return m__d;
}

void InnerUnionHelper::longValue(
        int32_t _longValue)
{
    m_longValue = _longValue;
    m__d = 0;
}

int32_t InnerUnionHelper::longValue() const
{
    bool b = false;

    switch(m__d)
    {
        case 0:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_longValue;
}

int32_t& InnerUnionHelper::longValue()
{
    bool b = false;

    switch(m__d)
    {
        case 0:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_longValue;
}
void InnerUnionHelper::floatValue(
        float _floatValue)
{
    m_floatValue = _floatValue;
    m__d = 1;
}

float InnerUnionHelper::floatValue() const
{
    bool b = false;

    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_floatValue;
}

float& InnerUnionHelper::floatValue()
{
    bool b = false;

    switch(m__d)
    {
        case 1:
        b = true;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_floatValue;
}
void InnerUnionHelper::shortValue(
        int16_t _shortValue)
{
    m_shortValue = _shortValue;
    m__d = 2;
}

int16_t InnerUnionHelper::shortValue() const
{
    bool b = true;

    switch(m__d)
    {
        case 0:
        case 1:
        b = false;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_shortValue;
}

int16_t& InnerUnionHelper::shortValue()
{
    bool b = true;

    switch(m__d)
    {
        case 0:
        case 1:
        b = false;
        break;
        default:
        break;
    }
    if(!b)
    {
        throw BadParamException("This member has not been selected");
    }

    return m_shortValue;
}

// TODO(Ricardo) Review
size_t InnerUnionHelper::getCdrSerializedSize(
        const InnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    switch(data.m__d)
    {
        case 0:
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

        break;
        case 1:
        current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

        break;

        default:
        current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

        break;
    }

    return current_alignment - initial_alignment;
}

void InnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case 0:
        scdr << m_longValue;
        break;
        case 1:
        scdr << m_floatValue;
        break;

        default:
        scdr << m_shortValue;
        break;
    }
}

void InnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    dcdr >> m__d;

    switch(m__d)
    {
        case 0:
        dcdr >> m_longValue;
        break;
        case 1:
        dcdr >> m_floatValue;
        break;

        default:
        dcdr >> m_shortValue;
        break;
    }
}


InnerBitsetHelper::InnerBitsetHelper()
{
    // Just to register all known types
    registerbasic_inner_typesTypes();
}

InnerBitsetHelper::~InnerBitsetHelper()
{
}

InnerBitsetHelper::InnerBitsetHelper(
        const InnerBitsetHelper& x)
{
    m_bitset = x.m_bitset;
}

InnerBitsetHelper::InnerBitsetHelper(
        InnerBitsetHelper&& x) noexcept 
{
    m_bitset = x.m_bitset;
}

InnerBitsetHelper& InnerBitsetHelper::operator =(
        const InnerBitsetHelper& x)
{

    m_bitset = x.m_bitset;

    return *this;
}

InnerBitsetHelper& InnerBitsetHelper::operator =(
        InnerBitsetHelper&& x) noexcept
{

    m_bitset = x.m_bitset;

    return *this;
}

bool InnerBitsetHelper::operator ==(
        const InnerBitsetHelper& x) const
{

    return m_bitset == x.m_bitset;
}

bool InnerBitsetHelper::operator !=(
        const InnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t InnerBitsetHelper::getCdrSerializedSize(
        const InnerBitsetHelper& ,
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    return current_alignment - initial_alignment;
}

void InnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<char>(a());
    scdr << static_cast<bool>(b());

    scdr << static_cast<uint16_t>(c());
    scdr << static_cast<int16_t>(d());
}

void InnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    char aux_a;
    dcdr >> aux_a;
    a(aux_a);
    bool aux_b;
    dcdr >> aux_b;
    b(aux_b);

    uint16_t aux_c;
    dcdr >> aux_c;
    c(aux_c);
    int16_t aux_d;
    dcdr >> aux_d;
    d(aux_d);
}


void InnerBitsetHelper::a(
        char _a)
{
    int base = 0;
    int size = 3;
    for (int i = base; i < base + size; ++i)
    {
        m_bitset.set(i, !!(_a & 0x01));
        _a = _a >> 1;
    }
}

char InnerBitsetHelper::a() const
{
    int base = 0;
    int size = 3;
    std::bitset<3> aux;
    for (int i = 0; i < size; ++i)
    {
        aux.set(i, m_bitset.test(i + base));
    }
    return static_cast<char>(aux.to_ullong());
}
void InnerBitsetHelper::b(
        bool _b)
{
    int base = 3;
    m_bitset.set(base, _b);
}

bool InnerBitsetHelper::b() const
{
    int base = 3;
    return m_bitset.test(base);
}

void InnerBitsetHelper::c(
        uint16_t _c)
{
    int base = 8;
    int size = 10;
    for (int i = base; i < base + size; ++i)
    {
        m_bitset.set(i, !!(_c & 0x01));
        _c = _c >> 1;
    }
}

uint16_t InnerBitsetHelper::c() const
{
    int base = 8;
    int size = 10;
    std::bitset<10> aux;
    for (int i = 0; i < size; ++i)
    {
        aux.set(i, m_bitset.test(i + base));
    }
    return static_cast<uint16_t>(aux.to_ullong());
}
void InnerBitsetHelper::d(
        int16_t _d)
{
    int base = 18;
    int size = 12;
    for (int i = base; i < base + size; ++i)
    {
        m_bitset.set(i, !!(_d & 0x01));
        _d = _d >> 1;
    }
}

int16_t InnerBitsetHelper::d() const
{
    int base = 18;
    int size = 12;
    std::bitset<12> aux;
    for (int i = 0; i < size; ++i)
    {
        aux.set(i, m_bitset.test(i + base));
    }
    return static_cast<int16_t>(aux.to_ullong());
}





