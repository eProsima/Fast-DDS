// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file basic_inner_types.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_BASIC_INNER_TYPES_H_
#define _FAST_DDS_GENERATED_BASIC_INNER_TYPES_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(BASIC_INNER_TYPES_SOURCE)
#define BASIC_INNER_TYPES_DllAPI __declspec( dllexport )
#else
#define BASIC_INNER_TYPES_DllAPI __declspec( dllimport )
#endif // BASIC_INNER_TYPES_SOURCE
#else
#define BASIC_INNER_TYPES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define BASIC_INNER_TYPES_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the enumeration InnerEnumHelper defined by the user in the IDL file.
 * @ingroup basic_inner_types
 */
enum InnerEnumHelper : uint32_t
{
    ENUM_VALUE_1,
    ENUM_VALUE_2,
    ENUM_VALUE_3
};
/*!
 * @brief This class represents the bitmask InnerBitMaskHelper defined by the user in the IDL file.
 * @ingroup basic_inner_types
 */
enum InnerBitMaskHelper : uint32_t
{
    flag0 = 0x01ull << 0,
    flag1 = 0x01ull << 1,
    flag4 = 0x01ull << 4,
    flag6 = 0x01ull << 6
};
typedef int32_t InnerAliasHelper;
/*!
 * @brief This class represents the structure InnerStructureHelper defined by the user in the IDL file.
 * @ingroup basic_inner_types
 */
class InnerStructureHelper
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InnerStructureHelper();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InnerStructureHelper();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object InnerStructureHelper that will be copied.
     */
    eProsima_user_DllExport InnerStructureHelper(
            const InnerStructureHelper& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object InnerStructureHelper that will be copied.
     */
    eProsima_user_DllExport InnerStructureHelper(
            InnerStructureHelper&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object InnerStructureHelper that will be copied.
     */
    eProsima_user_DllExport InnerStructureHelper& operator =(
            const InnerStructureHelper& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object InnerStructureHelper that will be copied.
     */
    eProsima_user_DllExport InnerStructureHelper& operator =(
            InnerStructureHelper&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x InnerStructureHelper object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InnerStructureHelper& x) const;

    /*!
     * @brief Comparison operator.
     * @param x InnerStructureHelper object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InnerStructureHelper& x) const;

    /*!
     * @brief This function sets a value in member field1
     * @param _field1 New value for member field1
     */
    eProsima_user_DllExport void field1(
            int32_t _field1);

    /*!
     * @brief This function returns the value of member field1
     * @return Value of member field1
     */
    eProsima_user_DllExport int32_t field1() const;

    /*!
     * @brief This function returns a reference to member field1
     * @return Reference to member field1
     */
    eProsima_user_DllExport int32_t& field1();

    /*!
     * @brief This function sets a value in member field2
     * @param _field2 New value for member field2
     */
    eProsima_user_DllExport void field2(
            float _field2);

    /*!
     * @brief This function returns the value of member field2
     * @return Value of member field2
     */
    eProsima_user_DllExport float field2() const;

    /*!
     * @brief This function returns a reference to member field2
     * @return Reference to member field2
     */
    eProsima_user_DllExport float& field2();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const InnerStructureHelper& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_field1;
    float m_field2;

};
/*!
 * @brief This class represents the structure InnerEmptyStructureHelper defined by the user in the IDL file.
 * @ingroup basic_inner_types
 */
class InnerEmptyStructureHelper
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InnerEmptyStructureHelper();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InnerEmptyStructureHelper();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object InnerEmptyStructureHelper that will be copied.
     */
    eProsima_user_DllExport InnerEmptyStructureHelper(
            const InnerEmptyStructureHelper& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object InnerEmptyStructureHelper that will be copied.
     */
    eProsima_user_DllExport InnerEmptyStructureHelper(
            InnerEmptyStructureHelper&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object InnerEmptyStructureHelper that will be copied.
     */
    eProsima_user_DllExport InnerEmptyStructureHelper& operator =(
            const InnerEmptyStructureHelper& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object InnerEmptyStructureHelper that will be copied.
     */
    eProsima_user_DllExport InnerEmptyStructureHelper& operator =(
            InnerEmptyStructureHelper&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x InnerEmptyStructureHelper object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InnerEmptyStructureHelper& x) const;

    /*!
     * @brief Comparison operator.
     * @param x InnerEmptyStructureHelper object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InnerEmptyStructureHelper& x) const;


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const InnerEmptyStructureHelper& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:


};
/*!
 * @brief This class represents the union InnerUnionHelper defined by the user in the IDL file.
 * @ingroup basic_inner_types
 */
class InnerUnionHelper
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InnerUnionHelper();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InnerUnionHelper();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object InnerUnionHelper that will be copied.
     */
    eProsima_user_DllExport InnerUnionHelper(
            const InnerUnionHelper& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object InnerUnionHelper that will be copied.
     */
    eProsima_user_DllExport InnerUnionHelper(
            InnerUnionHelper&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object InnerUnionHelper that will be copied.
     */
    eProsima_user_DllExport InnerUnionHelper& operator =(
            const InnerUnionHelper& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object InnerUnionHelper that will be copied.
     */
    eProsima_user_DllExport InnerUnionHelper& operator =(
            InnerUnionHelper&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x InnerUnionHelper object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InnerUnionHelper& x) const;

    /*!
     * @brief Comparison operator.
     * @param x InnerUnionHelper object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InnerUnionHelper& x) const;

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d();

    /*!
     * @brief This function sets a value in member longValue
     * @param _longValue New value for member longValue
     */
    eProsima_user_DllExport void longValue(
            int32_t _longValue);

    /*!
     * @brief This function returns the value of member longValue
     * @return Value of member longValue
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t longValue() const;

    /*!
     * @brief This function returns a reference to member longValue
     * @return Reference to member longValue
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& longValue();

    /*!
     * @brief This function sets a value in member floatValue
     * @param _floatValue New value for member floatValue
     */
    eProsima_user_DllExport void floatValue(
            float _floatValue);

    /*!
     * @brief This function returns the value of member floatValue
     * @return Value of member floatValue
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float floatValue() const;

    /*!
     * @brief This function returns a reference to member floatValue
     * @return Reference to member floatValue
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport float& floatValue();

    /*!
     * @brief This function sets a value in member shortValue
     * @param _shortValue New value for member shortValue
     */
    eProsima_user_DllExport void shortValue(
            int16_t _shortValue);

    /*!
     * @brief This function returns the value of member shortValue
     * @return Value of member shortValue
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int16_t shortValue() const;

    /*!
     * @brief This function returns a reference to member shortValue
     * @return Reference to member shortValue
     * @exception eprosima::fastcdr::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int16_t& shortValue();


    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const InnerUnionHelper& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




private:

    int32_t m__d;

    int32_t m_longValue;
    float m_floatValue;
    int16_t m_shortValue;
};
/*!
 * @brief This class represents the structure InnerBitsetHelper defined by the user in the IDL file.
 * @ingroup basic_inner_types
 */
class InnerBitsetHelper
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport InnerBitsetHelper();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~InnerBitsetHelper();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object InnerBitsetHelper that will be copied.
     */
    eProsima_user_DllExport InnerBitsetHelper(
            const InnerBitsetHelper& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object InnerBitsetHelper that will be copied.
     */
    eProsima_user_DllExport InnerBitsetHelper(
            InnerBitsetHelper&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object InnerBitsetHelper that will be copied.
     */
    eProsima_user_DllExport InnerBitsetHelper& operator =(
            const InnerBitsetHelper& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object InnerBitsetHelper that will be copied.
     */
    eProsima_user_DllExport InnerBitsetHelper& operator =(
            InnerBitsetHelper&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x InnerBitsetHelper object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const InnerBitsetHelper& x) const;

    /*!
     * @brief Comparison operator.
     * @param x InnerBitsetHelper object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const InnerBitsetHelper& x) const;

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            char _a);

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport char a() const;
    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            bool _b);

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport bool b() const;

    /*!
     * @brief This function sets a value in member c
     * @param _c New value for member c
     */
    eProsima_user_DllExport void c(
            uint16_t _c);

    /*!
     * @brief This function returns the value of member c
     * @return Value of member c
     */
    eProsima_user_DllExport uint16_t c() const;
    /*!
     * @brief This function sets a value in member d
     * @param _d New value for member d
     */
    eProsima_user_DllExport void d(
            int16_t _d);

    /*!
     * @brief This function returns the value of member d
     * @return Value of member d
     */
    eProsima_user_DllExport int16_t d() const;

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const InnerBitsetHelper& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);




private:

    std::bitset<30> m_bitset;
};
typedef eprosima::fastrtps::fixed_string<10> Inner_alias_bounded_string_helper;
typedef std::wstring Inner_alias_bounded_wstring_helper;
typedef std::array<int16_t, 2> Inner_alias_array_helper;
typedef std::vector<int16_t> Inner_alias_sequence_helper;
typedef std::map<int32_t, int32_t> Inner_alias_map_helper;

#endif // _FAST_DDS_GENERATED_BASIC_INNER_TYPES_H_

