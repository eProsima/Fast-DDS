// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file inheritance.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "inheritance.h"
#include "inheritanceTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define InnerStructureHelper_max_cdr_typesize 8ULL;

#define InnerEmptyStructureHelper_max_cdr_typesize 0ULL;
#define InnerStructureHelperChild_max_cdr_typesize 24ULL;

#define StructuresInheritanceStruct_max_cdr_typesize 88ULL;
#define InnerStructureHelperEmptyChild_max_cdr_typesize 8ULL;

#define InnerEmptyStructureHelperChild_max_cdr_typesize 16ULL;
#define BitsetsChildInheritanceStruct_max_cdr_typesize 28ULL;


#define InnerStructureHelperChildChild_max_cdr_typesize 40ULL;







#define InnerStructureHelper_max_key_cdr_typesize 0ULL;

#define InnerEmptyStructureHelper_max_key_cdr_typesize 0ULL;
#define InnerStructureHelperChild_max_key_cdr_typesize 0ULL;

#define StructuresInheritanceStruct_max_key_cdr_typesize 0ULL;
#define InnerStructureHelperEmptyChild_max_key_cdr_typesize 0ULL;

#define InnerEmptyStructureHelperChild_max_key_cdr_typesize 0ULL;
#define BitsetsChildInheritanceStruct_max_key_cdr_typesize 0ULL;


#define InnerStructureHelperChildChild_max_key_cdr_typesize 0ULL;








InnerStructureHelperChild::InnerStructureHelperChild()    : InnerStructureHelper() 
{
    // long long m_var_child_longlong
    m_var_child_longlong = 0;
    // unsigned long long m_var_child_ulonglong
    m_var_child_ulonglong = 0;

    // Just to register all known types
    registerinheritanceTypes();
}

InnerStructureHelperChild::~InnerStructureHelperChild()
{


}

InnerStructureHelperChild::InnerStructureHelperChild(
        const InnerStructureHelperChild& x)    : InnerStructureHelper(x) 
{
    m_var_child_longlong = x.m_var_child_longlong;
    m_var_child_ulonglong = x.m_var_child_ulonglong;
}

InnerStructureHelperChild::InnerStructureHelperChild(
        InnerStructureHelperChild&& x) noexcept     : InnerStructureHelper(std::move(x)) 
{
    m_var_child_longlong = x.m_var_child_longlong;
    m_var_child_ulonglong = x.m_var_child_ulonglong;
}

InnerStructureHelperChild& InnerStructureHelperChild::operator =(
        const InnerStructureHelperChild& x)
{
    InnerStructureHelper::operator =(x); 

    m_var_child_longlong = x.m_var_child_longlong;
    m_var_child_ulonglong = x.m_var_child_ulonglong;

    return *this;
}

InnerStructureHelperChild& InnerStructureHelperChild::operator =(
        InnerStructureHelperChild&& x) noexcept
{
    InnerStructureHelper::operator =(std::move(x)); 

    m_var_child_longlong = x.m_var_child_longlong;
    m_var_child_ulonglong = x.m_var_child_ulonglong;

    return *this;
}

bool InnerStructureHelperChild::operator ==(
        const InnerStructureHelperChild& x) const
{
     if (InnerStructureHelper::operator !=(x)) return false; 

    return (m_var_child_longlong == x.m_var_child_longlong && m_var_child_ulonglong == x.m_var_child_ulonglong);
}

bool InnerStructureHelperChild::operator !=(
        const InnerStructureHelperChild& x) const
{
    return !(*this == x);
}

size_t InnerStructureHelperChild::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerStructureHelperChild_max_cdr_typesize;
}

size_t InnerStructureHelperChild::getCdrSerializedSize(
        const InnerStructureHelperChild& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += InnerStructureHelper::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void InnerStructureHelperChild::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    InnerStructureHelper::serialize(scdr); 

    scdr << m_var_child_longlong;scdr << m_var_child_ulonglong;
}

void InnerStructureHelperChild::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    InnerStructureHelper::deserialize(dcdr); 

    dcdr >> m_var_child_longlong;
    dcdr >> m_var_child_ulonglong;
}

/*!
 * @brief This function sets a value in member var_child_longlong
 * @param _var_child_longlong New value for member var_child_longlong
 */
void InnerStructureHelperChild::var_child_longlong(
        int64_t _var_child_longlong)
{
    m_var_child_longlong = _var_child_longlong;
}

/*!
 * @brief This function returns the value of member var_child_longlong
 * @return Value of member var_child_longlong
 */
int64_t InnerStructureHelperChild::var_child_longlong() const
{
    return m_var_child_longlong;
}

/*!
 * @brief This function returns a reference to member var_child_longlong
 * @return Reference to member var_child_longlong
 */
int64_t& InnerStructureHelperChild::var_child_longlong()
{
    return m_var_child_longlong;
}

/*!
 * @brief This function sets a value in member var_child_ulonglong
 * @param _var_child_ulonglong New value for member var_child_ulonglong
 */
void InnerStructureHelperChild::var_child_ulonglong(
        uint64_t _var_child_ulonglong)
{
    m_var_child_ulonglong = _var_child_ulonglong;
}

/*!
 * @brief This function returns the value of member var_child_ulonglong
 * @return Value of member var_child_ulonglong
 */
uint64_t InnerStructureHelperChild::var_child_ulonglong() const
{
    return m_var_child_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_child_ulonglong
 * @return Reference to member var_child_ulonglong
 */
uint64_t& InnerStructureHelperChild::var_child_ulonglong()
{
    return m_var_child_ulonglong;
}



size_t InnerStructureHelperChild::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerStructureHelperChild_max_key_cdr_typesize;
}

bool InnerStructureHelperChild::isKeyDefined()
{
    if (InnerStructureHelper::isKeyDefined())
        return true;
     return false;
}

void InnerStructureHelperChild::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
 InnerStructureHelper::serializeKey(scdr);  
}


InnerStructureHelperChildChild::InnerStructureHelperChildChild()    : InnerStructureHelperChild() 
{
    // long long m_var_child_childlonglong2
    m_var_child_childlonglong2 = 0;
    // unsigned long long m_var_childchild_ulonglong2
    m_var_childchild_ulonglong2 = 0;

    // Just to register all known types
    registerinheritanceTypes();
}

InnerStructureHelperChildChild::~InnerStructureHelperChildChild()
{


}

InnerStructureHelperChildChild::InnerStructureHelperChildChild(
        const InnerStructureHelperChildChild& x)    : InnerStructureHelperChild(x) 
{
    m_var_child_childlonglong2 = x.m_var_child_childlonglong2;
    m_var_childchild_ulonglong2 = x.m_var_childchild_ulonglong2;
}

InnerStructureHelperChildChild::InnerStructureHelperChildChild(
        InnerStructureHelperChildChild&& x) noexcept     : InnerStructureHelperChild(std::move(x)) 
{
    m_var_child_childlonglong2 = x.m_var_child_childlonglong2;
    m_var_childchild_ulonglong2 = x.m_var_childchild_ulonglong2;
}

InnerStructureHelperChildChild& InnerStructureHelperChildChild::operator =(
        const InnerStructureHelperChildChild& x)
{
    InnerStructureHelperChild::operator =(x); 

    m_var_child_childlonglong2 = x.m_var_child_childlonglong2;
    m_var_childchild_ulonglong2 = x.m_var_childchild_ulonglong2;

    return *this;
}

InnerStructureHelperChildChild& InnerStructureHelperChildChild::operator =(
        InnerStructureHelperChildChild&& x) noexcept
{
    InnerStructureHelperChild::operator =(std::move(x)); 

    m_var_child_childlonglong2 = x.m_var_child_childlonglong2;
    m_var_childchild_ulonglong2 = x.m_var_childchild_ulonglong2;

    return *this;
}

bool InnerStructureHelperChildChild::operator ==(
        const InnerStructureHelperChildChild& x) const
{
     if (InnerStructureHelperChild::operator !=(x)) return false; 

    return (m_var_child_childlonglong2 == x.m_var_child_childlonglong2 && m_var_childchild_ulonglong2 == x.m_var_childchild_ulonglong2);
}

bool InnerStructureHelperChildChild::operator !=(
        const InnerStructureHelperChildChild& x) const
{
    return !(*this == x);
}

size_t InnerStructureHelperChildChild::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerStructureHelperChildChild_max_cdr_typesize;
}

size_t InnerStructureHelperChildChild::getCdrSerializedSize(
        const InnerStructureHelperChildChild& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += InnerStructureHelperChild::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void InnerStructureHelperChildChild::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    InnerStructureHelperChild::serialize(scdr); 

    scdr << m_var_child_childlonglong2;scdr << m_var_childchild_ulonglong2;
}

void InnerStructureHelperChildChild::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    InnerStructureHelperChild::deserialize(dcdr); 

    dcdr >> m_var_child_childlonglong2;
    dcdr >> m_var_childchild_ulonglong2;
}

/*!
 * @brief This function sets a value in member var_child_childlonglong2
 * @param _var_child_childlonglong2 New value for member var_child_childlonglong2
 */
void InnerStructureHelperChildChild::var_child_childlonglong2(
        int64_t _var_child_childlonglong2)
{
    m_var_child_childlonglong2 = _var_child_childlonglong2;
}

/*!
 * @brief This function returns the value of member var_child_childlonglong2
 * @return Value of member var_child_childlonglong2
 */
int64_t InnerStructureHelperChildChild::var_child_childlonglong2() const
{
    return m_var_child_childlonglong2;
}

/*!
 * @brief This function returns a reference to member var_child_childlonglong2
 * @return Reference to member var_child_childlonglong2
 */
int64_t& InnerStructureHelperChildChild::var_child_childlonglong2()
{
    return m_var_child_childlonglong2;
}

/*!
 * @brief This function sets a value in member var_childchild_ulonglong2
 * @param _var_childchild_ulonglong2 New value for member var_childchild_ulonglong2
 */
void InnerStructureHelperChildChild::var_childchild_ulonglong2(
        uint64_t _var_childchild_ulonglong2)
{
    m_var_childchild_ulonglong2 = _var_childchild_ulonglong2;
}

/*!
 * @brief This function returns the value of member var_childchild_ulonglong2
 * @return Value of member var_childchild_ulonglong2
 */
uint64_t InnerStructureHelperChildChild::var_childchild_ulonglong2() const
{
    return m_var_childchild_ulonglong2;
}

/*!
 * @brief This function returns a reference to member var_childchild_ulonglong2
 * @return Reference to member var_childchild_ulonglong2
 */
uint64_t& InnerStructureHelperChildChild::var_childchild_ulonglong2()
{
    return m_var_childchild_ulonglong2;
}



size_t InnerStructureHelperChildChild::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerStructureHelperChildChild_max_key_cdr_typesize;
}

bool InnerStructureHelperChildChild::isKeyDefined()
{
    if (InnerStructureHelperChild::isKeyDefined())
        return true;
     return false;
}

void InnerStructureHelperChildChild::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
 InnerStructureHelperChild::serializeKey(scdr);  
}


InnerStructureHelperEmptyChild::InnerStructureHelperEmptyChild()    : InnerStructureHelper() 
{

    // Just to register all known types
    registerinheritanceTypes();
}

InnerStructureHelperEmptyChild::~InnerStructureHelperEmptyChild()
{
}

InnerStructureHelperEmptyChild::InnerStructureHelperEmptyChild(
        const InnerStructureHelperEmptyChild& x)    : InnerStructureHelper(x) 
{
}

InnerStructureHelperEmptyChild::InnerStructureHelperEmptyChild(
        InnerStructureHelperEmptyChild&& x) noexcept     : InnerStructureHelper(std::move(x)) 
{
}

InnerStructureHelperEmptyChild& InnerStructureHelperEmptyChild::operator =(
        const InnerStructureHelperEmptyChild& x)
{
    InnerStructureHelper::operator =(x); 


    return *this;
}

InnerStructureHelperEmptyChild& InnerStructureHelperEmptyChild::operator =(
        InnerStructureHelperEmptyChild&& x) noexcept
{
    InnerStructureHelper::operator =(std::move(x)); 


    return *this;
}

bool InnerStructureHelperEmptyChild::operator ==(
        const InnerStructureHelperEmptyChild& x) const
{
     if (InnerStructureHelper::operator !=(x)) return false; 

    return true;
}

bool InnerStructureHelperEmptyChild::operator !=(
        const InnerStructureHelperEmptyChild& x) const
{
    return !(*this == x);
}

size_t InnerStructureHelperEmptyChild::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerStructureHelperEmptyChild_max_cdr_typesize;
}

size_t InnerStructureHelperEmptyChild::getCdrSerializedSize(
        const InnerStructureHelperEmptyChild& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += InnerStructureHelper::getCdrSerializedSize(data, current_alignment); 


    return current_alignment - initial_alignment;
}

void InnerStructureHelperEmptyChild::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    InnerStructureHelper::serialize(scdr); 

}

void InnerStructureHelperEmptyChild::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    InnerStructureHelper::deserialize(dcdr); 

}



size_t InnerStructureHelperEmptyChild::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerStructureHelperEmptyChild_max_key_cdr_typesize;
}

bool InnerStructureHelperEmptyChild::isKeyDefined()
{
    if (InnerStructureHelper::isKeyDefined())
        return true;
     return false;
}

void InnerStructureHelperEmptyChild::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
 InnerStructureHelper::serializeKey(scdr);  
}


InnerEmptyStructureHelperChild::InnerEmptyStructureHelperChild()    : InnerEmptyStructureHelper() 
{
    // long long m_var_child_longlong
    m_var_child_longlong = 0;
    // unsigned long long m_var_child_ulonglong
    m_var_child_ulonglong = 0;

    // Just to register all known types
    registerinheritanceTypes();
}

InnerEmptyStructureHelperChild::~InnerEmptyStructureHelperChild()
{


}

InnerEmptyStructureHelperChild::InnerEmptyStructureHelperChild(
        const InnerEmptyStructureHelperChild& x)    : InnerEmptyStructureHelper(x) 
{
    m_var_child_longlong = x.m_var_child_longlong;
    m_var_child_ulonglong = x.m_var_child_ulonglong;
}

InnerEmptyStructureHelperChild::InnerEmptyStructureHelperChild(
        InnerEmptyStructureHelperChild&& x) noexcept     : InnerEmptyStructureHelper(std::move(x)) 
{
    m_var_child_longlong = x.m_var_child_longlong;
    m_var_child_ulonglong = x.m_var_child_ulonglong;
}

InnerEmptyStructureHelperChild& InnerEmptyStructureHelperChild::operator =(
        const InnerEmptyStructureHelperChild& x)
{
    InnerEmptyStructureHelper::operator =(x); 

    m_var_child_longlong = x.m_var_child_longlong;
    m_var_child_ulonglong = x.m_var_child_ulonglong;

    return *this;
}

InnerEmptyStructureHelperChild& InnerEmptyStructureHelperChild::operator =(
        InnerEmptyStructureHelperChild&& x) noexcept
{
    InnerEmptyStructureHelper::operator =(std::move(x)); 

    m_var_child_longlong = x.m_var_child_longlong;
    m_var_child_ulonglong = x.m_var_child_ulonglong;

    return *this;
}

bool InnerEmptyStructureHelperChild::operator ==(
        const InnerEmptyStructureHelperChild& x) const
{
     if (InnerEmptyStructureHelper::operator !=(x)) return false; 

    return (m_var_child_longlong == x.m_var_child_longlong && m_var_child_ulonglong == x.m_var_child_ulonglong);
}

bool InnerEmptyStructureHelperChild::operator !=(
        const InnerEmptyStructureHelperChild& x) const
{
    return !(*this == x);
}

size_t InnerEmptyStructureHelperChild::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerEmptyStructureHelperChild_max_cdr_typesize;
}

size_t InnerEmptyStructureHelperChild::getCdrSerializedSize(
        const InnerEmptyStructureHelperChild& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += InnerEmptyStructureHelper::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void InnerEmptyStructureHelperChild::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    InnerEmptyStructureHelper::serialize(scdr); 

    scdr << m_var_child_longlong;scdr << m_var_child_ulonglong;
}

void InnerEmptyStructureHelperChild::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    InnerEmptyStructureHelper::deserialize(dcdr); 

    dcdr >> m_var_child_longlong;
    dcdr >> m_var_child_ulonglong;
}

/*!
 * @brief This function sets a value in member var_child_longlong
 * @param _var_child_longlong New value for member var_child_longlong
 */
void InnerEmptyStructureHelperChild::var_child_longlong(
        int64_t _var_child_longlong)
{
    m_var_child_longlong = _var_child_longlong;
}

/*!
 * @brief This function returns the value of member var_child_longlong
 * @return Value of member var_child_longlong
 */
int64_t InnerEmptyStructureHelperChild::var_child_longlong() const
{
    return m_var_child_longlong;
}

/*!
 * @brief This function returns a reference to member var_child_longlong
 * @return Reference to member var_child_longlong
 */
int64_t& InnerEmptyStructureHelperChild::var_child_longlong()
{
    return m_var_child_longlong;
}

/*!
 * @brief This function sets a value in member var_child_ulonglong
 * @param _var_child_ulonglong New value for member var_child_ulonglong
 */
void InnerEmptyStructureHelperChild::var_child_ulonglong(
        uint64_t _var_child_ulonglong)
{
    m_var_child_ulonglong = _var_child_ulonglong;
}

/*!
 * @brief This function returns the value of member var_child_ulonglong
 * @return Value of member var_child_ulonglong
 */
uint64_t InnerEmptyStructureHelperChild::var_child_ulonglong() const
{
    return m_var_child_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_child_ulonglong
 * @return Reference to member var_child_ulonglong
 */
uint64_t& InnerEmptyStructureHelperChild::var_child_ulonglong()
{
    return m_var_child_ulonglong;
}



size_t InnerEmptyStructureHelperChild::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return InnerEmptyStructureHelperChild_max_key_cdr_typesize;
}

bool InnerEmptyStructureHelperChild::isKeyDefined()
{
    if (InnerEmptyStructureHelper::isKeyDefined())
        return true;
     return false;
}

void InnerEmptyStructureHelperChild::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
 InnerEmptyStructureHelper::serializeKey(scdr);  
}


StructuresInheritanceStruct::StructuresInheritanceStruct()
{
    // InnerStructureHelperChild m_var_InnerStructureHelperChild

    // InnerStructureHelperChildChild m_var_InnerStructureHelperChildChild

    // InnerStructureHelperEmptyChild m_var_InnerStructureHelperEmptyChild

    // InnerEmptyStructureHelperChild m_var_InnerEmptyStructureHelperChild


    // Just to register all known types
    registerinheritanceTypes();
}

StructuresInheritanceStruct::~StructuresInheritanceStruct()
{




}

StructuresInheritanceStruct::StructuresInheritanceStruct(
        const StructuresInheritanceStruct& x)
{
    m_var_InnerStructureHelperChild = x.m_var_InnerStructureHelperChild;
    m_var_InnerStructureHelperChildChild = x.m_var_InnerStructureHelperChildChild;
    m_var_InnerStructureHelperEmptyChild = x.m_var_InnerStructureHelperEmptyChild;
    m_var_InnerEmptyStructureHelperChild = x.m_var_InnerEmptyStructureHelperChild;
}

StructuresInheritanceStruct::StructuresInheritanceStruct(
        StructuresInheritanceStruct&& x) noexcept 
{
    m_var_InnerStructureHelperChild = std::move(x.m_var_InnerStructureHelperChild);
    m_var_InnerStructureHelperChildChild = std::move(x.m_var_InnerStructureHelperChildChild);
    m_var_InnerStructureHelperEmptyChild = std::move(x.m_var_InnerStructureHelperEmptyChild);
    m_var_InnerEmptyStructureHelperChild = std::move(x.m_var_InnerEmptyStructureHelperChild);
}

StructuresInheritanceStruct& StructuresInheritanceStruct::operator =(
        const StructuresInheritanceStruct& x)
{

    m_var_InnerStructureHelperChild = x.m_var_InnerStructureHelperChild;
    m_var_InnerStructureHelperChildChild = x.m_var_InnerStructureHelperChildChild;
    m_var_InnerStructureHelperEmptyChild = x.m_var_InnerStructureHelperEmptyChild;
    m_var_InnerEmptyStructureHelperChild = x.m_var_InnerEmptyStructureHelperChild;

    return *this;
}

StructuresInheritanceStruct& StructuresInheritanceStruct::operator =(
        StructuresInheritanceStruct&& x) noexcept
{

    m_var_InnerStructureHelperChild = std::move(x.m_var_InnerStructureHelperChild);
    m_var_InnerStructureHelperChildChild = std::move(x.m_var_InnerStructureHelperChildChild);
    m_var_InnerStructureHelperEmptyChild = std::move(x.m_var_InnerStructureHelperEmptyChild);
    m_var_InnerEmptyStructureHelperChild = std::move(x.m_var_InnerEmptyStructureHelperChild);

    return *this;
}

bool StructuresInheritanceStruct::operator ==(
        const StructuresInheritanceStruct& x) const
{

    return (m_var_InnerStructureHelperChild == x.m_var_InnerStructureHelperChild && m_var_InnerStructureHelperChildChild == x.m_var_InnerStructureHelperChildChild && m_var_InnerStructureHelperEmptyChild == x.m_var_InnerStructureHelperEmptyChild && m_var_InnerEmptyStructureHelperChild == x.m_var_InnerEmptyStructureHelperChild);
}

bool StructuresInheritanceStruct::operator !=(
        const StructuresInheritanceStruct& x) const
{
    return !(*this == x);
}

size_t StructuresInheritanceStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return StructuresInheritanceStruct_max_cdr_typesize;
}

size_t StructuresInheritanceStruct::getCdrSerializedSize(
        const StructuresInheritanceStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += InnerStructureHelperChild::getCdrSerializedSize(data.var_InnerStructureHelperChild(), current_alignment);
    current_alignment += InnerStructureHelperChildChild::getCdrSerializedSize(data.var_InnerStructureHelperChildChild(), current_alignment);
    current_alignment += InnerStructureHelperEmptyChild::getCdrSerializedSize(data.var_InnerStructureHelperEmptyChild(), current_alignment);
    current_alignment += InnerEmptyStructureHelperChild::getCdrSerializedSize(data.var_InnerEmptyStructureHelperChild(), current_alignment);

    return current_alignment - initial_alignment;
}

void StructuresInheritanceStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_var_InnerStructureHelperChild;scdr << m_var_InnerStructureHelperChildChild;scdr << m_var_InnerStructureHelperEmptyChild;scdr << m_var_InnerEmptyStructureHelperChild;
}

void StructuresInheritanceStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_var_InnerStructureHelperChild;
    dcdr >> m_var_InnerStructureHelperChildChild;
    dcdr >> m_var_InnerStructureHelperEmptyChild;
    dcdr >> m_var_InnerEmptyStructureHelperChild;
}

/*!
 * @brief This function copies the value in member var_InnerStructureHelperChild
 * @param _var_InnerStructureHelperChild New value to be copied in member var_InnerStructureHelperChild
 */
void StructuresInheritanceStruct::var_InnerStructureHelperChild(
        const InnerStructureHelperChild& _var_InnerStructureHelperChild)
{
    m_var_InnerStructureHelperChild = _var_InnerStructureHelperChild;
}

/*!
 * @brief This function moves the value in member var_InnerStructureHelperChild
 * @param _var_InnerStructureHelperChild New value to be moved in member var_InnerStructureHelperChild
 */
void StructuresInheritanceStruct::var_InnerStructureHelperChild(
        InnerStructureHelperChild&& _var_InnerStructureHelperChild)
{
    m_var_InnerStructureHelperChild = std::move(_var_InnerStructureHelperChild);
}

/*!
 * @brief This function returns a constant reference to member var_InnerStructureHelperChild
 * @return Constant reference to member var_InnerStructureHelperChild
 */
const InnerStructureHelperChild& StructuresInheritanceStruct::var_InnerStructureHelperChild() const
{
    return m_var_InnerStructureHelperChild;
}

/*!
 * @brief This function returns a reference to member var_InnerStructureHelperChild
 * @return Reference to member var_InnerStructureHelperChild
 */
InnerStructureHelperChild& StructuresInheritanceStruct::var_InnerStructureHelperChild()
{
    return m_var_InnerStructureHelperChild;
}
/*!
 * @brief This function copies the value in member var_InnerStructureHelperChildChild
 * @param _var_InnerStructureHelperChildChild New value to be copied in member var_InnerStructureHelperChildChild
 */
void StructuresInheritanceStruct::var_InnerStructureHelperChildChild(
        const InnerStructureHelperChildChild& _var_InnerStructureHelperChildChild)
{
    m_var_InnerStructureHelperChildChild = _var_InnerStructureHelperChildChild;
}

/*!
 * @brief This function moves the value in member var_InnerStructureHelperChildChild
 * @param _var_InnerStructureHelperChildChild New value to be moved in member var_InnerStructureHelperChildChild
 */
void StructuresInheritanceStruct::var_InnerStructureHelperChildChild(
        InnerStructureHelperChildChild&& _var_InnerStructureHelperChildChild)
{
    m_var_InnerStructureHelperChildChild = std::move(_var_InnerStructureHelperChildChild);
}

/*!
 * @brief This function returns a constant reference to member var_InnerStructureHelperChildChild
 * @return Constant reference to member var_InnerStructureHelperChildChild
 */
const InnerStructureHelperChildChild& StructuresInheritanceStruct::var_InnerStructureHelperChildChild() const
{
    return m_var_InnerStructureHelperChildChild;
}

/*!
 * @brief This function returns a reference to member var_InnerStructureHelperChildChild
 * @return Reference to member var_InnerStructureHelperChildChild
 */
InnerStructureHelperChildChild& StructuresInheritanceStruct::var_InnerStructureHelperChildChild()
{
    return m_var_InnerStructureHelperChildChild;
}
/*!
 * @brief This function copies the value in member var_InnerStructureHelperEmptyChild
 * @param _var_InnerStructureHelperEmptyChild New value to be copied in member var_InnerStructureHelperEmptyChild
 */
void StructuresInheritanceStruct::var_InnerStructureHelperEmptyChild(
        const InnerStructureHelperEmptyChild& _var_InnerStructureHelperEmptyChild)
{
    m_var_InnerStructureHelperEmptyChild = _var_InnerStructureHelperEmptyChild;
}

/*!
 * @brief This function moves the value in member var_InnerStructureHelperEmptyChild
 * @param _var_InnerStructureHelperEmptyChild New value to be moved in member var_InnerStructureHelperEmptyChild
 */
void StructuresInheritanceStruct::var_InnerStructureHelperEmptyChild(
        InnerStructureHelperEmptyChild&& _var_InnerStructureHelperEmptyChild)
{
    m_var_InnerStructureHelperEmptyChild = std::move(_var_InnerStructureHelperEmptyChild);
}

/*!
 * @brief This function returns a constant reference to member var_InnerStructureHelperEmptyChild
 * @return Constant reference to member var_InnerStructureHelperEmptyChild
 */
const InnerStructureHelperEmptyChild& StructuresInheritanceStruct::var_InnerStructureHelperEmptyChild() const
{
    return m_var_InnerStructureHelperEmptyChild;
}

/*!
 * @brief This function returns a reference to member var_InnerStructureHelperEmptyChild
 * @return Reference to member var_InnerStructureHelperEmptyChild
 */
InnerStructureHelperEmptyChild& StructuresInheritanceStruct::var_InnerStructureHelperEmptyChild()
{
    return m_var_InnerStructureHelperEmptyChild;
}
/*!
 * @brief This function copies the value in member var_InnerEmptyStructureHelperChild
 * @param _var_InnerEmptyStructureHelperChild New value to be copied in member var_InnerEmptyStructureHelperChild
 */
void StructuresInheritanceStruct::var_InnerEmptyStructureHelperChild(
        const InnerEmptyStructureHelperChild& _var_InnerEmptyStructureHelperChild)
{
    m_var_InnerEmptyStructureHelperChild = _var_InnerEmptyStructureHelperChild;
}

/*!
 * @brief This function moves the value in member var_InnerEmptyStructureHelperChild
 * @param _var_InnerEmptyStructureHelperChild New value to be moved in member var_InnerEmptyStructureHelperChild
 */
void StructuresInheritanceStruct::var_InnerEmptyStructureHelperChild(
        InnerEmptyStructureHelperChild&& _var_InnerEmptyStructureHelperChild)
{
    m_var_InnerEmptyStructureHelperChild = std::move(_var_InnerEmptyStructureHelperChild);
}

/*!
 * @brief This function returns a constant reference to member var_InnerEmptyStructureHelperChild
 * @return Constant reference to member var_InnerEmptyStructureHelperChild
 */
const InnerEmptyStructureHelperChild& StructuresInheritanceStruct::var_InnerEmptyStructureHelperChild() const
{
    return m_var_InnerEmptyStructureHelperChild;
}

/*!
 * @brief This function returns a reference to member var_InnerEmptyStructureHelperChild
 * @return Reference to member var_InnerEmptyStructureHelperChild
 */
InnerEmptyStructureHelperChild& StructuresInheritanceStruct::var_InnerEmptyStructureHelperChild()
{
    return m_var_InnerEmptyStructureHelperChild;
}


size_t StructuresInheritanceStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return StructuresInheritanceStruct_max_key_cdr_typesize;
}

bool StructuresInheritanceStruct::isKeyDefined()
{
    return false;
}

void StructuresInheritanceStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


InnerBitsetHelperChild::InnerBitsetHelperChild()    : InnerBitsetHelper() 
{
    // Just to register all known types
    registerinheritanceTypes();
}

InnerBitsetHelperChild::~InnerBitsetHelperChild()
{
}

InnerBitsetHelperChild::InnerBitsetHelperChild(
        const InnerBitsetHelperChild& x)    : InnerBitsetHelper(x) 
{
    m_bitset = x.m_bitset;
}

InnerBitsetHelperChild::InnerBitsetHelperChild(
        InnerBitsetHelperChild&& x) noexcept     : InnerBitsetHelper(std::move(x)) 
{
    m_bitset = x.m_bitset;
}

InnerBitsetHelperChild& InnerBitsetHelperChild::operator =(
        const InnerBitsetHelperChild& x)
{
    InnerBitsetHelper::operator =(x); 

    m_bitset = x.m_bitset;

    return *this;
}

InnerBitsetHelperChild& InnerBitsetHelperChild::operator =(
        InnerBitsetHelperChild&& x) noexcept
{
    InnerBitsetHelper::operator =(std::move(x)); 

    m_bitset = x.m_bitset;

    return *this;
}

bool InnerBitsetHelperChild::operator ==(
        const InnerBitsetHelperChild& x) const
{
     if (InnerBitsetHelper::operator !=(x)) return false; 

    return m_bitset == x.m_bitset;
}

bool InnerBitsetHelperChild::operator !=(
        const InnerBitsetHelperChild& x) const
{
    return !(*this == x);
}

size_t InnerBitsetHelperChild::getCdrSerializedSize(
        const InnerBitsetHelperChild& data,
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += InnerBitsetHelper::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

void InnerBitsetHelperChild::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    InnerBitsetHelper::serialize(scdr); 

    scdr << static_cast<uint32_t>(child_w());
}

void InnerBitsetHelperChild::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    InnerBitsetHelper::deserialize(dcdr); 

    uint32_t aux_child_w;
    dcdr >> aux_child_w;
    child_w(aux_child_w);
}


void InnerBitsetHelperChild::child_w(
        uint32_t _child_w)
{
    int base = 0;
    int size = 17;
    for (int i = base; i < base + size; ++i)
    {
        m_bitset.set(i, !!(_child_w & 0x01));
        _child_w = _child_w >> 1;
    }
}

uint32_t InnerBitsetHelperChild::child_w() const
{
    int base = 0;
    int size = 17;
    std::bitset<17> aux;
    for (int i = 0; i < size; ++i)
    {
        aux.set(i, m_bitset.test(i + base));
    }
    return static_cast<uint32_t>(aux.to_ullong());
}

InnerBitsetHelperChildChild::InnerBitsetHelperChildChild()    : InnerBitsetHelperChild() 
{
    // Just to register all known types
    registerinheritanceTypes();
}

InnerBitsetHelperChildChild::~InnerBitsetHelperChildChild()
{
}

InnerBitsetHelperChildChild::InnerBitsetHelperChildChild(
        const InnerBitsetHelperChildChild& x)    : InnerBitsetHelperChild(x) 
{
    m_bitset = x.m_bitset;
}

InnerBitsetHelperChildChild::InnerBitsetHelperChildChild(
        InnerBitsetHelperChildChild&& x) noexcept     : InnerBitsetHelperChild(std::move(x)) 
{
    m_bitset = x.m_bitset;
}

InnerBitsetHelperChildChild& InnerBitsetHelperChildChild::operator =(
        const InnerBitsetHelperChildChild& x)
{
    InnerBitsetHelperChild::operator =(x); 

    m_bitset = x.m_bitset;

    return *this;
}

InnerBitsetHelperChildChild& InnerBitsetHelperChildChild::operator =(
        InnerBitsetHelperChildChild&& x) noexcept
{
    InnerBitsetHelperChild::operator =(std::move(x)); 

    m_bitset = x.m_bitset;

    return *this;
}

bool InnerBitsetHelperChildChild::operator ==(
        const InnerBitsetHelperChildChild& x) const
{
     if (InnerBitsetHelperChild::operator !=(x)) return false; 

    return m_bitset == x.m_bitset;
}

bool InnerBitsetHelperChildChild::operator !=(
        const InnerBitsetHelperChildChild& x) const
{
    return !(*this == x);
}

size_t InnerBitsetHelperChildChild::getCdrSerializedSize(
        const InnerBitsetHelperChildChild& data,
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += InnerBitsetHelperChild::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    return current_alignment - initial_alignment;
}

void InnerBitsetHelperChildChild::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    InnerBitsetHelperChild::serialize(scdr); 

    scdr << static_cast<uint32_t>(childchild_z());
}

void InnerBitsetHelperChildChild::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    InnerBitsetHelperChild::deserialize(dcdr); 

    uint32_t aux_childchild_z;
    dcdr >> aux_childchild_z;
    childchild_z(aux_childchild_z);
}


void InnerBitsetHelperChildChild::childchild_z(
        uint32_t _childchild_z)
{
    int base = 0;
    int size = 17;
    for (int i = base; i < base + size; ++i)
    {
        m_bitset.set(i, !!(_childchild_z & 0x01));
        _childchild_z = _childchild_z >> 1;
    }
}

uint32_t InnerBitsetHelperChildChild::childchild_z() const
{
    int base = 0;
    int size = 17;
    std::bitset<17> aux;
    for (int i = 0; i < size; ++i)
    {
        aux.set(i, m_bitset.test(i + base));
    }
    return static_cast<uint32_t>(aux.to_ullong());
}

BitsetsChildInheritanceStruct::BitsetsChildInheritanceStruct()
{
    // InnerBitsetHelperChild m_var_InnerBitsetHelperChild

    // InnerBitsetHelperChildChild m_var_InnerBitsetHelperChildChild


    // Just to register all known types
    registerinheritanceTypes();
}

BitsetsChildInheritanceStruct::~BitsetsChildInheritanceStruct()
{


}

BitsetsChildInheritanceStruct::BitsetsChildInheritanceStruct(
        const BitsetsChildInheritanceStruct& x)
{
    m_var_InnerBitsetHelperChild = x.m_var_InnerBitsetHelperChild;
    m_var_InnerBitsetHelperChildChild = x.m_var_InnerBitsetHelperChildChild;
}

BitsetsChildInheritanceStruct::BitsetsChildInheritanceStruct(
        BitsetsChildInheritanceStruct&& x) noexcept 
{
    m_var_InnerBitsetHelperChild = std::move(x.m_var_InnerBitsetHelperChild);
    m_var_InnerBitsetHelperChildChild = std::move(x.m_var_InnerBitsetHelperChildChild);
}

BitsetsChildInheritanceStruct& BitsetsChildInheritanceStruct::operator =(
        const BitsetsChildInheritanceStruct& x)
{

    m_var_InnerBitsetHelperChild = x.m_var_InnerBitsetHelperChild;
    m_var_InnerBitsetHelperChildChild = x.m_var_InnerBitsetHelperChildChild;

    return *this;
}

BitsetsChildInheritanceStruct& BitsetsChildInheritanceStruct::operator =(
        BitsetsChildInheritanceStruct&& x) noexcept
{

    m_var_InnerBitsetHelperChild = std::move(x.m_var_InnerBitsetHelperChild);
    m_var_InnerBitsetHelperChildChild = std::move(x.m_var_InnerBitsetHelperChildChild);

    return *this;
}

bool BitsetsChildInheritanceStruct::operator ==(
        const BitsetsChildInheritanceStruct& x) const
{

    return (m_var_InnerBitsetHelperChild == x.m_var_InnerBitsetHelperChild && m_var_InnerBitsetHelperChildChild == x.m_var_InnerBitsetHelperChildChild);
}

bool BitsetsChildInheritanceStruct::operator !=(
        const BitsetsChildInheritanceStruct& x) const
{
    return !(*this == x);
}

size_t BitsetsChildInheritanceStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BitsetsChildInheritanceStruct_max_cdr_typesize;
}

size_t BitsetsChildInheritanceStruct::getCdrSerializedSize(
        const BitsetsChildInheritanceStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += InnerBitsetHelperChild::getCdrSerializedSize(data.var_InnerBitsetHelperChild(), current_alignment);
    current_alignment += InnerBitsetHelperChildChild::getCdrSerializedSize(data.var_InnerBitsetHelperChildChild(), current_alignment);

    return current_alignment - initial_alignment;
}

void BitsetsChildInheritanceStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_var_InnerBitsetHelperChild;scdr << m_var_InnerBitsetHelperChildChild;
}

void BitsetsChildInheritanceStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_var_InnerBitsetHelperChild;
    dcdr >> m_var_InnerBitsetHelperChildChild;
}

/*!
 * @brief This function copies the value in member var_InnerBitsetHelperChild
 * @param _var_InnerBitsetHelperChild New value to be copied in member var_InnerBitsetHelperChild
 */
void BitsetsChildInheritanceStruct::var_InnerBitsetHelperChild(
        const InnerBitsetHelperChild& _var_InnerBitsetHelperChild)
{
    m_var_InnerBitsetHelperChild = _var_InnerBitsetHelperChild;
}

/*!
 * @brief This function moves the value in member var_InnerBitsetHelperChild
 * @param _var_InnerBitsetHelperChild New value to be moved in member var_InnerBitsetHelperChild
 */
void BitsetsChildInheritanceStruct::var_InnerBitsetHelperChild(
        InnerBitsetHelperChild&& _var_InnerBitsetHelperChild)
{
    m_var_InnerBitsetHelperChild = std::move(_var_InnerBitsetHelperChild);
}

/*!
 * @brief This function returns a constant reference to member var_InnerBitsetHelperChild
 * @return Constant reference to member var_InnerBitsetHelperChild
 */
const InnerBitsetHelperChild& BitsetsChildInheritanceStruct::var_InnerBitsetHelperChild() const
{
    return m_var_InnerBitsetHelperChild;
}

/*!
 * @brief This function returns a reference to member var_InnerBitsetHelperChild
 * @return Reference to member var_InnerBitsetHelperChild
 */
InnerBitsetHelperChild& BitsetsChildInheritanceStruct::var_InnerBitsetHelperChild()
{
    return m_var_InnerBitsetHelperChild;
}
/*!
 * @brief This function copies the value in member var_InnerBitsetHelperChildChild
 * @param _var_InnerBitsetHelperChildChild New value to be copied in member var_InnerBitsetHelperChildChild
 */
void BitsetsChildInheritanceStruct::var_InnerBitsetHelperChildChild(
        const InnerBitsetHelperChildChild& _var_InnerBitsetHelperChildChild)
{
    m_var_InnerBitsetHelperChildChild = _var_InnerBitsetHelperChildChild;
}

/*!
 * @brief This function moves the value in member var_InnerBitsetHelperChildChild
 * @param _var_InnerBitsetHelperChildChild New value to be moved in member var_InnerBitsetHelperChildChild
 */
void BitsetsChildInheritanceStruct::var_InnerBitsetHelperChildChild(
        InnerBitsetHelperChildChild&& _var_InnerBitsetHelperChildChild)
{
    m_var_InnerBitsetHelperChildChild = std::move(_var_InnerBitsetHelperChildChild);
}

/*!
 * @brief This function returns a constant reference to member var_InnerBitsetHelperChildChild
 * @return Constant reference to member var_InnerBitsetHelperChildChild
 */
const InnerBitsetHelperChildChild& BitsetsChildInheritanceStruct::var_InnerBitsetHelperChildChild() const
{
    return m_var_InnerBitsetHelperChildChild;
}

/*!
 * @brief This function returns a reference to member var_InnerBitsetHelperChildChild
 * @return Reference to member var_InnerBitsetHelperChildChild
 */
InnerBitsetHelperChildChild& BitsetsChildInheritanceStruct::var_InnerBitsetHelperChildChild()
{
    return m_var_InnerBitsetHelperChildChild;
}


size_t BitsetsChildInheritanceStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BitsetsChildInheritanceStruct_max_key_cdr_typesize;
}

bool BitsetsChildInheritanceStruct::isKeyDefined()
{
    return false;
}

void BitsetsChildInheritanceStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

