// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file inheritanceTypeObject.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "inheritance.h"
#include "inheritanceTypeObject.h"
#include <mutex>
#include <utility>
#include <sstream>
#include <fastrtps/rtps/common/SerializedPayload.h>
#include <fastrtps/utils/md5.h>
#include <fastrtps/types/TypeObjectFactory.h>
#include <fastrtps/types/TypeNamesGenerator.h>
#include <fastrtps/types/AnnotationParameterValue.h>
#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

using namespace eprosima::fastrtps::rtps;

void registerinheritanceTypes()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                TypeObjectFactory *factory = TypeObjectFactory::get_instance();
                factory->add_type_object("InnerEnumHelper", GetInnerEnumHelperIdentifier(true),
                GetInnerEnumHelperObject(true));
                factory->add_type_object("InnerEnumHelper", GetInnerEnumHelperIdentifier(false),
                GetInnerEnumHelperObject(false));

                factory->add_type_object("InnerBitMaskHelper", GetInnerBitMaskHelperIdentifier(true),
                GetInnerBitMaskHelperObject(true));
                factory->add_type_object("InnerBitMaskHelper", GetInnerBitMaskHelperIdentifier(false),
                GetInnerBitMaskHelperObject(false));

                factory->add_type_object("InnerAliasHelper", GetInnerAliasHelperIdentifier(true),
                GetInnerAliasHelperObject(true));
                factory->add_type_object("InnerAliasHelper", GetInnerAliasHelperIdentifier(false),
                GetInnerAliasHelperObject(false));

                factory->add_type_object("InnerStructureHelper", GetInnerStructureHelperIdentifier(true),
                GetInnerStructureHelperObject(true));
                factory->add_type_object("InnerStructureHelper", GetInnerStructureHelperIdentifier(false),
                GetInnerStructureHelperObject(false));

                factory->add_type_object("InnerEmptyStructureHelper", GetInnerEmptyStructureHelperIdentifier(true),
                GetInnerEmptyStructureHelperObject(true));
                factory->add_type_object("InnerEmptyStructureHelper", GetInnerEmptyStructureHelperIdentifier(false),
                GetInnerEmptyStructureHelperObject(false));

                factory->add_type_object("InnerUnionHelper", GetInnerUnionHelperIdentifier(true),
                GetInnerUnionHelperObject(true));
                factory->add_type_object("InnerUnionHelper", GetInnerUnionHelperIdentifier(false),
                GetInnerUnionHelperObject(false));

                factory->add_type_object("InnerBitsetHelper", GetInnerBitsetHelperIdentifier(true),
                GetInnerBitsetHelperObject(true));
                factory->add_type_object("InnerBitsetHelper", GetInnerBitsetHelperIdentifier(false),
                GetInnerBitsetHelperObject(false));

                factory->add_type_object("Inner_alias_bounded_string_helper", GetInner_alias_bounded_string_helperIdentifier(true),
                GetInner_alias_bounded_string_helperObject(true));
                factory->add_type_object("Inner_alias_bounded_string_helper", GetInner_alias_bounded_string_helperIdentifier(false),
                GetInner_alias_bounded_string_helperObject(false));

                factory->add_type_object("Inner_alias_bounded_wstring_helper", GetInner_alias_bounded_wstring_helperIdentifier(true),
                GetInner_alias_bounded_wstring_helperObject(true));
                factory->add_type_object("Inner_alias_bounded_wstring_helper", GetInner_alias_bounded_wstring_helperIdentifier(false),
                GetInner_alias_bounded_wstring_helperObject(false));

                factory->add_type_object("Inner_alias_array_helper", GetInner_alias_array_helperIdentifier(true),
                GetInner_alias_array_helperObject(true));
                factory->add_type_object("Inner_alias_array_helper", GetInner_alias_array_helperIdentifier(false),
                GetInner_alias_array_helperObject(false));

                factory->add_type_object("Inner_alias_sequence_helper", GetInner_alias_sequence_helperIdentifier(true),
                GetInner_alias_sequence_helperObject(true));
                factory->add_type_object("Inner_alias_sequence_helper", GetInner_alias_sequence_helperIdentifier(false),
                GetInner_alias_sequence_helperObject(false));

                factory->add_type_object("Inner_alias_map_helper", GetInner_alias_map_helperIdentifier(true),
                GetInner_alias_map_helperObject(true));
                factory->add_type_object("Inner_alias_map_helper", GetInner_alias_map_helperIdentifier(false),
                GetInner_alias_map_helperObject(false));

                factory->add_type_object("InnerStructureHelperChild", GetInnerStructureHelperChildIdentifier(true),
                GetInnerStructureHelperChildObject(true));
                factory->add_type_object("InnerStructureHelperChild", GetInnerStructureHelperChildIdentifier(false),
                GetInnerStructureHelperChildObject(false));

                factory->add_type_object("InnerStructureHelperChildChild", GetInnerStructureHelperChildChildIdentifier(true),
                GetInnerStructureHelperChildChildObject(true));
                factory->add_type_object("InnerStructureHelperChildChild", GetInnerStructureHelperChildChildIdentifier(false),
                GetInnerStructureHelperChildChildObject(false));

                factory->add_type_object("InnerStructureHelperEmptyChild", GetInnerStructureHelperEmptyChildIdentifier(true),
                GetInnerStructureHelperEmptyChildObject(true));
                factory->add_type_object("InnerStructureHelperEmptyChild", GetInnerStructureHelperEmptyChildIdentifier(false),
                GetInnerStructureHelperEmptyChildObject(false));

                factory->add_type_object("InnerEmptyStructureHelperChild", GetInnerEmptyStructureHelperChildIdentifier(true),
                GetInnerEmptyStructureHelperChildObject(true));
                factory->add_type_object("InnerEmptyStructureHelperChild", GetInnerEmptyStructureHelperChildIdentifier(false),
                GetInnerEmptyStructureHelperChildObject(false));

                factory->add_type_object("StructuresInheritanceStruct", GetStructuresInheritanceStructIdentifier(true),
                GetStructuresInheritanceStructObject(true));
                factory->add_type_object("StructuresInheritanceStruct", GetStructuresInheritanceStructIdentifier(false),
                GetStructuresInheritanceStructObject(false));

                factory->add_type_object("InnerBitsetHelperChild", GetInnerBitsetHelperChildIdentifier(true),
                GetInnerBitsetHelperChildObject(true));
                factory->add_type_object("InnerBitsetHelperChild", GetInnerBitsetHelperChildIdentifier(false),
                GetInnerBitsetHelperChildObject(false));

                factory->add_type_object("InnerBitsetHelperChildChild", GetInnerBitsetHelperChildChildIdentifier(true),
                GetInnerBitsetHelperChildChildObject(true));
                factory->add_type_object("InnerBitsetHelperChildChild", GetInnerBitsetHelperChildChildIdentifier(false),
                GetInnerBitsetHelperChildChildObject(false));

                factory->add_type_object("BitsetsChildInheritanceStruct", GetBitsetsChildInheritanceStructIdentifier(true),
                GetBitsetsChildInheritanceStructObject(true));
                factory->add_type_object("BitsetsChildInheritanceStruct", GetBitsetsChildInheritanceStructIdentifier(false),
                GetBitsetsChildInheritanceStructObject(false));

            });
}

const TypeIdentifier* GetInnerAliasHelperIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InnerAliasHelper", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInnerAliasHelperObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InnerAliasHelper", complete);
}

const TypeObject* GetInnerAliasHelperObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerAliasHelper", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInnerAliasHelperObject();
    }
    else
    {
        return GetMinimalInnerAliasHelperObject();
    }
}

const TypeObject* GetMinimalInnerAliasHelperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerAliasHelper", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_ALIAS);

    // No flags apply
    //type_object->minimal().alias_type().alias_flags().IS_FINAL(false);
    //type_object->minimal().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_NESTED(false);
    //type_object->minimal().alias_type().alias_flags().IS_AUTOID_HASH(false);

    // type_object->minimal().alias_type().header()... Is empty

    // No flags apply
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_DEFAULT(false);

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier("int32_t", false);


    if (relatedType != nullptr)
    {
        type_object->minimal().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalAliasType::getCdrSerializedSize(type_object->minimal().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("InnerAliasHelper", "int32_t");

    TypeObjectFactory::get_instance()->add_type_object("InnerAliasHelper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerAliasHelper", false);
}

const TypeObject* GetCompleteInnerAliasHelperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerAliasHelper", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_ALIAS);

    // No flags apply
    //type_object->complete().alias_type().alias_flags().IS_FINAL(false);
    //type_object->complete().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_NESTED(false);
    //type_object->complete().alias_type().alias_flags().IS_AUTOID_HASH(false);

    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().placement("placement");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().language("language");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().text("text");
    //type_object->complete().alias_type().header().detail().ann_custom().push_back(...);
    type_object->complete().alias_type().header().detail().type_name("InnerAliasHelper");

    // No flags apply
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_DEFAULT(false);

    //type_object->complete().alias_type().body().common().ann_builtin()
    //type_object->complete().alias_type().body().common().ann_custom()

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier_trying_complete("int32_t");


    if (relatedType != nullptr)
    {
        type_object->complete().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteAliasType::getCdrSerializedSize(type_object->complete().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("InnerAliasHelper", "int32_t");

    TypeObjectFactory::get_instance()->add_type_object("InnerAliasHelper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerAliasHelper", true);
}

const TypeIdentifier* GetInner_alias_bounded_string_helperIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_bounded_string_helper", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInner_alias_bounded_string_helperObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_bounded_string_helper", complete);
}

const TypeObject* GetInner_alias_bounded_string_helperObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_string_helper", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInner_alias_bounded_string_helperObject();
    }
    else
    {
        return GetMinimalInner_alias_bounded_string_helperObject();
    }
}

const TypeObject* GetMinimalInner_alias_bounded_string_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_string_helper", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_ALIAS);

    // No flags apply
    //type_object->minimal().alias_type().alias_flags().IS_FINAL(false);
    //type_object->minimal().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_NESTED(false);
    //type_object->minimal().alias_type().alias_flags().IS_AUTOID_HASH(false);

    // type_object->minimal().alias_type().header()... Is empty

    // No flags apply
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_DEFAULT(false);

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier(TypeNamesGenerator::get_string_type_name(10, false), false);


    if (relatedType != nullptr)
    {
        type_object->minimal().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalAliasType::getCdrSerializedSize(type_object->minimal().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_bounded_string_helper", TypeNamesGenerator::get_string_type_name(10, false));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_bounded_string_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_string_helper", false);
}

const TypeObject* GetCompleteInner_alias_bounded_string_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_string_helper", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_ALIAS);

    // No flags apply
    //type_object->complete().alias_type().alias_flags().IS_FINAL(false);
    //type_object->complete().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_NESTED(false);
    //type_object->complete().alias_type().alias_flags().IS_AUTOID_HASH(false);

    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().placement("placement");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().language("language");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().text("text");
    //type_object->complete().alias_type().header().detail().ann_custom().push_back(...);
    type_object->complete().alias_type().header().detail().type_name("Inner_alias_bounded_string_helper");

    // No flags apply
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_DEFAULT(false);

    //type_object->complete().alias_type().body().common().ann_builtin()
    //type_object->complete().alias_type().body().common().ann_custom()

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier_trying_complete(TypeNamesGenerator::get_string_type_name(10, false));


    if (relatedType != nullptr)
    {
        type_object->complete().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteAliasType::getCdrSerializedSize(type_object->complete().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_bounded_string_helper", TypeNamesGenerator::get_string_type_name(10, false));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_bounded_string_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_string_helper", true);
}

const TypeIdentifier* GetInner_alias_bounded_wstring_helperIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_bounded_wstring_helper", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInner_alias_bounded_wstring_helperObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_bounded_wstring_helper", complete);
}

const TypeObject* GetInner_alias_bounded_wstring_helperObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_wstring_helper", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInner_alias_bounded_wstring_helperObject();
    }
    else
    {
        return GetMinimalInner_alias_bounded_wstring_helperObject();
    }
}

const TypeObject* GetMinimalInner_alias_bounded_wstring_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_wstring_helper", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_ALIAS);

    // No flags apply
    //type_object->minimal().alias_type().alias_flags().IS_FINAL(false);
    //type_object->minimal().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_NESTED(false);
    //type_object->minimal().alias_type().alias_flags().IS_AUTOID_HASH(false);

    // type_object->minimal().alias_type().header()... Is empty

    // No flags apply
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_DEFAULT(false);

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier(TypeNamesGenerator::get_string_type_name(10, true), false);


    if (relatedType != nullptr)
    {
        type_object->minimal().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalAliasType::getCdrSerializedSize(type_object->minimal().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_bounded_wstring_helper", TypeNamesGenerator::get_string_type_name(10, true));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_bounded_wstring_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_wstring_helper", false);
}

const TypeObject* GetCompleteInner_alias_bounded_wstring_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_wstring_helper", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_ALIAS);

    // No flags apply
    //type_object->complete().alias_type().alias_flags().IS_FINAL(false);
    //type_object->complete().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_NESTED(false);
    //type_object->complete().alias_type().alias_flags().IS_AUTOID_HASH(false);

    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().placement("placement");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().language("language");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().text("text");
    //type_object->complete().alias_type().header().detail().ann_custom().push_back(...);
    type_object->complete().alias_type().header().detail().type_name("Inner_alias_bounded_wstring_helper");

    // No flags apply
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_DEFAULT(false);

    //type_object->complete().alias_type().body().common().ann_builtin()
    //type_object->complete().alias_type().body().common().ann_custom()

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier_trying_complete(TypeNamesGenerator::get_string_type_name(10, true));


    if (relatedType != nullptr)
    {
        type_object->complete().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteAliasType::getCdrSerializedSize(type_object->complete().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_bounded_wstring_helper", TypeNamesGenerator::get_string_type_name(10, true));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_bounded_wstring_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_bounded_wstring_helper", true);
}

const TypeIdentifier* GetInner_alias_array_helperIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_array_helper", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInner_alias_array_helperObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_array_helper", complete);
}

const TypeObject* GetInner_alias_array_helperObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_array_helper", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInner_alias_array_helperObject();
    }
    else
    {
        return GetMinimalInner_alias_array_helperObject();
    }
}

const TypeObject* GetMinimalInner_alias_array_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_array_helper", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_ALIAS);

    // No flags apply
    //type_object->minimal().alias_type().alias_flags().IS_FINAL(false);
    //type_object->minimal().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_NESTED(false);
    //type_object->minimal().alias_type().alias_flags().IS_AUTOID_HASH(false);

    // type_object->minimal().alias_type().header()... Is empty

    // No flags apply
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_DEFAULT(false);

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier(TypeNamesGenerator::get_array_type_name("int16_t", {2}), false);


    if (relatedType != nullptr)
    {
        type_object->minimal().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalAliasType::getCdrSerializedSize(type_object->minimal().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_array_helper", TypeNamesGenerator::get_array_type_name("int16_t", {2}));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_array_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_array_helper", false);
}

const TypeObject* GetCompleteInner_alias_array_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_array_helper", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_ALIAS);

    // No flags apply
    //type_object->complete().alias_type().alias_flags().IS_FINAL(false);
    //type_object->complete().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_NESTED(false);
    //type_object->complete().alias_type().alias_flags().IS_AUTOID_HASH(false);

    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().placement("placement");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().language("language");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().text("text");
    //type_object->complete().alias_type().header().detail().ann_custom().push_back(...);
    type_object->complete().alias_type().header().detail().type_name("Inner_alias_array_helper");

    // No flags apply
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_DEFAULT(false);

    //type_object->complete().alias_type().body().common().ann_builtin()
    //type_object->complete().alias_type().body().common().ann_custom()

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier_trying_complete(TypeNamesGenerator::get_array_type_name("int16_t", {2}));


    if (relatedType != nullptr)
    {
        type_object->complete().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteAliasType::getCdrSerializedSize(type_object->complete().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_array_helper", TypeNamesGenerator::get_array_type_name("int16_t", {2}));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_array_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_array_helper", true);
}

const TypeIdentifier* GetInner_alias_sequence_helperIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_sequence_helper", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInner_alias_sequence_helperObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_sequence_helper", complete);
}

const TypeObject* GetInner_alias_sequence_helperObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_sequence_helper", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInner_alias_sequence_helperObject();
    }
    else
    {
        return GetMinimalInner_alias_sequence_helperObject();
    }
}

const TypeObject* GetMinimalInner_alias_sequence_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_sequence_helper", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_ALIAS);

    // No flags apply
    //type_object->minimal().alias_type().alias_flags().IS_FINAL(false);
    //type_object->minimal().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_NESTED(false);
    //type_object->minimal().alias_type().alias_flags().IS_AUTOID_HASH(false);

    // type_object->minimal().alias_type().header()... Is empty

    // No flags apply
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_DEFAULT(false);

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier(TypeNamesGenerator::get_sequence_type_name("int16_t", 100), false);


    if (relatedType != nullptr)
    {
        type_object->minimal().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalAliasType::getCdrSerializedSize(type_object->minimal().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_sequence_helper", TypeNamesGenerator::get_sequence_type_name("int16_t", 100));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_sequence_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_sequence_helper", false);
}

const TypeObject* GetCompleteInner_alias_sequence_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_sequence_helper", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_ALIAS);

    // No flags apply
    //type_object->complete().alias_type().alias_flags().IS_FINAL(false);
    //type_object->complete().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_NESTED(false);
    //type_object->complete().alias_type().alias_flags().IS_AUTOID_HASH(false);

    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().placement("placement");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().language("language");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().text("text");
    //type_object->complete().alias_type().header().detail().ann_custom().push_back(...);
    type_object->complete().alias_type().header().detail().type_name("Inner_alias_sequence_helper");

    // No flags apply
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_DEFAULT(false);

    //type_object->complete().alias_type().body().common().ann_builtin()
    //type_object->complete().alias_type().body().common().ann_custom()

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier_trying_complete(TypeNamesGenerator::get_sequence_type_name("int16_t", 100));


    if (relatedType != nullptr)
    {
        type_object->complete().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteAliasType::getCdrSerializedSize(type_object->complete().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_sequence_helper", TypeNamesGenerator::get_sequence_type_name("int16_t", 100));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_sequence_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_sequence_helper", true);
}

const TypeIdentifier* GetInner_alias_map_helperIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_map_helper", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInner_alias_map_helperObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("Inner_alias_map_helper", complete);
}

const TypeObject* GetInner_alias_map_helperObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_map_helper", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInner_alias_map_helperObject();
    }
    else
    {
        return GetMinimalInner_alias_map_helperObject();
    }
}

const TypeObject* GetMinimalInner_alias_map_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_map_helper", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_ALIAS);

    // No flags apply
    //type_object->minimal().alias_type().alias_flags().IS_FINAL(false);
    //type_object->minimal().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->minimal().alias_type().alias_flags().IS_NESTED(false);
    //type_object->minimal().alias_type().alias_flags().IS_AUTOID_HASH(false);

    // type_object->minimal().alias_type().header()... Is empty

    // No flags apply
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->minimal().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->minimal().alias_type().body().common().related_flags().IS_DEFAULT(false);

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier(TypeNamesGenerator::get_map_type_name("int32_t", "int32_t", 100), false);


    if (relatedType != nullptr)
    {
        type_object->minimal().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalAliasType::getCdrSerializedSize(type_object->minimal().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_map_helper", TypeNamesGenerator::get_map_type_name("int32_t", "int32_t", 100));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_map_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_map_helper", false);
}

const TypeObject* GetCompleteInner_alias_map_helperObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("Inner_alias_map_helper", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_ALIAS);

    // No flags apply
    //type_object->complete().alias_type().alias_flags().IS_FINAL(false);
    //type_object->complete().alias_type().alias_flags().IS_APPENDABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_MUTABLE(false);
    //type_object->complete().alias_type().alias_flags().IS_NESTED(false);
    //type_object->complete().alias_type().alias_flags().IS_AUTOID_HASH(false);

    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().placement("placement");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().language("language");
    //type_object->complete().alias_type().header().detail().ann_builtin().verbatim().text("text");
    //type_object->complete().alias_type().header().detail().ann_custom().push_back(...);
    type_object->complete().alias_type().header().detail().type_name("Inner_alias_map_helper");

    // No flags apply
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT1(false);
    //type_object->complete().alias_type().body().common().related_flags().TRY_CONSTRUCT2(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_EXTERNAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_OPTIONAL(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_MUST_UNDERSTAND(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_KEY(false);
    //type_object->complete().alias_type().body().common().related_flags().IS_DEFAULT(false);

    //type_object->complete().alias_type().body().common().ann_builtin()
    //type_object->complete().alias_type().body().common().ann_custom()

    // Must be defined already, if don't, may be an recursive alias
    const TypeIdentifier *relatedType = TypeObjectFactory::get_instance()->get_type_identifier_trying_complete(TypeNamesGenerator::get_map_type_name("int32_t", "int32_t", 100));


    if (relatedType != nullptr)
    {
        type_object->complete().alias_type().body().common().related_type() = *relatedType; // Make a copy
    }
    else
    {
        // Cannot determine base type
        delete type_object;
        return nullptr;
    }

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteAliasType::getCdrSerializedSize(type_object->complete().alias_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    // Don't add our TypeIdentifier but our alias
    TypeObjectFactory::get_instance()->add_alias("Inner_alias_map_helper", TypeNamesGenerator::get_map_type_name("int32_t", "int32_t", 100));

    TypeObjectFactory::get_instance()->add_type_object("Inner_alias_map_helper", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("Inner_alias_map_helper", true);
}

const TypeIdentifier* GetInnerStructureHelperChildIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InnerStructureHelperChild", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInnerStructureHelperChildObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InnerStructureHelperChild", complete);
}

const TypeObject* GetInnerStructureHelperChildObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChild", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInnerStructureHelperChildObject();
    }
    //else
    return GetMinimalInnerStructureHelperChildObject();
}

const TypeObject* GetMinimalInnerStructureHelperChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChild", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_var_child_longlong;
    mst_var_child_longlong.common().member_id(memberId++);
    mst_var_child_longlong.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_child_longlong.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_child_longlong.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_child_longlong.common().member_flags().IS_OPTIONAL(false);
    mst_var_child_longlong.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_child_longlong.common().member_flags().IS_KEY(false);
    mst_var_child_longlong.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_child_longlong.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int64_t", false));

    MD5 var_child_longlong_hash("var_child_longlong");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_child_longlong.detail().name_hash()[i] = var_child_longlong_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_child_longlong);

    MinimalStructMember mst_var_child_ulonglong;
    mst_var_child_ulonglong.common().member_id(memberId++);
    mst_var_child_ulonglong.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_child_ulonglong.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_child_ulonglong.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_child_ulonglong.common().member_flags().IS_OPTIONAL(false);
    mst_var_child_ulonglong.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_child_ulonglong.common().member_flags().IS_KEY(false);
    mst_var_child_ulonglong.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_child_ulonglong.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));

    MD5 var_child_ulonglong_hash("var_child_ulonglong");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_child_ulonglong.detail().name_hash()[i] = var_child_ulonglong_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_child_ulonglong);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];
    type_object->minimal().struct_type().header().base_type(*GetInnerStructureHelperIdentifier(false));

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerStructureHelperChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChild", false);
}

const TypeObject* GetCompleteInnerStructureHelperChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChild", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_var_child_longlong;
    cst_var_child_longlong.common().member_id(memberId++);
    cst_var_child_longlong.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_child_longlong.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_child_longlong.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_child_longlong.common().member_flags().IS_OPTIONAL(false);
    cst_var_child_longlong.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_child_longlong.common().member_flags().IS_KEY(false);
    cst_var_child_longlong.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_child_longlong.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int64_t", false));

    cst_var_child_longlong.detail().name("var_child_longlong");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_child_longlong);

    CompleteStructMember cst_var_child_ulonglong;
    cst_var_child_ulonglong.common().member_id(memberId++);
    cst_var_child_ulonglong.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_child_ulonglong.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_child_ulonglong.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_child_ulonglong.common().member_flags().IS_OPTIONAL(false);
    cst_var_child_ulonglong.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_child_ulonglong.common().member_flags().IS_KEY(false);
    cst_var_child_ulonglong.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_child_ulonglong.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));

    cst_var_child_ulonglong.detail().name("var_child_ulonglong");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_child_ulonglong);


    // Header
    type_object->complete().struct_type().header().detail().type_name("InnerStructureHelperChild");
    // TODO inheritance
    type_object->complete().struct_type().header().base_type(*GetInnerStructureHelperIdentifier(true));


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerStructureHelperChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChild", true);
}

const TypeIdentifier* GetInnerStructureHelperChildChildIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InnerStructureHelperChildChild", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInnerStructureHelperChildChildObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InnerStructureHelperChildChild", complete);
}

const TypeObject* GetInnerStructureHelperChildChildObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChildChild", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInnerStructureHelperChildChildObject();
    }
    //else
    return GetMinimalInnerStructureHelperChildChildObject();
}

const TypeObject* GetMinimalInnerStructureHelperChildChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChildChild", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_var_child_childlonglong2;
    mst_var_child_childlonglong2.common().member_id(memberId++);
    mst_var_child_childlonglong2.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_child_childlonglong2.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_child_childlonglong2.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_child_childlonglong2.common().member_flags().IS_OPTIONAL(false);
    mst_var_child_childlonglong2.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_child_childlonglong2.common().member_flags().IS_KEY(false);
    mst_var_child_childlonglong2.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_child_childlonglong2.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int64_t", false));

    MD5 var_child_childlonglong2_hash("var_child_childlonglong2");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_child_childlonglong2.detail().name_hash()[i] = var_child_childlonglong2_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_child_childlonglong2);

    MinimalStructMember mst_var_childchild_ulonglong2;
    mst_var_childchild_ulonglong2.common().member_id(memberId++);
    mst_var_childchild_ulonglong2.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_childchild_ulonglong2.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_childchild_ulonglong2.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_childchild_ulonglong2.common().member_flags().IS_OPTIONAL(false);
    mst_var_childchild_ulonglong2.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_childchild_ulonglong2.common().member_flags().IS_KEY(false);
    mst_var_childchild_ulonglong2.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_childchild_ulonglong2.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));

    MD5 var_childchild_ulonglong2_hash("var_childchild_ulonglong2");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_childchild_ulonglong2.detail().name_hash()[i] = var_childchild_ulonglong2_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_childchild_ulonglong2);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];
    type_object->minimal().struct_type().header().base_type(*GetInnerStructureHelperChildIdentifier(false));

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerStructureHelperChildChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChildChild", false);
}

const TypeObject* GetCompleteInnerStructureHelperChildChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChildChild", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_var_child_childlonglong2;
    cst_var_child_childlonglong2.common().member_id(memberId++);
    cst_var_child_childlonglong2.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_child_childlonglong2.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_child_childlonglong2.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_child_childlonglong2.common().member_flags().IS_OPTIONAL(false);
    cst_var_child_childlonglong2.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_child_childlonglong2.common().member_flags().IS_KEY(false);
    cst_var_child_childlonglong2.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_child_childlonglong2.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int64_t", false));

    cst_var_child_childlonglong2.detail().name("var_child_childlonglong2");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_child_childlonglong2);

    CompleteStructMember cst_var_childchild_ulonglong2;
    cst_var_childchild_ulonglong2.common().member_id(memberId++);
    cst_var_childchild_ulonglong2.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_childchild_ulonglong2.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_childchild_ulonglong2.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_childchild_ulonglong2.common().member_flags().IS_OPTIONAL(false);
    cst_var_childchild_ulonglong2.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_childchild_ulonglong2.common().member_flags().IS_KEY(false);
    cst_var_childchild_ulonglong2.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_childchild_ulonglong2.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));

    cst_var_childchild_ulonglong2.detail().name("var_childchild_ulonglong2");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_childchild_ulonglong2);


    // Header
    type_object->complete().struct_type().header().detail().type_name("InnerStructureHelperChildChild");
    // TODO inheritance
    type_object->complete().struct_type().header().base_type(*GetInnerStructureHelperChildIdentifier(true));


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerStructureHelperChildChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperChildChild", true);
}

const TypeIdentifier* GetInnerStructureHelperEmptyChildIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InnerStructureHelperEmptyChild", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInnerStructureHelperEmptyChildObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InnerStructureHelperEmptyChild", complete);
}

const TypeObject* GetInnerStructureHelperEmptyChildObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperEmptyChild", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInnerStructureHelperEmptyChildObject();
    }
    //else
    return GetMinimalInnerStructureHelperEmptyChildObject();
}

const TypeObject* GetMinimalInnerStructureHelperEmptyChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperEmptyChild", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;

    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];
    type_object->minimal().struct_type().header().base_type(*GetInnerStructureHelperIdentifier(false));

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerStructureHelperEmptyChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperEmptyChild", false);
}

const TypeObject* GetCompleteInnerStructureHelperEmptyChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperEmptyChild", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;

    // Header
    type_object->complete().struct_type().header().detail().type_name("InnerStructureHelperEmptyChild");
    // TODO inheritance
    type_object->complete().struct_type().header().base_type(*GetInnerStructureHelperIdentifier(true));


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerStructureHelperEmptyChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerStructureHelperEmptyChild", true);
}

const TypeIdentifier* GetInnerEmptyStructureHelperChildIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InnerEmptyStructureHelperChild", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInnerEmptyStructureHelperChildObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InnerEmptyStructureHelperChild", complete);
}

const TypeObject* GetInnerEmptyStructureHelperChildObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerEmptyStructureHelperChild", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInnerEmptyStructureHelperChildObject();
    }
    //else
    return GetMinimalInnerEmptyStructureHelperChildObject();
}

const TypeObject* GetMinimalInnerEmptyStructureHelperChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerEmptyStructureHelperChild", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_var_child_longlong;
    mst_var_child_longlong.common().member_id(memberId++);
    mst_var_child_longlong.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_child_longlong.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_child_longlong.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_child_longlong.common().member_flags().IS_OPTIONAL(false);
    mst_var_child_longlong.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_child_longlong.common().member_flags().IS_KEY(false);
    mst_var_child_longlong.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_child_longlong.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int64_t", false));

    MD5 var_child_longlong_hash("var_child_longlong");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_child_longlong.detail().name_hash()[i] = var_child_longlong_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_child_longlong);

    MinimalStructMember mst_var_child_ulonglong;
    mst_var_child_ulonglong.common().member_id(memberId++);
    mst_var_child_ulonglong.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_child_ulonglong.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_child_ulonglong.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_child_ulonglong.common().member_flags().IS_OPTIONAL(false);
    mst_var_child_ulonglong.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_child_ulonglong.common().member_flags().IS_KEY(false);
    mst_var_child_ulonglong.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_child_ulonglong.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));

    MD5 var_child_ulonglong_hash("var_child_ulonglong");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_child_ulonglong.detail().name_hash()[i] = var_child_ulonglong_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_child_ulonglong);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];
    type_object->minimal().struct_type().header().base_type(*GetInnerEmptyStructureHelperIdentifier(false));

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerEmptyStructureHelperChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerEmptyStructureHelperChild", false);
}

const TypeObject* GetCompleteInnerEmptyStructureHelperChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerEmptyStructureHelperChild", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_var_child_longlong;
    cst_var_child_longlong.common().member_id(memberId++);
    cst_var_child_longlong.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_child_longlong.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_child_longlong.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_child_longlong.common().member_flags().IS_OPTIONAL(false);
    cst_var_child_longlong.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_child_longlong.common().member_flags().IS_KEY(false);
    cst_var_child_longlong.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_child_longlong.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("int64_t", false));

    cst_var_child_longlong.detail().name("var_child_longlong");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_child_longlong);

    CompleteStructMember cst_var_child_ulonglong;
    cst_var_child_ulonglong.common().member_id(memberId++);
    cst_var_child_ulonglong.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_child_ulonglong.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_child_ulonglong.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_child_ulonglong.common().member_flags().IS_OPTIONAL(false);
    cst_var_child_ulonglong.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_child_ulonglong.common().member_flags().IS_KEY(false);
    cst_var_child_ulonglong.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_child_ulonglong.common().member_type_id(*TypeObjectFactory::get_instance()->get_type_identifier("uint64_t", false));

    cst_var_child_ulonglong.detail().name("var_child_ulonglong");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_child_ulonglong);


    // Header
    type_object->complete().struct_type().header().detail().type_name("InnerEmptyStructureHelperChild");
    // TODO inheritance
    type_object->complete().struct_type().header().base_type(*GetInnerEmptyStructureHelperIdentifier(true));


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerEmptyStructureHelperChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerEmptyStructureHelperChild", true);
}

const TypeIdentifier* GetStructuresInheritanceStructIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("StructuresInheritanceStruct", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetStructuresInheritanceStructObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("StructuresInheritanceStruct", complete);
}

const TypeObject* GetStructuresInheritanceStructObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("StructuresInheritanceStruct", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteStructuresInheritanceStructObject();
    }
    //else
    return GetMinimalStructuresInheritanceStructObject();
}

const TypeObject* GetMinimalStructuresInheritanceStructObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("StructuresInheritanceStruct", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_var_InnerStructureHelperChild;
    mst_var_InnerStructureHelperChild.common().member_id(memberId++);
    mst_var_InnerStructureHelperChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_InnerStructureHelperChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_InnerStructureHelperChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_InnerStructureHelperChild.common().member_flags().IS_OPTIONAL(false);
    mst_var_InnerStructureHelperChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_InnerStructureHelperChild.common().member_flags().IS_KEY(false);
    mst_var_InnerStructureHelperChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_InnerStructureHelperChild.common().member_type_id(*GetInnerStructureHelperChildIdentifier(false));
    MD5 var_InnerStructureHelperChild_hash("var_InnerStructureHelperChild");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_InnerStructureHelperChild.detail().name_hash()[i] = var_InnerStructureHelperChild_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_InnerStructureHelperChild);

    MinimalStructMember mst_var_InnerStructureHelperChildChild;
    mst_var_InnerStructureHelperChildChild.common().member_id(memberId++);
    mst_var_InnerStructureHelperChildChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_InnerStructureHelperChildChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_InnerStructureHelperChildChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_InnerStructureHelperChildChild.common().member_flags().IS_OPTIONAL(false);
    mst_var_InnerStructureHelperChildChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_InnerStructureHelperChildChild.common().member_flags().IS_KEY(false);
    mst_var_InnerStructureHelperChildChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_InnerStructureHelperChildChild.common().member_type_id(*GetInnerStructureHelperChildChildIdentifier(false));
    MD5 var_InnerStructureHelperChildChild_hash("var_InnerStructureHelperChildChild");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_InnerStructureHelperChildChild.detail().name_hash()[i] = var_InnerStructureHelperChildChild_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_InnerStructureHelperChildChild);

    MinimalStructMember mst_var_InnerStructureHelperEmptyChild;
    mst_var_InnerStructureHelperEmptyChild.common().member_id(memberId++);
    mst_var_InnerStructureHelperEmptyChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_InnerStructureHelperEmptyChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_OPTIONAL(false);
    mst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_KEY(false);
    mst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_InnerStructureHelperEmptyChild.common().member_type_id(*GetInnerStructureHelperEmptyChildIdentifier(false));
    MD5 var_InnerStructureHelperEmptyChild_hash("var_InnerStructureHelperEmptyChild");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_InnerStructureHelperEmptyChild.detail().name_hash()[i] = var_InnerStructureHelperEmptyChild_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_InnerStructureHelperEmptyChild);

    MinimalStructMember mst_var_InnerEmptyStructureHelperChild;
    mst_var_InnerEmptyStructureHelperChild.common().member_id(memberId++);
    mst_var_InnerEmptyStructureHelperChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_InnerEmptyStructureHelperChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_OPTIONAL(false);
    mst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_KEY(false);
    mst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_InnerEmptyStructureHelperChild.common().member_type_id(*GetInnerEmptyStructureHelperChildIdentifier(false));
    MD5 var_InnerEmptyStructureHelperChild_hash("var_InnerEmptyStructureHelperChild");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_InnerEmptyStructureHelperChild.detail().name_hash()[i] = var_InnerEmptyStructureHelperChild_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_InnerEmptyStructureHelperChild);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("StructuresInheritanceStruct", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("StructuresInheritanceStruct", false);
}

const TypeObject* GetCompleteStructuresInheritanceStructObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("StructuresInheritanceStruct", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_var_InnerStructureHelperChild;
    cst_var_InnerStructureHelperChild.common().member_id(memberId++);
    cst_var_InnerStructureHelperChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_InnerStructureHelperChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_InnerStructureHelperChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_InnerStructureHelperChild.common().member_flags().IS_OPTIONAL(false);
    cst_var_InnerStructureHelperChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_InnerStructureHelperChild.common().member_flags().IS_KEY(false);
    cst_var_InnerStructureHelperChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_InnerStructureHelperChild.common().member_type_id(*GetInnerStructureHelperChildIdentifier(true));
    cst_var_InnerStructureHelperChild.detail().name("var_InnerStructureHelperChild");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_InnerStructureHelperChild);

    CompleteStructMember cst_var_InnerStructureHelperChildChild;
    cst_var_InnerStructureHelperChildChild.common().member_id(memberId++);
    cst_var_InnerStructureHelperChildChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_InnerStructureHelperChildChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_InnerStructureHelperChildChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_InnerStructureHelperChildChild.common().member_flags().IS_OPTIONAL(false);
    cst_var_InnerStructureHelperChildChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_InnerStructureHelperChildChild.common().member_flags().IS_KEY(false);
    cst_var_InnerStructureHelperChildChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_InnerStructureHelperChildChild.common().member_type_id(*GetInnerStructureHelperChildChildIdentifier(true));
    cst_var_InnerStructureHelperChildChild.detail().name("var_InnerStructureHelperChildChild");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_InnerStructureHelperChildChild);

    CompleteStructMember cst_var_InnerStructureHelperEmptyChild;
    cst_var_InnerStructureHelperEmptyChild.common().member_id(memberId++);
    cst_var_InnerStructureHelperEmptyChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_InnerStructureHelperEmptyChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_OPTIONAL(false);
    cst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_KEY(false);
    cst_var_InnerStructureHelperEmptyChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_InnerStructureHelperEmptyChild.common().member_type_id(*GetInnerStructureHelperEmptyChildIdentifier(true));
    cst_var_InnerStructureHelperEmptyChild.detail().name("var_InnerStructureHelperEmptyChild");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_InnerStructureHelperEmptyChild);

    CompleteStructMember cst_var_InnerEmptyStructureHelperChild;
    cst_var_InnerEmptyStructureHelperChild.common().member_id(memberId++);
    cst_var_InnerEmptyStructureHelperChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_InnerEmptyStructureHelperChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_OPTIONAL(false);
    cst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_KEY(false);
    cst_var_InnerEmptyStructureHelperChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_InnerEmptyStructureHelperChild.common().member_type_id(*GetInnerEmptyStructureHelperChildIdentifier(true));
    cst_var_InnerEmptyStructureHelperChild.detail().name("var_InnerEmptyStructureHelperChild");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_InnerEmptyStructureHelperChild);


    // Header
    type_object->complete().struct_type().header().detail().type_name("StructuresInheritanceStruct");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("StructuresInheritanceStruct", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("StructuresInheritanceStruct", true);
}

const TypeIdentifier* GetInnerBitsetHelperChildIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InnerBitsetHelperChild", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInnerBitsetHelperChildObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InnerBitsetHelperChild", complete);
}

const TypeObject* GetInnerBitsetHelperChildObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChild", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInnerBitsetHelperChildObject();
    }
    // else
    return GetMinimalInnerBitsetHelperChildObject();
}

const TypeObject* GetMinimalInnerBitsetHelperChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChild", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_BITSET);

    MinimalBitfield mbf_child_w;
    mbf_child_w.common().flags().TRY_CONSTRUCT1(false);
    mbf_child_w.common().flags().TRY_CONSTRUCT2(false);
    mbf_child_w.common().flags().IS_EXTERNAL(false);
    mbf_child_w.common().flags().IS_OPTIONAL(false);
    mbf_child_w.common().flags().IS_MUST_UNDERSTAND(false);
    mbf_child_w.common().flags().IS_KEY(false);
    mbf_child_w.common().flags().IS_DEFAULT(false);
    mbf_child_w.common().position(0);
    mbf_child_w.common().bitcount(17);
    mbf_child_w.common().holder_type(TK_UINT32);
    MD5 child_w_hash("child_w");
    for(int i = 0; i < 4; ++i)
    {
        mbf_child_w.name_hash()[i] = child_w_hash.digest[i];
    }
    type_object->minimal().bitset_type().field_seq().emplace_back(mbf_child_w);

    type_object->minimal().bitset_type().header().base_type(*GetInnerBitsetHelperIdentifier(false));

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalBitsetType::getCdrSerializedSize(type_object->minimal().bitset_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerBitsetHelperChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChild", false);
}

const TypeObject* GetCompleteInnerBitsetHelperChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChild", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_BITSET);

    // No flags apply
    //type_object->complete().bitset_type().bitset_flags().IS_FINAL(false);
    //type_object->complete().bitset_type().bitset_flags().IS_APPENDABLE(false);
    //type_object->complete().bitset_type().bitset_flags().IS_MUTABLE(false);
    //type_object->complete().bitset_type().bitset_flags().IS_NESTED(false);
    //type_object->complete().bitset_type().bitset_flags().IS_AUTOID_HASH(false);


    type_object->complete().bitset_type().header().detail().type_name("InnerBitsetHelperChild");

    CompleteBitfield cbf_child_w;
    cbf_child_w.common().flags().TRY_CONSTRUCT1(false);
    cbf_child_w.common().flags().TRY_CONSTRUCT2(false);
    cbf_child_w.common().flags().IS_EXTERNAL(false);
    cbf_child_w.common().flags().IS_OPTIONAL(false);
    cbf_child_w.common().flags().IS_MUST_UNDERSTAND(false);
    cbf_child_w.common().flags().IS_KEY(false);
    cbf_child_w.common().flags().IS_DEFAULT(false);
    cbf_child_w.common().position(0);
    cbf_child_w.common().bitcount(17);
    cbf_child_w.common().holder_type(TK_UINT32);
    cbf_child_w.detail().name("child_w");

    // Position annotation always present
    {
        // Position
        AppliedAnnotation ann;
        ann.annotation_typeid(*TypeObjectFactory::get_instance()->get_type_identifier_trying_complete("position"));
        AppliedAnnotationParameter annParam;
        MD5 message_hash("value");
        for(int i = 0; i < 4; ++i)
        {
            annParam.paramname_hash()[i] = message_hash.digest[i];
        }
        AnnotationParameterValue paramValue;
        paramValue._d(TK_UINT16);
        paramValue.uint_16_value(0);
        annParam.value(paramValue);
        ann.param_seq().push_back(annParam);

        cbf_child_w.detail().ann_custom().push_back(ann);
    }

    // Use bit_bound as bitcount.
    {
        // Position
        AppliedAnnotation ann;
        ann.annotation_typeid(*TypeObjectFactory::get_instance()->get_type_identifier_trying_complete("bit_bound"));
        AppliedAnnotationParameter annParam;
        MD5 message_hash("value");
        for(int i = 0; i < 4; ++i)
        {
            annParam.paramname_hash()[i] = message_hash.digest[i];
        }
        AnnotationParameterValue paramValue;
        paramValue._d(TK_UINT16);
        paramValue.uint_16_value(17);
        annParam.value(paramValue);
        ann.param_seq().push_back(annParam);

        cbf_child_w.detail().ann_custom().push_back(ann);
    }

    type_object->complete().bitset_type().field_seq().emplace_back(cbf_child_w);

    type_object->complete().bitset_type().header().base_type(*GetInnerBitsetHelperIdentifier(true));

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteBitsetType::getCdrSerializedSize(type_object->complete().bitset_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerBitsetHelperChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChild", true);
}

const TypeIdentifier* GetInnerBitsetHelperChildChildIdentifier(bool complete)
{
    const TypeIdentifier* c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("InnerBitsetHelperChildChild", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetInnerBitsetHelperChildChildObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("InnerBitsetHelperChildChild", complete);
}

const TypeObject* GetInnerBitsetHelperChildChildObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChildChild", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteInnerBitsetHelperChildChildObject();
    }
    // else
    return GetMinimalInnerBitsetHelperChildChildObject();
}

const TypeObject* GetMinimalInnerBitsetHelperChildChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChildChild", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_BITSET);

    MinimalBitfield mbf_childchild_z;
    mbf_childchild_z.common().flags().TRY_CONSTRUCT1(false);
    mbf_childchild_z.common().flags().TRY_CONSTRUCT2(false);
    mbf_childchild_z.common().flags().IS_EXTERNAL(false);
    mbf_childchild_z.common().flags().IS_OPTIONAL(false);
    mbf_childchild_z.common().flags().IS_MUST_UNDERSTAND(false);
    mbf_childchild_z.common().flags().IS_KEY(false);
    mbf_childchild_z.common().flags().IS_DEFAULT(false);
    mbf_childchild_z.common().position(0);
    mbf_childchild_z.common().bitcount(18);
    mbf_childchild_z.common().holder_type(TK_UINT32);
    MD5 childchild_z_hash("childchild_z");
    for(int i = 0; i < 4; ++i)
    {
        mbf_childchild_z.name_hash()[i] = childchild_z_hash.digest[i];
    }
    type_object->minimal().bitset_type().field_seq().emplace_back(mbf_childchild_z);

    type_object->minimal().bitset_type().header().base_type(*GetInnerBitsetHelperChildIdentifier(false));

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalBitsetType::getCdrSerializedSize(type_object->minimal().bitset_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerBitsetHelperChildChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChildChild", false);
}

const TypeObject* GetCompleteInnerBitsetHelperChildChildObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChildChild", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_BITSET);

    // No flags apply
    //type_object->complete().bitset_type().bitset_flags().IS_FINAL(false);
    //type_object->complete().bitset_type().bitset_flags().IS_APPENDABLE(false);
    //type_object->complete().bitset_type().bitset_flags().IS_MUTABLE(false);
    //type_object->complete().bitset_type().bitset_flags().IS_NESTED(false);
    //type_object->complete().bitset_type().bitset_flags().IS_AUTOID_HASH(false);


    type_object->complete().bitset_type().header().detail().type_name("InnerBitsetHelperChildChild");

    CompleteBitfield cbf_childchild_z;
    cbf_childchild_z.common().flags().TRY_CONSTRUCT1(false);
    cbf_childchild_z.common().flags().TRY_CONSTRUCT2(false);
    cbf_childchild_z.common().flags().IS_EXTERNAL(false);
    cbf_childchild_z.common().flags().IS_OPTIONAL(false);
    cbf_childchild_z.common().flags().IS_MUST_UNDERSTAND(false);
    cbf_childchild_z.common().flags().IS_KEY(false);
    cbf_childchild_z.common().flags().IS_DEFAULT(false);
    cbf_childchild_z.common().position(0);
    cbf_childchild_z.common().bitcount(18);
    cbf_childchild_z.common().holder_type(TK_UINT32);
    cbf_childchild_z.detail().name("childchild_z");

    // Position annotation always present
    {
        // Position
        AppliedAnnotation ann;
        ann.annotation_typeid(*TypeObjectFactory::get_instance()->get_type_identifier_trying_complete("position"));
        AppliedAnnotationParameter annParam;
        MD5 message_hash("value");
        for(int i = 0; i < 4; ++i)
        {
            annParam.paramname_hash()[i] = message_hash.digest[i];
        }
        AnnotationParameterValue paramValue;
        paramValue._d(TK_UINT16);
        paramValue.uint_16_value(0);
        annParam.value(paramValue);
        ann.param_seq().push_back(annParam);

        cbf_childchild_z.detail().ann_custom().push_back(ann);
    }

    // Use bit_bound as bitcount.
    {
        // Position
        AppliedAnnotation ann;
        ann.annotation_typeid(*TypeObjectFactory::get_instance()->get_type_identifier_trying_complete("bit_bound"));
        AppliedAnnotationParameter annParam;
        MD5 message_hash("value");
        for(int i = 0; i < 4; ++i)
        {
            annParam.paramname_hash()[i] = message_hash.digest[i];
        }
        AnnotationParameterValue paramValue;
        paramValue._d(TK_UINT16);
        paramValue.uint_16_value(18);
        annParam.value(paramValue);
        ann.param_seq().push_back(annParam);

        cbf_childchild_z.detail().ann_custom().push_back(ann);
    }

    type_object->complete().bitset_type().field_seq().emplace_back(cbf_childchild_z);

    type_object->complete().bitset_type().header().base_type(*GetInnerBitsetHelperChildIdentifier(true));

    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteBitsetType::getCdrSerializedSize(type_object->complete().bitset_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("InnerBitsetHelperChildChild", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("InnerBitsetHelperChildChild", true);
}

const TypeIdentifier* GetBitsetsChildInheritanceStructIdentifier(bool complete)
{
    const TypeIdentifier * c_identifier = TypeObjectFactory::get_instance()->get_type_identifier("BitsetsChildInheritanceStruct", complete);
    if (c_identifier != nullptr && (!complete || c_identifier->_d() == EK_COMPLETE))
    {
        return c_identifier;
    }

    GetBitsetsChildInheritanceStructObject(complete); // Generated inside
    return TypeObjectFactory::get_instance()->get_type_identifier("BitsetsChildInheritanceStruct", complete);
}

const TypeObject* GetBitsetsChildInheritanceStructObject(bool complete)
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("BitsetsChildInheritanceStruct", complete);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }
    else if (complete)
    {
        return GetCompleteBitsetsChildInheritanceStructObject();
    }
    //else
    return GetMinimalBitsetsChildInheritanceStructObject();
}

const TypeObject* GetMinimalBitsetsChildInheritanceStructObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("BitsetsChildInheritanceStruct", false);
    if (c_type_object != nullptr)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_MINIMAL);
    type_object->minimal()._d(TK_STRUCTURE);

    type_object->minimal().struct_type().struct_flags().IS_FINAL(false);
    type_object->minimal().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->minimal().struct_type().struct_flags().IS_NESTED(false);
    type_object->minimal().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    MinimalStructMember mst_var_InnerBitsetHelperChild;
    mst_var_InnerBitsetHelperChild.common().member_id(memberId++);
    mst_var_InnerBitsetHelperChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_InnerBitsetHelperChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_InnerBitsetHelperChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_InnerBitsetHelperChild.common().member_flags().IS_OPTIONAL(false);
    mst_var_InnerBitsetHelperChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_InnerBitsetHelperChild.common().member_flags().IS_KEY(false);
    mst_var_InnerBitsetHelperChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_InnerBitsetHelperChild.common().member_type_id(*GetInnerBitsetHelperChildIdentifier(false));
    MD5 var_InnerBitsetHelperChild_hash("var_InnerBitsetHelperChild");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_InnerBitsetHelperChild.detail().name_hash()[i] = var_InnerBitsetHelperChild_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_InnerBitsetHelperChild);

    MinimalStructMember mst_var_InnerBitsetHelperChildChild;
    mst_var_InnerBitsetHelperChildChild.common().member_id(memberId++);
    mst_var_InnerBitsetHelperChildChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    mst_var_InnerBitsetHelperChildChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    mst_var_InnerBitsetHelperChildChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    mst_var_InnerBitsetHelperChildChild.common().member_flags().IS_OPTIONAL(false);
    mst_var_InnerBitsetHelperChildChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    mst_var_InnerBitsetHelperChildChild.common().member_flags().IS_KEY(false);
    mst_var_InnerBitsetHelperChildChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    mst_var_InnerBitsetHelperChildChild.common().member_type_id(*GetInnerBitsetHelperChildChildIdentifier(false));
    MD5 var_InnerBitsetHelperChildChild_hash("var_InnerBitsetHelperChildChild");
    for(int i = 0; i < 4; ++i)
    {
        mst_var_InnerBitsetHelperChildChild.detail().name_hash()[i] = var_InnerBitsetHelperChildChild_hash.digest[i];
    }
    type_object->minimal().struct_type().member_seq().emplace_back(mst_var_InnerBitsetHelperChildChild);


    // Header
    // TODO Inheritance
    //type_object->minimal().struct_type().header().base_type()._d(EK_MINIMAL);
    //type_object->minimal().struct_type().header().base_type().equivalence_hash()[0..13];

    TypeIdentifier identifier;
    identifier._d(EK_MINIMAL);

    SerializedPayload_t payload(static_cast<uint32_t>(
        MinimalStructType::getCdrSerializedSize(type_object->minimal().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("BitsetsChildInheritanceStruct", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("BitsetsChildInheritanceStruct", false);
}

const TypeObject* GetCompleteBitsetsChildInheritanceStructObject()
{
    const TypeObject* c_type_object = TypeObjectFactory::get_instance()->get_type_object("BitsetsChildInheritanceStruct", true);
    if (c_type_object != nullptr && c_type_object->_d() == EK_COMPLETE)
    {
        return c_type_object;
    }

    TypeObject *type_object = new TypeObject();
    type_object->_d(EK_COMPLETE);
    type_object->complete()._d(TK_STRUCTURE);

    type_object->complete().struct_type().struct_flags().IS_FINAL(false);
    type_object->complete().struct_type().struct_flags().IS_APPENDABLE(false);
    type_object->complete().struct_type().struct_flags().IS_MUTABLE(false);
    type_object->complete().struct_type().struct_flags().IS_NESTED(false);
    type_object->complete().struct_type().struct_flags().IS_AUTOID_HASH(false); // Unsupported

    MemberId memberId = 0;
    CompleteStructMember cst_var_InnerBitsetHelperChild;
    cst_var_InnerBitsetHelperChild.common().member_id(memberId++);
    cst_var_InnerBitsetHelperChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_InnerBitsetHelperChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_InnerBitsetHelperChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_InnerBitsetHelperChild.common().member_flags().IS_OPTIONAL(false);
    cst_var_InnerBitsetHelperChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_InnerBitsetHelperChild.common().member_flags().IS_KEY(false);
    cst_var_InnerBitsetHelperChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_InnerBitsetHelperChild.common().member_type_id(*GetInnerBitsetHelperChildIdentifier(true));
    cst_var_InnerBitsetHelperChild.detail().name("var_InnerBitsetHelperChild");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_InnerBitsetHelperChild);

    CompleteStructMember cst_var_InnerBitsetHelperChildChild;
    cst_var_InnerBitsetHelperChildChild.common().member_id(memberId++);
    cst_var_InnerBitsetHelperChildChild.common().member_flags().TRY_CONSTRUCT1(false); // Unsupported
    cst_var_InnerBitsetHelperChildChild.common().member_flags().TRY_CONSTRUCT2(false); // Unsupported
    cst_var_InnerBitsetHelperChildChild.common().member_flags().IS_EXTERNAL(false); // Unsupported
    cst_var_InnerBitsetHelperChildChild.common().member_flags().IS_OPTIONAL(false);
    cst_var_InnerBitsetHelperChildChild.common().member_flags().IS_MUST_UNDERSTAND(false);
    cst_var_InnerBitsetHelperChildChild.common().member_flags().IS_KEY(false);
    cst_var_InnerBitsetHelperChildChild.common().member_flags().IS_DEFAULT(false); // Doesn't apply
    cst_var_InnerBitsetHelperChildChild.common().member_type_id(*GetInnerBitsetHelperChildChildIdentifier(true));
    cst_var_InnerBitsetHelperChildChild.detail().name("var_InnerBitsetHelperChildChild");

    type_object->complete().struct_type().member_seq().emplace_back(cst_var_InnerBitsetHelperChildChild);


    // Header
    type_object->complete().struct_type().header().detail().type_name("BitsetsChildInheritanceStruct");
    // TODO inheritance


    TypeIdentifier identifier;
    identifier._d(EK_COMPLETE);

    SerializedPayload_t payload(static_cast<uint32_t>(
        CompleteStructType::getCdrSerializedSize(type_object->complete().struct_type()) + 4));
    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload.data, payload.max_size);
    // Fixed endian (Page 221, EquivalenceHash definition of Extensible and Dynamic Topic Types for DDS document)
    eprosima::fastcdr::Cdr ser(
        fastbuffer, eprosima::fastcdr::Cdr::LITTLE_ENDIANNESS,
        eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
    payload.encapsulation = CDR_LE;

    type_object->serialize(ser);
    payload.length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
    MD5 objectHash;
    objectHash.update((char*)payload.data, payload.length);
    objectHash.finalize();
    for(int i = 0; i < 14; ++i)
    {
        identifier.equivalence_hash()[i] = objectHash.digest[i];
    }

    TypeObjectFactory::get_instance()->add_type_object("BitsetsChildInheritanceStruct", &identifier, type_object);
    delete type_object;
    return TypeObjectFactory::get_instance()->get_type_object("BitsetsChildInheritanceStruct", true);
}
