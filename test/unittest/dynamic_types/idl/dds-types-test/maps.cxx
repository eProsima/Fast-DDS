// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file maps.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "maps.h"
#include "mapsTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define MapLongULongLong_max_cdr_typesize 1600ULL;
#define MapShortOctet_max_cdr_typesize 403ULL;
#define MapInnerAliasBoundedStringHelperBoolean_max_cdr_typesize 1604ULL;
#define MapULongInnerEnumHelper_max_cdr_typesize 804ULL;
#define MapLongLongWString_max_cdr_typesize 103208ULL;
#define MapULongWChar_max_cdr_typesize 804ULL;
#define MapInnerAliasBoundedStringHelperInnerUnionHelper_max_cdr_typesize 2404ULL;
#define MapWStringInnerAliasMapHelper_max_cdr_typesize 182804ULL;
#define MapLongShort_max_cdr_typesize 802ULL;
#define MapWStringULong_max_cdr_typesize 102804ULL;
#define MapShortLongLong_max_cdr_typesize 1600ULL;
#define MapStringLongDouble_max_cdr_typesize 28000ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper_max_cdr_typesize 22004ULL;
#define InnerEmptyStructureHelper_max_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerUnionHelper_max_cdr_typesize 5204ULL;
#define MapLongInnerBitsetHelper_max_cdr_typesize 1204ULL;
#define MapLongLongKeyDoubleValue_max_cdr_typesize 1608ULL;
#define MapUShortLongLong_max_cdr_typesize 1600ULL;
#define MapWStringDouble_max_cdr_typesize 103208ULL;

#define MapInnerAliasBoundedWStringHelperULong_max_cdr_typesize 4804ULL;
#define MapLongInnerUnionHelper_max_cdr_typesize 1204ULL;
#define MapLongLongFloat_max_cdr_typesize 1604ULL;
#define MapInnerAliasBoundedStringHelperWString_max_cdr_typesize 104004ULL;
#define MapInnerAliasBoundedWStringHelperULongLong_max_cdr_typesize 5600ULL;

#define MapLongULong_max_cdr_typesize 804ULL;
#define MapStringInnerEnumHelper_max_cdr_typesize 26404ULL;
#define MapLongWString_max_cdr_typesize 102804ULL;
#define MapLongInnerBitMaskHelper_max_cdr_typesize 804ULL;
#define MapLongLongInnerUnionHelper_max_cdr_typesize 1608ULL;
#define MapULongLongBoolean_max_cdr_typesize 1601ULL;
#define MapLongLongInnerAliasSequenceHelper_max_cdr_typesize 21604ULL;
#define MapKeyULongLongValueDouble_max_cdr_typesize 1608ULL;
#define MapInnerAliasBoundedWStringHelperInnerBitsetHelper_max_cdr_typesize 5204ULL;
#define MapWStringShort_max_cdr_typesize 102802ULL;
#define MapWStringInnerUnionHelper_max_cdr_typesize 103204ULL;
#define MapULongULong_max_cdr_typesize 804ULL;
#define MapULongLongString_max_cdr_typesize 27204ULL;
#define MapStringInnerAliasArrayHelper_max_cdr_typesize 26404ULL;
#define MapULongShort_max_cdr_typesize 802ULL;
#define MapShortInnerEnumHelper_max_cdr_typesize 804ULL;
#define MapULongInnerAliasHelper_max_cdr_typesize 804ULL;
#define MapWStringInnerAliasArrayHelper_max_cdr_typesize 102804ULL;
#define MapStringWString_max_cdr_typesize 128404ULL;
#define MapULongOctet_max_cdr_typesize 801ULL;
#define MapInnerAliasBoundedWStringHelperInnerBitMaskHelper_max_cdr_typesize 4804ULL;
#define MapULongLongLong_max_cdr_typesize 1604ULL;
#define MapULongLongInnerAliasSequenceHelper_max_cdr_typesize 21604ULL;
#define MapStringUShort_max_cdr_typesize 26402ULL;
#define MapStringLong_max_cdr_typesize 26404ULL;
#define MapUShortULong_max_cdr_typesize 804ULL;
#define MapShortULongLong_max_cdr_typesize 1600ULL;
#define MapULongLongFloat_max_cdr_typesize 1604ULL;
#define MapInnerAliasBoundedStringHelperInnerBitMaskHelper_max_cdr_typesize 2004ULL;
#define MapInnerAliasBoundedWStringHelperUShort_max_cdr_typesize 4802ULL;
#define MapUShortOctet_max_cdr_typesize 403ULL;
#define MapUShortWChar_max_cdr_typesize 804ULL;
#define MapStringInnerAliasBoundedStringHelper_max_cdr_typesize 27603ULL;
#define MapWStringUShort_max_cdr_typesize 102802ULL;
#define MapULongInnerAliasMapHelper_max_cdr_typesize 80804ULL;
#define MapInnerAliasBoundedWStringHelperChar_max_cdr_typesize 4801ULL;
#define MapInnerAliasBoundedStringHelperOctet_max_cdr_typesize 1604ULL;
#define MapLongInnerStructureHelper_max_cdr_typesize 1204ULL;

#define MapULongWString_max_cdr_typesize 102804ULL;
#define MapWStringULongLong_max_cdr_typesize 103208ULL;
#define MapShortULong_max_cdr_typesize 804ULL;
#define MapStringDouble_max_cdr_typesize 27200ULL;
#define MapInnerAliasBoundedStringHelperULongLong_max_cdr_typesize 2408ULL;
#define MapUShortString_max_cdr_typesize 26404ULL;
#define MapInnerAliasBoundedStringHelperWChar_max_cdr_typesize 2004ULL;
#define MapWStringInnerAliasSequenceHelper_max_cdr_typesize 122804ULL;
#define MapLongUShort_max_cdr_typesize 802ULL;
#define MapLongInnerAliasBoundedStringHelper_max_cdr_typesize 2003ULL;
#define MapULongLongInnerStructureHelper_max_cdr_typesize 1608ULL;
#define MapWStringString_max_cdr_typesize 128404ULL;
#define MapInnerAliasBoundedWStringHelperLongDouble_max_cdr_typesize 6400ULL;
#define MapUShortULongLong_max_cdr_typesize 1600ULL;
#define MapULongBoolean_max_cdr_typesize 801ULL;
#define MapShortInnerAliasBoundedWStringHelper_max_cdr_typesize 4804ULL;
#define MapInnerAliasBoundedWStringHelperOctet_max_cdr_typesize 4801ULL;
#define MapInnerAliasBoundedWStringHelperWString_max_cdr_typesize 106804ULL;
#define MapUShortShort_max_cdr_typesize 404ULL;
#define MapStringInnerAliasBoundedWStringHelper_max_cdr_typesize 30404ULL;
#define MapInnerAliasBoundedWStringHelperFloat_max_cdr_typesize 4804ULL;
#define MapULongLongUShort_max_cdr_typesize 1602ULL;
#define MapULongLongLongDouble_max_cdr_typesize 2408ULL;
#define MapStringInnerAliasMapHelper_max_cdr_typesize 106404ULL;
#define MapLongKeyLongDoubleValue_max_cdr_typesize 2400ULL;
#define MapLongWChar_max_cdr_typesize 804ULL;
#define MapULongLongInnerEnumHelper_max_cdr_typesize 1604ULL;
#define MapInnerAliasBoundedWStringHelperInnerEnumHelper_max_cdr_typesize 4804ULL;
#define MapUShortInnerUnionHelper_max_cdr_typesize 1204ULL;
#define MapUShortInnerAliasHelper_max_cdr_typesize 804ULL;
#define MapLongLongInnerAliasArrayHelper_max_cdr_typesize 1604ULL;
#define BoundedSmallMap_max_cdr_typesize 12ULL;
#define MapShortWChar_max_cdr_typesize 804ULL;
#define MapULongInnerUnionHelper_max_cdr_typesize 1204ULL;
#define MapULongLongWString_max_cdr_typesize 103208ULL;
#define MapULongLongInnerBitsetHelper_max_cdr_typesize 1608ULL;
#define MapInnerAliasBoundedStringHelperLongLong_max_cdr_typesize 2408ULL;
#define MapInnerAliasBoundedWStringHelperString_max_cdr_typesize 30404ULL;
#define BoundedLargeMap_max_cdr_typesize 335404ULL;
#define MapShortInnerAliasHelper_max_cdr_typesize 804ULL;
#define MapUShortLong_max_cdr_typesize 804ULL;
#define MapLongDouble_max_cdr_typesize 1600ULL;
#define MapLongLongInnerAliasBoundedStringHelper_max_cdr_typesize 2407ULL;
#define MapKeyULongValueLongDouble_max_cdr_typesize 2400ULL;
#define MapLongLong_max_cdr_typesize 804ULL;
#define MapLongString_max_cdr_typesize 26404ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper_max_cdr_typesize 6004ULL;
#define MapLongLongString_max_cdr_typesize 27204ULL;
#define MapWStringWChar_max_cdr_typesize 102804ULL;
#define MapULongDouble_max_cdr_typesize 1600ULL;
#define MapInnerAliasBoundedStringHelperString_max_cdr_typesize 27604ULL;
#define MapULongULongLong_max_cdr_typesize 1600ULL;
#define MapStringInnerBitsetHelper_max_cdr_typesize 26804ULL;
#define MapUShortDouble_max_cdr_typesize 1600ULL;
#define MapShortUShort_max_cdr_typesize 404ULL;
#define MapShortInnerBitsetHelper_max_cdr_typesize 1004ULL;
#define MapUShortInnerAliasMapHelper_max_cdr_typesize 80804ULL;
#define MapULongInnerAliasSequenceHelper_max_cdr_typesize 20804ULL;
#define MapInnerAliasBoundedWStringHelperDouble_max_cdr_typesize 5600ULL;
#define MapUShortInnerAliasSequenceHelper_max_cdr_typesize 20804ULL;
#define MapStringOctet_max_cdr_typesize 26401ULL;
#define MapUShortInnerBitMaskHelper_max_cdr_typesize 804ULL;
#define MapWStringInnerAliasBoundedWStringHelper_max_cdr_typesize 106804ULL;
#define MapULongLong_max_cdr_typesize 804ULL;
#define MapULongLongULongLong_max_cdr_typesize 1608ULL;
#define MapInnerAliasBoundedStringHelperDouble_max_cdr_typesize 2408ULL;
#define MapShortLong_max_cdr_typesize 804ULL;
#define MapStringFloat_max_cdr_typesize 26404ULL;
#define MapShortShort_max_cdr_typesize 404ULL;
#define MapWStringLong_max_cdr_typesize 102804ULL;
#define InnerStructureHelper_max_cdr_typesize 8ULL;
#define MapULongInnerAliasBoundedStringHelper_max_cdr_typesize 2003ULL;
#define MapLongLongLongDouble_max_cdr_typesize 2408ULL;
#define MapShortWString_max_cdr_typesize 102804ULL;
#define MapULongLongShort_max_cdr_typesize 1602ULL;
#define MapULongLongInnerBitMaskHelper_max_cdr_typesize 1604ULL;
#define MapLongInnerAliasHelper_max_cdr_typesize 804ULL;
#define MapLongLongWChar_max_cdr_typesize 1604ULL;
#define MapInnerAliasBoundedWStringHelperLong_max_cdr_typesize 4804ULL;
#define MapLongInnerAliasArrayHelper_max_cdr_typesize 804ULL;
#define MapLongLongInnerStructureHelper_max_cdr_typesize 1608ULL;
#define MapULongLongLongLong_max_cdr_typesize 1608ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasHelper_max_cdr_typesize 2004ULL;
#define MapShortInnerAliasArrayHelper_max_cdr_typesize 604ULL;
#define MapShortFloat_max_cdr_typesize 804ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper_max_cdr_typesize 4804ULL;
#define MapWStringWString_max_cdr_typesize 204804ULL;
#define MapShortInnerAliasMapHelper_max_cdr_typesize 80804ULL;
#define MapShortDouble_max_cdr_typesize 1600ULL;
#define MapShortBoolean_max_cdr_typesize 403ULL;
#define MapStringInnerBitMaskHelper_max_cdr_typesize 26404ULL;
#define MapStringString_max_cdr_typesize 52004ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasHelper_max_cdr_typesize 4804ULL;
#define MapStringInnerAliasSequenceHelper_max_cdr_typesize 46404ULL;
#define MapUShortUShort_max_cdr_typesize 404ULL;
#define MapULongInnerAliasArrayHelper_max_cdr_typesize 804ULL;
#define MapLongInnerAliasBoundedWStringHelper_max_cdr_typesize 4804ULL;
#define MapInnerAliasBoundedStringHelperChar_max_cdr_typesize 1604ULL;
#define MapUShortInnerEnumHelper_max_cdr_typesize 804ULL;
#define MapInnerAliasBoundedWStringHelperLongLong_max_cdr_typesize 5600ULL;
#define MapWStringBoolean_max_cdr_typesize 102801ULL;

#define MapUShortBoolean_max_cdr_typesize 403ULL;

#define MapShortLongDouble_max_cdr_typesize 2400ULL;
#define MapULongString_max_cdr_typesize 26404ULL;
#define MapLongLongKeyLongValue_max_cdr_typesize 1604ULL;
#define MapULongLongInnerUnionHelper_max_cdr_typesize 1608ULL;
#define MapLongLongULong_max_cdr_typesize 1604ULL;
#define MapLongLongInnerAliasHelper_max_cdr_typesize 1604ULL;
#define MapInnerAliasBoundedStringHelperULong_max_cdr_typesize 2004ULL;
#define MapShortInnerUnionHelper_max_cdr_typesize 1204ULL;
#define MapLongLongShort_max_cdr_typesize 1602ULL;
#define MapLongLongInnerBitsetHelper_max_cdr_typesize 1608ULL;
#define MapLongLongOctet_max_cdr_typesize 1601ULL;
#define MapInnerAliasBoundedStringHelperShort_max_cdr_typesize 2002ULL;
#define MapLongLongInnerBitMaskHelper_max_cdr_typesize 1604ULL;
#define MapUShortInnerAliasArrayHelper_max_cdr_typesize 604ULL;
#define MapKeyULongValueLongLong_max_cdr_typesize 1600ULL;
#define MapULongInnerBitMaskHelper_max_cdr_typesize 804ULL;
#define MapInnerAliasBoundedStringHelperFloat_max_cdr_typesize 2004ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasMapHelper_max_cdr_typesize 82004ULL;
#define MapLongInnerEnumHelper_max_cdr_typesize 804ULL;
#define MapULongLongWChar_max_cdr_typesize 1604ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper_max_cdr_typesize 24804ULL;
#define MapUShortWString_max_cdr_typesize 102804ULL;
#define MapULongInnerAliasBoundedWStringHelper_max_cdr_typesize 4804ULL;
#define MapLongLongInnerAliasBoundedWStringHelper_max_cdr_typesize 5604ULL;
#define MapLongLongInnerAliasMapHelper_max_cdr_typesize 81604ULL;
#define MapShortString_max_cdr_typesize 26404ULL;

#define MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper_max_cdr_typesize 8804ULL;
#define MapStringULongLong_max_cdr_typesize 27200ULL;

#define MapLongLongChar_max_cdr_typesize 1601ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasMapHelper_max_cdr_typesize 84804ULL;
#define MapULongLongChar_max_cdr_typesize 1601ULL;
#define MapLongLongULongLong_max_cdr_typesize 1608ULL;
#define MapStringLongLong_max_cdr_typesize 27200ULL;
#define MapULongLongInnerAliasBoundedStringHelper_max_cdr_typesize 2407ULL;
#define MapULongLongULong_max_cdr_typesize 1604ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasArrayHelper_max_cdr_typesize 2004ULL;
#define MapUShortLongDouble_max_cdr_typesize 2400ULL;
#define MapLongInnerAliasMapHelper_max_cdr_typesize 80804ULL;
#define MapULongFloat_max_cdr_typesize 804ULL;
#define MapUShortFloat_max_cdr_typesize 804ULL;
#define MapShortInnerAliasSequenceHelper_max_cdr_typesize 20804ULL;
#define MapUShortInnerAliasBoundedStringHelper_max_cdr_typesize 2003ULL;
#define MapWStringFloat_max_cdr_typesize 102804ULL;
#define MapUShortInnerBitsetHelper_max_cdr_typesize 1004ULL;
#define MapLongFloat_max_cdr_typesize 804ULL;
#define MapWStringLongDouble_max_cdr_typesize 104008ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper_max_cdr_typesize 6003ULL;
#define MapShortInnerBitMaskHelper_max_cdr_typesize 804ULL;
#define MapWStringInnerBitsetHelper_max_cdr_typesize 103204ULL;
#define MapWStringOctet_max_cdr_typesize 102801ULL;
#define MapULongLongOctet_max_cdr_typesize 1601ULL;
#define MapInnerAliasBoundedStringHelperLongDouble_max_cdr_typesize 3208ULL;
#define MapStringInnerAliasHelper_max_cdr_typesize 26404ULL;
#define MapInnerAliasBoundedStringHelperInnerEnumHelper_max_cdr_typesize 2004ULL;
#define MapStringInnerUnionHelper_max_cdr_typesize 26804ULL;
#define MapLongLongUShort_max_cdr_typesize 1602ULL;
#define MapUShortInnerStructureHelper_max_cdr_typesize 1204ULL;
#define MapInnerAliasBoundedStringHelperUShort_max_cdr_typesize 2002ULL;
#define MapULongLongInnerAliasArrayHelper_max_cdr_typesize 1604ULL;
#define MapInnerAliasBoundedStringHelperInnerStructureHelper_max_cdr_typesize 2404ULL;
#define MapStringChar_max_cdr_typesize 26401ULL;
#define MapULongUShort_max_cdr_typesize 802ULL;
#define MapInnerAliasBoundedStringHelperInnerBitsetHelper_max_cdr_typesize 2402ULL;
#define MapLongOctet_max_cdr_typesize 801ULL;
#define MapLongLongInnerEnumHelper_max_cdr_typesize 1604ULL;
#define MapShortInnerStructureHelper_max_cdr_typesize 1204ULL;
#define MapULongChar_max_cdr_typesize 801ULL;
#define MapULongInnerStructureHelper_max_cdr_typesize 1204ULL;
#define MapWStringInnerEnumHelper_max_cdr_typesize 102804ULL;
#define MapWStringInnerAliasHelper_max_cdr_typesize 102804ULL;
#define MapStringShort_max_cdr_typesize 26402ULL;
#define MapWStringInnerBitMaskHelper_max_cdr_typesize 102804ULL;
#define MapShortInnerAliasBoundedStringHelper_max_cdr_typesize 2003ULL;
#define MapULongLongInnerAliasHelper_max_cdr_typesize 1604ULL;
#define MapInnerAliasBoundedWStringHelperBoolean_max_cdr_typesize 4801ULL;
#define MapLongLongLongLong_max_cdr_typesize 1608ULL;
#define MapLongInnerAliasSequenceHelper_max_cdr_typesize 20804ULL;
#define MapWStringChar_max_cdr_typesize 102801ULL;
#define MapLongBoolean_max_cdr_typesize 801ULL;
#define MapShortChar_max_cdr_typesize 403ULL;
#define MapStringInnerStructureHelper_max_cdr_typesize 26804ULL;
#define MapInnerAliasBoundedWStringHelperInnerStructureHelper_max_cdr_typesize 5204ULL;
#define MapWStringInnerAliasBoundedStringHelper_max_cdr_typesize 104003ULL;
#define MapInnerAliasBoundedWStringHelperWChar_max_cdr_typesize 4804ULL;
#define MapULongLongInnerAliasBoundedWStringHelper_max_cdr_typesize 5604ULL;
#define MapWStringLongLong_max_cdr_typesize 103208ULL;
#define MapULongInnerBitsetHelper_max_cdr_typesize 1204ULL;
#define MapUShortInnerAliasBoundedWStringHelper_max_cdr_typesize 4804ULL;
#define MapLongLongBoolean_max_cdr_typesize 1601ULL;
#define MapStringBoolean_max_cdr_typesize 26401ULL;
#define MapUShortChar_max_cdr_typesize 403ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper_max_cdr_typesize 3203ULL;
#define MapLongKeyLongLongValue_max_cdr_typesize 1600ULL;
#define MapStringWChar_max_cdr_typesize 26404ULL;
#define MapInnerAliasBoundedStringHelperLong_max_cdr_typesize 2004ULL;
#define MapInnerAliasBoundedWStringHelperShort_max_cdr_typesize 4802ULL;


#define MapLongChar_max_cdr_typesize 801ULL;
#define MapWStringInnerStructureHelper_max_cdr_typesize 103204ULL;
#define MapULongLongInnerAliasMapHelper_max_cdr_typesize 81604ULL;
#define MapStringULong_max_cdr_typesize 26404ULL;

#define MapLongULongLong_max_key_cdr_typesize 0ULL;
#define MapShortOctet_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperBoolean_max_key_cdr_typesize 0ULL;
#define MapULongInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongWString_max_key_cdr_typesize 0ULL;
#define MapULongWChar_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapWStringInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapLongShort_max_key_cdr_typesize 0ULL;
#define MapWStringULong_max_key_cdr_typesize 0ULL;
#define MapShortLongLong_max_key_cdr_typesize 0ULL;
#define MapStringLongDouble_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define InnerEmptyStructureHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapLongInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongKeyDoubleValue_max_key_cdr_typesize 0ULL;
#define MapUShortLongLong_max_key_cdr_typesize 0ULL;
#define MapWStringDouble_max_key_cdr_typesize 0ULL;

#define MapInnerAliasBoundedWStringHelperULong_max_key_cdr_typesize 0ULL;
#define MapLongInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongFloat_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperWString_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperULongLong_max_key_cdr_typesize 0ULL;

#define MapLongULong_max_key_cdr_typesize 0ULL;
#define MapStringInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapLongWString_max_key_cdr_typesize 0ULL;
#define MapLongInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongBoolean_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define MapKeyULongLongValueDouble_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapWStringShort_max_key_cdr_typesize 0ULL;
#define MapWStringInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapULongULong_max_key_cdr_typesize 0ULL;
#define MapULongLongString_max_key_cdr_typesize 0ULL;
#define MapStringInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define MapULongShort_max_key_cdr_typesize 0ULL;
#define MapShortInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapULongInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapWStringInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define MapStringWString_max_key_cdr_typesize 0ULL;
#define MapULongOctet_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongLong_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define MapStringUShort_max_key_cdr_typesize 0ULL;
#define MapStringLong_max_key_cdr_typesize 0ULL;
#define MapUShortULong_max_key_cdr_typesize 0ULL;
#define MapShortULongLong_max_key_cdr_typesize 0ULL;
#define MapULongLongFloat_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperUShort_max_key_cdr_typesize 0ULL;
#define MapUShortOctet_max_key_cdr_typesize 0ULL;
#define MapUShortWChar_max_key_cdr_typesize 0ULL;
#define MapStringInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapWStringUShort_max_key_cdr_typesize 0ULL;
#define MapULongInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperChar_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperOctet_max_key_cdr_typesize 0ULL;
#define MapLongInnerStructureHelper_max_key_cdr_typesize 0ULL;

#define MapULongWString_max_key_cdr_typesize 0ULL;
#define MapWStringULongLong_max_key_cdr_typesize 0ULL;
#define MapShortULong_max_key_cdr_typesize 0ULL;
#define MapStringDouble_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperULongLong_max_key_cdr_typesize 0ULL;
#define MapUShortString_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperWChar_max_key_cdr_typesize 0ULL;
#define MapWStringInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define MapLongUShort_max_key_cdr_typesize 0ULL;
#define MapLongInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapWStringString_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperLongDouble_max_key_cdr_typesize 0ULL;
#define MapUShortULongLong_max_key_cdr_typesize 0ULL;
#define MapULongBoolean_max_key_cdr_typesize 0ULL;
#define MapShortInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperOctet_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperWString_max_key_cdr_typesize 0ULL;
#define MapUShortShort_max_key_cdr_typesize 0ULL;
#define MapStringInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperFloat_max_key_cdr_typesize 0ULL;
#define MapULongLongUShort_max_key_cdr_typesize 0ULL;
#define MapULongLongLongDouble_max_key_cdr_typesize 0ULL;
#define MapStringInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapLongKeyLongDoubleValue_max_key_cdr_typesize 0ULL;
#define MapLongWChar_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapUShortInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapUShortInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define BoundedSmallMap_max_key_cdr_typesize 0ULL;
#define MapShortWChar_max_key_cdr_typesize 0ULL;
#define MapULongInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongWString_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperLongLong_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperString_max_key_cdr_typesize 0ULL;
#define BoundedLargeMap_max_key_cdr_typesize 0ULL;
#define MapShortInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapUShortLong_max_key_cdr_typesize 0ULL;
#define MapLongDouble_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapKeyULongValueLongDouble_max_key_cdr_typesize 0ULL;
#define MapLongLong_max_key_cdr_typesize 0ULL;
#define MapLongString_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongString_max_key_cdr_typesize 0ULL;
#define MapWStringWChar_max_key_cdr_typesize 0ULL;
#define MapULongDouble_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperString_max_key_cdr_typesize 0ULL;
#define MapULongULongLong_max_key_cdr_typesize 0ULL;
#define MapStringInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapUShortDouble_max_key_cdr_typesize 0ULL;
#define MapShortUShort_max_key_cdr_typesize 0ULL;
#define MapShortInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapUShortInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapULongInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperDouble_max_key_cdr_typesize 0ULL;
#define MapUShortInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define MapStringOctet_max_key_cdr_typesize 0ULL;
#define MapUShortInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapWStringInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapULongLong_max_key_cdr_typesize 0ULL;
#define MapULongLongULongLong_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperDouble_max_key_cdr_typesize 0ULL;
#define MapShortLong_max_key_cdr_typesize 0ULL;
#define MapStringFloat_max_key_cdr_typesize 0ULL;
#define MapShortShort_max_key_cdr_typesize 0ULL;
#define MapWStringLong_max_key_cdr_typesize 0ULL;
#define InnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapULongInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongLongDouble_max_key_cdr_typesize 0ULL;
#define MapShortWString_max_key_cdr_typesize 0ULL;
#define MapULongLongShort_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapLongInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongWChar_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperLong_max_key_cdr_typesize 0ULL;
#define MapLongInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongLongLong_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapShortInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define MapShortFloat_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define MapWStringWString_max_key_cdr_typesize 0ULL;
#define MapShortInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapShortDouble_max_key_cdr_typesize 0ULL;
#define MapShortBoolean_max_key_cdr_typesize 0ULL;
#define MapStringInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapStringString_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapStringInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define MapUShortUShort_max_key_cdr_typesize 0ULL;
#define MapULongInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define MapLongInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperChar_max_key_cdr_typesize 0ULL;
#define MapUShortInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperLongLong_max_key_cdr_typesize 0ULL;
#define MapWStringBoolean_max_key_cdr_typesize 0ULL;

#define MapUShortBoolean_max_key_cdr_typesize 0ULL;

#define MapShortLongDouble_max_key_cdr_typesize 0ULL;
#define MapULongString_max_key_cdr_typesize 0ULL;
#define MapLongLongKeyLongValue_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongULong_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperULong_max_key_cdr_typesize 0ULL;
#define MapShortInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongShort_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongOctet_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperShort_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapUShortInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define MapKeyULongValueLongLong_max_key_cdr_typesize 0ULL;
#define MapULongInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperFloat_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapLongInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongWChar_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define MapUShortWString_max_key_cdr_typesize 0ULL;
#define MapULongInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapShortString_max_key_cdr_typesize 0ULL;

#define MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapStringULongLong_max_key_cdr_typesize 0ULL;

#define MapLongLongChar_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongChar_max_key_cdr_typesize 0ULL;
#define MapLongLongULongLong_max_key_cdr_typesize 0ULL;
#define MapStringLongLong_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongULong_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define MapUShortLongDouble_max_key_cdr_typesize 0ULL;
#define MapLongInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapULongFloat_max_key_cdr_typesize 0ULL;
#define MapUShortFloat_max_key_cdr_typesize 0ULL;
#define MapShortInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define MapUShortInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapWStringFloat_max_key_cdr_typesize 0ULL;
#define MapUShortInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapLongFloat_max_key_cdr_typesize 0ULL;
#define MapWStringLongDouble_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapShortInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapWStringInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapWStringOctet_max_key_cdr_typesize 0ULL;
#define MapULongLongOctet_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperLongDouble_max_key_cdr_typesize 0ULL;
#define MapStringInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapStringInnerUnionHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongUShort_max_key_cdr_typesize 0ULL;
#define MapUShortInnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperUShort_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerAliasArrayHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapStringChar_max_key_cdr_typesize 0ULL;
#define MapULongUShort_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapLongOctet_max_key_cdr_typesize 0ULL;
#define MapLongLongInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapShortInnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapULongChar_max_key_cdr_typesize 0ULL;
#define MapULongInnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapWStringInnerEnumHelper_max_key_cdr_typesize 0ULL;
#define MapWStringInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapStringShort_max_key_cdr_typesize 0ULL;
#define MapWStringInnerBitMaskHelper_max_key_cdr_typesize 0ULL;
#define MapShortInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerAliasHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperBoolean_max_key_cdr_typesize 0ULL;
#define MapLongLongLongLong_max_key_cdr_typesize 0ULL;
#define MapLongInnerAliasSequenceHelper_max_key_cdr_typesize 0ULL;
#define MapWStringChar_max_key_cdr_typesize 0ULL;
#define MapLongBoolean_max_key_cdr_typesize 0ULL;
#define MapShortChar_max_key_cdr_typesize 0ULL;
#define MapStringInnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperInnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapWStringInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperWChar_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapWStringLongLong_max_key_cdr_typesize 0ULL;
#define MapULongInnerBitsetHelper_max_key_cdr_typesize 0ULL;
#define MapUShortInnerAliasBoundedWStringHelper_max_key_cdr_typesize 0ULL;
#define MapLongLongBoolean_max_key_cdr_typesize 0ULL;
#define MapStringBoolean_max_key_cdr_typesize 0ULL;
#define MapUShortChar_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper_max_key_cdr_typesize 0ULL;
#define MapLongKeyLongLongValue_max_key_cdr_typesize 0ULL;
#define MapStringWChar_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedStringHelperLong_max_key_cdr_typesize 0ULL;
#define MapInnerAliasBoundedWStringHelperShort_max_key_cdr_typesize 0ULL;


#define MapLongChar_max_key_cdr_typesize 0ULL;
#define MapWStringInnerStructureHelper_max_key_cdr_typesize 0ULL;
#define MapULongLongInnerAliasMapHelper_max_key_cdr_typesize 0ULL;
#define MapStringULong_max_key_cdr_typesize 0ULL;








MapShortShort::MapShortShort()
{
    // map<short, short> m_var_map_short_short


    // Just to register all known types
    registermapsTypes();
}

MapShortShort::~MapShortShort()
{
}

MapShortShort::MapShortShort(
        const MapShortShort& x)
{
    m_var_map_short_short = x.m_var_map_short_short;
}

MapShortShort::MapShortShort(
        MapShortShort&& x) noexcept 
{
    m_var_map_short_short = std::move(x.m_var_map_short_short);
}

MapShortShort& MapShortShort::operator =(
        const MapShortShort& x)
{

    m_var_map_short_short = x.m_var_map_short_short;

    return *this;
}

MapShortShort& MapShortShort::operator =(
        MapShortShort&& x) noexcept
{

    m_var_map_short_short = std::move(x.m_var_map_short_short);

    return *this;
}

bool MapShortShort::operator ==(
        const MapShortShort& x) const
{

    return (m_var_map_short_short == x.m_var_map_short_short);
}

bool MapShortShort::operator !=(
        const MapShortShort& x) const
{
    return !(*this == x);
}

size_t MapShortShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortShort_max_cdr_typesize;
}

size_t MapShortShort::getCdrSerializedSize(
        const MapShortShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_short())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapShortShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_short.size());
    for (const auto& pair : m_var_map_short_short)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_short;
}

/*!
 * @brief This function copies the value in member var_map_short_short
 * @param _var_map_short_short New value to be copied in member var_map_short_short
 */
void MapShortShort::var_map_short_short(
        const std::map<int16_t, int16_t>& _var_map_short_short)
{
    m_var_map_short_short = _var_map_short_short;
}

/*!
 * @brief This function moves the value in member var_map_short_short
 * @param _var_map_short_short New value to be moved in member var_map_short_short
 */
void MapShortShort::var_map_short_short(
        std::map<int16_t, int16_t>&& _var_map_short_short)
{
    m_var_map_short_short = std::move(_var_map_short_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_short
 * @return Constant reference to member var_map_short_short
 */
const std::map<int16_t, int16_t>& MapShortShort::var_map_short_short() const
{
    return m_var_map_short_short;
}

/*!
 * @brief This function returns a reference to member var_map_short_short
 * @return Reference to member var_map_short_short
 */
std::map<int16_t, int16_t>& MapShortShort::var_map_short_short()
{
    return m_var_map_short_short;
}


size_t MapShortShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortShort_max_key_cdr_typesize;
}

bool MapShortShort::isKeyDefined()
{
    return false;
}

void MapShortShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortUShort::MapShortUShort()
{
    // map<short, unsigned short> m_var_map_short_ushort


    // Just to register all known types
    registermapsTypes();
}

MapShortUShort::~MapShortUShort()
{
}

MapShortUShort::MapShortUShort(
        const MapShortUShort& x)
{
    m_var_map_short_ushort = x.m_var_map_short_ushort;
}

MapShortUShort::MapShortUShort(
        MapShortUShort&& x) noexcept 
{
    m_var_map_short_ushort = std::move(x.m_var_map_short_ushort);
}

MapShortUShort& MapShortUShort::operator =(
        const MapShortUShort& x)
{

    m_var_map_short_ushort = x.m_var_map_short_ushort;

    return *this;
}

MapShortUShort& MapShortUShort::operator =(
        MapShortUShort&& x) noexcept
{

    m_var_map_short_ushort = std::move(x.m_var_map_short_ushort);

    return *this;
}

bool MapShortUShort::operator ==(
        const MapShortUShort& x) const
{

    return (m_var_map_short_ushort == x.m_var_map_short_ushort);
}

bool MapShortUShort::operator !=(
        const MapShortUShort& x) const
{
    return !(*this == x);
}

size_t MapShortUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortUShort_max_cdr_typesize;
}

size_t MapShortUShort::getCdrSerializedSize(
        const MapShortUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_ushort())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapShortUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_ushort.size());
    for (const auto& pair : m_var_map_short_ushort)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_ushort;
}

/*!
 * @brief This function copies the value in member var_map_short_ushort
 * @param _var_map_short_ushort New value to be copied in member var_map_short_ushort
 */
void MapShortUShort::var_map_short_ushort(
        const std::map<int16_t, uint16_t>& _var_map_short_ushort)
{
    m_var_map_short_ushort = _var_map_short_ushort;
}

/*!
 * @brief This function moves the value in member var_map_short_ushort
 * @param _var_map_short_ushort New value to be moved in member var_map_short_ushort
 */
void MapShortUShort::var_map_short_ushort(
        std::map<int16_t, uint16_t>&& _var_map_short_ushort)
{
    m_var_map_short_ushort = std::move(_var_map_short_ushort);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_ushort
 * @return Constant reference to member var_map_short_ushort
 */
const std::map<int16_t, uint16_t>& MapShortUShort::var_map_short_ushort() const
{
    return m_var_map_short_ushort;
}

/*!
 * @brief This function returns a reference to member var_map_short_ushort
 * @return Reference to member var_map_short_ushort
 */
std::map<int16_t, uint16_t>& MapShortUShort::var_map_short_ushort()
{
    return m_var_map_short_ushort;
}


size_t MapShortUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortUShort_max_key_cdr_typesize;
}

bool MapShortUShort::isKeyDefined()
{
    return false;
}

void MapShortUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortLong::MapShortLong()
{
    // map<short, long> m_var_map_short_long


    // Just to register all known types
    registermapsTypes();
}

MapShortLong::~MapShortLong()
{
}

MapShortLong::MapShortLong(
        const MapShortLong& x)
{
    m_var_map_short_long = x.m_var_map_short_long;
}

MapShortLong::MapShortLong(
        MapShortLong&& x) noexcept 
{
    m_var_map_short_long = std::move(x.m_var_map_short_long);
}

MapShortLong& MapShortLong::operator =(
        const MapShortLong& x)
{

    m_var_map_short_long = x.m_var_map_short_long;

    return *this;
}

MapShortLong& MapShortLong::operator =(
        MapShortLong&& x) noexcept
{

    m_var_map_short_long = std::move(x.m_var_map_short_long);

    return *this;
}

bool MapShortLong::operator ==(
        const MapShortLong& x) const
{

    return (m_var_map_short_long == x.m_var_map_short_long);
}

bool MapShortLong::operator !=(
        const MapShortLong& x) const
{
    return !(*this == x);
}

size_t MapShortLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortLong_max_cdr_typesize;
}

size_t MapShortLong::getCdrSerializedSize(
        const MapShortLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_long())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapShortLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_long.size());
    for (const auto& pair : m_var_map_short_long)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_long;
}

/*!
 * @brief This function copies the value in member var_map_short_long
 * @param _var_map_short_long New value to be copied in member var_map_short_long
 */
void MapShortLong::var_map_short_long(
        const std::map<int16_t, int32_t>& _var_map_short_long)
{
    m_var_map_short_long = _var_map_short_long;
}

/*!
 * @brief This function moves the value in member var_map_short_long
 * @param _var_map_short_long New value to be moved in member var_map_short_long
 */
void MapShortLong::var_map_short_long(
        std::map<int16_t, int32_t>&& _var_map_short_long)
{
    m_var_map_short_long = std::move(_var_map_short_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_long
 * @return Constant reference to member var_map_short_long
 */
const std::map<int16_t, int32_t>& MapShortLong::var_map_short_long() const
{
    return m_var_map_short_long;
}

/*!
 * @brief This function returns a reference to member var_map_short_long
 * @return Reference to member var_map_short_long
 */
std::map<int16_t, int32_t>& MapShortLong::var_map_short_long()
{
    return m_var_map_short_long;
}


size_t MapShortLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortLong_max_key_cdr_typesize;
}

bool MapShortLong::isKeyDefined()
{
    return false;
}

void MapShortLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortULong::MapShortULong()
{
    // map<short, unsigned long> m_var_map_short_ulong


    // Just to register all known types
    registermapsTypes();
}

MapShortULong::~MapShortULong()
{
}

MapShortULong::MapShortULong(
        const MapShortULong& x)
{
    m_var_map_short_ulong = x.m_var_map_short_ulong;
}

MapShortULong::MapShortULong(
        MapShortULong&& x) noexcept 
{
    m_var_map_short_ulong = std::move(x.m_var_map_short_ulong);
}

MapShortULong& MapShortULong::operator =(
        const MapShortULong& x)
{

    m_var_map_short_ulong = x.m_var_map_short_ulong;

    return *this;
}

MapShortULong& MapShortULong::operator =(
        MapShortULong&& x) noexcept
{

    m_var_map_short_ulong = std::move(x.m_var_map_short_ulong);

    return *this;
}

bool MapShortULong::operator ==(
        const MapShortULong& x) const
{

    return (m_var_map_short_ulong == x.m_var_map_short_ulong);
}

bool MapShortULong::operator !=(
        const MapShortULong& x) const
{
    return !(*this == x);
}

size_t MapShortULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortULong_max_cdr_typesize;
}

size_t MapShortULong::getCdrSerializedSize(
        const MapShortULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_ulong())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapShortULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_ulong.size());
    for (const auto& pair : m_var_map_short_ulong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_ulong;
}

/*!
 * @brief This function copies the value in member var_map_short_ulong
 * @param _var_map_short_ulong New value to be copied in member var_map_short_ulong
 */
void MapShortULong::var_map_short_ulong(
        const std::map<int16_t, uint32_t>& _var_map_short_ulong)
{
    m_var_map_short_ulong = _var_map_short_ulong;
}

/*!
 * @brief This function moves the value in member var_map_short_ulong
 * @param _var_map_short_ulong New value to be moved in member var_map_short_ulong
 */
void MapShortULong::var_map_short_ulong(
        std::map<int16_t, uint32_t>&& _var_map_short_ulong)
{
    m_var_map_short_ulong = std::move(_var_map_short_ulong);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_ulong
 * @return Constant reference to member var_map_short_ulong
 */
const std::map<int16_t, uint32_t>& MapShortULong::var_map_short_ulong() const
{
    return m_var_map_short_ulong;
}

/*!
 * @brief This function returns a reference to member var_map_short_ulong
 * @return Reference to member var_map_short_ulong
 */
std::map<int16_t, uint32_t>& MapShortULong::var_map_short_ulong()
{
    return m_var_map_short_ulong;
}


size_t MapShortULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortULong_max_key_cdr_typesize;
}

bool MapShortULong::isKeyDefined()
{
    return false;
}

void MapShortULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortLongLong::MapShortLongLong()
{
    // map<short, long long> m_var_map_short_longlong


    // Just to register all known types
    registermapsTypes();
}

MapShortLongLong::~MapShortLongLong()
{
}

MapShortLongLong::MapShortLongLong(
        const MapShortLongLong& x)
{
    m_var_map_short_longlong = x.m_var_map_short_longlong;
}

MapShortLongLong::MapShortLongLong(
        MapShortLongLong&& x) noexcept 
{
    m_var_map_short_longlong = std::move(x.m_var_map_short_longlong);
}

MapShortLongLong& MapShortLongLong::operator =(
        const MapShortLongLong& x)
{

    m_var_map_short_longlong = x.m_var_map_short_longlong;

    return *this;
}

MapShortLongLong& MapShortLongLong::operator =(
        MapShortLongLong&& x) noexcept
{

    m_var_map_short_longlong = std::move(x.m_var_map_short_longlong);

    return *this;
}

bool MapShortLongLong::operator ==(
        const MapShortLongLong& x) const
{

    return (m_var_map_short_longlong == x.m_var_map_short_longlong);
}

bool MapShortLongLong::operator !=(
        const MapShortLongLong& x) const
{
    return !(*this == x);
}

size_t MapShortLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortLongLong_max_cdr_typesize;
}

size_t MapShortLongLong::getCdrSerializedSize(
        const MapShortLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_longlong())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapShortLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_longlong.size());
    for (const auto& pair : m_var_map_short_longlong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_longlong;
}

/*!
 * @brief This function copies the value in member var_map_short_longlong
 * @param _var_map_short_longlong New value to be copied in member var_map_short_longlong
 */
void MapShortLongLong::var_map_short_longlong(
        const std::map<int16_t, int64_t>& _var_map_short_longlong)
{
    m_var_map_short_longlong = _var_map_short_longlong;
}

/*!
 * @brief This function moves the value in member var_map_short_longlong
 * @param _var_map_short_longlong New value to be moved in member var_map_short_longlong
 */
void MapShortLongLong::var_map_short_longlong(
        std::map<int16_t, int64_t>&& _var_map_short_longlong)
{
    m_var_map_short_longlong = std::move(_var_map_short_longlong);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_longlong
 * @return Constant reference to member var_map_short_longlong
 */
const std::map<int16_t, int64_t>& MapShortLongLong::var_map_short_longlong() const
{
    return m_var_map_short_longlong;
}

/*!
 * @brief This function returns a reference to member var_map_short_longlong
 * @return Reference to member var_map_short_longlong
 */
std::map<int16_t, int64_t>& MapShortLongLong::var_map_short_longlong()
{
    return m_var_map_short_longlong;
}


size_t MapShortLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortLongLong_max_key_cdr_typesize;
}

bool MapShortLongLong::isKeyDefined()
{
    return false;
}

void MapShortLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortULongLong::MapShortULongLong()
{
    // map<short, unsigned long long> m_var_map_short_ulonglong


    // Just to register all known types
    registermapsTypes();
}

MapShortULongLong::~MapShortULongLong()
{
}

MapShortULongLong::MapShortULongLong(
        const MapShortULongLong& x)
{
    m_var_map_short_ulonglong = x.m_var_map_short_ulonglong;
}

MapShortULongLong::MapShortULongLong(
        MapShortULongLong&& x) noexcept 
{
    m_var_map_short_ulonglong = std::move(x.m_var_map_short_ulonglong);
}

MapShortULongLong& MapShortULongLong::operator =(
        const MapShortULongLong& x)
{

    m_var_map_short_ulonglong = x.m_var_map_short_ulonglong;

    return *this;
}

MapShortULongLong& MapShortULongLong::operator =(
        MapShortULongLong&& x) noexcept
{

    m_var_map_short_ulonglong = std::move(x.m_var_map_short_ulonglong);

    return *this;
}

bool MapShortULongLong::operator ==(
        const MapShortULongLong& x) const
{

    return (m_var_map_short_ulonglong == x.m_var_map_short_ulonglong);
}

bool MapShortULongLong::operator !=(
        const MapShortULongLong& x) const
{
    return !(*this == x);
}

size_t MapShortULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortULongLong_max_cdr_typesize;
}

size_t MapShortULongLong::getCdrSerializedSize(
        const MapShortULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_ulonglong())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapShortULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_ulonglong.size());
    for (const auto& pair : m_var_map_short_ulonglong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_ulonglong;
}

/*!
 * @brief This function copies the value in member var_map_short_ulonglong
 * @param _var_map_short_ulonglong New value to be copied in member var_map_short_ulonglong
 */
void MapShortULongLong::var_map_short_ulonglong(
        const std::map<int16_t, uint64_t>& _var_map_short_ulonglong)
{
    m_var_map_short_ulonglong = _var_map_short_ulonglong;
}

/*!
 * @brief This function moves the value in member var_map_short_ulonglong
 * @param _var_map_short_ulonglong New value to be moved in member var_map_short_ulonglong
 */
void MapShortULongLong::var_map_short_ulonglong(
        std::map<int16_t, uint64_t>&& _var_map_short_ulonglong)
{
    m_var_map_short_ulonglong = std::move(_var_map_short_ulonglong);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_ulonglong
 * @return Constant reference to member var_map_short_ulonglong
 */
const std::map<int16_t, uint64_t>& MapShortULongLong::var_map_short_ulonglong() const
{
    return m_var_map_short_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_map_short_ulonglong
 * @return Reference to member var_map_short_ulonglong
 */
std::map<int16_t, uint64_t>& MapShortULongLong::var_map_short_ulonglong()
{
    return m_var_map_short_ulonglong;
}


size_t MapShortULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortULongLong_max_key_cdr_typesize;
}

bool MapShortULongLong::isKeyDefined()
{
    return false;
}

void MapShortULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortFloat::MapShortFloat()
{
    // map<short, float> m_var_map_short_float


    // Just to register all known types
    registermapsTypes();
}

MapShortFloat::~MapShortFloat()
{
}

MapShortFloat::MapShortFloat(
        const MapShortFloat& x)
{
    m_var_map_short_float = x.m_var_map_short_float;
}

MapShortFloat::MapShortFloat(
        MapShortFloat&& x) noexcept 
{
    m_var_map_short_float = std::move(x.m_var_map_short_float);
}

MapShortFloat& MapShortFloat::operator =(
        const MapShortFloat& x)
{

    m_var_map_short_float = x.m_var_map_short_float;

    return *this;
}

MapShortFloat& MapShortFloat::operator =(
        MapShortFloat&& x) noexcept
{

    m_var_map_short_float = std::move(x.m_var_map_short_float);

    return *this;
}

bool MapShortFloat::operator ==(
        const MapShortFloat& x) const
{

    return (m_var_map_short_float == x.m_var_map_short_float);
}

bool MapShortFloat::operator !=(
        const MapShortFloat& x) const
{
    return !(*this == x);
}

size_t MapShortFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortFloat_max_cdr_typesize;
}

size_t MapShortFloat::getCdrSerializedSize(
        const MapShortFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_float())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapShortFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_float.size());
    for (const auto& pair : m_var_map_short_float)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_float;
}

/*!
 * @brief This function copies the value in member var_map_short_float
 * @param _var_map_short_float New value to be copied in member var_map_short_float
 */
void MapShortFloat::var_map_short_float(
        const std::map<int16_t, float>& _var_map_short_float)
{
    m_var_map_short_float = _var_map_short_float;
}

/*!
 * @brief This function moves the value in member var_map_short_float
 * @param _var_map_short_float New value to be moved in member var_map_short_float
 */
void MapShortFloat::var_map_short_float(
        std::map<int16_t, float>&& _var_map_short_float)
{
    m_var_map_short_float = std::move(_var_map_short_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_float
 * @return Constant reference to member var_map_short_float
 */
const std::map<int16_t, float>& MapShortFloat::var_map_short_float() const
{
    return m_var_map_short_float;
}

/*!
 * @brief This function returns a reference to member var_map_short_float
 * @return Reference to member var_map_short_float
 */
std::map<int16_t, float>& MapShortFloat::var_map_short_float()
{
    return m_var_map_short_float;
}


size_t MapShortFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortFloat_max_key_cdr_typesize;
}

bool MapShortFloat::isKeyDefined()
{
    return false;
}

void MapShortFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortDouble::MapShortDouble()
{
    // map<short, double> m_var_map_short_double


    // Just to register all known types
    registermapsTypes();
}

MapShortDouble::~MapShortDouble()
{
}

MapShortDouble::MapShortDouble(
        const MapShortDouble& x)
{
    m_var_map_short_double = x.m_var_map_short_double;
}

MapShortDouble::MapShortDouble(
        MapShortDouble&& x) noexcept 
{
    m_var_map_short_double = std::move(x.m_var_map_short_double);
}

MapShortDouble& MapShortDouble::operator =(
        const MapShortDouble& x)
{

    m_var_map_short_double = x.m_var_map_short_double;

    return *this;
}

MapShortDouble& MapShortDouble::operator =(
        MapShortDouble&& x) noexcept
{

    m_var_map_short_double = std::move(x.m_var_map_short_double);

    return *this;
}

bool MapShortDouble::operator ==(
        const MapShortDouble& x) const
{

    return (m_var_map_short_double == x.m_var_map_short_double);
}

bool MapShortDouble::operator !=(
        const MapShortDouble& x) const
{
    return !(*this == x);
}

size_t MapShortDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortDouble_max_cdr_typesize;
}

size_t MapShortDouble::getCdrSerializedSize(
        const MapShortDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_double())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapShortDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_double.size());
    for (const auto& pair : m_var_map_short_double)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_double;
}

/*!
 * @brief This function copies the value in member var_map_short_double
 * @param _var_map_short_double New value to be copied in member var_map_short_double
 */
void MapShortDouble::var_map_short_double(
        const std::map<int16_t, double>& _var_map_short_double)
{
    m_var_map_short_double = _var_map_short_double;
}

/*!
 * @brief This function moves the value in member var_map_short_double
 * @param _var_map_short_double New value to be moved in member var_map_short_double
 */
void MapShortDouble::var_map_short_double(
        std::map<int16_t, double>&& _var_map_short_double)
{
    m_var_map_short_double = std::move(_var_map_short_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_double
 * @return Constant reference to member var_map_short_double
 */
const std::map<int16_t, double>& MapShortDouble::var_map_short_double() const
{
    return m_var_map_short_double;
}

/*!
 * @brief This function returns a reference to member var_map_short_double
 * @return Reference to member var_map_short_double
 */
std::map<int16_t, double>& MapShortDouble::var_map_short_double()
{
    return m_var_map_short_double;
}


size_t MapShortDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortDouble_max_key_cdr_typesize;
}

bool MapShortDouble::isKeyDefined()
{
    return false;
}

void MapShortDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortLongDouble::MapShortLongDouble()
{
    // map<short, long double> m_var_map_short_longdouble


    // Just to register all known types
    registermapsTypes();
}

MapShortLongDouble::~MapShortLongDouble()
{
}

MapShortLongDouble::MapShortLongDouble(
        const MapShortLongDouble& x)
{
    m_var_map_short_longdouble = x.m_var_map_short_longdouble;
}

MapShortLongDouble::MapShortLongDouble(
        MapShortLongDouble&& x) noexcept 
{
    m_var_map_short_longdouble = std::move(x.m_var_map_short_longdouble);
}

MapShortLongDouble& MapShortLongDouble::operator =(
        const MapShortLongDouble& x)
{

    m_var_map_short_longdouble = x.m_var_map_short_longdouble;

    return *this;
}

MapShortLongDouble& MapShortLongDouble::operator =(
        MapShortLongDouble&& x) noexcept
{

    m_var_map_short_longdouble = std::move(x.m_var_map_short_longdouble);

    return *this;
}

bool MapShortLongDouble::operator ==(
        const MapShortLongDouble& x) const
{

    return (m_var_map_short_longdouble == x.m_var_map_short_longdouble);
}

bool MapShortLongDouble::operator !=(
        const MapShortLongDouble& x) const
{
    return !(*this == x);
}

size_t MapShortLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortLongDouble_max_cdr_typesize;
}

size_t MapShortLongDouble::getCdrSerializedSize(
        const MapShortLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_longdouble())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapShortLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_longdouble.size());
    for (const auto& pair : m_var_map_short_longdouble)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_longdouble;
}

/*!
 * @brief This function copies the value in member var_map_short_longdouble
 * @param _var_map_short_longdouble New value to be copied in member var_map_short_longdouble
 */
void MapShortLongDouble::var_map_short_longdouble(
        const std::map<int16_t, long double>& _var_map_short_longdouble)
{
    m_var_map_short_longdouble = _var_map_short_longdouble;
}

/*!
 * @brief This function moves the value in member var_map_short_longdouble
 * @param _var_map_short_longdouble New value to be moved in member var_map_short_longdouble
 */
void MapShortLongDouble::var_map_short_longdouble(
        std::map<int16_t, long double>&& _var_map_short_longdouble)
{
    m_var_map_short_longdouble = std::move(_var_map_short_longdouble);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_longdouble
 * @return Constant reference to member var_map_short_longdouble
 */
const std::map<int16_t, long double>& MapShortLongDouble::var_map_short_longdouble() const
{
    return m_var_map_short_longdouble;
}

/*!
 * @brief This function returns a reference to member var_map_short_longdouble
 * @return Reference to member var_map_short_longdouble
 */
std::map<int16_t, long double>& MapShortLongDouble::var_map_short_longdouble()
{
    return m_var_map_short_longdouble;
}


size_t MapShortLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortLongDouble_max_key_cdr_typesize;
}

bool MapShortLongDouble::isKeyDefined()
{
    return false;
}

void MapShortLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortBoolean::MapShortBoolean()
{
    // map<short, boolean> m_var_map_short_boolean


    // Just to register all known types
    registermapsTypes();
}

MapShortBoolean::~MapShortBoolean()
{
}

MapShortBoolean::MapShortBoolean(
        const MapShortBoolean& x)
{
    m_var_map_short_boolean = x.m_var_map_short_boolean;
}

MapShortBoolean::MapShortBoolean(
        MapShortBoolean&& x) noexcept 
{
    m_var_map_short_boolean = std::move(x.m_var_map_short_boolean);
}

MapShortBoolean& MapShortBoolean::operator =(
        const MapShortBoolean& x)
{

    m_var_map_short_boolean = x.m_var_map_short_boolean;

    return *this;
}

MapShortBoolean& MapShortBoolean::operator =(
        MapShortBoolean&& x) noexcept
{

    m_var_map_short_boolean = std::move(x.m_var_map_short_boolean);

    return *this;
}

bool MapShortBoolean::operator ==(
        const MapShortBoolean& x) const
{

    return (m_var_map_short_boolean == x.m_var_map_short_boolean);
}

bool MapShortBoolean::operator !=(
        const MapShortBoolean& x) const
{
    return !(*this == x);
}

size_t MapShortBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortBoolean_max_cdr_typesize;
}

size_t MapShortBoolean::getCdrSerializedSize(
        const MapShortBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_boolean())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapShortBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_boolean.size());
    for (const auto& pair : m_var_map_short_boolean)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_boolean;
}

/*!
 * @brief This function copies the value in member var_map_short_boolean
 * @param _var_map_short_boolean New value to be copied in member var_map_short_boolean
 */
void MapShortBoolean::var_map_short_boolean(
        const std::map<int16_t, bool>& _var_map_short_boolean)
{
    m_var_map_short_boolean = _var_map_short_boolean;
}

/*!
 * @brief This function moves the value in member var_map_short_boolean
 * @param _var_map_short_boolean New value to be moved in member var_map_short_boolean
 */
void MapShortBoolean::var_map_short_boolean(
        std::map<int16_t, bool>&& _var_map_short_boolean)
{
    m_var_map_short_boolean = std::move(_var_map_short_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_boolean
 * @return Constant reference to member var_map_short_boolean
 */
const std::map<int16_t, bool>& MapShortBoolean::var_map_short_boolean() const
{
    return m_var_map_short_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_short_boolean
 * @return Reference to member var_map_short_boolean
 */
std::map<int16_t, bool>& MapShortBoolean::var_map_short_boolean()
{
    return m_var_map_short_boolean;
}


size_t MapShortBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortBoolean_max_key_cdr_typesize;
}

bool MapShortBoolean::isKeyDefined()
{
    return false;
}

void MapShortBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortOctet::MapShortOctet()
{
    // map<short, octet> m_var_map_short_octet


    // Just to register all known types
    registermapsTypes();
}

MapShortOctet::~MapShortOctet()
{
}

MapShortOctet::MapShortOctet(
        const MapShortOctet& x)
{
    m_var_map_short_octet = x.m_var_map_short_octet;
}

MapShortOctet::MapShortOctet(
        MapShortOctet&& x) noexcept 
{
    m_var_map_short_octet = std::move(x.m_var_map_short_octet);
}

MapShortOctet& MapShortOctet::operator =(
        const MapShortOctet& x)
{

    m_var_map_short_octet = x.m_var_map_short_octet;

    return *this;
}

MapShortOctet& MapShortOctet::operator =(
        MapShortOctet&& x) noexcept
{

    m_var_map_short_octet = std::move(x.m_var_map_short_octet);

    return *this;
}

bool MapShortOctet::operator ==(
        const MapShortOctet& x) const
{

    return (m_var_map_short_octet == x.m_var_map_short_octet);
}

bool MapShortOctet::operator !=(
        const MapShortOctet& x) const
{
    return !(*this == x);
}

size_t MapShortOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortOctet_max_cdr_typesize;
}

size_t MapShortOctet::getCdrSerializedSize(
        const MapShortOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_octet())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapShortOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_octet.size());
    for (const auto& pair : m_var_map_short_octet)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_octet;
}

/*!
 * @brief This function copies the value in member var_map_short_octet
 * @param _var_map_short_octet New value to be copied in member var_map_short_octet
 */
void MapShortOctet::var_map_short_octet(
        const std::map<int16_t, uint8_t>& _var_map_short_octet)
{
    m_var_map_short_octet = _var_map_short_octet;
}

/*!
 * @brief This function moves the value in member var_map_short_octet
 * @param _var_map_short_octet New value to be moved in member var_map_short_octet
 */
void MapShortOctet::var_map_short_octet(
        std::map<int16_t, uint8_t>&& _var_map_short_octet)
{
    m_var_map_short_octet = std::move(_var_map_short_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_octet
 * @return Constant reference to member var_map_short_octet
 */
const std::map<int16_t, uint8_t>& MapShortOctet::var_map_short_octet() const
{
    return m_var_map_short_octet;
}

/*!
 * @brief This function returns a reference to member var_map_short_octet
 * @return Reference to member var_map_short_octet
 */
std::map<int16_t, uint8_t>& MapShortOctet::var_map_short_octet()
{
    return m_var_map_short_octet;
}


size_t MapShortOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortOctet_max_key_cdr_typesize;
}

bool MapShortOctet::isKeyDefined()
{
    return false;
}

void MapShortOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortChar::MapShortChar()
{
    // map<short, char> m_var_map_short_char


    // Just to register all known types
    registermapsTypes();
}

MapShortChar::~MapShortChar()
{
}

MapShortChar::MapShortChar(
        const MapShortChar& x)
{
    m_var_map_short_char = x.m_var_map_short_char;
}

MapShortChar::MapShortChar(
        MapShortChar&& x) noexcept 
{
    m_var_map_short_char = std::move(x.m_var_map_short_char);
}

MapShortChar& MapShortChar::operator =(
        const MapShortChar& x)
{

    m_var_map_short_char = x.m_var_map_short_char;

    return *this;
}

MapShortChar& MapShortChar::operator =(
        MapShortChar&& x) noexcept
{

    m_var_map_short_char = std::move(x.m_var_map_short_char);

    return *this;
}

bool MapShortChar::operator ==(
        const MapShortChar& x) const
{

    return (m_var_map_short_char == x.m_var_map_short_char);
}

bool MapShortChar::operator !=(
        const MapShortChar& x) const
{
    return !(*this == x);
}

size_t MapShortChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortChar_max_cdr_typesize;
}

size_t MapShortChar::getCdrSerializedSize(
        const MapShortChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_char())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapShortChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_char.size());
    for (const auto& pair : m_var_map_short_char)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_char;
}

/*!
 * @brief This function copies the value in member var_map_short_char
 * @param _var_map_short_char New value to be copied in member var_map_short_char
 */
void MapShortChar::var_map_short_char(
        const std::map<int16_t, char>& _var_map_short_char)
{
    m_var_map_short_char = _var_map_short_char;
}

/*!
 * @brief This function moves the value in member var_map_short_char
 * @param _var_map_short_char New value to be moved in member var_map_short_char
 */
void MapShortChar::var_map_short_char(
        std::map<int16_t, char>&& _var_map_short_char)
{
    m_var_map_short_char = std::move(_var_map_short_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_char
 * @return Constant reference to member var_map_short_char
 */
const std::map<int16_t, char>& MapShortChar::var_map_short_char() const
{
    return m_var_map_short_char;
}

/*!
 * @brief This function returns a reference to member var_map_short_char
 * @return Reference to member var_map_short_char
 */
std::map<int16_t, char>& MapShortChar::var_map_short_char()
{
    return m_var_map_short_char;
}


size_t MapShortChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortChar_max_key_cdr_typesize;
}

bool MapShortChar::isKeyDefined()
{
    return false;
}

void MapShortChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortWChar::MapShortWChar()
{
    // map<short, wchar> m_var_map_short_wchar


    // Just to register all known types
    registermapsTypes();
}

MapShortWChar::~MapShortWChar()
{
}

MapShortWChar::MapShortWChar(
        const MapShortWChar& x)
{
    m_var_map_short_wchar = x.m_var_map_short_wchar;
}

MapShortWChar::MapShortWChar(
        MapShortWChar&& x) noexcept 
{
    m_var_map_short_wchar = std::move(x.m_var_map_short_wchar);
}

MapShortWChar& MapShortWChar::operator =(
        const MapShortWChar& x)
{

    m_var_map_short_wchar = x.m_var_map_short_wchar;

    return *this;
}

MapShortWChar& MapShortWChar::operator =(
        MapShortWChar&& x) noexcept
{

    m_var_map_short_wchar = std::move(x.m_var_map_short_wchar);

    return *this;
}

bool MapShortWChar::operator ==(
        const MapShortWChar& x) const
{

    return (m_var_map_short_wchar == x.m_var_map_short_wchar);
}

bool MapShortWChar::operator !=(
        const MapShortWChar& x) const
{
    return !(*this == x);
}

size_t MapShortWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortWChar_max_cdr_typesize;
}

size_t MapShortWChar::getCdrSerializedSize(
        const MapShortWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_wchar())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapShortWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_wchar.size());
    for (const auto& pair : m_var_map_short_wchar)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_wchar;
}

/*!
 * @brief This function copies the value in member var_map_short_wchar
 * @param _var_map_short_wchar New value to be copied in member var_map_short_wchar
 */
void MapShortWChar::var_map_short_wchar(
        const std::map<int16_t, wchar_t>& _var_map_short_wchar)
{
    m_var_map_short_wchar = _var_map_short_wchar;
}

/*!
 * @brief This function moves the value in member var_map_short_wchar
 * @param _var_map_short_wchar New value to be moved in member var_map_short_wchar
 */
void MapShortWChar::var_map_short_wchar(
        std::map<int16_t, wchar_t>&& _var_map_short_wchar)
{
    m_var_map_short_wchar = std::move(_var_map_short_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_wchar
 * @return Constant reference to member var_map_short_wchar
 */
const std::map<int16_t, wchar_t>& MapShortWChar::var_map_short_wchar() const
{
    return m_var_map_short_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_short_wchar
 * @return Reference to member var_map_short_wchar
 */
std::map<int16_t, wchar_t>& MapShortWChar::var_map_short_wchar()
{
    return m_var_map_short_wchar;
}


size_t MapShortWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortWChar_max_key_cdr_typesize;
}

bool MapShortWChar::isKeyDefined()
{
    return false;
}

void MapShortWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortString::MapShortString()
{
    // map<short, string> m_var_map_short_string


    // Just to register all known types
    registermapsTypes();
}

MapShortString::~MapShortString()
{
}

MapShortString::MapShortString(
        const MapShortString& x)
{
    m_var_map_short_string = x.m_var_map_short_string;
}

MapShortString::MapShortString(
        MapShortString&& x) noexcept 
{
    m_var_map_short_string = std::move(x.m_var_map_short_string);
}

MapShortString& MapShortString::operator =(
        const MapShortString& x)
{

    m_var_map_short_string = x.m_var_map_short_string;

    return *this;
}

MapShortString& MapShortString::operator =(
        MapShortString&& x) noexcept
{

    m_var_map_short_string = std::move(x.m_var_map_short_string);

    return *this;
}

bool MapShortString::operator ==(
        const MapShortString& x) const
{

    return (m_var_map_short_string == x.m_var_map_short_string);
}

bool MapShortString::operator !=(
        const MapShortString& x) const
{
    return !(*this == x);
}

size_t MapShortString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortString_max_cdr_typesize;
}

size_t MapShortString::getCdrSerializedSize(
        const MapShortString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_string())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapShortString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_string.size());
    for (const auto& pair : m_var_map_short_string)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapShortString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_short_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int16_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_short_string[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_short_string
 * @param _var_map_short_string New value to be copied in member var_map_short_string
 */
void MapShortString::var_map_short_string(
        const std::map<int16_t, std::string>& _var_map_short_string)
{
    m_var_map_short_string = _var_map_short_string;
}

/*!
 * @brief This function moves the value in member var_map_short_string
 * @param _var_map_short_string New value to be moved in member var_map_short_string
 */
void MapShortString::var_map_short_string(
        std::map<int16_t, std::string>&& _var_map_short_string)
{
    m_var_map_short_string = std::move(_var_map_short_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_string
 * @return Constant reference to member var_map_short_string
 */
const std::map<int16_t, std::string>& MapShortString::var_map_short_string() const
{
    return m_var_map_short_string;
}

/*!
 * @brief This function returns a reference to member var_map_short_string
 * @return Reference to member var_map_short_string
 */
std::map<int16_t, std::string>& MapShortString::var_map_short_string()
{
    return m_var_map_short_string;
}


size_t MapShortString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortString_max_key_cdr_typesize;
}

bool MapShortString::isKeyDefined()
{
    return false;
}

void MapShortString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortWString::MapShortWString()
{
    // map<short, wstring> m_var_map_short_wstring


    // Just to register all known types
    registermapsTypes();
}

MapShortWString::~MapShortWString()
{
}

MapShortWString::MapShortWString(
        const MapShortWString& x)
{
    m_var_map_short_wstring = x.m_var_map_short_wstring;
}

MapShortWString::MapShortWString(
        MapShortWString&& x) noexcept 
{
    m_var_map_short_wstring = std::move(x.m_var_map_short_wstring);
}

MapShortWString& MapShortWString::operator =(
        const MapShortWString& x)
{

    m_var_map_short_wstring = x.m_var_map_short_wstring;

    return *this;
}

MapShortWString& MapShortWString::operator =(
        MapShortWString&& x) noexcept
{

    m_var_map_short_wstring = std::move(x.m_var_map_short_wstring);

    return *this;
}

bool MapShortWString::operator ==(
        const MapShortWString& x) const
{

    return (m_var_map_short_wstring == x.m_var_map_short_wstring);
}

bool MapShortWString::operator !=(
        const MapShortWString& x) const
{
    return !(*this == x);
}

size_t MapShortWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortWString_max_cdr_typesize;
}

size_t MapShortWString::getCdrSerializedSize(
        const MapShortWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_wstring())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapShortWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_wstring.size());
    for (const auto& pair : m_var_map_short_wstring)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapShortWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_short_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int16_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_short_wstring[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_short_wstring
 * @param _var_map_short_wstring New value to be copied in member var_map_short_wstring
 */
void MapShortWString::var_map_short_wstring(
        const std::map<int16_t, std::wstring>& _var_map_short_wstring)
{
    m_var_map_short_wstring = _var_map_short_wstring;
}

/*!
 * @brief This function moves the value in member var_map_short_wstring
 * @param _var_map_short_wstring New value to be moved in member var_map_short_wstring
 */
void MapShortWString::var_map_short_wstring(
        std::map<int16_t, std::wstring>&& _var_map_short_wstring)
{
    m_var_map_short_wstring = std::move(_var_map_short_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_wstring
 * @return Constant reference to member var_map_short_wstring
 */
const std::map<int16_t, std::wstring>& MapShortWString::var_map_short_wstring() const
{
    return m_var_map_short_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_short_wstring
 * @return Reference to member var_map_short_wstring
 */
std::map<int16_t, std::wstring>& MapShortWString::var_map_short_wstring()
{
    return m_var_map_short_wstring;
}


size_t MapShortWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortWString_max_key_cdr_typesize;
}

bool MapShortWString::isKeyDefined()
{
    return false;
}

void MapShortWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerAliasBoundedStringHelper::MapShortInnerAliasBoundedStringHelper()
{
    // map<short, Inner_alias_bounded_string_helper> m_var_map_short_inneraliasboundedstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerAliasBoundedStringHelper::~MapShortInnerAliasBoundedStringHelper()
{
}

MapShortInnerAliasBoundedStringHelper::MapShortInnerAliasBoundedStringHelper(
        const MapShortInnerAliasBoundedStringHelper& x)
{
    m_var_map_short_inneraliasboundedstringhelper = x.m_var_map_short_inneraliasboundedstringhelper;
}

MapShortInnerAliasBoundedStringHelper::MapShortInnerAliasBoundedStringHelper(
        MapShortInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_short_inneraliasboundedstringhelper = std::move(x.m_var_map_short_inneraliasboundedstringhelper);
}

MapShortInnerAliasBoundedStringHelper& MapShortInnerAliasBoundedStringHelper::operator =(
        const MapShortInnerAliasBoundedStringHelper& x)
{

    m_var_map_short_inneraliasboundedstringhelper = x.m_var_map_short_inneraliasboundedstringhelper;

    return *this;
}

MapShortInnerAliasBoundedStringHelper& MapShortInnerAliasBoundedStringHelper::operator =(
        MapShortInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_short_inneraliasboundedstringhelper = std::move(x.m_var_map_short_inneraliasboundedstringhelper);

    return *this;
}

bool MapShortInnerAliasBoundedStringHelper::operator ==(
        const MapShortInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_short_inneraliasboundedstringhelper == x.m_var_map_short_inneraliasboundedstringhelper);
}

bool MapShortInnerAliasBoundedStringHelper::operator !=(
        const MapShortInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapShortInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapShortInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_inneraliasboundedstringhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_inneraliasboundedstringhelper.size());
    for (const auto& pair : m_var_map_short_inneraliasboundedstringhelper)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapShortInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_short_inneraliasboundedstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int16_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_short_inneraliasboundedstringhelper[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_short_inneraliasboundedstringhelper
 * @param _var_map_short_inneraliasboundedstringhelper New value to be copied in member var_map_short_inneraliasboundedstringhelper
 */
void MapShortInnerAliasBoundedStringHelper::var_map_short_inneraliasboundedstringhelper(
        const std::map<int16_t, Inner_alias_bounded_string_helper>& _var_map_short_inneraliasboundedstringhelper)
{
    m_var_map_short_inneraliasboundedstringhelper = _var_map_short_inneraliasboundedstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_short_inneraliasboundedstringhelper
 * @param _var_map_short_inneraliasboundedstringhelper New value to be moved in member var_map_short_inneraliasboundedstringhelper
 */
void MapShortInnerAliasBoundedStringHelper::var_map_short_inneraliasboundedstringhelper(
        std::map<int16_t, Inner_alias_bounded_string_helper>&& _var_map_short_inneraliasboundedstringhelper)
{
    m_var_map_short_inneraliasboundedstringhelper = std::move(_var_map_short_inneraliasboundedstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_inneraliasboundedstringhelper
 * @return Constant reference to member var_map_short_inneraliasboundedstringhelper
 */
const std::map<int16_t, Inner_alias_bounded_string_helper>& MapShortInnerAliasBoundedStringHelper::var_map_short_inneraliasboundedstringhelper() const
{
    return m_var_map_short_inneraliasboundedstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_inneraliasboundedstringhelper
 * @return Reference to member var_map_short_inneraliasboundedstringhelper
 */
std::map<int16_t, Inner_alias_bounded_string_helper>& MapShortInnerAliasBoundedStringHelper::var_map_short_inneraliasboundedstringhelper()
{
    return m_var_map_short_inneraliasboundedstringhelper;
}


size_t MapShortInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapShortInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerAliasBoundedWStringHelper::MapShortInnerAliasBoundedWStringHelper()
{
    // map<short, Inner_alias_bounded_wstring_helper> m_var_map_short_inneraliasboundedwstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerAliasBoundedWStringHelper::~MapShortInnerAliasBoundedWStringHelper()
{
}

MapShortInnerAliasBoundedWStringHelper::MapShortInnerAliasBoundedWStringHelper(
        const MapShortInnerAliasBoundedWStringHelper& x)
{
    m_var_map_short_inneraliasboundedwstringhelper = x.m_var_map_short_inneraliasboundedwstringhelper;
}

MapShortInnerAliasBoundedWStringHelper::MapShortInnerAliasBoundedWStringHelper(
        MapShortInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_short_inneraliasboundedwstringhelper = std::move(x.m_var_map_short_inneraliasboundedwstringhelper);
}

MapShortInnerAliasBoundedWStringHelper& MapShortInnerAliasBoundedWStringHelper::operator =(
        const MapShortInnerAliasBoundedWStringHelper& x)
{

    m_var_map_short_inneraliasboundedwstringhelper = x.m_var_map_short_inneraliasboundedwstringhelper;

    return *this;
}

MapShortInnerAliasBoundedWStringHelper& MapShortInnerAliasBoundedWStringHelper::operator =(
        MapShortInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_short_inneraliasboundedwstringhelper = std::move(x.m_var_map_short_inneraliasboundedwstringhelper);

    return *this;
}

bool MapShortInnerAliasBoundedWStringHelper::operator ==(
        const MapShortInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_short_inneraliasboundedwstringhelper == x.m_var_map_short_inneraliasboundedwstringhelper);
}

bool MapShortInnerAliasBoundedWStringHelper::operator !=(
        const MapShortInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapShortInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapShortInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_inneraliasboundedwstringhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_inneraliasboundedwstringhelper.size());
    for (const auto& pair : m_var_map_short_inneraliasboundedwstringhelper)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapShortInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_short_inneraliasboundedwstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int16_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_short_inneraliasboundedwstringhelper[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_short_inneraliasboundedwstringhelper
 * @param _var_map_short_inneraliasboundedwstringhelper New value to be copied in member var_map_short_inneraliasboundedwstringhelper
 */
void MapShortInnerAliasBoundedWStringHelper::var_map_short_inneraliasboundedwstringhelper(
        const std::map<int16_t, Inner_alias_bounded_wstring_helper>& _var_map_short_inneraliasboundedwstringhelper)
{
    m_var_map_short_inneraliasboundedwstringhelper = _var_map_short_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_short_inneraliasboundedwstringhelper
 * @param _var_map_short_inneraliasboundedwstringhelper New value to be moved in member var_map_short_inneraliasboundedwstringhelper
 */
void MapShortInnerAliasBoundedWStringHelper::var_map_short_inneraliasboundedwstringhelper(
        std::map<int16_t, Inner_alias_bounded_wstring_helper>&& _var_map_short_inneraliasboundedwstringhelper)
{
    m_var_map_short_inneraliasboundedwstringhelper = std::move(_var_map_short_inneraliasboundedwstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_inneraliasboundedwstringhelper
 * @return Constant reference to member var_map_short_inneraliasboundedwstringhelper
 */
const std::map<int16_t, Inner_alias_bounded_wstring_helper>& MapShortInnerAliasBoundedWStringHelper::var_map_short_inneraliasboundedwstringhelper() const
{
    return m_var_map_short_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_inneraliasboundedwstringhelper
 * @return Reference to member var_map_short_inneraliasboundedwstringhelper
 */
std::map<int16_t, Inner_alias_bounded_wstring_helper>& MapShortInnerAliasBoundedWStringHelper::var_map_short_inneraliasboundedwstringhelper()
{
    return m_var_map_short_inneraliasboundedwstringhelper;
}


size_t MapShortInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapShortInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerEnumHelper::MapShortInnerEnumHelper()
{
    // map<short, InnerEnumHelper> m_var_map_short_innerenumhelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerEnumHelper::~MapShortInnerEnumHelper()
{
}

MapShortInnerEnumHelper::MapShortInnerEnumHelper(
        const MapShortInnerEnumHelper& x)
{
    m_var_map_short_innerenumhelper = x.m_var_map_short_innerenumhelper;
}

MapShortInnerEnumHelper::MapShortInnerEnumHelper(
        MapShortInnerEnumHelper&& x) noexcept 
{
    m_var_map_short_innerenumhelper = std::move(x.m_var_map_short_innerenumhelper);
}

MapShortInnerEnumHelper& MapShortInnerEnumHelper::operator =(
        const MapShortInnerEnumHelper& x)
{

    m_var_map_short_innerenumhelper = x.m_var_map_short_innerenumhelper;

    return *this;
}

MapShortInnerEnumHelper& MapShortInnerEnumHelper::operator =(
        MapShortInnerEnumHelper&& x) noexcept
{

    m_var_map_short_innerenumhelper = std::move(x.m_var_map_short_innerenumhelper);

    return *this;
}

bool MapShortInnerEnumHelper::operator ==(
        const MapShortInnerEnumHelper& x) const
{

    return (m_var_map_short_innerenumhelper == x.m_var_map_short_innerenumhelper);
}

bool MapShortInnerEnumHelper::operator !=(
        const MapShortInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerEnumHelper_max_cdr_typesize;
}

size_t MapShortInnerEnumHelper::getCdrSerializedSize(
        const MapShortInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_innerenumhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_innerenumhelper.size());
    for (const auto& pair : m_var_map_short_innerenumhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapShortInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_short_innerenumhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        int16_t key;
        dcdr >> key;

        uint32_t value;
        dcdr >> value;
        m_var_map_short_innerenumhelper[key] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_short_innerenumhelper
 * @param _var_map_short_innerenumhelper New value to be copied in member var_map_short_innerenumhelper
 */
void MapShortInnerEnumHelper::var_map_short_innerenumhelper(
        const std::map<int16_t, InnerEnumHelper>& _var_map_short_innerenumhelper)
{
    m_var_map_short_innerenumhelper = _var_map_short_innerenumhelper;
}

/*!
 * @brief This function moves the value in member var_map_short_innerenumhelper
 * @param _var_map_short_innerenumhelper New value to be moved in member var_map_short_innerenumhelper
 */
void MapShortInnerEnumHelper::var_map_short_innerenumhelper(
        std::map<int16_t, InnerEnumHelper>&& _var_map_short_innerenumhelper)
{
    m_var_map_short_innerenumhelper = std::move(_var_map_short_innerenumhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_innerenumhelper
 * @return Constant reference to member var_map_short_innerenumhelper
 */
const std::map<int16_t, InnerEnumHelper>& MapShortInnerEnumHelper::var_map_short_innerenumhelper() const
{
    return m_var_map_short_innerenumhelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_innerenumhelper
 * @return Reference to member var_map_short_innerenumhelper
 */
std::map<int16_t, InnerEnumHelper>& MapShortInnerEnumHelper::var_map_short_innerenumhelper()
{
    return m_var_map_short_innerenumhelper;
}


size_t MapShortInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerEnumHelper_max_key_cdr_typesize;
}

bool MapShortInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerBitMaskHelper::MapShortInnerBitMaskHelper()
{
    // map<short, InnerBitMaskHelper> m_var_map_short_innerbitmaskhelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerBitMaskHelper::~MapShortInnerBitMaskHelper()
{
}

MapShortInnerBitMaskHelper::MapShortInnerBitMaskHelper(
        const MapShortInnerBitMaskHelper& x)
{
    m_var_map_short_innerbitmaskhelper = x.m_var_map_short_innerbitmaskhelper;
}

MapShortInnerBitMaskHelper::MapShortInnerBitMaskHelper(
        MapShortInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_short_innerbitmaskhelper = std::move(x.m_var_map_short_innerbitmaskhelper);
}

MapShortInnerBitMaskHelper& MapShortInnerBitMaskHelper::operator =(
        const MapShortInnerBitMaskHelper& x)
{

    m_var_map_short_innerbitmaskhelper = x.m_var_map_short_innerbitmaskhelper;

    return *this;
}

MapShortInnerBitMaskHelper& MapShortInnerBitMaskHelper::operator =(
        MapShortInnerBitMaskHelper&& x) noexcept
{

    m_var_map_short_innerbitmaskhelper = std::move(x.m_var_map_short_innerbitmaskhelper);

    return *this;
}

bool MapShortInnerBitMaskHelper::operator ==(
        const MapShortInnerBitMaskHelper& x) const
{

    return (m_var_map_short_innerbitmaskhelper == x.m_var_map_short_innerbitmaskhelper);
}

bool MapShortInnerBitMaskHelper::operator !=(
        const MapShortInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapShortInnerBitMaskHelper::getCdrSerializedSize(
        const MapShortInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_innerbitmaskhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_innerbitmaskhelper.size());
    for (const auto& pair : m_var_map_short_innerbitmaskhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapShortInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_short_innerbitmaskhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        int16_t key;
        dcdr >> key;

        uint32_t value;        
        dcdr >> value;        
        m_var_map_short_innerbitmaskhelper[key] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_short_innerbitmaskhelper
 * @param _var_map_short_innerbitmaskhelper New value to be copied in member var_map_short_innerbitmaskhelper
 */
void MapShortInnerBitMaskHelper::var_map_short_innerbitmaskhelper(
        const std::map<int16_t, InnerBitMaskHelper>& _var_map_short_innerbitmaskhelper)
{
    m_var_map_short_innerbitmaskhelper = _var_map_short_innerbitmaskhelper;
}

/*!
 * @brief This function moves the value in member var_map_short_innerbitmaskhelper
 * @param _var_map_short_innerbitmaskhelper New value to be moved in member var_map_short_innerbitmaskhelper
 */
void MapShortInnerBitMaskHelper::var_map_short_innerbitmaskhelper(
        std::map<int16_t, InnerBitMaskHelper>&& _var_map_short_innerbitmaskhelper)
{
    m_var_map_short_innerbitmaskhelper = std::move(_var_map_short_innerbitmaskhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_innerbitmaskhelper
 * @return Constant reference to member var_map_short_innerbitmaskhelper
 */
const std::map<int16_t, InnerBitMaskHelper>& MapShortInnerBitMaskHelper::var_map_short_innerbitmaskhelper() const
{
    return m_var_map_short_innerbitmaskhelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_innerbitmaskhelper
 * @return Reference to member var_map_short_innerbitmaskhelper
 */
std::map<int16_t, InnerBitMaskHelper>& MapShortInnerBitMaskHelper::var_map_short_innerbitmaskhelper()
{
    return m_var_map_short_innerbitmaskhelper;
}


size_t MapShortInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapShortInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerAliasHelper::MapShortInnerAliasHelper()
{
    // map<short, InnerAliasHelper> m_var_map_short_inneraliashelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerAliasHelper::~MapShortInnerAliasHelper()
{
}

MapShortInnerAliasHelper::MapShortInnerAliasHelper(
        const MapShortInnerAliasHelper& x)
{
    m_var_map_short_inneraliashelper = x.m_var_map_short_inneraliashelper;
}

MapShortInnerAliasHelper::MapShortInnerAliasHelper(
        MapShortInnerAliasHelper&& x) noexcept 
{
    m_var_map_short_inneraliashelper = std::move(x.m_var_map_short_inneraliashelper);
}

MapShortInnerAliasHelper& MapShortInnerAliasHelper::operator =(
        const MapShortInnerAliasHelper& x)
{

    m_var_map_short_inneraliashelper = x.m_var_map_short_inneraliashelper;

    return *this;
}

MapShortInnerAliasHelper& MapShortInnerAliasHelper::operator =(
        MapShortInnerAliasHelper&& x) noexcept
{

    m_var_map_short_inneraliashelper = std::move(x.m_var_map_short_inneraliashelper);

    return *this;
}

bool MapShortInnerAliasHelper::operator ==(
        const MapShortInnerAliasHelper& x) const
{

    return (m_var_map_short_inneraliashelper == x.m_var_map_short_inneraliashelper);
}

bool MapShortInnerAliasHelper::operator !=(
        const MapShortInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasHelper_max_cdr_typesize;
}

size_t MapShortInnerAliasHelper::getCdrSerializedSize(
        const MapShortInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_inneraliashelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_inneraliashelper.size());
    for (const auto& pair : m_var_map_short_inneraliashelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_inneraliashelper;
}

/*!
 * @brief This function copies the value in member var_map_short_inneraliashelper
 * @param _var_map_short_inneraliashelper New value to be copied in member var_map_short_inneraliashelper
 */
void MapShortInnerAliasHelper::var_map_short_inneraliashelper(
        const std::map<int16_t, InnerAliasHelper>& _var_map_short_inneraliashelper)
{
    m_var_map_short_inneraliashelper = _var_map_short_inneraliashelper;
}

/*!
 * @brief This function moves the value in member var_map_short_inneraliashelper
 * @param _var_map_short_inneraliashelper New value to be moved in member var_map_short_inneraliashelper
 */
void MapShortInnerAliasHelper::var_map_short_inneraliashelper(
        std::map<int16_t, InnerAliasHelper>&& _var_map_short_inneraliashelper)
{
    m_var_map_short_inneraliashelper = std::move(_var_map_short_inneraliashelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_inneraliashelper
 * @return Constant reference to member var_map_short_inneraliashelper
 */
const std::map<int16_t, InnerAliasHelper>& MapShortInnerAliasHelper::var_map_short_inneraliashelper() const
{
    return m_var_map_short_inneraliashelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_inneraliashelper
 * @return Reference to member var_map_short_inneraliashelper
 */
std::map<int16_t, InnerAliasHelper>& MapShortInnerAliasHelper::var_map_short_inneraliashelper()
{
    return m_var_map_short_inneraliashelper;
}


size_t MapShortInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasHelper_max_key_cdr_typesize;
}

bool MapShortInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerAliasArrayHelper::MapShortInnerAliasArrayHelper()
{
    // map<short, Inner_alias_array_helper> m_var_map_short_inneraliasarrayhelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerAliasArrayHelper::~MapShortInnerAliasArrayHelper()
{
}

MapShortInnerAliasArrayHelper::MapShortInnerAliasArrayHelper(
        const MapShortInnerAliasArrayHelper& x)
{
    m_var_map_short_inneraliasarrayhelper = x.m_var_map_short_inneraliasarrayhelper;
}

MapShortInnerAliasArrayHelper::MapShortInnerAliasArrayHelper(
        MapShortInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_short_inneraliasarrayhelper = std::move(x.m_var_map_short_inneraliasarrayhelper);
}

MapShortInnerAliasArrayHelper& MapShortInnerAliasArrayHelper::operator =(
        const MapShortInnerAliasArrayHelper& x)
{

    m_var_map_short_inneraliasarrayhelper = x.m_var_map_short_inneraliasarrayhelper;

    return *this;
}

MapShortInnerAliasArrayHelper& MapShortInnerAliasArrayHelper::operator =(
        MapShortInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_short_inneraliasarrayhelper = std::move(x.m_var_map_short_inneraliasarrayhelper);

    return *this;
}

bool MapShortInnerAliasArrayHelper::operator ==(
        const MapShortInnerAliasArrayHelper& x) const
{

    return (m_var_map_short_inneraliasarrayhelper == x.m_var_map_short_inneraliasarrayhelper);
}

bool MapShortInnerAliasArrayHelper::operator !=(
        const MapShortInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapShortInnerAliasArrayHelper::getCdrSerializedSize(
        const MapShortInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_inneraliasarrayhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_inneraliasarrayhelper.size());
    for (const auto& pair : m_var_map_short_inneraliasarrayhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_inneraliasarrayhelper;
}

/*!
 * @brief This function copies the value in member var_map_short_inneraliasarrayhelper
 * @param _var_map_short_inneraliasarrayhelper New value to be copied in member var_map_short_inneraliasarrayhelper
 */
void MapShortInnerAliasArrayHelper::var_map_short_inneraliasarrayhelper(
        const std::map<int16_t, Inner_alias_array_helper>& _var_map_short_inneraliasarrayhelper)
{
    m_var_map_short_inneraliasarrayhelper = _var_map_short_inneraliasarrayhelper;
}

/*!
 * @brief This function moves the value in member var_map_short_inneraliasarrayhelper
 * @param _var_map_short_inneraliasarrayhelper New value to be moved in member var_map_short_inneraliasarrayhelper
 */
void MapShortInnerAliasArrayHelper::var_map_short_inneraliasarrayhelper(
        std::map<int16_t, Inner_alias_array_helper>&& _var_map_short_inneraliasarrayhelper)
{
    m_var_map_short_inneraliasarrayhelper = std::move(_var_map_short_inneraliasarrayhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_inneraliasarrayhelper
 * @return Constant reference to member var_map_short_inneraliasarrayhelper
 */
const std::map<int16_t, Inner_alias_array_helper>& MapShortInnerAliasArrayHelper::var_map_short_inneraliasarrayhelper() const
{
    return m_var_map_short_inneraliasarrayhelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_inneraliasarrayhelper
 * @return Reference to member var_map_short_inneraliasarrayhelper
 */
std::map<int16_t, Inner_alias_array_helper>& MapShortInnerAliasArrayHelper::var_map_short_inneraliasarrayhelper()
{
    return m_var_map_short_inneraliasarrayhelper;
}


size_t MapShortInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapShortInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerAliasSequenceHelper::MapShortInnerAliasSequenceHelper()
{
    // map<short, Inner_alias_sequence_helper> m_var_map_short_inneraliassequencehelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerAliasSequenceHelper::~MapShortInnerAliasSequenceHelper()
{
}

MapShortInnerAliasSequenceHelper::MapShortInnerAliasSequenceHelper(
        const MapShortInnerAliasSequenceHelper& x)
{
    m_var_map_short_inneraliassequencehelper = x.m_var_map_short_inneraliassequencehelper;
}

MapShortInnerAliasSequenceHelper::MapShortInnerAliasSequenceHelper(
        MapShortInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_short_inneraliassequencehelper = std::move(x.m_var_map_short_inneraliassequencehelper);
}

MapShortInnerAliasSequenceHelper& MapShortInnerAliasSequenceHelper::operator =(
        const MapShortInnerAliasSequenceHelper& x)
{

    m_var_map_short_inneraliassequencehelper = x.m_var_map_short_inneraliassequencehelper;

    return *this;
}

MapShortInnerAliasSequenceHelper& MapShortInnerAliasSequenceHelper::operator =(
        MapShortInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_short_inneraliassequencehelper = std::move(x.m_var_map_short_inneraliassequencehelper);

    return *this;
}

bool MapShortInnerAliasSequenceHelper::operator ==(
        const MapShortInnerAliasSequenceHelper& x) const
{

    return (m_var_map_short_inneraliassequencehelper == x.m_var_map_short_inneraliassequencehelper);
}

bool MapShortInnerAliasSequenceHelper::operator !=(
        const MapShortInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapShortInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapShortInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_inneraliassequencehelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapShortInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_inneraliassequencehelper.size());
    for (const auto& pair : m_var_map_short_inneraliassequencehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_inneraliassequencehelper;
}

/*!
 * @brief This function copies the value in member var_map_short_inneraliassequencehelper
 * @param _var_map_short_inneraliassequencehelper New value to be copied in member var_map_short_inneraliassequencehelper
 */
void MapShortInnerAliasSequenceHelper::var_map_short_inneraliassequencehelper(
        const std::map<int16_t, Inner_alias_sequence_helper>& _var_map_short_inneraliassequencehelper)
{
    m_var_map_short_inneraliassequencehelper = _var_map_short_inneraliassequencehelper;
}

/*!
 * @brief This function moves the value in member var_map_short_inneraliassequencehelper
 * @param _var_map_short_inneraliassequencehelper New value to be moved in member var_map_short_inneraliassequencehelper
 */
void MapShortInnerAliasSequenceHelper::var_map_short_inneraliassequencehelper(
        std::map<int16_t, Inner_alias_sequence_helper>&& _var_map_short_inneraliassequencehelper)
{
    m_var_map_short_inneraliassequencehelper = std::move(_var_map_short_inneraliassequencehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_inneraliassequencehelper
 * @return Constant reference to member var_map_short_inneraliassequencehelper
 */
const std::map<int16_t, Inner_alias_sequence_helper>& MapShortInnerAliasSequenceHelper::var_map_short_inneraliassequencehelper() const
{
    return m_var_map_short_inneraliassequencehelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_inneraliassequencehelper
 * @return Reference to member var_map_short_inneraliassequencehelper
 */
std::map<int16_t, Inner_alias_sequence_helper>& MapShortInnerAliasSequenceHelper::var_map_short_inneraliassequencehelper()
{
    return m_var_map_short_inneraliassequencehelper;
}


size_t MapShortInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapShortInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerAliasMapHelper::MapShortInnerAliasMapHelper()
{
    // map<short, Inner_alias_map_helper> m_var_map_short_inneraliasmaphelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerAliasMapHelper::~MapShortInnerAliasMapHelper()
{
}

MapShortInnerAliasMapHelper::MapShortInnerAliasMapHelper(
        const MapShortInnerAliasMapHelper& x)
{
    m_var_map_short_inneraliasmaphelper = x.m_var_map_short_inneraliasmaphelper;
}

MapShortInnerAliasMapHelper::MapShortInnerAliasMapHelper(
        MapShortInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_short_inneraliasmaphelper = std::move(x.m_var_map_short_inneraliasmaphelper);
}

MapShortInnerAliasMapHelper& MapShortInnerAliasMapHelper::operator =(
        const MapShortInnerAliasMapHelper& x)
{

    m_var_map_short_inneraliasmaphelper = x.m_var_map_short_inneraliasmaphelper;

    return *this;
}

MapShortInnerAliasMapHelper& MapShortInnerAliasMapHelper::operator =(
        MapShortInnerAliasMapHelper&& x) noexcept
{

    m_var_map_short_inneraliasmaphelper = std::move(x.m_var_map_short_inneraliasmaphelper);

    return *this;
}

bool MapShortInnerAliasMapHelper::operator ==(
        const MapShortInnerAliasMapHelper& x) const
{

    return (m_var_map_short_inneraliasmaphelper == x.m_var_map_short_inneraliasmaphelper);
}

bool MapShortInnerAliasMapHelper::operator !=(
        const MapShortInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapShortInnerAliasMapHelper::getCdrSerializedSize(
        const MapShortInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_inneraliasmaphelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_inneraliasmaphelper.size());
    for (const auto& pair : m_var_map_short_inneraliasmaphelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_inneraliasmaphelper;
}

/*!
 * @brief This function copies the value in member var_map_short_inneraliasmaphelper
 * @param _var_map_short_inneraliasmaphelper New value to be copied in member var_map_short_inneraliasmaphelper
 */
void MapShortInnerAliasMapHelper::var_map_short_inneraliasmaphelper(
        const std::map<int16_t, Inner_alias_map_helper>& _var_map_short_inneraliasmaphelper)
{
    m_var_map_short_inneraliasmaphelper = _var_map_short_inneraliasmaphelper;
}

/*!
 * @brief This function moves the value in member var_map_short_inneraliasmaphelper
 * @param _var_map_short_inneraliasmaphelper New value to be moved in member var_map_short_inneraliasmaphelper
 */
void MapShortInnerAliasMapHelper::var_map_short_inneraliasmaphelper(
        std::map<int16_t, Inner_alias_map_helper>&& _var_map_short_inneraliasmaphelper)
{
    m_var_map_short_inneraliasmaphelper = std::move(_var_map_short_inneraliasmaphelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_inneraliasmaphelper
 * @return Constant reference to member var_map_short_inneraliasmaphelper
 */
const std::map<int16_t, Inner_alias_map_helper>& MapShortInnerAliasMapHelper::var_map_short_inneraliasmaphelper() const
{
    return m_var_map_short_inneraliasmaphelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_inneraliasmaphelper
 * @return Reference to member var_map_short_inneraliasmaphelper
 */
std::map<int16_t, Inner_alias_map_helper>& MapShortInnerAliasMapHelper::var_map_short_inneraliasmaphelper()
{
    return m_var_map_short_inneraliasmaphelper;
}


size_t MapShortInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapShortInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerUnionHelper::MapShortInnerUnionHelper()
{
    // map<short, InnerUnionHelper> m_var_map_short_innerunionhelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerUnionHelper::~MapShortInnerUnionHelper()
{
}

MapShortInnerUnionHelper::MapShortInnerUnionHelper(
        const MapShortInnerUnionHelper& x)
{
    m_var_map_short_innerunionhelper = x.m_var_map_short_innerunionhelper;
}

MapShortInnerUnionHelper::MapShortInnerUnionHelper(
        MapShortInnerUnionHelper&& x) noexcept 
{
    m_var_map_short_innerunionhelper = std::move(x.m_var_map_short_innerunionhelper);
}

MapShortInnerUnionHelper& MapShortInnerUnionHelper::operator =(
        const MapShortInnerUnionHelper& x)
{

    m_var_map_short_innerunionhelper = x.m_var_map_short_innerunionhelper;

    return *this;
}

MapShortInnerUnionHelper& MapShortInnerUnionHelper::operator =(
        MapShortInnerUnionHelper&& x) noexcept
{

    m_var_map_short_innerunionhelper = std::move(x.m_var_map_short_innerunionhelper);

    return *this;
}

bool MapShortInnerUnionHelper::operator ==(
        const MapShortInnerUnionHelper& x) const
{

    return (m_var_map_short_innerunionhelper == x.m_var_map_short_innerunionhelper);
}

bool MapShortInnerUnionHelper::operator !=(
        const MapShortInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerUnionHelper_max_cdr_typesize;
}

size_t MapShortInnerUnionHelper::getCdrSerializedSize(
        const MapShortInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_innerunionhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_innerunionhelper.size());
    for (const auto& pair : m_var_map_short_innerunionhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_innerunionhelper;
}

/*!
 * @brief This function copies the value in member var_map_short_innerunionhelper
 * @param _var_map_short_innerunionhelper New value to be copied in member var_map_short_innerunionhelper
 */
void MapShortInnerUnionHelper::var_map_short_innerunionhelper(
        const std::map<int16_t, InnerUnionHelper>& _var_map_short_innerunionhelper)
{
    m_var_map_short_innerunionhelper = _var_map_short_innerunionhelper;
}

/*!
 * @brief This function moves the value in member var_map_short_innerunionhelper
 * @param _var_map_short_innerunionhelper New value to be moved in member var_map_short_innerunionhelper
 */
void MapShortInnerUnionHelper::var_map_short_innerunionhelper(
        std::map<int16_t, InnerUnionHelper>&& _var_map_short_innerunionhelper)
{
    m_var_map_short_innerunionhelper = std::move(_var_map_short_innerunionhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_innerunionhelper
 * @return Constant reference to member var_map_short_innerunionhelper
 */
const std::map<int16_t, InnerUnionHelper>& MapShortInnerUnionHelper::var_map_short_innerunionhelper() const
{
    return m_var_map_short_innerunionhelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_innerunionhelper
 * @return Reference to member var_map_short_innerunionhelper
 */
std::map<int16_t, InnerUnionHelper>& MapShortInnerUnionHelper::var_map_short_innerunionhelper()
{
    return m_var_map_short_innerunionhelper;
}


size_t MapShortInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerUnionHelper_max_key_cdr_typesize;
}

bool MapShortInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerStructureHelper::MapShortInnerStructureHelper()
{
    // map<short, InnerStructureHelper> m_var_map_short_innerstructurehelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerStructureHelper::~MapShortInnerStructureHelper()
{
}

MapShortInnerStructureHelper::MapShortInnerStructureHelper(
        const MapShortInnerStructureHelper& x)
{
    m_var_map_short_innerstructurehelper = x.m_var_map_short_innerstructurehelper;
}

MapShortInnerStructureHelper::MapShortInnerStructureHelper(
        MapShortInnerStructureHelper&& x) noexcept 
{
    m_var_map_short_innerstructurehelper = std::move(x.m_var_map_short_innerstructurehelper);
}

MapShortInnerStructureHelper& MapShortInnerStructureHelper::operator =(
        const MapShortInnerStructureHelper& x)
{

    m_var_map_short_innerstructurehelper = x.m_var_map_short_innerstructurehelper;

    return *this;
}

MapShortInnerStructureHelper& MapShortInnerStructureHelper::operator =(
        MapShortInnerStructureHelper&& x) noexcept
{

    m_var_map_short_innerstructurehelper = std::move(x.m_var_map_short_innerstructurehelper);

    return *this;
}

bool MapShortInnerStructureHelper::operator ==(
        const MapShortInnerStructureHelper& x) const
{

    return (m_var_map_short_innerstructurehelper == x.m_var_map_short_innerstructurehelper);
}

bool MapShortInnerStructureHelper::operator !=(
        const MapShortInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerStructureHelper_max_cdr_typesize;
}

size_t MapShortInnerStructureHelper::getCdrSerializedSize(
        const MapShortInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_innerstructurehelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_innerstructurehelper.size());
    for (const auto& pair : m_var_map_short_innerstructurehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_innerstructurehelper;
}

/*!
 * @brief This function copies the value in member var_map_short_innerstructurehelper
 * @param _var_map_short_innerstructurehelper New value to be copied in member var_map_short_innerstructurehelper
 */
void MapShortInnerStructureHelper::var_map_short_innerstructurehelper(
        const std::map<int16_t, InnerStructureHelper>& _var_map_short_innerstructurehelper)
{
    m_var_map_short_innerstructurehelper = _var_map_short_innerstructurehelper;
}

/*!
 * @brief This function moves the value in member var_map_short_innerstructurehelper
 * @param _var_map_short_innerstructurehelper New value to be moved in member var_map_short_innerstructurehelper
 */
void MapShortInnerStructureHelper::var_map_short_innerstructurehelper(
        std::map<int16_t, InnerStructureHelper>&& _var_map_short_innerstructurehelper)
{
    m_var_map_short_innerstructurehelper = std::move(_var_map_short_innerstructurehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_innerstructurehelper
 * @return Constant reference to member var_map_short_innerstructurehelper
 */
const std::map<int16_t, InnerStructureHelper>& MapShortInnerStructureHelper::var_map_short_innerstructurehelper() const
{
    return m_var_map_short_innerstructurehelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_innerstructurehelper
 * @return Reference to member var_map_short_innerstructurehelper
 */
std::map<int16_t, InnerStructureHelper>& MapShortInnerStructureHelper::var_map_short_innerstructurehelper()
{
    return m_var_map_short_innerstructurehelper;
}


size_t MapShortInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerStructureHelper_max_key_cdr_typesize;
}

bool MapShortInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapShortInnerBitsetHelper::MapShortInnerBitsetHelper()
{
    // map<short, InnerBitsetHelper> m_var_map_short_innerbitsethelper


    // Just to register all known types
    registermapsTypes();
}

MapShortInnerBitsetHelper::~MapShortInnerBitsetHelper()
{
}

MapShortInnerBitsetHelper::MapShortInnerBitsetHelper(
        const MapShortInnerBitsetHelper& x)
{
    m_var_map_short_innerbitsethelper = x.m_var_map_short_innerbitsethelper;
}

MapShortInnerBitsetHelper::MapShortInnerBitsetHelper(
        MapShortInnerBitsetHelper&& x) noexcept 
{
    m_var_map_short_innerbitsethelper = std::move(x.m_var_map_short_innerbitsethelper);
}

MapShortInnerBitsetHelper& MapShortInnerBitsetHelper::operator =(
        const MapShortInnerBitsetHelper& x)
{

    m_var_map_short_innerbitsethelper = x.m_var_map_short_innerbitsethelper;

    return *this;
}

MapShortInnerBitsetHelper& MapShortInnerBitsetHelper::operator =(
        MapShortInnerBitsetHelper&& x) noexcept
{

    m_var_map_short_innerbitsethelper = std::move(x.m_var_map_short_innerbitsethelper);

    return *this;
}

bool MapShortInnerBitsetHelper::operator ==(
        const MapShortInnerBitsetHelper& x) const
{

    return (m_var_map_short_innerbitsethelper == x.m_var_map_short_innerbitsethelper);
}

bool MapShortInnerBitsetHelper::operator !=(
        const MapShortInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapShortInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerBitsetHelper_max_cdr_typesize;
}

size_t MapShortInnerBitsetHelper::getCdrSerializedSize(
        const MapShortInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_short_innerbitsethelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapShortInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_short_innerbitsethelper.size());
    for (const auto& pair : m_var_map_short_innerbitsethelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapShortInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_short_innerbitsethelper;
}

/*!
 * @brief This function copies the value in member var_map_short_innerbitsethelper
 * @param _var_map_short_innerbitsethelper New value to be copied in member var_map_short_innerbitsethelper
 */
void MapShortInnerBitsetHelper::var_map_short_innerbitsethelper(
        const std::map<int16_t, InnerBitsetHelper>& _var_map_short_innerbitsethelper)
{
    m_var_map_short_innerbitsethelper = _var_map_short_innerbitsethelper;
}

/*!
 * @brief This function moves the value in member var_map_short_innerbitsethelper
 * @param _var_map_short_innerbitsethelper New value to be moved in member var_map_short_innerbitsethelper
 */
void MapShortInnerBitsetHelper::var_map_short_innerbitsethelper(
        std::map<int16_t, InnerBitsetHelper>&& _var_map_short_innerbitsethelper)
{
    m_var_map_short_innerbitsethelper = std::move(_var_map_short_innerbitsethelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_short_innerbitsethelper
 * @return Constant reference to member var_map_short_innerbitsethelper
 */
const std::map<int16_t, InnerBitsetHelper>& MapShortInnerBitsetHelper::var_map_short_innerbitsethelper() const
{
    return m_var_map_short_innerbitsethelper;
}

/*!
 * @brief This function returns a reference to member var_map_short_innerbitsethelper
 * @return Reference to member var_map_short_innerbitsethelper
 */
std::map<int16_t, InnerBitsetHelper>& MapShortInnerBitsetHelper::var_map_short_innerbitsethelper()
{
    return m_var_map_short_innerbitsethelper;
}


size_t MapShortInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapShortInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapShortInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapShortInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortShort::MapUShortShort()
{
    // map<unsigned short, short> m_var_map_ushort_short


    // Just to register all known types
    registermapsTypes();
}

MapUShortShort::~MapUShortShort()
{
}

MapUShortShort::MapUShortShort(
        const MapUShortShort& x)
{
    m_var_map_ushort_short = x.m_var_map_ushort_short;
}

MapUShortShort::MapUShortShort(
        MapUShortShort&& x) noexcept 
{
    m_var_map_ushort_short = std::move(x.m_var_map_ushort_short);
}

MapUShortShort& MapUShortShort::operator =(
        const MapUShortShort& x)
{

    m_var_map_ushort_short = x.m_var_map_ushort_short;

    return *this;
}

MapUShortShort& MapUShortShort::operator =(
        MapUShortShort&& x) noexcept
{

    m_var_map_ushort_short = std::move(x.m_var_map_ushort_short);

    return *this;
}

bool MapUShortShort::operator ==(
        const MapUShortShort& x) const
{

    return (m_var_map_ushort_short == x.m_var_map_ushort_short);
}

bool MapUShortShort::operator !=(
        const MapUShortShort& x) const
{
    return !(*this == x);
}

size_t MapUShortShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortShort_max_cdr_typesize;
}

size_t MapUShortShort::getCdrSerializedSize(
        const MapUShortShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_short())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapUShortShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_short.size());
    for (const auto& pair : m_var_map_ushort_short)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_short;
}

/*!
 * @brief This function copies the value in member var_map_ushort_short
 * @param _var_map_ushort_short New value to be copied in member var_map_ushort_short
 */
void MapUShortShort::var_map_ushort_short(
        const std::map<uint16_t, int16_t>& _var_map_ushort_short)
{
    m_var_map_ushort_short = _var_map_ushort_short;
}

/*!
 * @brief This function moves the value in member var_map_ushort_short
 * @param _var_map_ushort_short New value to be moved in member var_map_ushort_short
 */
void MapUShortShort::var_map_ushort_short(
        std::map<uint16_t, int16_t>&& _var_map_ushort_short)
{
    m_var_map_ushort_short = std::move(_var_map_ushort_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_short
 * @return Constant reference to member var_map_ushort_short
 */
const std::map<uint16_t, int16_t>& MapUShortShort::var_map_ushort_short() const
{
    return m_var_map_ushort_short;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_short
 * @return Reference to member var_map_ushort_short
 */
std::map<uint16_t, int16_t>& MapUShortShort::var_map_ushort_short()
{
    return m_var_map_ushort_short;
}


size_t MapUShortShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortShort_max_key_cdr_typesize;
}

bool MapUShortShort::isKeyDefined()
{
    return false;
}

void MapUShortShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortUShort::MapUShortUShort()
{
    // map<unsigned short, unsigned short> m_var_map_ushort_ushort


    // Just to register all known types
    registermapsTypes();
}

MapUShortUShort::~MapUShortUShort()
{
}

MapUShortUShort::MapUShortUShort(
        const MapUShortUShort& x)
{
    m_var_map_ushort_ushort = x.m_var_map_ushort_ushort;
}

MapUShortUShort::MapUShortUShort(
        MapUShortUShort&& x) noexcept 
{
    m_var_map_ushort_ushort = std::move(x.m_var_map_ushort_ushort);
}

MapUShortUShort& MapUShortUShort::operator =(
        const MapUShortUShort& x)
{

    m_var_map_ushort_ushort = x.m_var_map_ushort_ushort;

    return *this;
}

MapUShortUShort& MapUShortUShort::operator =(
        MapUShortUShort&& x) noexcept
{

    m_var_map_ushort_ushort = std::move(x.m_var_map_ushort_ushort);

    return *this;
}

bool MapUShortUShort::operator ==(
        const MapUShortUShort& x) const
{

    return (m_var_map_ushort_ushort == x.m_var_map_ushort_ushort);
}

bool MapUShortUShort::operator !=(
        const MapUShortUShort& x) const
{
    return !(*this == x);
}

size_t MapUShortUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortUShort_max_cdr_typesize;
}

size_t MapUShortUShort::getCdrSerializedSize(
        const MapUShortUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_ushort())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapUShortUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_ushort.size());
    for (const auto& pair : m_var_map_ushort_ushort)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_ushort;
}

/*!
 * @brief This function copies the value in member var_map_ushort_ushort
 * @param _var_map_ushort_ushort New value to be copied in member var_map_ushort_ushort
 */
void MapUShortUShort::var_map_ushort_ushort(
        const std::map<uint16_t, uint16_t>& _var_map_ushort_ushort)
{
    m_var_map_ushort_ushort = _var_map_ushort_ushort;
}

/*!
 * @brief This function moves the value in member var_map_ushort_ushort
 * @param _var_map_ushort_ushort New value to be moved in member var_map_ushort_ushort
 */
void MapUShortUShort::var_map_ushort_ushort(
        std::map<uint16_t, uint16_t>&& _var_map_ushort_ushort)
{
    m_var_map_ushort_ushort = std::move(_var_map_ushort_ushort);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_ushort
 * @return Constant reference to member var_map_ushort_ushort
 */
const std::map<uint16_t, uint16_t>& MapUShortUShort::var_map_ushort_ushort() const
{
    return m_var_map_ushort_ushort;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_ushort
 * @return Reference to member var_map_ushort_ushort
 */
std::map<uint16_t, uint16_t>& MapUShortUShort::var_map_ushort_ushort()
{
    return m_var_map_ushort_ushort;
}


size_t MapUShortUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortUShort_max_key_cdr_typesize;
}

bool MapUShortUShort::isKeyDefined()
{
    return false;
}

void MapUShortUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortLong::MapUShortLong()
{
    // map<unsigned short, long> m_var_map_ushort_long


    // Just to register all known types
    registermapsTypes();
}

MapUShortLong::~MapUShortLong()
{
}

MapUShortLong::MapUShortLong(
        const MapUShortLong& x)
{
    m_var_map_ushort_long = x.m_var_map_ushort_long;
}

MapUShortLong::MapUShortLong(
        MapUShortLong&& x) noexcept 
{
    m_var_map_ushort_long = std::move(x.m_var_map_ushort_long);
}

MapUShortLong& MapUShortLong::operator =(
        const MapUShortLong& x)
{

    m_var_map_ushort_long = x.m_var_map_ushort_long;

    return *this;
}

MapUShortLong& MapUShortLong::operator =(
        MapUShortLong&& x) noexcept
{

    m_var_map_ushort_long = std::move(x.m_var_map_ushort_long);

    return *this;
}

bool MapUShortLong::operator ==(
        const MapUShortLong& x) const
{

    return (m_var_map_ushort_long == x.m_var_map_ushort_long);
}

bool MapUShortLong::operator !=(
        const MapUShortLong& x) const
{
    return !(*this == x);
}

size_t MapUShortLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortLong_max_cdr_typesize;
}

size_t MapUShortLong::getCdrSerializedSize(
        const MapUShortLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_long())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapUShortLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_long.size());
    for (const auto& pair : m_var_map_ushort_long)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_long;
}

/*!
 * @brief This function copies the value in member var_map_ushort_long
 * @param _var_map_ushort_long New value to be copied in member var_map_ushort_long
 */
void MapUShortLong::var_map_ushort_long(
        const std::map<uint16_t, int32_t>& _var_map_ushort_long)
{
    m_var_map_ushort_long = _var_map_ushort_long;
}

/*!
 * @brief This function moves the value in member var_map_ushort_long
 * @param _var_map_ushort_long New value to be moved in member var_map_ushort_long
 */
void MapUShortLong::var_map_ushort_long(
        std::map<uint16_t, int32_t>&& _var_map_ushort_long)
{
    m_var_map_ushort_long = std::move(_var_map_ushort_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_long
 * @return Constant reference to member var_map_ushort_long
 */
const std::map<uint16_t, int32_t>& MapUShortLong::var_map_ushort_long() const
{
    return m_var_map_ushort_long;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_long
 * @return Reference to member var_map_ushort_long
 */
std::map<uint16_t, int32_t>& MapUShortLong::var_map_ushort_long()
{
    return m_var_map_ushort_long;
}


size_t MapUShortLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortLong_max_key_cdr_typesize;
}

bool MapUShortLong::isKeyDefined()
{
    return false;
}

void MapUShortLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortULong::MapUShortULong()
{
    // map<unsigned short, unsigned long> m_var_map_ushort_ulong


    // Just to register all known types
    registermapsTypes();
}

MapUShortULong::~MapUShortULong()
{
}

MapUShortULong::MapUShortULong(
        const MapUShortULong& x)
{
    m_var_map_ushort_ulong = x.m_var_map_ushort_ulong;
}

MapUShortULong::MapUShortULong(
        MapUShortULong&& x) noexcept 
{
    m_var_map_ushort_ulong = std::move(x.m_var_map_ushort_ulong);
}

MapUShortULong& MapUShortULong::operator =(
        const MapUShortULong& x)
{

    m_var_map_ushort_ulong = x.m_var_map_ushort_ulong;

    return *this;
}

MapUShortULong& MapUShortULong::operator =(
        MapUShortULong&& x) noexcept
{

    m_var_map_ushort_ulong = std::move(x.m_var_map_ushort_ulong);

    return *this;
}

bool MapUShortULong::operator ==(
        const MapUShortULong& x) const
{

    return (m_var_map_ushort_ulong == x.m_var_map_ushort_ulong);
}

bool MapUShortULong::operator !=(
        const MapUShortULong& x) const
{
    return !(*this == x);
}

size_t MapUShortULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortULong_max_cdr_typesize;
}

size_t MapUShortULong::getCdrSerializedSize(
        const MapUShortULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_ulong())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapUShortULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_ulong.size());
    for (const auto& pair : m_var_map_ushort_ulong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_ulong;
}

/*!
 * @brief This function copies the value in member var_map_ushort_ulong
 * @param _var_map_ushort_ulong New value to be copied in member var_map_ushort_ulong
 */
void MapUShortULong::var_map_ushort_ulong(
        const std::map<uint16_t, uint32_t>& _var_map_ushort_ulong)
{
    m_var_map_ushort_ulong = _var_map_ushort_ulong;
}

/*!
 * @brief This function moves the value in member var_map_ushort_ulong
 * @param _var_map_ushort_ulong New value to be moved in member var_map_ushort_ulong
 */
void MapUShortULong::var_map_ushort_ulong(
        std::map<uint16_t, uint32_t>&& _var_map_ushort_ulong)
{
    m_var_map_ushort_ulong = std::move(_var_map_ushort_ulong);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_ulong
 * @return Constant reference to member var_map_ushort_ulong
 */
const std::map<uint16_t, uint32_t>& MapUShortULong::var_map_ushort_ulong() const
{
    return m_var_map_ushort_ulong;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_ulong
 * @return Reference to member var_map_ushort_ulong
 */
std::map<uint16_t, uint32_t>& MapUShortULong::var_map_ushort_ulong()
{
    return m_var_map_ushort_ulong;
}


size_t MapUShortULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortULong_max_key_cdr_typesize;
}

bool MapUShortULong::isKeyDefined()
{
    return false;
}

void MapUShortULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortLongLong::MapUShortLongLong()
{
    // map<unsigned short, long long> m_var_map_ushort_longlong


    // Just to register all known types
    registermapsTypes();
}

MapUShortLongLong::~MapUShortLongLong()
{
}

MapUShortLongLong::MapUShortLongLong(
        const MapUShortLongLong& x)
{
    m_var_map_ushort_longlong = x.m_var_map_ushort_longlong;
}

MapUShortLongLong::MapUShortLongLong(
        MapUShortLongLong&& x) noexcept 
{
    m_var_map_ushort_longlong = std::move(x.m_var_map_ushort_longlong);
}

MapUShortLongLong& MapUShortLongLong::operator =(
        const MapUShortLongLong& x)
{

    m_var_map_ushort_longlong = x.m_var_map_ushort_longlong;

    return *this;
}

MapUShortLongLong& MapUShortLongLong::operator =(
        MapUShortLongLong&& x) noexcept
{

    m_var_map_ushort_longlong = std::move(x.m_var_map_ushort_longlong);

    return *this;
}

bool MapUShortLongLong::operator ==(
        const MapUShortLongLong& x) const
{

    return (m_var_map_ushort_longlong == x.m_var_map_ushort_longlong);
}

bool MapUShortLongLong::operator !=(
        const MapUShortLongLong& x) const
{
    return !(*this == x);
}

size_t MapUShortLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortLongLong_max_cdr_typesize;
}

size_t MapUShortLongLong::getCdrSerializedSize(
        const MapUShortLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_longlong())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapUShortLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_longlong.size());
    for (const auto& pair : m_var_map_ushort_longlong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_longlong;
}

/*!
 * @brief This function copies the value in member var_map_ushort_longlong
 * @param _var_map_ushort_longlong New value to be copied in member var_map_ushort_longlong
 */
void MapUShortLongLong::var_map_ushort_longlong(
        const std::map<uint16_t, int64_t>& _var_map_ushort_longlong)
{
    m_var_map_ushort_longlong = _var_map_ushort_longlong;
}

/*!
 * @brief This function moves the value in member var_map_ushort_longlong
 * @param _var_map_ushort_longlong New value to be moved in member var_map_ushort_longlong
 */
void MapUShortLongLong::var_map_ushort_longlong(
        std::map<uint16_t, int64_t>&& _var_map_ushort_longlong)
{
    m_var_map_ushort_longlong = std::move(_var_map_ushort_longlong);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_longlong
 * @return Constant reference to member var_map_ushort_longlong
 */
const std::map<uint16_t, int64_t>& MapUShortLongLong::var_map_ushort_longlong() const
{
    return m_var_map_ushort_longlong;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_longlong
 * @return Reference to member var_map_ushort_longlong
 */
std::map<uint16_t, int64_t>& MapUShortLongLong::var_map_ushort_longlong()
{
    return m_var_map_ushort_longlong;
}


size_t MapUShortLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortLongLong_max_key_cdr_typesize;
}

bool MapUShortLongLong::isKeyDefined()
{
    return false;
}

void MapUShortLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortULongLong::MapUShortULongLong()
{
    // map<unsigned short, unsigned long long> m_var_map_ushort_ulonglong


    // Just to register all known types
    registermapsTypes();
}

MapUShortULongLong::~MapUShortULongLong()
{
}

MapUShortULongLong::MapUShortULongLong(
        const MapUShortULongLong& x)
{
    m_var_map_ushort_ulonglong = x.m_var_map_ushort_ulonglong;
}

MapUShortULongLong::MapUShortULongLong(
        MapUShortULongLong&& x) noexcept 
{
    m_var_map_ushort_ulonglong = std::move(x.m_var_map_ushort_ulonglong);
}

MapUShortULongLong& MapUShortULongLong::operator =(
        const MapUShortULongLong& x)
{

    m_var_map_ushort_ulonglong = x.m_var_map_ushort_ulonglong;

    return *this;
}

MapUShortULongLong& MapUShortULongLong::operator =(
        MapUShortULongLong&& x) noexcept
{

    m_var_map_ushort_ulonglong = std::move(x.m_var_map_ushort_ulonglong);

    return *this;
}

bool MapUShortULongLong::operator ==(
        const MapUShortULongLong& x) const
{

    return (m_var_map_ushort_ulonglong == x.m_var_map_ushort_ulonglong);
}

bool MapUShortULongLong::operator !=(
        const MapUShortULongLong& x) const
{
    return !(*this == x);
}

size_t MapUShortULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortULongLong_max_cdr_typesize;
}

size_t MapUShortULongLong::getCdrSerializedSize(
        const MapUShortULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_ulonglong())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapUShortULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_ulonglong.size());
    for (const auto& pair : m_var_map_ushort_ulonglong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_ulonglong;
}

/*!
 * @brief This function copies the value in member var_map_ushort_ulonglong
 * @param _var_map_ushort_ulonglong New value to be copied in member var_map_ushort_ulonglong
 */
void MapUShortULongLong::var_map_ushort_ulonglong(
        const std::map<uint16_t, uint64_t>& _var_map_ushort_ulonglong)
{
    m_var_map_ushort_ulonglong = _var_map_ushort_ulonglong;
}

/*!
 * @brief This function moves the value in member var_map_ushort_ulonglong
 * @param _var_map_ushort_ulonglong New value to be moved in member var_map_ushort_ulonglong
 */
void MapUShortULongLong::var_map_ushort_ulonglong(
        std::map<uint16_t, uint64_t>&& _var_map_ushort_ulonglong)
{
    m_var_map_ushort_ulonglong = std::move(_var_map_ushort_ulonglong);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_ulonglong
 * @return Constant reference to member var_map_ushort_ulonglong
 */
const std::map<uint16_t, uint64_t>& MapUShortULongLong::var_map_ushort_ulonglong() const
{
    return m_var_map_ushort_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_ulonglong
 * @return Reference to member var_map_ushort_ulonglong
 */
std::map<uint16_t, uint64_t>& MapUShortULongLong::var_map_ushort_ulonglong()
{
    return m_var_map_ushort_ulonglong;
}


size_t MapUShortULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortULongLong_max_key_cdr_typesize;
}

bool MapUShortULongLong::isKeyDefined()
{
    return false;
}

void MapUShortULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortFloat::MapUShortFloat()
{
    // map<unsigned short, float> m_var_map_ushort_float


    // Just to register all known types
    registermapsTypes();
}

MapUShortFloat::~MapUShortFloat()
{
}

MapUShortFloat::MapUShortFloat(
        const MapUShortFloat& x)
{
    m_var_map_ushort_float = x.m_var_map_ushort_float;
}

MapUShortFloat::MapUShortFloat(
        MapUShortFloat&& x) noexcept 
{
    m_var_map_ushort_float = std::move(x.m_var_map_ushort_float);
}

MapUShortFloat& MapUShortFloat::operator =(
        const MapUShortFloat& x)
{

    m_var_map_ushort_float = x.m_var_map_ushort_float;

    return *this;
}

MapUShortFloat& MapUShortFloat::operator =(
        MapUShortFloat&& x) noexcept
{

    m_var_map_ushort_float = std::move(x.m_var_map_ushort_float);

    return *this;
}

bool MapUShortFloat::operator ==(
        const MapUShortFloat& x) const
{

    return (m_var_map_ushort_float == x.m_var_map_ushort_float);
}

bool MapUShortFloat::operator !=(
        const MapUShortFloat& x) const
{
    return !(*this == x);
}

size_t MapUShortFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortFloat_max_cdr_typesize;
}

size_t MapUShortFloat::getCdrSerializedSize(
        const MapUShortFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_float())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapUShortFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_float.size());
    for (const auto& pair : m_var_map_ushort_float)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_float;
}

/*!
 * @brief This function copies the value in member var_map_ushort_float
 * @param _var_map_ushort_float New value to be copied in member var_map_ushort_float
 */
void MapUShortFloat::var_map_ushort_float(
        const std::map<uint16_t, float>& _var_map_ushort_float)
{
    m_var_map_ushort_float = _var_map_ushort_float;
}

/*!
 * @brief This function moves the value in member var_map_ushort_float
 * @param _var_map_ushort_float New value to be moved in member var_map_ushort_float
 */
void MapUShortFloat::var_map_ushort_float(
        std::map<uint16_t, float>&& _var_map_ushort_float)
{
    m_var_map_ushort_float = std::move(_var_map_ushort_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_float
 * @return Constant reference to member var_map_ushort_float
 */
const std::map<uint16_t, float>& MapUShortFloat::var_map_ushort_float() const
{
    return m_var_map_ushort_float;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_float
 * @return Reference to member var_map_ushort_float
 */
std::map<uint16_t, float>& MapUShortFloat::var_map_ushort_float()
{
    return m_var_map_ushort_float;
}


size_t MapUShortFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortFloat_max_key_cdr_typesize;
}

bool MapUShortFloat::isKeyDefined()
{
    return false;
}

void MapUShortFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortDouble::MapUShortDouble()
{
    // map<unsigned short, double> m_var_map_ushort_double


    // Just to register all known types
    registermapsTypes();
}

MapUShortDouble::~MapUShortDouble()
{
}

MapUShortDouble::MapUShortDouble(
        const MapUShortDouble& x)
{
    m_var_map_ushort_double = x.m_var_map_ushort_double;
}

MapUShortDouble::MapUShortDouble(
        MapUShortDouble&& x) noexcept 
{
    m_var_map_ushort_double = std::move(x.m_var_map_ushort_double);
}

MapUShortDouble& MapUShortDouble::operator =(
        const MapUShortDouble& x)
{

    m_var_map_ushort_double = x.m_var_map_ushort_double;

    return *this;
}

MapUShortDouble& MapUShortDouble::operator =(
        MapUShortDouble&& x) noexcept
{

    m_var_map_ushort_double = std::move(x.m_var_map_ushort_double);

    return *this;
}

bool MapUShortDouble::operator ==(
        const MapUShortDouble& x) const
{

    return (m_var_map_ushort_double == x.m_var_map_ushort_double);
}

bool MapUShortDouble::operator !=(
        const MapUShortDouble& x) const
{
    return !(*this == x);
}

size_t MapUShortDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortDouble_max_cdr_typesize;
}

size_t MapUShortDouble::getCdrSerializedSize(
        const MapUShortDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_double())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapUShortDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_double.size());
    for (const auto& pair : m_var_map_ushort_double)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_double;
}

/*!
 * @brief This function copies the value in member var_map_ushort_double
 * @param _var_map_ushort_double New value to be copied in member var_map_ushort_double
 */
void MapUShortDouble::var_map_ushort_double(
        const std::map<uint16_t, double>& _var_map_ushort_double)
{
    m_var_map_ushort_double = _var_map_ushort_double;
}

/*!
 * @brief This function moves the value in member var_map_ushort_double
 * @param _var_map_ushort_double New value to be moved in member var_map_ushort_double
 */
void MapUShortDouble::var_map_ushort_double(
        std::map<uint16_t, double>&& _var_map_ushort_double)
{
    m_var_map_ushort_double = std::move(_var_map_ushort_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_double
 * @return Constant reference to member var_map_ushort_double
 */
const std::map<uint16_t, double>& MapUShortDouble::var_map_ushort_double() const
{
    return m_var_map_ushort_double;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_double
 * @return Reference to member var_map_ushort_double
 */
std::map<uint16_t, double>& MapUShortDouble::var_map_ushort_double()
{
    return m_var_map_ushort_double;
}


size_t MapUShortDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortDouble_max_key_cdr_typesize;
}

bool MapUShortDouble::isKeyDefined()
{
    return false;
}

void MapUShortDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortLongDouble::MapUShortLongDouble()
{
    // map<unsigned short, long double> m_var_map_ushort_longdouble


    // Just to register all known types
    registermapsTypes();
}

MapUShortLongDouble::~MapUShortLongDouble()
{
}

MapUShortLongDouble::MapUShortLongDouble(
        const MapUShortLongDouble& x)
{
    m_var_map_ushort_longdouble = x.m_var_map_ushort_longdouble;
}

MapUShortLongDouble::MapUShortLongDouble(
        MapUShortLongDouble&& x) noexcept 
{
    m_var_map_ushort_longdouble = std::move(x.m_var_map_ushort_longdouble);
}

MapUShortLongDouble& MapUShortLongDouble::operator =(
        const MapUShortLongDouble& x)
{

    m_var_map_ushort_longdouble = x.m_var_map_ushort_longdouble;

    return *this;
}

MapUShortLongDouble& MapUShortLongDouble::operator =(
        MapUShortLongDouble&& x) noexcept
{

    m_var_map_ushort_longdouble = std::move(x.m_var_map_ushort_longdouble);

    return *this;
}

bool MapUShortLongDouble::operator ==(
        const MapUShortLongDouble& x) const
{

    return (m_var_map_ushort_longdouble == x.m_var_map_ushort_longdouble);
}

bool MapUShortLongDouble::operator !=(
        const MapUShortLongDouble& x) const
{
    return !(*this == x);
}

size_t MapUShortLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortLongDouble_max_cdr_typesize;
}

size_t MapUShortLongDouble::getCdrSerializedSize(
        const MapUShortLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_longdouble())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapUShortLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_longdouble.size());
    for (const auto& pair : m_var_map_ushort_longdouble)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_longdouble;
}

/*!
 * @brief This function copies the value in member var_map_ushort_longdouble
 * @param _var_map_ushort_longdouble New value to be copied in member var_map_ushort_longdouble
 */
void MapUShortLongDouble::var_map_ushort_longdouble(
        const std::map<uint16_t, long double>& _var_map_ushort_longdouble)
{
    m_var_map_ushort_longdouble = _var_map_ushort_longdouble;
}

/*!
 * @brief This function moves the value in member var_map_ushort_longdouble
 * @param _var_map_ushort_longdouble New value to be moved in member var_map_ushort_longdouble
 */
void MapUShortLongDouble::var_map_ushort_longdouble(
        std::map<uint16_t, long double>&& _var_map_ushort_longdouble)
{
    m_var_map_ushort_longdouble = std::move(_var_map_ushort_longdouble);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_longdouble
 * @return Constant reference to member var_map_ushort_longdouble
 */
const std::map<uint16_t, long double>& MapUShortLongDouble::var_map_ushort_longdouble() const
{
    return m_var_map_ushort_longdouble;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_longdouble
 * @return Reference to member var_map_ushort_longdouble
 */
std::map<uint16_t, long double>& MapUShortLongDouble::var_map_ushort_longdouble()
{
    return m_var_map_ushort_longdouble;
}


size_t MapUShortLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortLongDouble_max_key_cdr_typesize;
}

bool MapUShortLongDouble::isKeyDefined()
{
    return false;
}

void MapUShortLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortBoolean::MapUShortBoolean()
{
    // map<unsigned short, boolean> m_var_map_ushort_boolean


    // Just to register all known types
    registermapsTypes();
}

MapUShortBoolean::~MapUShortBoolean()
{
}

MapUShortBoolean::MapUShortBoolean(
        const MapUShortBoolean& x)
{
    m_var_map_ushort_boolean = x.m_var_map_ushort_boolean;
}

MapUShortBoolean::MapUShortBoolean(
        MapUShortBoolean&& x) noexcept 
{
    m_var_map_ushort_boolean = std::move(x.m_var_map_ushort_boolean);
}

MapUShortBoolean& MapUShortBoolean::operator =(
        const MapUShortBoolean& x)
{

    m_var_map_ushort_boolean = x.m_var_map_ushort_boolean;

    return *this;
}

MapUShortBoolean& MapUShortBoolean::operator =(
        MapUShortBoolean&& x) noexcept
{

    m_var_map_ushort_boolean = std::move(x.m_var_map_ushort_boolean);

    return *this;
}

bool MapUShortBoolean::operator ==(
        const MapUShortBoolean& x) const
{

    return (m_var_map_ushort_boolean == x.m_var_map_ushort_boolean);
}

bool MapUShortBoolean::operator !=(
        const MapUShortBoolean& x) const
{
    return !(*this == x);
}

size_t MapUShortBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortBoolean_max_cdr_typesize;
}

size_t MapUShortBoolean::getCdrSerializedSize(
        const MapUShortBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_boolean())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapUShortBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_boolean.size());
    for (const auto& pair : m_var_map_ushort_boolean)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_boolean;
}

/*!
 * @brief This function copies the value in member var_map_ushort_boolean
 * @param _var_map_ushort_boolean New value to be copied in member var_map_ushort_boolean
 */
void MapUShortBoolean::var_map_ushort_boolean(
        const std::map<uint16_t, bool>& _var_map_ushort_boolean)
{
    m_var_map_ushort_boolean = _var_map_ushort_boolean;
}

/*!
 * @brief This function moves the value in member var_map_ushort_boolean
 * @param _var_map_ushort_boolean New value to be moved in member var_map_ushort_boolean
 */
void MapUShortBoolean::var_map_ushort_boolean(
        std::map<uint16_t, bool>&& _var_map_ushort_boolean)
{
    m_var_map_ushort_boolean = std::move(_var_map_ushort_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_boolean
 * @return Constant reference to member var_map_ushort_boolean
 */
const std::map<uint16_t, bool>& MapUShortBoolean::var_map_ushort_boolean() const
{
    return m_var_map_ushort_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_boolean
 * @return Reference to member var_map_ushort_boolean
 */
std::map<uint16_t, bool>& MapUShortBoolean::var_map_ushort_boolean()
{
    return m_var_map_ushort_boolean;
}


size_t MapUShortBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortBoolean_max_key_cdr_typesize;
}

bool MapUShortBoolean::isKeyDefined()
{
    return false;
}

void MapUShortBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortOctet::MapUShortOctet()
{
    // map<unsigned short, octet> m_var_map_ushort_octet


    // Just to register all known types
    registermapsTypes();
}

MapUShortOctet::~MapUShortOctet()
{
}

MapUShortOctet::MapUShortOctet(
        const MapUShortOctet& x)
{
    m_var_map_ushort_octet = x.m_var_map_ushort_octet;
}

MapUShortOctet::MapUShortOctet(
        MapUShortOctet&& x) noexcept 
{
    m_var_map_ushort_octet = std::move(x.m_var_map_ushort_octet);
}

MapUShortOctet& MapUShortOctet::operator =(
        const MapUShortOctet& x)
{

    m_var_map_ushort_octet = x.m_var_map_ushort_octet;

    return *this;
}

MapUShortOctet& MapUShortOctet::operator =(
        MapUShortOctet&& x) noexcept
{

    m_var_map_ushort_octet = std::move(x.m_var_map_ushort_octet);

    return *this;
}

bool MapUShortOctet::operator ==(
        const MapUShortOctet& x) const
{

    return (m_var_map_ushort_octet == x.m_var_map_ushort_octet);
}

bool MapUShortOctet::operator !=(
        const MapUShortOctet& x) const
{
    return !(*this == x);
}

size_t MapUShortOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortOctet_max_cdr_typesize;
}

size_t MapUShortOctet::getCdrSerializedSize(
        const MapUShortOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_octet())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapUShortOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_octet.size());
    for (const auto& pair : m_var_map_ushort_octet)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_octet;
}

/*!
 * @brief This function copies the value in member var_map_ushort_octet
 * @param _var_map_ushort_octet New value to be copied in member var_map_ushort_octet
 */
void MapUShortOctet::var_map_ushort_octet(
        const std::map<uint16_t, uint8_t>& _var_map_ushort_octet)
{
    m_var_map_ushort_octet = _var_map_ushort_octet;
}

/*!
 * @brief This function moves the value in member var_map_ushort_octet
 * @param _var_map_ushort_octet New value to be moved in member var_map_ushort_octet
 */
void MapUShortOctet::var_map_ushort_octet(
        std::map<uint16_t, uint8_t>&& _var_map_ushort_octet)
{
    m_var_map_ushort_octet = std::move(_var_map_ushort_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_octet
 * @return Constant reference to member var_map_ushort_octet
 */
const std::map<uint16_t, uint8_t>& MapUShortOctet::var_map_ushort_octet() const
{
    return m_var_map_ushort_octet;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_octet
 * @return Reference to member var_map_ushort_octet
 */
std::map<uint16_t, uint8_t>& MapUShortOctet::var_map_ushort_octet()
{
    return m_var_map_ushort_octet;
}


size_t MapUShortOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortOctet_max_key_cdr_typesize;
}

bool MapUShortOctet::isKeyDefined()
{
    return false;
}

void MapUShortOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortChar::MapUShortChar()
{
    // map<unsigned short, char> m_var_map_ushort_char


    // Just to register all known types
    registermapsTypes();
}

MapUShortChar::~MapUShortChar()
{
}

MapUShortChar::MapUShortChar(
        const MapUShortChar& x)
{
    m_var_map_ushort_char = x.m_var_map_ushort_char;
}

MapUShortChar::MapUShortChar(
        MapUShortChar&& x) noexcept 
{
    m_var_map_ushort_char = std::move(x.m_var_map_ushort_char);
}

MapUShortChar& MapUShortChar::operator =(
        const MapUShortChar& x)
{

    m_var_map_ushort_char = x.m_var_map_ushort_char;

    return *this;
}

MapUShortChar& MapUShortChar::operator =(
        MapUShortChar&& x) noexcept
{

    m_var_map_ushort_char = std::move(x.m_var_map_ushort_char);

    return *this;
}

bool MapUShortChar::operator ==(
        const MapUShortChar& x) const
{

    return (m_var_map_ushort_char == x.m_var_map_ushort_char);
}

bool MapUShortChar::operator !=(
        const MapUShortChar& x) const
{
    return !(*this == x);
}

size_t MapUShortChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortChar_max_cdr_typesize;
}

size_t MapUShortChar::getCdrSerializedSize(
        const MapUShortChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_char())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapUShortChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_char.size());
    for (const auto& pair : m_var_map_ushort_char)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_char;
}

/*!
 * @brief This function copies the value in member var_map_ushort_char
 * @param _var_map_ushort_char New value to be copied in member var_map_ushort_char
 */
void MapUShortChar::var_map_ushort_char(
        const std::map<uint16_t, char>& _var_map_ushort_char)
{
    m_var_map_ushort_char = _var_map_ushort_char;
}

/*!
 * @brief This function moves the value in member var_map_ushort_char
 * @param _var_map_ushort_char New value to be moved in member var_map_ushort_char
 */
void MapUShortChar::var_map_ushort_char(
        std::map<uint16_t, char>&& _var_map_ushort_char)
{
    m_var_map_ushort_char = std::move(_var_map_ushort_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_char
 * @return Constant reference to member var_map_ushort_char
 */
const std::map<uint16_t, char>& MapUShortChar::var_map_ushort_char() const
{
    return m_var_map_ushort_char;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_char
 * @return Reference to member var_map_ushort_char
 */
std::map<uint16_t, char>& MapUShortChar::var_map_ushort_char()
{
    return m_var_map_ushort_char;
}


size_t MapUShortChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortChar_max_key_cdr_typesize;
}

bool MapUShortChar::isKeyDefined()
{
    return false;
}

void MapUShortChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortWChar::MapUShortWChar()
{
    // map<unsigned short, wchar> m_var_map_ushort_wchar


    // Just to register all known types
    registermapsTypes();
}

MapUShortWChar::~MapUShortWChar()
{
}

MapUShortWChar::MapUShortWChar(
        const MapUShortWChar& x)
{
    m_var_map_ushort_wchar = x.m_var_map_ushort_wchar;
}

MapUShortWChar::MapUShortWChar(
        MapUShortWChar&& x) noexcept 
{
    m_var_map_ushort_wchar = std::move(x.m_var_map_ushort_wchar);
}

MapUShortWChar& MapUShortWChar::operator =(
        const MapUShortWChar& x)
{

    m_var_map_ushort_wchar = x.m_var_map_ushort_wchar;

    return *this;
}

MapUShortWChar& MapUShortWChar::operator =(
        MapUShortWChar&& x) noexcept
{

    m_var_map_ushort_wchar = std::move(x.m_var_map_ushort_wchar);

    return *this;
}

bool MapUShortWChar::operator ==(
        const MapUShortWChar& x) const
{

    return (m_var_map_ushort_wchar == x.m_var_map_ushort_wchar);
}

bool MapUShortWChar::operator !=(
        const MapUShortWChar& x) const
{
    return !(*this == x);
}

size_t MapUShortWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortWChar_max_cdr_typesize;
}

size_t MapUShortWChar::getCdrSerializedSize(
        const MapUShortWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_wchar())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapUShortWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_wchar.size());
    for (const auto& pair : m_var_map_ushort_wchar)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_wchar;
}

/*!
 * @brief This function copies the value in member var_map_ushort_wchar
 * @param _var_map_ushort_wchar New value to be copied in member var_map_ushort_wchar
 */
void MapUShortWChar::var_map_ushort_wchar(
        const std::map<uint16_t, wchar_t>& _var_map_ushort_wchar)
{
    m_var_map_ushort_wchar = _var_map_ushort_wchar;
}

/*!
 * @brief This function moves the value in member var_map_ushort_wchar
 * @param _var_map_ushort_wchar New value to be moved in member var_map_ushort_wchar
 */
void MapUShortWChar::var_map_ushort_wchar(
        std::map<uint16_t, wchar_t>&& _var_map_ushort_wchar)
{
    m_var_map_ushort_wchar = std::move(_var_map_ushort_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_wchar
 * @return Constant reference to member var_map_ushort_wchar
 */
const std::map<uint16_t, wchar_t>& MapUShortWChar::var_map_ushort_wchar() const
{
    return m_var_map_ushort_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_wchar
 * @return Reference to member var_map_ushort_wchar
 */
std::map<uint16_t, wchar_t>& MapUShortWChar::var_map_ushort_wchar()
{
    return m_var_map_ushort_wchar;
}


size_t MapUShortWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortWChar_max_key_cdr_typesize;
}

bool MapUShortWChar::isKeyDefined()
{
    return false;
}

void MapUShortWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortString::MapUShortString()
{
    // map<unsigned short, string> m_var_map_ushort_string


    // Just to register all known types
    registermapsTypes();
}

MapUShortString::~MapUShortString()
{
}

MapUShortString::MapUShortString(
        const MapUShortString& x)
{
    m_var_map_ushort_string = x.m_var_map_ushort_string;
}

MapUShortString::MapUShortString(
        MapUShortString&& x) noexcept 
{
    m_var_map_ushort_string = std::move(x.m_var_map_ushort_string);
}

MapUShortString& MapUShortString::operator =(
        const MapUShortString& x)
{

    m_var_map_ushort_string = x.m_var_map_ushort_string;

    return *this;
}

MapUShortString& MapUShortString::operator =(
        MapUShortString&& x) noexcept
{

    m_var_map_ushort_string = std::move(x.m_var_map_ushort_string);

    return *this;
}

bool MapUShortString::operator ==(
        const MapUShortString& x) const
{

    return (m_var_map_ushort_string == x.m_var_map_ushort_string);
}

bool MapUShortString::operator !=(
        const MapUShortString& x) const
{
    return !(*this == x);
}

size_t MapUShortString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortString_max_cdr_typesize;
}

size_t MapUShortString::getCdrSerializedSize(
        const MapUShortString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_string())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapUShortString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_string.size());
    for (const auto& pair : m_var_map_ushort_string)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapUShortString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ushort_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint16_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_ushort_string[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_ushort_string
 * @param _var_map_ushort_string New value to be copied in member var_map_ushort_string
 */
void MapUShortString::var_map_ushort_string(
        const std::map<uint16_t, std::string>& _var_map_ushort_string)
{
    m_var_map_ushort_string = _var_map_ushort_string;
}

/*!
 * @brief This function moves the value in member var_map_ushort_string
 * @param _var_map_ushort_string New value to be moved in member var_map_ushort_string
 */
void MapUShortString::var_map_ushort_string(
        std::map<uint16_t, std::string>&& _var_map_ushort_string)
{
    m_var_map_ushort_string = std::move(_var_map_ushort_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_string
 * @return Constant reference to member var_map_ushort_string
 */
const std::map<uint16_t, std::string>& MapUShortString::var_map_ushort_string() const
{
    return m_var_map_ushort_string;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_string
 * @return Reference to member var_map_ushort_string
 */
std::map<uint16_t, std::string>& MapUShortString::var_map_ushort_string()
{
    return m_var_map_ushort_string;
}


size_t MapUShortString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortString_max_key_cdr_typesize;
}

bool MapUShortString::isKeyDefined()
{
    return false;
}

void MapUShortString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortWString::MapUShortWString()
{
    // map<unsigned short, wstring> m_var_map_ushort_wstring


    // Just to register all known types
    registermapsTypes();
}

MapUShortWString::~MapUShortWString()
{
}

MapUShortWString::MapUShortWString(
        const MapUShortWString& x)
{
    m_var_map_ushort_wstring = x.m_var_map_ushort_wstring;
}

MapUShortWString::MapUShortWString(
        MapUShortWString&& x) noexcept 
{
    m_var_map_ushort_wstring = std::move(x.m_var_map_ushort_wstring);
}

MapUShortWString& MapUShortWString::operator =(
        const MapUShortWString& x)
{

    m_var_map_ushort_wstring = x.m_var_map_ushort_wstring;

    return *this;
}

MapUShortWString& MapUShortWString::operator =(
        MapUShortWString&& x) noexcept
{

    m_var_map_ushort_wstring = std::move(x.m_var_map_ushort_wstring);

    return *this;
}

bool MapUShortWString::operator ==(
        const MapUShortWString& x) const
{

    return (m_var_map_ushort_wstring == x.m_var_map_ushort_wstring);
}

bool MapUShortWString::operator !=(
        const MapUShortWString& x) const
{
    return !(*this == x);
}

size_t MapUShortWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortWString_max_cdr_typesize;
}

size_t MapUShortWString::getCdrSerializedSize(
        const MapUShortWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_wstring())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapUShortWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_wstring.size());
    for (const auto& pair : m_var_map_ushort_wstring)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapUShortWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ushort_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint16_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_ushort_wstring[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_ushort_wstring
 * @param _var_map_ushort_wstring New value to be copied in member var_map_ushort_wstring
 */
void MapUShortWString::var_map_ushort_wstring(
        const std::map<uint16_t, std::wstring>& _var_map_ushort_wstring)
{
    m_var_map_ushort_wstring = _var_map_ushort_wstring;
}

/*!
 * @brief This function moves the value in member var_map_ushort_wstring
 * @param _var_map_ushort_wstring New value to be moved in member var_map_ushort_wstring
 */
void MapUShortWString::var_map_ushort_wstring(
        std::map<uint16_t, std::wstring>&& _var_map_ushort_wstring)
{
    m_var_map_ushort_wstring = std::move(_var_map_ushort_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_wstring
 * @return Constant reference to member var_map_ushort_wstring
 */
const std::map<uint16_t, std::wstring>& MapUShortWString::var_map_ushort_wstring() const
{
    return m_var_map_ushort_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_wstring
 * @return Reference to member var_map_ushort_wstring
 */
std::map<uint16_t, std::wstring>& MapUShortWString::var_map_ushort_wstring()
{
    return m_var_map_ushort_wstring;
}


size_t MapUShortWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortWString_max_key_cdr_typesize;
}

bool MapUShortWString::isKeyDefined()
{
    return false;
}

void MapUShortWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerAliasBoundedStringHelper::MapUShortInnerAliasBoundedStringHelper()
{
    // map<unsigned short, Inner_alias_bounded_string_helper> m_var_map_ushort_inneraliasboundedstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerAliasBoundedStringHelper::~MapUShortInnerAliasBoundedStringHelper()
{
}

MapUShortInnerAliasBoundedStringHelper::MapUShortInnerAliasBoundedStringHelper(
        const MapUShortInnerAliasBoundedStringHelper& x)
{
    m_var_map_ushort_inneraliasboundedstringhelper = x.m_var_map_ushort_inneraliasboundedstringhelper;
}

MapUShortInnerAliasBoundedStringHelper::MapUShortInnerAliasBoundedStringHelper(
        MapUShortInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_ushort_inneraliasboundedstringhelper = std::move(x.m_var_map_ushort_inneraliasboundedstringhelper);
}

MapUShortInnerAliasBoundedStringHelper& MapUShortInnerAliasBoundedStringHelper::operator =(
        const MapUShortInnerAliasBoundedStringHelper& x)
{

    m_var_map_ushort_inneraliasboundedstringhelper = x.m_var_map_ushort_inneraliasboundedstringhelper;

    return *this;
}

MapUShortInnerAliasBoundedStringHelper& MapUShortInnerAliasBoundedStringHelper::operator =(
        MapUShortInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_ushort_inneraliasboundedstringhelper = std::move(x.m_var_map_ushort_inneraliasboundedstringhelper);

    return *this;
}

bool MapUShortInnerAliasBoundedStringHelper::operator ==(
        const MapUShortInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_ushort_inneraliasboundedstringhelper == x.m_var_map_ushort_inneraliasboundedstringhelper);
}

bool MapUShortInnerAliasBoundedStringHelper::operator !=(
        const MapUShortInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapUShortInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapUShortInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_inneraliasboundedstringhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_inneraliasboundedstringhelper.size());
    for (const auto& pair : m_var_map_ushort_inneraliasboundedstringhelper)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapUShortInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ushort_inneraliasboundedstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint16_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_ushort_inneraliasboundedstringhelper[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_ushort_inneraliasboundedstringhelper
 * @param _var_map_ushort_inneraliasboundedstringhelper New value to be copied in member var_map_ushort_inneraliasboundedstringhelper
 */
void MapUShortInnerAliasBoundedStringHelper::var_map_ushort_inneraliasboundedstringhelper(
        const std::map<uint16_t, Inner_alias_bounded_string_helper>& _var_map_ushort_inneraliasboundedstringhelper)
{
    m_var_map_ushort_inneraliasboundedstringhelper = _var_map_ushort_inneraliasboundedstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_inneraliasboundedstringhelper
 * @param _var_map_ushort_inneraliasboundedstringhelper New value to be moved in member var_map_ushort_inneraliasboundedstringhelper
 */
void MapUShortInnerAliasBoundedStringHelper::var_map_ushort_inneraliasboundedstringhelper(
        std::map<uint16_t, Inner_alias_bounded_string_helper>&& _var_map_ushort_inneraliasboundedstringhelper)
{
    m_var_map_ushort_inneraliasboundedstringhelper = std::move(_var_map_ushort_inneraliasboundedstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_inneraliasboundedstringhelper
 * @return Constant reference to member var_map_ushort_inneraliasboundedstringhelper
 */
const std::map<uint16_t, Inner_alias_bounded_string_helper>& MapUShortInnerAliasBoundedStringHelper::var_map_ushort_inneraliasboundedstringhelper() const
{
    return m_var_map_ushort_inneraliasboundedstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_inneraliasboundedstringhelper
 * @return Reference to member var_map_ushort_inneraliasboundedstringhelper
 */
std::map<uint16_t, Inner_alias_bounded_string_helper>& MapUShortInnerAliasBoundedStringHelper::var_map_ushort_inneraliasboundedstringhelper()
{
    return m_var_map_ushort_inneraliasboundedstringhelper;
}


size_t MapUShortInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapUShortInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerAliasBoundedWStringHelper::MapUShortInnerAliasBoundedWStringHelper()
{
    // map<unsigned short, Inner_alias_bounded_wstring_helper> m_var_map_ushort_inneraliasboundedwstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerAliasBoundedWStringHelper::~MapUShortInnerAliasBoundedWStringHelper()
{
}

MapUShortInnerAliasBoundedWStringHelper::MapUShortInnerAliasBoundedWStringHelper(
        const MapUShortInnerAliasBoundedWStringHelper& x)
{
    m_var_map_ushort_inneraliasboundedwstringhelper = x.m_var_map_ushort_inneraliasboundedwstringhelper;
}

MapUShortInnerAliasBoundedWStringHelper::MapUShortInnerAliasBoundedWStringHelper(
        MapUShortInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_ushort_inneraliasboundedwstringhelper = std::move(x.m_var_map_ushort_inneraliasboundedwstringhelper);
}

MapUShortInnerAliasBoundedWStringHelper& MapUShortInnerAliasBoundedWStringHelper::operator =(
        const MapUShortInnerAliasBoundedWStringHelper& x)
{

    m_var_map_ushort_inneraliasboundedwstringhelper = x.m_var_map_ushort_inneraliasboundedwstringhelper;

    return *this;
}

MapUShortInnerAliasBoundedWStringHelper& MapUShortInnerAliasBoundedWStringHelper::operator =(
        MapUShortInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_ushort_inneraliasboundedwstringhelper = std::move(x.m_var_map_ushort_inneraliasboundedwstringhelper);

    return *this;
}

bool MapUShortInnerAliasBoundedWStringHelper::operator ==(
        const MapUShortInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_ushort_inneraliasboundedwstringhelper == x.m_var_map_ushort_inneraliasboundedwstringhelper);
}

bool MapUShortInnerAliasBoundedWStringHelper::operator !=(
        const MapUShortInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapUShortInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapUShortInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_inneraliasboundedwstringhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_inneraliasboundedwstringhelper.size());
    for (const auto& pair : m_var_map_ushort_inneraliasboundedwstringhelper)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapUShortInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ushort_inneraliasboundedwstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint16_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_ushort_inneraliasboundedwstringhelper[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_ushort_inneraliasboundedwstringhelper
 * @param _var_map_ushort_inneraliasboundedwstringhelper New value to be copied in member var_map_ushort_inneraliasboundedwstringhelper
 */
void MapUShortInnerAliasBoundedWStringHelper::var_map_ushort_inneraliasboundedwstringhelper(
        const std::map<uint16_t, Inner_alias_bounded_wstring_helper>& _var_map_ushort_inneraliasboundedwstringhelper)
{
    m_var_map_ushort_inneraliasboundedwstringhelper = _var_map_ushort_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_inneraliasboundedwstringhelper
 * @param _var_map_ushort_inneraliasboundedwstringhelper New value to be moved in member var_map_ushort_inneraliasboundedwstringhelper
 */
void MapUShortInnerAliasBoundedWStringHelper::var_map_ushort_inneraliasboundedwstringhelper(
        std::map<uint16_t, Inner_alias_bounded_wstring_helper>&& _var_map_ushort_inneraliasboundedwstringhelper)
{
    m_var_map_ushort_inneraliasboundedwstringhelper = std::move(_var_map_ushort_inneraliasboundedwstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_inneraliasboundedwstringhelper
 * @return Constant reference to member var_map_ushort_inneraliasboundedwstringhelper
 */
const std::map<uint16_t, Inner_alias_bounded_wstring_helper>& MapUShortInnerAliasBoundedWStringHelper::var_map_ushort_inneraliasboundedwstringhelper() const
{
    return m_var_map_ushort_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_inneraliasboundedwstringhelper
 * @return Reference to member var_map_ushort_inneraliasboundedwstringhelper
 */
std::map<uint16_t, Inner_alias_bounded_wstring_helper>& MapUShortInnerAliasBoundedWStringHelper::var_map_ushort_inneraliasboundedwstringhelper()
{
    return m_var_map_ushort_inneraliasboundedwstringhelper;
}


size_t MapUShortInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapUShortInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerEnumHelper::MapUShortInnerEnumHelper()
{
    // map<unsigned short, InnerEnumHelper> m_var_map_ushort_innerenumhelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerEnumHelper::~MapUShortInnerEnumHelper()
{
}

MapUShortInnerEnumHelper::MapUShortInnerEnumHelper(
        const MapUShortInnerEnumHelper& x)
{
    m_var_map_ushort_innerenumhelper = x.m_var_map_ushort_innerenumhelper;
}

MapUShortInnerEnumHelper::MapUShortInnerEnumHelper(
        MapUShortInnerEnumHelper&& x) noexcept 
{
    m_var_map_ushort_innerenumhelper = std::move(x.m_var_map_ushort_innerenumhelper);
}

MapUShortInnerEnumHelper& MapUShortInnerEnumHelper::operator =(
        const MapUShortInnerEnumHelper& x)
{

    m_var_map_ushort_innerenumhelper = x.m_var_map_ushort_innerenumhelper;

    return *this;
}

MapUShortInnerEnumHelper& MapUShortInnerEnumHelper::operator =(
        MapUShortInnerEnumHelper&& x) noexcept
{

    m_var_map_ushort_innerenumhelper = std::move(x.m_var_map_ushort_innerenumhelper);

    return *this;
}

bool MapUShortInnerEnumHelper::operator ==(
        const MapUShortInnerEnumHelper& x) const
{

    return (m_var_map_ushort_innerenumhelper == x.m_var_map_ushort_innerenumhelper);
}

bool MapUShortInnerEnumHelper::operator !=(
        const MapUShortInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerEnumHelper_max_cdr_typesize;
}

size_t MapUShortInnerEnumHelper::getCdrSerializedSize(
        const MapUShortInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_innerenumhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_innerenumhelper.size());
    for (const auto& pair : m_var_map_ushort_innerenumhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapUShortInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ushort_innerenumhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        uint16_t key;
        dcdr >> key;

        uint32_t value;
        dcdr >> value;
        m_var_map_ushort_innerenumhelper[key] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_ushort_innerenumhelper
 * @param _var_map_ushort_innerenumhelper New value to be copied in member var_map_ushort_innerenumhelper
 */
void MapUShortInnerEnumHelper::var_map_ushort_innerenumhelper(
        const std::map<uint16_t, InnerEnumHelper>& _var_map_ushort_innerenumhelper)
{
    m_var_map_ushort_innerenumhelper = _var_map_ushort_innerenumhelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_innerenumhelper
 * @param _var_map_ushort_innerenumhelper New value to be moved in member var_map_ushort_innerenumhelper
 */
void MapUShortInnerEnumHelper::var_map_ushort_innerenumhelper(
        std::map<uint16_t, InnerEnumHelper>&& _var_map_ushort_innerenumhelper)
{
    m_var_map_ushort_innerenumhelper = std::move(_var_map_ushort_innerenumhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_innerenumhelper
 * @return Constant reference to member var_map_ushort_innerenumhelper
 */
const std::map<uint16_t, InnerEnumHelper>& MapUShortInnerEnumHelper::var_map_ushort_innerenumhelper() const
{
    return m_var_map_ushort_innerenumhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_innerenumhelper
 * @return Reference to member var_map_ushort_innerenumhelper
 */
std::map<uint16_t, InnerEnumHelper>& MapUShortInnerEnumHelper::var_map_ushort_innerenumhelper()
{
    return m_var_map_ushort_innerenumhelper;
}


size_t MapUShortInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerEnumHelper_max_key_cdr_typesize;
}

bool MapUShortInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerBitMaskHelper::MapUShortInnerBitMaskHelper()
{
    // map<unsigned short, InnerBitMaskHelper> m_var_map_ushort_innerbitmaskhelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerBitMaskHelper::~MapUShortInnerBitMaskHelper()
{
}

MapUShortInnerBitMaskHelper::MapUShortInnerBitMaskHelper(
        const MapUShortInnerBitMaskHelper& x)
{
    m_var_map_ushort_innerbitmaskhelper = x.m_var_map_ushort_innerbitmaskhelper;
}

MapUShortInnerBitMaskHelper::MapUShortInnerBitMaskHelper(
        MapUShortInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_ushort_innerbitmaskhelper = std::move(x.m_var_map_ushort_innerbitmaskhelper);
}

MapUShortInnerBitMaskHelper& MapUShortInnerBitMaskHelper::operator =(
        const MapUShortInnerBitMaskHelper& x)
{

    m_var_map_ushort_innerbitmaskhelper = x.m_var_map_ushort_innerbitmaskhelper;

    return *this;
}

MapUShortInnerBitMaskHelper& MapUShortInnerBitMaskHelper::operator =(
        MapUShortInnerBitMaskHelper&& x) noexcept
{

    m_var_map_ushort_innerbitmaskhelper = std::move(x.m_var_map_ushort_innerbitmaskhelper);

    return *this;
}

bool MapUShortInnerBitMaskHelper::operator ==(
        const MapUShortInnerBitMaskHelper& x) const
{

    return (m_var_map_ushort_innerbitmaskhelper == x.m_var_map_ushort_innerbitmaskhelper);
}

bool MapUShortInnerBitMaskHelper::operator !=(
        const MapUShortInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapUShortInnerBitMaskHelper::getCdrSerializedSize(
        const MapUShortInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_innerbitmaskhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_innerbitmaskhelper.size());
    for (const auto& pair : m_var_map_ushort_innerbitmaskhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapUShortInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ushort_innerbitmaskhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        uint16_t key;
        dcdr >> key;

        uint32_t value;        
        dcdr >> value;        
        m_var_map_ushort_innerbitmaskhelper[key] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_ushort_innerbitmaskhelper
 * @param _var_map_ushort_innerbitmaskhelper New value to be copied in member var_map_ushort_innerbitmaskhelper
 */
void MapUShortInnerBitMaskHelper::var_map_ushort_innerbitmaskhelper(
        const std::map<uint16_t, InnerBitMaskHelper>& _var_map_ushort_innerbitmaskhelper)
{
    m_var_map_ushort_innerbitmaskhelper = _var_map_ushort_innerbitmaskhelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_innerbitmaskhelper
 * @param _var_map_ushort_innerbitmaskhelper New value to be moved in member var_map_ushort_innerbitmaskhelper
 */
void MapUShortInnerBitMaskHelper::var_map_ushort_innerbitmaskhelper(
        std::map<uint16_t, InnerBitMaskHelper>&& _var_map_ushort_innerbitmaskhelper)
{
    m_var_map_ushort_innerbitmaskhelper = std::move(_var_map_ushort_innerbitmaskhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_innerbitmaskhelper
 * @return Constant reference to member var_map_ushort_innerbitmaskhelper
 */
const std::map<uint16_t, InnerBitMaskHelper>& MapUShortInnerBitMaskHelper::var_map_ushort_innerbitmaskhelper() const
{
    return m_var_map_ushort_innerbitmaskhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_innerbitmaskhelper
 * @return Reference to member var_map_ushort_innerbitmaskhelper
 */
std::map<uint16_t, InnerBitMaskHelper>& MapUShortInnerBitMaskHelper::var_map_ushort_innerbitmaskhelper()
{
    return m_var_map_ushort_innerbitmaskhelper;
}


size_t MapUShortInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapUShortInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerAliasHelper::MapUShortInnerAliasHelper()
{
    // map<unsigned short, InnerAliasHelper> m_var_map_ushort_inneraliashelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerAliasHelper::~MapUShortInnerAliasHelper()
{
}

MapUShortInnerAliasHelper::MapUShortInnerAliasHelper(
        const MapUShortInnerAliasHelper& x)
{
    m_var_map_ushort_inneraliashelper = x.m_var_map_ushort_inneraliashelper;
}

MapUShortInnerAliasHelper::MapUShortInnerAliasHelper(
        MapUShortInnerAliasHelper&& x) noexcept 
{
    m_var_map_ushort_inneraliashelper = std::move(x.m_var_map_ushort_inneraliashelper);
}

MapUShortInnerAliasHelper& MapUShortInnerAliasHelper::operator =(
        const MapUShortInnerAliasHelper& x)
{

    m_var_map_ushort_inneraliashelper = x.m_var_map_ushort_inneraliashelper;

    return *this;
}

MapUShortInnerAliasHelper& MapUShortInnerAliasHelper::operator =(
        MapUShortInnerAliasHelper&& x) noexcept
{

    m_var_map_ushort_inneraliashelper = std::move(x.m_var_map_ushort_inneraliashelper);

    return *this;
}

bool MapUShortInnerAliasHelper::operator ==(
        const MapUShortInnerAliasHelper& x) const
{

    return (m_var_map_ushort_inneraliashelper == x.m_var_map_ushort_inneraliashelper);
}

bool MapUShortInnerAliasHelper::operator !=(
        const MapUShortInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasHelper_max_cdr_typesize;
}

size_t MapUShortInnerAliasHelper::getCdrSerializedSize(
        const MapUShortInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_inneraliashelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_inneraliashelper.size());
    for (const auto& pair : m_var_map_ushort_inneraliashelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_inneraliashelper;
}

/*!
 * @brief This function copies the value in member var_map_ushort_inneraliashelper
 * @param _var_map_ushort_inneraliashelper New value to be copied in member var_map_ushort_inneraliashelper
 */
void MapUShortInnerAliasHelper::var_map_ushort_inneraliashelper(
        const std::map<uint16_t, InnerAliasHelper>& _var_map_ushort_inneraliashelper)
{
    m_var_map_ushort_inneraliashelper = _var_map_ushort_inneraliashelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_inneraliashelper
 * @param _var_map_ushort_inneraliashelper New value to be moved in member var_map_ushort_inneraliashelper
 */
void MapUShortInnerAliasHelper::var_map_ushort_inneraliashelper(
        std::map<uint16_t, InnerAliasHelper>&& _var_map_ushort_inneraliashelper)
{
    m_var_map_ushort_inneraliashelper = std::move(_var_map_ushort_inneraliashelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_inneraliashelper
 * @return Constant reference to member var_map_ushort_inneraliashelper
 */
const std::map<uint16_t, InnerAliasHelper>& MapUShortInnerAliasHelper::var_map_ushort_inneraliashelper() const
{
    return m_var_map_ushort_inneraliashelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_inneraliashelper
 * @return Reference to member var_map_ushort_inneraliashelper
 */
std::map<uint16_t, InnerAliasHelper>& MapUShortInnerAliasHelper::var_map_ushort_inneraliashelper()
{
    return m_var_map_ushort_inneraliashelper;
}


size_t MapUShortInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasHelper_max_key_cdr_typesize;
}

bool MapUShortInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerAliasArrayHelper::MapUShortInnerAliasArrayHelper()
{
    // map<unsigned short, Inner_alias_array_helper> m_var_map_ushort_inneraliasarrayhelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerAliasArrayHelper::~MapUShortInnerAliasArrayHelper()
{
}

MapUShortInnerAliasArrayHelper::MapUShortInnerAliasArrayHelper(
        const MapUShortInnerAliasArrayHelper& x)
{
    m_var_map_ushort_inneraliasarrayhelper = x.m_var_map_ushort_inneraliasarrayhelper;
}

MapUShortInnerAliasArrayHelper::MapUShortInnerAliasArrayHelper(
        MapUShortInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_ushort_inneraliasarrayhelper = std::move(x.m_var_map_ushort_inneraliasarrayhelper);
}

MapUShortInnerAliasArrayHelper& MapUShortInnerAliasArrayHelper::operator =(
        const MapUShortInnerAliasArrayHelper& x)
{

    m_var_map_ushort_inneraliasarrayhelper = x.m_var_map_ushort_inneraliasarrayhelper;

    return *this;
}

MapUShortInnerAliasArrayHelper& MapUShortInnerAliasArrayHelper::operator =(
        MapUShortInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_ushort_inneraliasarrayhelper = std::move(x.m_var_map_ushort_inneraliasarrayhelper);

    return *this;
}

bool MapUShortInnerAliasArrayHelper::operator ==(
        const MapUShortInnerAliasArrayHelper& x) const
{

    return (m_var_map_ushort_inneraliasarrayhelper == x.m_var_map_ushort_inneraliasarrayhelper);
}

bool MapUShortInnerAliasArrayHelper::operator !=(
        const MapUShortInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapUShortInnerAliasArrayHelper::getCdrSerializedSize(
        const MapUShortInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_inneraliasarrayhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_inneraliasarrayhelper.size());
    for (const auto& pair : m_var_map_ushort_inneraliasarrayhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_inneraliasarrayhelper;
}

/*!
 * @brief This function copies the value in member var_map_ushort_inneraliasarrayhelper
 * @param _var_map_ushort_inneraliasarrayhelper New value to be copied in member var_map_ushort_inneraliasarrayhelper
 */
void MapUShortInnerAliasArrayHelper::var_map_ushort_inneraliasarrayhelper(
        const std::map<uint16_t, Inner_alias_array_helper>& _var_map_ushort_inneraliasarrayhelper)
{
    m_var_map_ushort_inneraliasarrayhelper = _var_map_ushort_inneraliasarrayhelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_inneraliasarrayhelper
 * @param _var_map_ushort_inneraliasarrayhelper New value to be moved in member var_map_ushort_inneraliasarrayhelper
 */
void MapUShortInnerAliasArrayHelper::var_map_ushort_inneraliasarrayhelper(
        std::map<uint16_t, Inner_alias_array_helper>&& _var_map_ushort_inneraliasarrayhelper)
{
    m_var_map_ushort_inneraliasarrayhelper = std::move(_var_map_ushort_inneraliasarrayhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_inneraliasarrayhelper
 * @return Constant reference to member var_map_ushort_inneraliasarrayhelper
 */
const std::map<uint16_t, Inner_alias_array_helper>& MapUShortInnerAliasArrayHelper::var_map_ushort_inneraliasarrayhelper() const
{
    return m_var_map_ushort_inneraliasarrayhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_inneraliasarrayhelper
 * @return Reference to member var_map_ushort_inneraliasarrayhelper
 */
std::map<uint16_t, Inner_alias_array_helper>& MapUShortInnerAliasArrayHelper::var_map_ushort_inneraliasarrayhelper()
{
    return m_var_map_ushort_inneraliasarrayhelper;
}


size_t MapUShortInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapUShortInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerAliasSequenceHelper::MapUShortInnerAliasSequenceHelper()
{
    // map<unsigned short, Inner_alias_sequence_helper> m_var_map_ushort_inneraliassequencehelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerAliasSequenceHelper::~MapUShortInnerAliasSequenceHelper()
{
}

MapUShortInnerAliasSequenceHelper::MapUShortInnerAliasSequenceHelper(
        const MapUShortInnerAliasSequenceHelper& x)
{
    m_var_map_ushort_inneraliassequencehelper = x.m_var_map_ushort_inneraliassequencehelper;
}

MapUShortInnerAliasSequenceHelper::MapUShortInnerAliasSequenceHelper(
        MapUShortInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_ushort_inneraliassequencehelper = std::move(x.m_var_map_ushort_inneraliassequencehelper);
}

MapUShortInnerAliasSequenceHelper& MapUShortInnerAliasSequenceHelper::operator =(
        const MapUShortInnerAliasSequenceHelper& x)
{

    m_var_map_ushort_inneraliassequencehelper = x.m_var_map_ushort_inneraliassequencehelper;

    return *this;
}

MapUShortInnerAliasSequenceHelper& MapUShortInnerAliasSequenceHelper::operator =(
        MapUShortInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_ushort_inneraliassequencehelper = std::move(x.m_var_map_ushort_inneraliassequencehelper);

    return *this;
}

bool MapUShortInnerAliasSequenceHelper::operator ==(
        const MapUShortInnerAliasSequenceHelper& x) const
{

    return (m_var_map_ushort_inneraliassequencehelper == x.m_var_map_ushort_inneraliassequencehelper);
}

bool MapUShortInnerAliasSequenceHelper::operator !=(
        const MapUShortInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapUShortInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapUShortInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_inneraliassequencehelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_inneraliassequencehelper.size());
    for (const auto& pair : m_var_map_ushort_inneraliassequencehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_inneraliassequencehelper;
}

/*!
 * @brief This function copies the value in member var_map_ushort_inneraliassequencehelper
 * @param _var_map_ushort_inneraliassequencehelper New value to be copied in member var_map_ushort_inneraliassequencehelper
 */
void MapUShortInnerAliasSequenceHelper::var_map_ushort_inneraliassequencehelper(
        const std::map<uint16_t, Inner_alias_sequence_helper>& _var_map_ushort_inneraliassequencehelper)
{
    m_var_map_ushort_inneraliassequencehelper = _var_map_ushort_inneraliassequencehelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_inneraliassequencehelper
 * @param _var_map_ushort_inneraliassequencehelper New value to be moved in member var_map_ushort_inneraliassequencehelper
 */
void MapUShortInnerAliasSequenceHelper::var_map_ushort_inneraliassequencehelper(
        std::map<uint16_t, Inner_alias_sequence_helper>&& _var_map_ushort_inneraliassequencehelper)
{
    m_var_map_ushort_inneraliassequencehelper = std::move(_var_map_ushort_inneraliassequencehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_inneraliassequencehelper
 * @return Constant reference to member var_map_ushort_inneraliassequencehelper
 */
const std::map<uint16_t, Inner_alias_sequence_helper>& MapUShortInnerAliasSequenceHelper::var_map_ushort_inneraliassequencehelper() const
{
    return m_var_map_ushort_inneraliassequencehelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_inneraliassequencehelper
 * @return Reference to member var_map_ushort_inneraliassequencehelper
 */
std::map<uint16_t, Inner_alias_sequence_helper>& MapUShortInnerAliasSequenceHelper::var_map_ushort_inneraliassequencehelper()
{
    return m_var_map_ushort_inneraliassequencehelper;
}


size_t MapUShortInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapUShortInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerAliasMapHelper::MapUShortInnerAliasMapHelper()
{
    // map<unsigned short, Inner_alias_map_helper> m_var_map_ushort_inneraliasmaphelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerAliasMapHelper::~MapUShortInnerAliasMapHelper()
{
}

MapUShortInnerAliasMapHelper::MapUShortInnerAliasMapHelper(
        const MapUShortInnerAliasMapHelper& x)
{
    m_var_map_ushort_inneraliasmaphelper = x.m_var_map_ushort_inneraliasmaphelper;
}

MapUShortInnerAliasMapHelper::MapUShortInnerAliasMapHelper(
        MapUShortInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_ushort_inneraliasmaphelper = std::move(x.m_var_map_ushort_inneraliasmaphelper);
}

MapUShortInnerAliasMapHelper& MapUShortInnerAliasMapHelper::operator =(
        const MapUShortInnerAliasMapHelper& x)
{

    m_var_map_ushort_inneraliasmaphelper = x.m_var_map_ushort_inneraliasmaphelper;

    return *this;
}

MapUShortInnerAliasMapHelper& MapUShortInnerAliasMapHelper::operator =(
        MapUShortInnerAliasMapHelper&& x) noexcept
{

    m_var_map_ushort_inneraliasmaphelper = std::move(x.m_var_map_ushort_inneraliasmaphelper);

    return *this;
}

bool MapUShortInnerAliasMapHelper::operator ==(
        const MapUShortInnerAliasMapHelper& x) const
{

    return (m_var_map_ushort_inneraliasmaphelper == x.m_var_map_ushort_inneraliasmaphelper);
}

bool MapUShortInnerAliasMapHelper::operator !=(
        const MapUShortInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapUShortInnerAliasMapHelper::getCdrSerializedSize(
        const MapUShortInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_inneraliasmaphelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_inneraliasmaphelper.size());
    for (const auto& pair : m_var_map_ushort_inneraliasmaphelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_inneraliasmaphelper;
}

/*!
 * @brief This function copies the value in member var_map_ushort_inneraliasmaphelper
 * @param _var_map_ushort_inneraliasmaphelper New value to be copied in member var_map_ushort_inneraliasmaphelper
 */
void MapUShortInnerAliasMapHelper::var_map_ushort_inneraliasmaphelper(
        const std::map<uint16_t, Inner_alias_map_helper>& _var_map_ushort_inneraliasmaphelper)
{
    m_var_map_ushort_inneraliasmaphelper = _var_map_ushort_inneraliasmaphelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_inneraliasmaphelper
 * @param _var_map_ushort_inneraliasmaphelper New value to be moved in member var_map_ushort_inneraliasmaphelper
 */
void MapUShortInnerAliasMapHelper::var_map_ushort_inneraliasmaphelper(
        std::map<uint16_t, Inner_alias_map_helper>&& _var_map_ushort_inneraliasmaphelper)
{
    m_var_map_ushort_inneraliasmaphelper = std::move(_var_map_ushort_inneraliasmaphelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_inneraliasmaphelper
 * @return Constant reference to member var_map_ushort_inneraliasmaphelper
 */
const std::map<uint16_t, Inner_alias_map_helper>& MapUShortInnerAliasMapHelper::var_map_ushort_inneraliasmaphelper() const
{
    return m_var_map_ushort_inneraliasmaphelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_inneraliasmaphelper
 * @return Reference to member var_map_ushort_inneraliasmaphelper
 */
std::map<uint16_t, Inner_alias_map_helper>& MapUShortInnerAliasMapHelper::var_map_ushort_inneraliasmaphelper()
{
    return m_var_map_ushort_inneraliasmaphelper;
}


size_t MapUShortInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapUShortInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerUnionHelper::MapUShortInnerUnionHelper()
{
    // map<unsigned short, InnerUnionHelper> m_var_map_ushort_innerunionhelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerUnionHelper::~MapUShortInnerUnionHelper()
{
}

MapUShortInnerUnionHelper::MapUShortInnerUnionHelper(
        const MapUShortInnerUnionHelper& x)
{
    m_var_map_ushort_innerunionhelper = x.m_var_map_ushort_innerunionhelper;
}

MapUShortInnerUnionHelper::MapUShortInnerUnionHelper(
        MapUShortInnerUnionHelper&& x) noexcept 
{
    m_var_map_ushort_innerunionhelper = std::move(x.m_var_map_ushort_innerunionhelper);
}

MapUShortInnerUnionHelper& MapUShortInnerUnionHelper::operator =(
        const MapUShortInnerUnionHelper& x)
{

    m_var_map_ushort_innerunionhelper = x.m_var_map_ushort_innerunionhelper;

    return *this;
}

MapUShortInnerUnionHelper& MapUShortInnerUnionHelper::operator =(
        MapUShortInnerUnionHelper&& x) noexcept
{

    m_var_map_ushort_innerunionhelper = std::move(x.m_var_map_ushort_innerunionhelper);

    return *this;
}

bool MapUShortInnerUnionHelper::operator ==(
        const MapUShortInnerUnionHelper& x) const
{

    return (m_var_map_ushort_innerunionhelper == x.m_var_map_ushort_innerunionhelper);
}

bool MapUShortInnerUnionHelper::operator !=(
        const MapUShortInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerUnionHelper_max_cdr_typesize;
}

size_t MapUShortInnerUnionHelper::getCdrSerializedSize(
        const MapUShortInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_innerunionhelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_innerunionhelper.size());
    for (const auto& pair : m_var_map_ushort_innerunionhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_innerunionhelper;
}

/*!
 * @brief This function copies the value in member var_map_ushort_innerunionhelper
 * @param _var_map_ushort_innerunionhelper New value to be copied in member var_map_ushort_innerunionhelper
 */
void MapUShortInnerUnionHelper::var_map_ushort_innerunionhelper(
        const std::map<uint16_t, InnerUnionHelper>& _var_map_ushort_innerunionhelper)
{
    m_var_map_ushort_innerunionhelper = _var_map_ushort_innerunionhelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_innerunionhelper
 * @param _var_map_ushort_innerunionhelper New value to be moved in member var_map_ushort_innerunionhelper
 */
void MapUShortInnerUnionHelper::var_map_ushort_innerunionhelper(
        std::map<uint16_t, InnerUnionHelper>&& _var_map_ushort_innerunionhelper)
{
    m_var_map_ushort_innerunionhelper = std::move(_var_map_ushort_innerunionhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_innerunionhelper
 * @return Constant reference to member var_map_ushort_innerunionhelper
 */
const std::map<uint16_t, InnerUnionHelper>& MapUShortInnerUnionHelper::var_map_ushort_innerunionhelper() const
{
    return m_var_map_ushort_innerunionhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_innerunionhelper
 * @return Reference to member var_map_ushort_innerunionhelper
 */
std::map<uint16_t, InnerUnionHelper>& MapUShortInnerUnionHelper::var_map_ushort_innerunionhelper()
{
    return m_var_map_ushort_innerunionhelper;
}


size_t MapUShortInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerUnionHelper_max_key_cdr_typesize;
}

bool MapUShortInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerStructureHelper::MapUShortInnerStructureHelper()
{
    // map<unsigned short, InnerStructureHelper> m_var_map_ushort_innerstructurehelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerStructureHelper::~MapUShortInnerStructureHelper()
{
}

MapUShortInnerStructureHelper::MapUShortInnerStructureHelper(
        const MapUShortInnerStructureHelper& x)
{
    m_var_map_ushort_innerstructurehelper = x.m_var_map_ushort_innerstructurehelper;
}

MapUShortInnerStructureHelper::MapUShortInnerStructureHelper(
        MapUShortInnerStructureHelper&& x) noexcept 
{
    m_var_map_ushort_innerstructurehelper = std::move(x.m_var_map_ushort_innerstructurehelper);
}

MapUShortInnerStructureHelper& MapUShortInnerStructureHelper::operator =(
        const MapUShortInnerStructureHelper& x)
{

    m_var_map_ushort_innerstructurehelper = x.m_var_map_ushort_innerstructurehelper;

    return *this;
}

MapUShortInnerStructureHelper& MapUShortInnerStructureHelper::operator =(
        MapUShortInnerStructureHelper&& x) noexcept
{

    m_var_map_ushort_innerstructurehelper = std::move(x.m_var_map_ushort_innerstructurehelper);

    return *this;
}

bool MapUShortInnerStructureHelper::operator ==(
        const MapUShortInnerStructureHelper& x) const
{

    return (m_var_map_ushort_innerstructurehelper == x.m_var_map_ushort_innerstructurehelper);
}

bool MapUShortInnerStructureHelper::operator !=(
        const MapUShortInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerStructureHelper_max_cdr_typesize;
}

size_t MapUShortInnerStructureHelper::getCdrSerializedSize(
        const MapUShortInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_innerstructurehelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_innerstructurehelper.size());
    for (const auto& pair : m_var_map_ushort_innerstructurehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_innerstructurehelper;
}

/*!
 * @brief This function copies the value in member var_map_ushort_innerstructurehelper
 * @param _var_map_ushort_innerstructurehelper New value to be copied in member var_map_ushort_innerstructurehelper
 */
void MapUShortInnerStructureHelper::var_map_ushort_innerstructurehelper(
        const std::map<uint16_t, InnerStructureHelper>& _var_map_ushort_innerstructurehelper)
{
    m_var_map_ushort_innerstructurehelper = _var_map_ushort_innerstructurehelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_innerstructurehelper
 * @param _var_map_ushort_innerstructurehelper New value to be moved in member var_map_ushort_innerstructurehelper
 */
void MapUShortInnerStructureHelper::var_map_ushort_innerstructurehelper(
        std::map<uint16_t, InnerStructureHelper>&& _var_map_ushort_innerstructurehelper)
{
    m_var_map_ushort_innerstructurehelper = std::move(_var_map_ushort_innerstructurehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_innerstructurehelper
 * @return Constant reference to member var_map_ushort_innerstructurehelper
 */
const std::map<uint16_t, InnerStructureHelper>& MapUShortInnerStructureHelper::var_map_ushort_innerstructurehelper() const
{
    return m_var_map_ushort_innerstructurehelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_innerstructurehelper
 * @return Reference to member var_map_ushort_innerstructurehelper
 */
std::map<uint16_t, InnerStructureHelper>& MapUShortInnerStructureHelper::var_map_ushort_innerstructurehelper()
{
    return m_var_map_ushort_innerstructurehelper;
}


size_t MapUShortInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerStructureHelper_max_key_cdr_typesize;
}

bool MapUShortInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapUShortInnerBitsetHelper::MapUShortInnerBitsetHelper()
{
    // map<unsigned short, InnerBitsetHelper> m_var_map_ushort_innerbitsethelper


    // Just to register all known types
    registermapsTypes();
}

MapUShortInnerBitsetHelper::~MapUShortInnerBitsetHelper()
{
}

MapUShortInnerBitsetHelper::MapUShortInnerBitsetHelper(
        const MapUShortInnerBitsetHelper& x)
{
    m_var_map_ushort_innerbitsethelper = x.m_var_map_ushort_innerbitsethelper;
}

MapUShortInnerBitsetHelper::MapUShortInnerBitsetHelper(
        MapUShortInnerBitsetHelper&& x) noexcept 
{
    m_var_map_ushort_innerbitsethelper = std::move(x.m_var_map_ushort_innerbitsethelper);
}

MapUShortInnerBitsetHelper& MapUShortInnerBitsetHelper::operator =(
        const MapUShortInnerBitsetHelper& x)
{

    m_var_map_ushort_innerbitsethelper = x.m_var_map_ushort_innerbitsethelper;

    return *this;
}

MapUShortInnerBitsetHelper& MapUShortInnerBitsetHelper::operator =(
        MapUShortInnerBitsetHelper&& x) noexcept
{

    m_var_map_ushort_innerbitsethelper = std::move(x.m_var_map_ushort_innerbitsethelper);

    return *this;
}

bool MapUShortInnerBitsetHelper::operator ==(
        const MapUShortInnerBitsetHelper& x) const
{

    return (m_var_map_ushort_innerbitsethelper == x.m_var_map_ushort_innerbitsethelper);
}

bool MapUShortInnerBitsetHelper::operator !=(
        const MapUShortInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapUShortInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerBitsetHelper_max_cdr_typesize;
}

size_t MapUShortInnerBitsetHelper::getCdrSerializedSize(
        const MapUShortInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ushort_innerbitsethelper())
    {
        (void)a;

            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapUShortInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ushort_innerbitsethelper.size());
    for (const auto& pair : m_var_map_ushort_innerbitsethelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapUShortInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ushort_innerbitsethelper;
}

/*!
 * @brief This function copies the value in member var_map_ushort_innerbitsethelper
 * @param _var_map_ushort_innerbitsethelper New value to be copied in member var_map_ushort_innerbitsethelper
 */
void MapUShortInnerBitsetHelper::var_map_ushort_innerbitsethelper(
        const std::map<uint16_t, InnerBitsetHelper>& _var_map_ushort_innerbitsethelper)
{
    m_var_map_ushort_innerbitsethelper = _var_map_ushort_innerbitsethelper;
}

/*!
 * @brief This function moves the value in member var_map_ushort_innerbitsethelper
 * @param _var_map_ushort_innerbitsethelper New value to be moved in member var_map_ushort_innerbitsethelper
 */
void MapUShortInnerBitsetHelper::var_map_ushort_innerbitsethelper(
        std::map<uint16_t, InnerBitsetHelper>&& _var_map_ushort_innerbitsethelper)
{
    m_var_map_ushort_innerbitsethelper = std::move(_var_map_ushort_innerbitsethelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ushort_innerbitsethelper
 * @return Constant reference to member var_map_ushort_innerbitsethelper
 */
const std::map<uint16_t, InnerBitsetHelper>& MapUShortInnerBitsetHelper::var_map_ushort_innerbitsethelper() const
{
    return m_var_map_ushort_innerbitsethelper;
}

/*!
 * @brief This function returns a reference to member var_map_ushort_innerbitsethelper
 * @return Reference to member var_map_ushort_innerbitsethelper
 */
std::map<uint16_t, InnerBitsetHelper>& MapUShortInnerBitsetHelper::var_map_ushort_innerbitsethelper()
{
    return m_var_map_ushort_innerbitsethelper;
}


size_t MapUShortInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapUShortInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapUShortInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapUShortInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongShort::MapLongShort()
{
    // map<long, short> m_var_map_long_short


    // Just to register all known types
    registermapsTypes();
}

MapLongShort::~MapLongShort()
{
}

MapLongShort::MapLongShort(
        const MapLongShort& x)
{
    m_var_map_long_short = x.m_var_map_long_short;
}

MapLongShort::MapLongShort(
        MapLongShort&& x) noexcept 
{
    m_var_map_long_short = std::move(x.m_var_map_long_short);
}

MapLongShort& MapLongShort::operator =(
        const MapLongShort& x)
{

    m_var_map_long_short = x.m_var_map_long_short;

    return *this;
}

MapLongShort& MapLongShort::operator =(
        MapLongShort&& x) noexcept
{

    m_var_map_long_short = std::move(x.m_var_map_long_short);

    return *this;
}

bool MapLongShort::operator ==(
        const MapLongShort& x) const
{

    return (m_var_map_long_short == x.m_var_map_long_short);
}

bool MapLongShort::operator !=(
        const MapLongShort& x) const
{
    return !(*this == x);
}

size_t MapLongShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongShort_max_cdr_typesize;
}

size_t MapLongShort::getCdrSerializedSize(
        const MapLongShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_short())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapLongShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_short.size());
    for (const auto& pair : m_var_map_long_short)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_short;
}

/*!
 * @brief This function copies the value in member var_map_long_short
 * @param _var_map_long_short New value to be copied in member var_map_long_short
 */
void MapLongShort::var_map_long_short(
        const std::map<int32_t, int16_t>& _var_map_long_short)
{
    m_var_map_long_short = _var_map_long_short;
}

/*!
 * @brief This function moves the value in member var_map_long_short
 * @param _var_map_long_short New value to be moved in member var_map_long_short
 */
void MapLongShort::var_map_long_short(
        std::map<int32_t, int16_t>&& _var_map_long_short)
{
    m_var_map_long_short = std::move(_var_map_long_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_short
 * @return Constant reference to member var_map_long_short
 */
const std::map<int32_t, int16_t>& MapLongShort::var_map_long_short() const
{
    return m_var_map_long_short;
}

/*!
 * @brief This function returns a reference to member var_map_long_short
 * @return Reference to member var_map_long_short
 */
std::map<int32_t, int16_t>& MapLongShort::var_map_long_short()
{
    return m_var_map_long_short;
}


size_t MapLongShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongShort_max_key_cdr_typesize;
}

bool MapLongShort::isKeyDefined()
{
    return false;
}

void MapLongShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongUShort::MapLongUShort()
{
    // map<long, unsigned short> m_var_map_long_ushort


    // Just to register all known types
    registermapsTypes();
}

MapLongUShort::~MapLongUShort()
{
}

MapLongUShort::MapLongUShort(
        const MapLongUShort& x)
{
    m_var_map_long_ushort = x.m_var_map_long_ushort;
}

MapLongUShort::MapLongUShort(
        MapLongUShort&& x) noexcept 
{
    m_var_map_long_ushort = std::move(x.m_var_map_long_ushort);
}

MapLongUShort& MapLongUShort::operator =(
        const MapLongUShort& x)
{

    m_var_map_long_ushort = x.m_var_map_long_ushort;

    return *this;
}

MapLongUShort& MapLongUShort::operator =(
        MapLongUShort&& x) noexcept
{

    m_var_map_long_ushort = std::move(x.m_var_map_long_ushort);

    return *this;
}

bool MapLongUShort::operator ==(
        const MapLongUShort& x) const
{

    return (m_var_map_long_ushort == x.m_var_map_long_ushort);
}

bool MapLongUShort::operator !=(
        const MapLongUShort& x) const
{
    return !(*this == x);
}

size_t MapLongUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongUShort_max_cdr_typesize;
}

size_t MapLongUShort::getCdrSerializedSize(
        const MapLongUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_ushort())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapLongUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_ushort.size());
    for (const auto& pair : m_var_map_long_ushort)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_ushort;
}

/*!
 * @brief This function copies the value in member var_map_long_ushort
 * @param _var_map_long_ushort New value to be copied in member var_map_long_ushort
 */
void MapLongUShort::var_map_long_ushort(
        const std::map<int32_t, uint16_t>& _var_map_long_ushort)
{
    m_var_map_long_ushort = _var_map_long_ushort;
}

/*!
 * @brief This function moves the value in member var_map_long_ushort
 * @param _var_map_long_ushort New value to be moved in member var_map_long_ushort
 */
void MapLongUShort::var_map_long_ushort(
        std::map<int32_t, uint16_t>&& _var_map_long_ushort)
{
    m_var_map_long_ushort = std::move(_var_map_long_ushort);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_ushort
 * @return Constant reference to member var_map_long_ushort
 */
const std::map<int32_t, uint16_t>& MapLongUShort::var_map_long_ushort() const
{
    return m_var_map_long_ushort;
}

/*!
 * @brief This function returns a reference to member var_map_long_ushort
 * @return Reference to member var_map_long_ushort
 */
std::map<int32_t, uint16_t>& MapLongUShort::var_map_long_ushort()
{
    return m_var_map_long_ushort;
}


size_t MapLongUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongUShort_max_key_cdr_typesize;
}

bool MapLongUShort::isKeyDefined()
{
    return false;
}

void MapLongUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLong::MapLongLong()
{
    // map<long, long> m_var_map_long_long


    // Just to register all known types
    registermapsTypes();
}

MapLongLong::~MapLongLong()
{
}

MapLongLong::MapLongLong(
        const MapLongLong& x)
{
    m_var_map_long_long = x.m_var_map_long_long;
}

MapLongLong::MapLongLong(
        MapLongLong&& x) noexcept 
{
    m_var_map_long_long = std::move(x.m_var_map_long_long);
}

MapLongLong& MapLongLong::operator =(
        const MapLongLong& x)
{

    m_var_map_long_long = x.m_var_map_long_long;

    return *this;
}

MapLongLong& MapLongLong::operator =(
        MapLongLong&& x) noexcept
{

    m_var_map_long_long = std::move(x.m_var_map_long_long);

    return *this;
}

bool MapLongLong::operator ==(
        const MapLongLong& x) const
{

    return (m_var_map_long_long == x.m_var_map_long_long);
}

bool MapLongLong::operator !=(
        const MapLongLong& x) const
{
    return !(*this == x);
}

size_t MapLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLong_max_cdr_typesize;
}

size_t MapLongLong::getCdrSerializedSize(
        const MapLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_long())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_long.size());
    for (const auto& pair : m_var_map_long_long)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_long;
}

/*!
 * @brief This function copies the value in member var_map_long_long
 * @param _var_map_long_long New value to be copied in member var_map_long_long
 */
void MapLongLong::var_map_long_long(
        const std::map<int32_t, int32_t>& _var_map_long_long)
{
    m_var_map_long_long = _var_map_long_long;
}

/*!
 * @brief This function moves the value in member var_map_long_long
 * @param _var_map_long_long New value to be moved in member var_map_long_long
 */
void MapLongLong::var_map_long_long(
        std::map<int32_t, int32_t>&& _var_map_long_long)
{
    m_var_map_long_long = std::move(_var_map_long_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_long
 * @return Constant reference to member var_map_long_long
 */
const std::map<int32_t, int32_t>& MapLongLong::var_map_long_long() const
{
    return m_var_map_long_long;
}

/*!
 * @brief This function returns a reference to member var_map_long_long
 * @return Reference to member var_map_long_long
 */
std::map<int32_t, int32_t>& MapLongLong::var_map_long_long()
{
    return m_var_map_long_long;
}


size_t MapLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLong_max_key_cdr_typesize;
}

bool MapLongLong::isKeyDefined()
{
    return false;
}

void MapLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongULong::MapLongULong()
{
    // map<long, unsigned long> m_var_map_long_ulong


    // Just to register all known types
    registermapsTypes();
}

MapLongULong::~MapLongULong()
{
}

MapLongULong::MapLongULong(
        const MapLongULong& x)
{
    m_var_map_long_ulong = x.m_var_map_long_ulong;
}

MapLongULong::MapLongULong(
        MapLongULong&& x) noexcept 
{
    m_var_map_long_ulong = std::move(x.m_var_map_long_ulong);
}

MapLongULong& MapLongULong::operator =(
        const MapLongULong& x)
{

    m_var_map_long_ulong = x.m_var_map_long_ulong;

    return *this;
}

MapLongULong& MapLongULong::operator =(
        MapLongULong&& x) noexcept
{

    m_var_map_long_ulong = std::move(x.m_var_map_long_ulong);

    return *this;
}

bool MapLongULong::operator ==(
        const MapLongULong& x) const
{

    return (m_var_map_long_ulong == x.m_var_map_long_ulong);
}

bool MapLongULong::operator !=(
        const MapLongULong& x) const
{
    return !(*this == x);
}

size_t MapLongULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongULong_max_cdr_typesize;
}

size_t MapLongULong::getCdrSerializedSize(
        const MapLongULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_ulong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_ulong.size());
    for (const auto& pair : m_var_map_long_ulong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_ulong;
}

/*!
 * @brief This function copies the value in member var_map_long_ulong
 * @param _var_map_long_ulong New value to be copied in member var_map_long_ulong
 */
void MapLongULong::var_map_long_ulong(
        const std::map<int32_t, uint32_t>& _var_map_long_ulong)
{
    m_var_map_long_ulong = _var_map_long_ulong;
}

/*!
 * @brief This function moves the value in member var_map_long_ulong
 * @param _var_map_long_ulong New value to be moved in member var_map_long_ulong
 */
void MapLongULong::var_map_long_ulong(
        std::map<int32_t, uint32_t>&& _var_map_long_ulong)
{
    m_var_map_long_ulong = std::move(_var_map_long_ulong);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_ulong
 * @return Constant reference to member var_map_long_ulong
 */
const std::map<int32_t, uint32_t>& MapLongULong::var_map_long_ulong() const
{
    return m_var_map_long_ulong;
}

/*!
 * @brief This function returns a reference to member var_map_long_ulong
 * @return Reference to member var_map_long_ulong
 */
std::map<int32_t, uint32_t>& MapLongULong::var_map_long_ulong()
{
    return m_var_map_long_ulong;
}


size_t MapLongULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongULong_max_key_cdr_typesize;
}

bool MapLongULong::isKeyDefined()
{
    return false;
}

void MapLongULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongKeyLongLongValue::MapLongKeyLongLongValue()
{
    // map<long, long long> m_var_map_long_longlong


    // Just to register all known types
    registermapsTypes();
}

MapLongKeyLongLongValue::~MapLongKeyLongLongValue()
{
}

MapLongKeyLongLongValue::MapLongKeyLongLongValue(
        const MapLongKeyLongLongValue& x)
{
    m_var_map_long_longlong = x.m_var_map_long_longlong;
}

MapLongKeyLongLongValue::MapLongKeyLongLongValue(
        MapLongKeyLongLongValue&& x) noexcept 
{
    m_var_map_long_longlong = std::move(x.m_var_map_long_longlong);
}

MapLongKeyLongLongValue& MapLongKeyLongLongValue::operator =(
        const MapLongKeyLongLongValue& x)
{

    m_var_map_long_longlong = x.m_var_map_long_longlong;

    return *this;
}

MapLongKeyLongLongValue& MapLongKeyLongLongValue::operator =(
        MapLongKeyLongLongValue&& x) noexcept
{

    m_var_map_long_longlong = std::move(x.m_var_map_long_longlong);

    return *this;
}

bool MapLongKeyLongLongValue::operator ==(
        const MapLongKeyLongLongValue& x) const
{

    return (m_var_map_long_longlong == x.m_var_map_long_longlong);
}

bool MapLongKeyLongLongValue::operator !=(
        const MapLongKeyLongLongValue& x) const
{
    return !(*this == x);
}

size_t MapLongKeyLongLongValue::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongKeyLongLongValue_max_cdr_typesize;
}

size_t MapLongKeyLongLongValue::getCdrSerializedSize(
        const MapLongKeyLongLongValue& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_longlong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapLongKeyLongLongValue::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_longlong.size());
    for (const auto& pair : m_var_map_long_longlong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongKeyLongLongValue::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_longlong;
}

/*!
 * @brief This function copies the value in member var_map_long_longlong
 * @param _var_map_long_longlong New value to be copied in member var_map_long_longlong
 */
void MapLongKeyLongLongValue::var_map_long_longlong(
        const std::map<int32_t, int64_t>& _var_map_long_longlong)
{
    m_var_map_long_longlong = _var_map_long_longlong;
}

/*!
 * @brief This function moves the value in member var_map_long_longlong
 * @param _var_map_long_longlong New value to be moved in member var_map_long_longlong
 */
void MapLongKeyLongLongValue::var_map_long_longlong(
        std::map<int32_t, int64_t>&& _var_map_long_longlong)
{
    m_var_map_long_longlong = std::move(_var_map_long_longlong);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_longlong
 * @return Constant reference to member var_map_long_longlong
 */
const std::map<int32_t, int64_t>& MapLongKeyLongLongValue::var_map_long_longlong() const
{
    return m_var_map_long_longlong;
}

/*!
 * @brief This function returns a reference to member var_map_long_longlong
 * @return Reference to member var_map_long_longlong
 */
std::map<int32_t, int64_t>& MapLongKeyLongLongValue::var_map_long_longlong()
{
    return m_var_map_long_longlong;
}


size_t MapLongKeyLongLongValue::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongKeyLongLongValue_max_key_cdr_typesize;
}

bool MapLongKeyLongLongValue::isKeyDefined()
{
    return false;
}

void MapLongKeyLongLongValue::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongULongLong::MapLongULongLong()
{
    // map<long, unsigned long long> m_var_map_long_ulonglong


    // Just to register all known types
    registermapsTypes();
}

MapLongULongLong::~MapLongULongLong()
{
}

MapLongULongLong::MapLongULongLong(
        const MapLongULongLong& x)
{
    m_var_map_long_ulonglong = x.m_var_map_long_ulonglong;
}

MapLongULongLong::MapLongULongLong(
        MapLongULongLong&& x) noexcept 
{
    m_var_map_long_ulonglong = std::move(x.m_var_map_long_ulonglong);
}

MapLongULongLong& MapLongULongLong::operator =(
        const MapLongULongLong& x)
{

    m_var_map_long_ulonglong = x.m_var_map_long_ulonglong;

    return *this;
}

MapLongULongLong& MapLongULongLong::operator =(
        MapLongULongLong&& x) noexcept
{

    m_var_map_long_ulonglong = std::move(x.m_var_map_long_ulonglong);

    return *this;
}

bool MapLongULongLong::operator ==(
        const MapLongULongLong& x) const
{

    return (m_var_map_long_ulonglong == x.m_var_map_long_ulonglong);
}

bool MapLongULongLong::operator !=(
        const MapLongULongLong& x) const
{
    return !(*this == x);
}

size_t MapLongULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongULongLong_max_cdr_typesize;
}

size_t MapLongULongLong::getCdrSerializedSize(
        const MapLongULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_ulonglong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapLongULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_ulonglong.size());
    for (const auto& pair : m_var_map_long_ulonglong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_ulonglong;
}

/*!
 * @brief This function copies the value in member var_map_long_ulonglong
 * @param _var_map_long_ulonglong New value to be copied in member var_map_long_ulonglong
 */
void MapLongULongLong::var_map_long_ulonglong(
        const std::map<int32_t, uint64_t>& _var_map_long_ulonglong)
{
    m_var_map_long_ulonglong = _var_map_long_ulonglong;
}

/*!
 * @brief This function moves the value in member var_map_long_ulonglong
 * @param _var_map_long_ulonglong New value to be moved in member var_map_long_ulonglong
 */
void MapLongULongLong::var_map_long_ulonglong(
        std::map<int32_t, uint64_t>&& _var_map_long_ulonglong)
{
    m_var_map_long_ulonglong = std::move(_var_map_long_ulonglong);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_ulonglong
 * @return Constant reference to member var_map_long_ulonglong
 */
const std::map<int32_t, uint64_t>& MapLongULongLong::var_map_long_ulonglong() const
{
    return m_var_map_long_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_map_long_ulonglong
 * @return Reference to member var_map_long_ulonglong
 */
std::map<int32_t, uint64_t>& MapLongULongLong::var_map_long_ulonglong()
{
    return m_var_map_long_ulonglong;
}


size_t MapLongULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongULongLong_max_key_cdr_typesize;
}

bool MapLongULongLong::isKeyDefined()
{
    return false;
}

void MapLongULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongFloat::MapLongFloat()
{
    // map<long, float> m_var_map_long_float


    // Just to register all known types
    registermapsTypes();
}

MapLongFloat::~MapLongFloat()
{
}

MapLongFloat::MapLongFloat(
        const MapLongFloat& x)
{
    m_var_map_long_float = x.m_var_map_long_float;
}

MapLongFloat::MapLongFloat(
        MapLongFloat&& x) noexcept 
{
    m_var_map_long_float = std::move(x.m_var_map_long_float);
}

MapLongFloat& MapLongFloat::operator =(
        const MapLongFloat& x)
{

    m_var_map_long_float = x.m_var_map_long_float;

    return *this;
}

MapLongFloat& MapLongFloat::operator =(
        MapLongFloat&& x) noexcept
{

    m_var_map_long_float = std::move(x.m_var_map_long_float);

    return *this;
}

bool MapLongFloat::operator ==(
        const MapLongFloat& x) const
{

    return (m_var_map_long_float == x.m_var_map_long_float);
}

bool MapLongFloat::operator !=(
        const MapLongFloat& x) const
{
    return !(*this == x);
}

size_t MapLongFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongFloat_max_cdr_typesize;
}

size_t MapLongFloat::getCdrSerializedSize(
        const MapLongFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_float())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_float.size());
    for (const auto& pair : m_var_map_long_float)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_float;
}

/*!
 * @brief This function copies the value in member var_map_long_float
 * @param _var_map_long_float New value to be copied in member var_map_long_float
 */
void MapLongFloat::var_map_long_float(
        const std::map<int32_t, float>& _var_map_long_float)
{
    m_var_map_long_float = _var_map_long_float;
}

/*!
 * @brief This function moves the value in member var_map_long_float
 * @param _var_map_long_float New value to be moved in member var_map_long_float
 */
void MapLongFloat::var_map_long_float(
        std::map<int32_t, float>&& _var_map_long_float)
{
    m_var_map_long_float = std::move(_var_map_long_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_float
 * @return Constant reference to member var_map_long_float
 */
const std::map<int32_t, float>& MapLongFloat::var_map_long_float() const
{
    return m_var_map_long_float;
}

/*!
 * @brief This function returns a reference to member var_map_long_float
 * @return Reference to member var_map_long_float
 */
std::map<int32_t, float>& MapLongFloat::var_map_long_float()
{
    return m_var_map_long_float;
}


size_t MapLongFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongFloat_max_key_cdr_typesize;
}

bool MapLongFloat::isKeyDefined()
{
    return false;
}

void MapLongFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongDouble::MapLongDouble()
{
    // map<long, double> m_var_map_long_double


    // Just to register all known types
    registermapsTypes();
}

MapLongDouble::~MapLongDouble()
{
}

MapLongDouble::MapLongDouble(
        const MapLongDouble& x)
{
    m_var_map_long_double = x.m_var_map_long_double;
}

MapLongDouble::MapLongDouble(
        MapLongDouble&& x) noexcept 
{
    m_var_map_long_double = std::move(x.m_var_map_long_double);
}

MapLongDouble& MapLongDouble::operator =(
        const MapLongDouble& x)
{

    m_var_map_long_double = x.m_var_map_long_double;

    return *this;
}

MapLongDouble& MapLongDouble::operator =(
        MapLongDouble&& x) noexcept
{

    m_var_map_long_double = std::move(x.m_var_map_long_double);

    return *this;
}

bool MapLongDouble::operator ==(
        const MapLongDouble& x) const
{

    return (m_var_map_long_double == x.m_var_map_long_double);
}

bool MapLongDouble::operator !=(
        const MapLongDouble& x) const
{
    return !(*this == x);
}

size_t MapLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongDouble_max_cdr_typesize;
}

size_t MapLongDouble::getCdrSerializedSize(
        const MapLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_double())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_double.size());
    for (const auto& pair : m_var_map_long_double)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_double;
}

/*!
 * @brief This function copies the value in member var_map_long_double
 * @param _var_map_long_double New value to be copied in member var_map_long_double
 */
void MapLongDouble::var_map_long_double(
        const std::map<int32_t, double>& _var_map_long_double)
{
    m_var_map_long_double = _var_map_long_double;
}

/*!
 * @brief This function moves the value in member var_map_long_double
 * @param _var_map_long_double New value to be moved in member var_map_long_double
 */
void MapLongDouble::var_map_long_double(
        std::map<int32_t, double>&& _var_map_long_double)
{
    m_var_map_long_double = std::move(_var_map_long_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_double
 * @return Constant reference to member var_map_long_double
 */
const std::map<int32_t, double>& MapLongDouble::var_map_long_double() const
{
    return m_var_map_long_double;
}

/*!
 * @brief This function returns a reference to member var_map_long_double
 * @return Reference to member var_map_long_double
 */
std::map<int32_t, double>& MapLongDouble::var_map_long_double()
{
    return m_var_map_long_double;
}


size_t MapLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongDouble_max_key_cdr_typesize;
}

bool MapLongDouble::isKeyDefined()
{
    return false;
}

void MapLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongKeyLongDoubleValue::MapLongKeyLongDoubleValue()
{
    // map<long, long double> m_var_map_long_longdouble


    // Just to register all known types
    registermapsTypes();
}

MapLongKeyLongDoubleValue::~MapLongKeyLongDoubleValue()
{
}

MapLongKeyLongDoubleValue::MapLongKeyLongDoubleValue(
        const MapLongKeyLongDoubleValue& x)
{
    m_var_map_long_longdouble = x.m_var_map_long_longdouble;
}

MapLongKeyLongDoubleValue::MapLongKeyLongDoubleValue(
        MapLongKeyLongDoubleValue&& x) noexcept 
{
    m_var_map_long_longdouble = std::move(x.m_var_map_long_longdouble);
}

MapLongKeyLongDoubleValue& MapLongKeyLongDoubleValue::operator =(
        const MapLongKeyLongDoubleValue& x)
{

    m_var_map_long_longdouble = x.m_var_map_long_longdouble;

    return *this;
}

MapLongKeyLongDoubleValue& MapLongKeyLongDoubleValue::operator =(
        MapLongKeyLongDoubleValue&& x) noexcept
{

    m_var_map_long_longdouble = std::move(x.m_var_map_long_longdouble);

    return *this;
}

bool MapLongKeyLongDoubleValue::operator ==(
        const MapLongKeyLongDoubleValue& x) const
{

    return (m_var_map_long_longdouble == x.m_var_map_long_longdouble);
}

bool MapLongKeyLongDoubleValue::operator !=(
        const MapLongKeyLongDoubleValue& x) const
{
    return !(*this == x);
}

size_t MapLongKeyLongDoubleValue::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongKeyLongDoubleValue_max_cdr_typesize;
}

size_t MapLongKeyLongDoubleValue::getCdrSerializedSize(
        const MapLongKeyLongDoubleValue& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_longdouble())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapLongKeyLongDoubleValue::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_longdouble.size());
    for (const auto& pair : m_var_map_long_longdouble)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongKeyLongDoubleValue::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_longdouble;
}

/*!
 * @brief This function copies the value in member var_map_long_longdouble
 * @param _var_map_long_longdouble New value to be copied in member var_map_long_longdouble
 */
void MapLongKeyLongDoubleValue::var_map_long_longdouble(
        const std::map<int32_t, long double>& _var_map_long_longdouble)
{
    m_var_map_long_longdouble = _var_map_long_longdouble;
}

/*!
 * @brief This function moves the value in member var_map_long_longdouble
 * @param _var_map_long_longdouble New value to be moved in member var_map_long_longdouble
 */
void MapLongKeyLongDoubleValue::var_map_long_longdouble(
        std::map<int32_t, long double>&& _var_map_long_longdouble)
{
    m_var_map_long_longdouble = std::move(_var_map_long_longdouble);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_longdouble
 * @return Constant reference to member var_map_long_longdouble
 */
const std::map<int32_t, long double>& MapLongKeyLongDoubleValue::var_map_long_longdouble() const
{
    return m_var_map_long_longdouble;
}

/*!
 * @brief This function returns a reference to member var_map_long_longdouble
 * @return Reference to member var_map_long_longdouble
 */
std::map<int32_t, long double>& MapLongKeyLongDoubleValue::var_map_long_longdouble()
{
    return m_var_map_long_longdouble;
}


size_t MapLongKeyLongDoubleValue::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongKeyLongDoubleValue_max_key_cdr_typesize;
}

bool MapLongKeyLongDoubleValue::isKeyDefined()
{
    return false;
}

void MapLongKeyLongDoubleValue::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongBoolean::MapLongBoolean()
{
    // map<long, boolean> m_var_map_long_boolean


    // Just to register all known types
    registermapsTypes();
}

MapLongBoolean::~MapLongBoolean()
{
}

MapLongBoolean::MapLongBoolean(
        const MapLongBoolean& x)
{
    m_var_map_long_boolean = x.m_var_map_long_boolean;
}

MapLongBoolean::MapLongBoolean(
        MapLongBoolean&& x) noexcept 
{
    m_var_map_long_boolean = std::move(x.m_var_map_long_boolean);
}

MapLongBoolean& MapLongBoolean::operator =(
        const MapLongBoolean& x)
{

    m_var_map_long_boolean = x.m_var_map_long_boolean;

    return *this;
}

MapLongBoolean& MapLongBoolean::operator =(
        MapLongBoolean&& x) noexcept
{

    m_var_map_long_boolean = std::move(x.m_var_map_long_boolean);

    return *this;
}

bool MapLongBoolean::operator ==(
        const MapLongBoolean& x) const
{

    return (m_var_map_long_boolean == x.m_var_map_long_boolean);
}

bool MapLongBoolean::operator !=(
        const MapLongBoolean& x) const
{
    return !(*this == x);
}

size_t MapLongBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongBoolean_max_cdr_typesize;
}

size_t MapLongBoolean::getCdrSerializedSize(
        const MapLongBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_boolean())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapLongBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_boolean.size());
    for (const auto& pair : m_var_map_long_boolean)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_boolean;
}

/*!
 * @brief This function copies the value in member var_map_long_boolean
 * @param _var_map_long_boolean New value to be copied in member var_map_long_boolean
 */
void MapLongBoolean::var_map_long_boolean(
        const std::map<int32_t, bool>& _var_map_long_boolean)
{
    m_var_map_long_boolean = _var_map_long_boolean;
}

/*!
 * @brief This function moves the value in member var_map_long_boolean
 * @param _var_map_long_boolean New value to be moved in member var_map_long_boolean
 */
void MapLongBoolean::var_map_long_boolean(
        std::map<int32_t, bool>&& _var_map_long_boolean)
{
    m_var_map_long_boolean = std::move(_var_map_long_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_boolean
 * @return Constant reference to member var_map_long_boolean
 */
const std::map<int32_t, bool>& MapLongBoolean::var_map_long_boolean() const
{
    return m_var_map_long_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_long_boolean
 * @return Reference to member var_map_long_boolean
 */
std::map<int32_t, bool>& MapLongBoolean::var_map_long_boolean()
{
    return m_var_map_long_boolean;
}


size_t MapLongBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongBoolean_max_key_cdr_typesize;
}

bool MapLongBoolean::isKeyDefined()
{
    return false;
}

void MapLongBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongOctet::MapLongOctet()
{
    // map<long, octet> m_var_map_long_octet


    // Just to register all known types
    registermapsTypes();
}

MapLongOctet::~MapLongOctet()
{
}

MapLongOctet::MapLongOctet(
        const MapLongOctet& x)
{
    m_var_map_long_octet = x.m_var_map_long_octet;
}

MapLongOctet::MapLongOctet(
        MapLongOctet&& x) noexcept 
{
    m_var_map_long_octet = std::move(x.m_var_map_long_octet);
}

MapLongOctet& MapLongOctet::operator =(
        const MapLongOctet& x)
{

    m_var_map_long_octet = x.m_var_map_long_octet;

    return *this;
}

MapLongOctet& MapLongOctet::operator =(
        MapLongOctet&& x) noexcept
{

    m_var_map_long_octet = std::move(x.m_var_map_long_octet);

    return *this;
}

bool MapLongOctet::operator ==(
        const MapLongOctet& x) const
{

    return (m_var_map_long_octet == x.m_var_map_long_octet);
}

bool MapLongOctet::operator !=(
        const MapLongOctet& x) const
{
    return !(*this == x);
}

size_t MapLongOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongOctet_max_cdr_typesize;
}

size_t MapLongOctet::getCdrSerializedSize(
        const MapLongOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_octet())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapLongOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_octet.size());
    for (const auto& pair : m_var_map_long_octet)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_octet;
}

/*!
 * @brief This function copies the value in member var_map_long_octet
 * @param _var_map_long_octet New value to be copied in member var_map_long_octet
 */
void MapLongOctet::var_map_long_octet(
        const std::map<int32_t, uint8_t>& _var_map_long_octet)
{
    m_var_map_long_octet = _var_map_long_octet;
}

/*!
 * @brief This function moves the value in member var_map_long_octet
 * @param _var_map_long_octet New value to be moved in member var_map_long_octet
 */
void MapLongOctet::var_map_long_octet(
        std::map<int32_t, uint8_t>&& _var_map_long_octet)
{
    m_var_map_long_octet = std::move(_var_map_long_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_octet
 * @return Constant reference to member var_map_long_octet
 */
const std::map<int32_t, uint8_t>& MapLongOctet::var_map_long_octet() const
{
    return m_var_map_long_octet;
}

/*!
 * @brief This function returns a reference to member var_map_long_octet
 * @return Reference to member var_map_long_octet
 */
std::map<int32_t, uint8_t>& MapLongOctet::var_map_long_octet()
{
    return m_var_map_long_octet;
}


size_t MapLongOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongOctet_max_key_cdr_typesize;
}

bool MapLongOctet::isKeyDefined()
{
    return false;
}

void MapLongOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongChar::MapLongChar()
{
    // map<long, char> m_var_map_long_char


    // Just to register all known types
    registermapsTypes();
}

MapLongChar::~MapLongChar()
{
}

MapLongChar::MapLongChar(
        const MapLongChar& x)
{
    m_var_map_long_char = x.m_var_map_long_char;
}

MapLongChar::MapLongChar(
        MapLongChar&& x) noexcept 
{
    m_var_map_long_char = std::move(x.m_var_map_long_char);
}

MapLongChar& MapLongChar::operator =(
        const MapLongChar& x)
{

    m_var_map_long_char = x.m_var_map_long_char;

    return *this;
}

MapLongChar& MapLongChar::operator =(
        MapLongChar&& x) noexcept
{

    m_var_map_long_char = std::move(x.m_var_map_long_char);

    return *this;
}

bool MapLongChar::operator ==(
        const MapLongChar& x) const
{

    return (m_var_map_long_char == x.m_var_map_long_char);
}

bool MapLongChar::operator !=(
        const MapLongChar& x) const
{
    return !(*this == x);
}

size_t MapLongChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongChar_max_cdr_typesize;
}

size_t MapLongChar::getCdrSerializedSize(
        const MapLongChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_char())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapLongChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_char.size());
    for (const auto& pair : m_var_map_long_char)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_char;
}

/*!
 * @brief This function copies the value in member var_map_long_char
 * @param _var_map_long_char New value to be copied in member var_map_long_char
 */
void MapLongChar::var_map_long_char(
        const std::map<int32_t, char>& _var_map_long_char)
{
    m_var_map_long_char = _var_map_long_char;
}

/*!
 * @brief This function moves the value in member var_map_long_char
 * @param _var_map_long_char New value to be moved in member var_map_long_char
 */
void MapLongChar::var_map_long_char(
        std::map<int32_t, char>&& _var_map_long_char)
{
    m_var_map_long_char = std::move(_var_map_long_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_char
 * @return Constant reference to member var_map_long_char
 */
const std::map<int32_t, char>& MapLongChar::var_map_long_char() const
{
    return m_var_map_long_char;
}

/*!
 * @brief This function returns a reference to member var_map_long_char
 * @return Reference to member var_map_long_char
 */
std::map<int32_t, char>& MapLongChar::var_map_long_char()
{
    return m_var_map_long_char;
}


size_t MapLongChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongChar_max_key_cdr_typesize;
}

bool MapLongChar::isKeyDefined()
{
    return false;
}

void MapLongChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongWChar::MapLongWChar()
{
    // map<long, wchar> m_var_map_long_wchar


    // Just to register all known types
    registermapsTypes();
}

MapLongWChar::~MapLongWChar()
{
}

MapLongWChar::MapLongWChar(
        const MapLongWChar& x)
{
    m_var_map_long_wchar = x.m_var_map_long_wchar;
}

MapLongWChar::MapLongWChar(
        MapLongWChar&& x) noexcept 
{
    m_var_map_long_wchar = std::move(x.m_var_map_long_wchar);
}

MapLongWChar& MapLongWChar::operator =(
        const MapLongWChar& x)
{

    m_var_map_long_wchar = x.m_var_map_long_wchar;

    return *this;
}

MapLongWChar& MapLongWChar::operator =(
        MapLongWChar&& x) noexcept
{

    m_var_map_long_wchar = std::move(x.m_var_map_long_wchar);

    return *this;
}

bool MapLongWChar::operator ==(
        const MapLongWChar& x) const
{

    return (m_var_map_long_wchar == x.m_var_map_long_wchar);
}

bool MapLongWChar::operator !=(
        const MapLongWChar& x) const
{
    return !(*this == x);
}

size_t MapLongWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongWChar_max_cdr_typesize;
}

size_t MapLongWChar::getCdrSerializedSize(
        const MapLongWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_wchar())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_wchar.size());
    for (const auto& pair : m_var_map_long_wchar)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_wchar;
}

/*!
 * @brief This function copies the value in member var_map_long_wchar
 * @param _var_map_long_wchar New value to be copied in member var_map_long_wchar
 */
void MapLongWChar::var_map_long_wchar(
        const std::map<int32_t, wchar_t>& _var_map_long_wchar)
{
    m_var_map_long_wchar = _var_map_long_wchar;
}

/*!
 * @brief This function moves the value in member var_map_long_wchar
 * @param _var_map_long_wchar New value to be moved in member var_map_long_wchar
 */
void MapLongWChar::var_map_long_wchar(
        std::map<int32_t, wchar_t>&& _var_map_long_wchar)
{
    m_var_map_long_wchar = std::move(_var_map_long_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_wchar
 * @return Constant reference to member var_map_long_wchar
 */
const std::map<int32_t, wchar_t>& MapLongWChar::var_map_long_wchar() const
{
    return m_var_map_long_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_long_wchar
 * @return Reference to member var_map_long_wchar
 */
std::map<int32_t, wchar_t>& MapLongWChar::var_map_long_wchar()
{
    return m_var_map_long_wchar;
}


size_t MapLongWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongWChar_max_key_cdr_typesize;
}

bool MapLongWChar::isKeyDefined()
{
    return false;
}

void MapLongWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongString::MapLongString()
{
    // map<long, string> m_var_map_long_string


    // Just to register all known types
    registermapsTypes();
}

MapLongString::~MapLongString()
{
}

MapLongString::MapLongString(
        const MapLongString& x)
{
    m_var_map_long_string = x.m_var_map_long_string;
}

MapLongString::MapLongString(
        MapLongString&& x) noexcept 
{
    m_var_map_long_string = std::move(x.m_var_map_long_string);
}

MapLongString& MapLongString::operator =(
        const MapLongString& x)
{

    m_var_map_long_string = x.m_var_map_long_string;

    return *this;
}

MapLongString& MapLongString::operator =(
        MapLongString&& x) noexcept
{

    m_var_map_long_string = std::move(x.m_var_map_long_string);

    return *this;
}

bool MapLongString::operator ==(
        const MapLongString& x) const
{

    return (m_var_map_long_string == x.m_var_map_long_string);
}

bool MapLongString::operator !=(
        const MapLongString& x) const
{
    return !(*this == x);
}

size_t MapLongString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongString_max_cdr_typesize;
}

size_t MapLongString::getCdrSerializedSize(
        const MapLongString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_string())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapLongString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_string.size());
    for (const auto& pair : m_var_map_long_string)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapLongString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_long_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int32_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_long_string[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_long_string
 * @param _var_map_long_string New value to be copied in member var_map_long_string
 */
void MapLongString::var_map_long_string(
        const std::map<int32_t, std::string>& _var_map_long_string)
{
    m_var_map_long_string = _var_map_long_string;
}

/*!
 * @brief This function moves the value in member var_map_long_string
 * @param _var_map_long_string New value to be moved in member var_map_long_string
 */
void MapLongString::var_map_long_string(
        std::map<int32_t, std::string>&& _var_map_long_string)
{
    m_var_map_long_string = std::move(_var_map_long_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_string
 * @return Constant reference to member var_map_long_string
 */
const std::map<int32_t, std::string>& MapLongString::var_map_long_string() const
{
    return m_var_map_long_string;
}

/*!
 * @brief This function returns a reference to member var_map_long_string
 * @return Reference to member var_map_long_string
 */
std::map<int32_t, std::string>& MapLongString::var_map_long_string()
{
    return m_var_map_long_string;
}


size_t MapLongString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongString_max_key_cdr_typesize;
}

bool MapLongString::isKeyDefined()
{
    return false;
}

void MapLongString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongWString::MapLongWString()
{
    // map<long, wstring> m_var_map_long_wstring


    // Just to register all known types
    registermapsTypes();
}

MapLongWString::~MapLongWString()
{
}

MapLongWString::MapLongWString(
        const MapLongWString& x)
{
    m_var_map_long_wstring = x.m_var_map_long_wstring;
}

MapLongWString::MapLongWString(
        MapLongWString&& x) noexcept 
{
    m_var_map_long_wstring = std::move(x.m_var_map_long_wstring);
}

MapLongWString& MapLongWString::operator =(
        const MapLongWString& x)
{

    m_var_map_long_wstring = x.m_var_map_long_wstring;

    return *this;
}

MapLongWString& MapLongWString::operator =(
        MapLongWString&& x) noexcept
{

    m_var_map_long_wstring = std::move(x.m_var_map_long_wstring);

    return *this;
}

bool MapLongWString::operator ==(
        const MapLongWString& x) const
{

    return (m_var_map_long_wstring == x.m_var_map_long_wstring);
}

bool MapLongWString::operator !=(
        const MapLongWString& x) const
{
    return !(*this == x);
}

size_t MapLongWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongWString_max_cdr_typesize;
}

size_t MapLongWString::getCdrSerializedSize(
        const MapLongWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_wstring())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapLongWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_wstring.size());
    for (const auto& pair : m_var_map_long_wstring)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapLongWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_long_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int32_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_long_wstring[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_long_wstring
 * @param _var_map_long_wstring New value to be copied in member var_map_long_wstring
 */
void MapLongWString::var_map_long_wstring(
        const std::map<int32_t, std::wstring>& _var_map_long_wstring)
{
    m_var_map_long_wstring = _var_map_long_wstring;
}

/*!
 * @brief This function moves the value in member var_map_long_wstring
 * @param _var_map_long_wstring New value to be moved in member var_map_long_wstring
 */
void MapLongWString::var_map_long_wstring(
        std::map<int32_t, std::wstring>&& _var_map_long_wstring)
{
    m_var_map_long_wstring = std::move(_var_map_long_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_wstring
 * @return Constant reference to member var_map_long_wstring
 */
const std::map<int32_t, std::wstring>& MapLongWString::var_map_long_wstring() const
{
    return m_var_map_long_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_long_wstring
 * @return Reference to member var_map_long_wstring
 */
std::map<int32_t, std::wstring>& MapLongWString::var_map_long_wstring()
{
    return m_var_map_long_wstring;
}


size_t MapLongWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongWString_max_key_cdr_typesize;
}

bool MapLongWString::isKeyDefined()
{
    return false;
}

void MapLongWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerAliasBoundedStringHelper::MapLongInnerAliasBoundedStringHelper()
{
    // map<long, Inner_alias_bounded_string_helper> m_var_map_long_inneraliasboundedstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerAliasBoundedStringHelper::~MapLongInnerAliasBoundedStringHelper()
{
}

MapLongInnerAliasBoundedStringHelper::MapLongInnerAliasBoundedStringHelper(
        const MapLongInnerAliasBoundedStringHelper& x)
{
    m_var_map_long_inneraliasboundedstringhelper = x.m_var_map_long_inneraliasboundedstringhelper;
}

MapLongInnerAliasBoundedStringHelper::MapLongInnerAliasBoundedStringHelper(
        MapLongInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_long_inneraliasboundedstringhelper = std::move(x.m_var_map_long_inneraliasboundedstringhelper);
}

MapLongInnerAliasBoundedStringHelper& MapLongInnerAliasBoundedStringHelper::operator =(
        const MapLongInnerAliasBoundedStringHelper& x)
{

    m_var_map_long_inneraliasboundedstringhelper = x.m_var_map_long_inneraliasboundedstringhelper;

    return *this;
}

MapLongInnerAliasBoundedStringHelper& MapLongInnerAliasBoundedStringHelper::operator =(
        MapLongInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_long_inneraliasboundedstringhelper = std::move(x.m_var_map_long_inneraliasboundedstringhelper);

    return *this;
}

bool MapLongInnerAliasBoundedStringHelper::operator ==(
        const MapLongInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_long_inneraliasboundedstringhelper == x.m_var_map_long_inneraliasboundedstringhelper);
}

bool MapLongInnerAliasBoundedStringHelper::operator !=(
        const MapLongInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapLongInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapLongInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_inneraliasboundedstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_inneraliasboundedstringhelper.size());
    for (const auto& pair : m_var_map_long_inneraliasboundedstringhelper)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapLongInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_long_inneraliasboundedstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int32_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_long_inneraliasboundedstringhelper[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_long_inneraliasboundedstringhelper
 * @param _var_map_long_inneraliasboundedstringhelper New value to be copied in member var_map_long_inneraliasboundedstringhelper
 */
void MapLongInnerAliasBoundedStringHelper::var_map_long_inneraliasboundedstringhelper(
        const std::map<int32_t, Inner_alias_bounded_string_helper>& _var_map_long_inneraliasboundedstringhelper)
{
    m_var_map_long_inneraliasboundedstringhelper = _var_map_long_inneraliasboundedstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_long_inneraliasboundedstringhelper
 * @param _var_map_long_inneraliasboundedstringhelper New value to be moved in member var_map_long_inneraliasboundedstringhelper
 */
void MapLongInnerAliasBoundedStringHelper::var_map_long_inneraliasboundedstringhelper(
        std::map<int32_t, Inner_alias_bounded_string_helper>&& _var_map_long_inneraliasboundedstringhelper)
{
    m_var_map_long_inneraliasboundedstringhelper = std::move(_var_map_long_inneraliasboundedstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_inneraliasboundedstringhelper
 * @return Constant reference to member var_map_long_inneraliasboundedstringhelper
 */
const std::map<int32_t, Inner_alias_bounded_string_helper>& MapLongInnerAliasBoundedStringHelper::var_map_long_inneraliasboundedstringhelper() const
{
    return m_var_map_long_inneraliasboundedstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_inneraliasboundedstringhelper
 * @return Reference to member var_map_long_inneraliasboundedstringhelper
 */
std::map<int32_t, Inner_alias_bounded_string_helper>& MapLongInnerAliasBoundedStringHelper::var_map_long_inneraliasboundedstringhelper()
{
    return m_var_map_long_inneraliasboundedstringhelper;
}


size_t MapLongInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapLongInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerAliasBoundedWStringHelper::MapLongInnerAliasBoundedWStringHelper()
{
    // map<long, Inner_alias_bounded_wstring_helper> m_var_map_long_inneraliasboundedwstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerAliasBoundedWStringHelper::~MapLongInnerAliasBoundedWStringHelper()
{
}

MapLongInnerAliasBoundedWStringHelper::MapLongInnerAliasBoundedWStringHelper(
        const MapLongInnerAliasBoundedWStringHelper& x)
{
    m_var_map_long_inneraliasboundedwstringhelper = x.m_var_map_long_inneraliasboundedwstringhelper;
}

MapLongInnerAliasBoundedWStringHelper::MapLongInnerAliasBoundedWStringHelper(
        MapLongInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_long_inneraliasboundedwstringhelper = std::move(x.m_var_map_long_inneraliasboundedwstringhelper);
}

MapLongInnerAliasBoundedWStringHelper& MapLongInnerAliasBoundedWStringHelper::operator =(
        const MapLongInnerAliasBoundedWStringHelper& x)
{

    m_var_map_long_inneraliasboundedwstringhelper = x.m_var_map_long_inneraliasboundedwstringhelper;

    return *this;
}

MapLongInnerAliasBoundedWStringHelper& MapLongInnerAliasBoundedWStringHelper::operator =(
        MapLongInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_long_inneraliasboundedwstringhelper = std::move(x.m_var_map_long_inneraliasboundedwstringhelper);

    return *this;
}

bool MapLongInnerAliasBoundedWStringHelper::operator ==(
        const MapLongInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_long_inneraliasboundedwstringhelper == x.m_var_map_long_inneraliasboundedwstringhelper);
}

bool MapLongInnerAliasBoundedWStringHelper::operator !=(
        const MapLongInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapLongInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapLongInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_inneraliasboundedwstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_inneraliasboundedwstringhelper.size());
    for (const auto& pair : m_var_map_long_inneraliasboundedwstringhelper)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapLongInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_long_inneraliasboundedwstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int32_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_long_inneraliasboundedwstringhelper[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_long_inneraliasboundedwstringhelper
 * @param _var_map_long_inneraliasboundedwstringhelper New value to be copied in member var_map_long_inneraliasboundedwstringhelper
 */
void MapLongInnerAliasBoundedWStringHelper::var_map_long_inneraliasboundedwstringhelper(
        const std::map<int32_t, Inner_alias_bounded_wstring_helper>& _var_map_long_inneraliasboundedwstringhelper)
{
    m_var_map_long_inneraliasboundedwstringhelper = _var_map_long_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_long_inneraliasboundedwstringhelper
 * @param _var_map_long_inneraliasboundedwstringhelper New value to be moved in member var_map_long_inneraliasboundedwstringhelper
 */
void MapLongInnerAliasBoundedWStringHelper::var_map_long_inneraliasboundedwstringhelper(
        std::map<int32_t, Inner_alias_bounded_wstring_helper>&& _var_map_long_inneraliasboundedwstringhelper)
{
    m_var_map_long_inneraliasboundedwstringhelper = std::move(_var_map_long_inneraliasboundedwstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_inneraliasboundedwstringhelper
 * @return Constant reference to member var_map_long_inneraliasboundedwstringhelper
 */
const std::map<int32_t, Inner_alias_bounded_wstring_helper>& MapLongInnerAliasBoundedWStringHelper::var_map_long_inneraliasboundedwstringhelper() const
{
    return m_var_map_long_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_inneraliasboundedwstringhelper
 * @return Reference to member var_map_long_inneraliasboundedwstringhelper
 */
std::map<int32_t, Inner_alias_bounded_wstring_helper>& MapLongInnerAliasBoundedWStringHelper::var_map_long_inneraliasboundedwstringhelper()
{
    return m_var_map_long_inneraliasboundedwstringhelper;
}


size_t MapLongInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapLongInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerEnumHelper::MapLongInnerEnumHelper()
{
    // map<long, InnerEnumHelper> m_var_map_long_innerenumhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerEnumHelper::~MapLongInnerEnumHelper()
{
}

MapLongInnerEnumHelper::MapLongInnerEnumHelper(
        const MapLongInnerEnumHelper& x)
{
    m_var_map_long_innerenumhelper = x.m_var_map_long_innerenumhelper;
}

MapLongInnerEnumHelper::MapLongInnerEnumHelper(
        MapLongInnerEnumHelper&& x) noexcept 
{
    m_var_map_long_innerenumhelper = std::move(x.m_var_map_long_innerenumhelper);
}

MapLongInnerEnumHelper& MapLongInnerEnumHelper::operator =(
        const MapLongInnerEnumHelper& x)
{

    m_var_map_long_innerenumhelper = x.m_var_map_long_innerenumhelper;

    return *this;
}

MapLongInnerEnumHelper& MapLongInnerEnumHelper::operator =(
        MapLongInnerEnumHelper&& x) noexcept
{

    m_var_map_long_innerenumhelper = std::move(x.m_var_map_long_innerenumhelper);

    return *this;
}

bool MapLongInnerEnumHelper::operator ==(
        const MapLongInnerEnumHelper& x) const
{

    return (m_var_map_long_innerenumhelper == x.m_var_map_long_innerenumhelper);
}

bool MapLongInnerEnumHelper::operator !=(
        const MapLongInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerEnumHelper_max_cdr_typesize;
}

size_t MapLongInnerEnumHelper::getCdrSerializedSize(
        const MapLongInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_innerenumhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_innerenumhelper.size());
    for (const auto& pair : m_var_map_long_innerenumhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapLongInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_long_innerenumhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        int32_t key;
        dcdr >> key;

        uint32_t value;
        dcdr >> value;
        m_var_map_long_innerenumhelper[key] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_long_innerenumhelper
 * @param _var_map_long_innerenumhelper New value to be copied in member var_map_long_innerenumhelper
 */
void MapLongInnerEnumHelper::var_map_long_innerenumhelper(
        const std::map<int32_t, InnerEnumHelper>& _var_map_long_innerenumhelper)
{
    m_var_map_long_innerenumhelper = _var_map_long_innerenumhelper;
}

/*!
 * @brief This function moves the value in member var_map_long_innerenumhelper
 * @param _var_map_long_innerenumhelper New value to be moved in member var_map_long_innerenumhelper
 */
void MapLongInnerEnumHelper::var_map_long_innerenumhelper(
        std::map<int32_t, InnerEnumHelper>&& _var_map_long_innerenumhelper)
{
    m_var_map_long_innerenumhelper = std::move(_var_map_long_innerenumhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_innerenumhelper
 * @return Constant reference to member var_map_long_innerenumhelper
 */
const std::map<int32_t, InnerEnumHelper>& MapLongInnerEnumHelper::var_map_long_innerenumhelper() const
{
    return m_var_map_long_innerenumhelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_innerenumhelper
 * @return Reference to member var_map_long_innerenumhelper
 */
std::map<int32_t, InnerEnumHelper>& MapLongInnerEnumHelper::var_map_long_innerenumhelper()
{
    return m_var_map_long_innerenumhelper;
}


size_t MapLongInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerEnumHelper_max_key_cdr_typesize;
}

bool MapLongInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerBitMaskHelper::MapLongInnerBitMaskHelper()
{
    // map<long, InnerBitMaskHelper> m_var_map_long_innerbitmaskhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerBitMaskHelper::~MapLongInnerBitMaskHelper()
{
}

MapLongInnerBitMaskHelper::MapLongInnerBitMaskHelper(
        const MapLongInnerBitMaskHelper& x)
{
    m_var_map_long_innerbitmaskhelper = x.m_var_map_long_innerbitmaskhelper;
}

MapLongInnerBitMaskHelper::MapLongInnerBitMaskHelper(
        MapLongInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_long_innerbitmaskhelper = std::move(x.m_var_map_long_innerbitmaskhelper);
}

MapLongInnerBitMaskHelper& MapLongInnerBitMaskHelper::operator =(
        const MapLongInnerBitMaskHelper& x)
{

    m_var_map_long_innerbitmaskhelper = x.m_var_map_long_innerbitmaskhelper;

    return *this;
}

MapLongInnerBitMaskHelper& MapLongInnerBitMaskHelper::operator =(
        MapLongInnerBitMaskHelper&& x) noexcept
{

    m_var_map_long_innerbitmaskhelper = std::move(x.m_var_map_long_innerbitmaskhelper);

    return *this;
}

bool MapLongInnerBitMaskHelper::operator ==(
        const MapLongInnerBitMaskHelper& x) const
{

    return (m_var_map_long_innerbitmaskhelper == x.m_var_map_long_innerbitmaskhelper);
}

bool MapLongInnerBitMaskHelper::operator !=(
        const MapLongInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapLongInnerBitMaskHelper::getCdrSerializedSize(
        const MapLongInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_innerbitmaskhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_innerbitmaskhelper.size());
    for (const auto& pair : m_var_map_long_innerbitmaskhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapLongInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_long_innerbitmaskhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        int32_t key;
        dcdr >> key;

        uint32_t value;        
        dcdr >> value;        
        m_var_map_long_innerbitmaskhelper[key] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_long_innerbitmaskhelper
 * @param _var_map_long_innerbitmaskhelper New value to be copied in member var_map_long_innerbitmaskhelper
 */
void MapLongInnerBitMaskHelper::var_map_long_innerbitmaskhelper(
        const std::map<int32_t, InnerBitMaskHelper>& _var_map_long_innerbitmaskhelper)
{
    m_var_map_long_innerbitmaskhelper = _var_map_long_innerbitmaskhelper;
}

/*!
 * @brief This function moves the value in member var_map_long_innerbitmaskhelper
 * @param _var_map_long_innerbitmaskhelper New value to be moved in member var_map_long_innerbitmaskhelper
 */
void MapLongInnerBitMaskHelper::var_map_long_innerbitmaskhelper(
        std::map<int32_t, InnerBitMaskHelper>&& _var_map_long_innerbitmaskhelper)
{
    m_var_map_long_innerbitmaskhelper = std::move(_var_map_long_innerbitmaskhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_innerbitmaskhelper
 * @return Constant reference to member var_map_long_innerbitmaskhelper
 */
const std::map<int32_t, InnerBitMaskHelper>& MapLongInnerBitMaskHelper::var_map_long_innerbitmaskhelper() const
{
    return m_var_map_long_innerbitmaskhelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_innerbitmaskhelper
 * @return Reference to member var_map_long_innerbitmaskhelper
 */
std::map<int32_t, InnerBitMaskHelper>& MapLongInnerBitMaskHelper::var_map_long_innerbitmaskhelper()
{
    return m_var_map_long_innerbitmaskhelper;
}


size_t MapLongInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapLongInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerAliasHelper::MapLongInnerAliasHelper()
{
    // map<long, InnerAliasHelper> m_var_map_long_inneraliashelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerAliasHelper::~MapLongInnerAliasHelper()
{
}

MapLongInnerAliasHelper::MapLongInnerAliasHelper(
        const MapLongInnerAliasHelper& x)
{
    m_var_map_long_inneraliashelper = x.m_var_map_long_inneraliashelper;
}

MapLongInnerAliasHelper::MapLongInnerAliasHelper(
        MapLongInnerAliasHelper&& x) noexcept 
{
    m_var_map_long_inneraliashelper = std::move(x.m_var_map_long_inneraliashelper);
}

MapLongInnerAliasHelper& MapLongInnerAliasHelper::operator =(
        const MapLongInnerAliasHelper& x)
{

    m_var_map_long_inneraliashelper = x.m_var_map_long_inneraliashelper;

    return *this;
}

MapLongInnerAliasHelper& MapLongInnerAliasHelper::operator =(
        MapLongInnerAliasHelper&& x) noexcept
{

    m_var_map_long_inneraliashelper = std::move(x.m_var_map_long_inneraliashelper);

    return *this;
}

bool MapLongInnerAliasHelper::operator ==(
        const MapLongInnerAliasHelper& x) const
{

    return (m_var_map_long_inneraliashelper == x.m_var_map_long_inneraliashelper);
}

bool MapLongInnerAliasHelper::operator !=(
        const MapLongInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasHelper_max_cdr_typesize;
}

size_t MapLongInnerAliasHelper::getCdrSerializedSize(
        const MapLongInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_inneraliashelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_inneraliashelper.size());
    for (const auto& pair : m_var_map_long_inneraliashelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_inneraliashelper;
}

/*!
 * @brief This function copies the value in member var_map_long_inneraliashelper
 * @param _var_map_long_inneraliashelper New value to be copied in member var_map_long_inneraliashelper
 */
void MapLongInnerAliasHelper::var_map_long_inneraliashelper(
        const std::map<int32_t, InnerAliasHelper>& _var_map_long_inneraliashelper)
{
    m_var_map_long_inneraliashelper = _var_map_long_inneraliashelper;
}

/*!
 * @brief This function moves the value in member var_map_long_inneraliashelper
 * @param _var_map_long_inneraliashelper New value to be moved in member var_map_long_inneraliashelper
 */
void MapLongInnerAliasHelper::var_map_long_inneraliashelper(
        std::map<int32_t, InnerAliasHelper>&& _var_map_long_inneraliashelper)
{
    m_var_map_long_inneraliashelper = std::move(_var_map_long_inneraliashelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_inneraliashelper
 * @return Constant reference to member var_map_long_inneraliashelper
 */
const std::map<int32_t, InnerAliasHelper>& MapLongInnerAliasHelper::var_map_long_inneraliashelper() const
{
    return m_var_map_long_inneraliashelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_inneraliashelper
 * @return Reference to member var_map_long_inneraliashelper
 */
std::map<int32_t, InnerAliasHelper>& MapLongInnerAliasHelper::var_map_long_inneraliashelper()
{
    return m_var_map_long_inneraliashelper;
}


size_t MapLongInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasHelper_max_key_cdr_typesize;
}

bool MapLongInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerAliasArrayHelper::MapLongInnerAliasArrayHelper()
{
    // map<long, Inner_alias_array_helper> m_var_map_long_inneraliasarrayhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerAliasArrayHelper::~MapLongInnerAliasArrayHelper()
{
}

MapLongInnerAliasArrayHelper::MapLongInnerAliasArrayHelper(
        const MapLongInnerAliasArrayHelper& x)
{
    m_var_map_long_inneraliasarrayhelper = x.m_var_map_long_inneraliasarrayhelper;
}

MapLongInnerAliasArrayHelper::MapLongInnerAliasArrayHelper(
        MapLongInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_long_inneraliasarrayhelper = std::move(x.m_var_map_long_inneraliasarrayhelper);
}

MapLongInnerAliasArrayHelper& MapLongInnerAliasArrayHelper::operator =(
        const MapLongInnerAliasArrayHelper& x)
{

    m_var_map_long_inneraliasarrayhelper = x.m_var_map_long_inneraliasarrayhelper;

    return *this;
}

MapLongInnerAliasArrayHelper& MapLongInnerAliasArrayHelper::operator =(
        MapLongInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_long_inneraliasarrayhelper = std::move(x.m_var_map_long_inneraliasarrayhelper);

    return *this;
}

bool MapLongInnerAliasArrayHelper::operator ==(
        const MapLongInnerAliasArrayHelper& x) const
{

    return (m_var_map_long_inneraliasarrayhelper == x.m_var_map_long_inneraliasarrayhelper);
}

bool MapLongInnerAliasArrayHelper::operator !=(
        const MapLongInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapLongInnerAliasArrayHelper::getCdrSerializedSize(
        const MapLongInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_inneraliasarrayhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_inneraliasarrayhelper.size());
    for (const auto& pair : m_var_map_long_inneraliasarrayhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_inneraliasarrayhelper;
}

/*!
 * @brief This function copies the value in member var_map_long_inneraliasarrayhelper
 * @param _var_map_long_inneraliasarrayhelper New value to be copied in member var_map_long_inneraliasarrayhelper
 */
void MapLongInnerAliasArrayHelper::var_map_long_inneraliasarrayhelper(
        const std::map<int32_t, Inner_alias_array_helper>& _var_map_long_inneraliasarrayhelper)
{
    m_var_map_long_inneraliasarrayhelper = _var_map_long_inneraliasarrayhelper;
}

/*!
 * @brief This function moves the value in member var_map_long_inneraliasarrayhelper
 * @param _var_map_long_inneraliasarrayhelper New value to be moved in member var_map_long_inneraliasarrayhelper
 */
void MapLongInnerAliasArrayHelper::var_map_long_inneraliasarrayhelper(
        std::map<int32_t, Inner_alias_array_helper>&& _var_map_long_inneraliasarrayhelper)
{
    m_var_map_long_inneraliasarrayhelper = std::move(_var_map_long_inneraliasarrayhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_inneraliasarrayhelper
 * @return Constant reference to member var_map_long_inneraliasarrayhelper
 */
const std::map<int32_t, Inner_alias_array_helper>& MapLongInnerAliasArrayHelper::var_map_long_inneraliasarrayhelper() const
{
    return m_var_map_long_inneraliasarrayhelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_inneraliasarrayhelper
 * @return Reference to member var_map_long_inneraliasarrayhelper
 */
std::map<int32_t, Inner_alias_array_helper>& MapLongInnerAliasArrayHelper::var_map_long_inneraliasarrayhelper()
{
    return m_var_map_long_inneraliasarrayhelper;
}


size_t MapLongInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapLongInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerAliasSequenceHelper::MapLongInnerAliasSequenceHelper()
{
    // map<long, Inner_alias_sequence_helper> m_var_map_long_inneraliassequencehelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerAliasSequenceHelper::~MapLongInnerAliasSequenceHelper()
{
}

MapLongInnerAliasSequenceHelper::MapLongInnerAliasSequenceHelper(
        const MapLongInnerAliasSequenceHelper& x)
{
    m_var_map_long_inneraliassequencehelper = x.m_var_map_long_inneraliassequencehelper;
}

MapLongInnerAliasSequenceHelper::MapLongInnerAliasSequenceHelper(
        MapLongInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_long_inneraliassequencehelper = std::move(x.m_var_map_long_inneraliassequencehelper);
}

MapLongInnerAliasSequenceHelper& MapLongInnerAliasSequenceHelper::operator =(
        const MapLongInnerAliasSequenceHelper& x)
{

    m_var_map_long_inneraliassequencehelper = x.m_var_map_long_inneraliassequencehelper;

    return *this;
}

MapLongInnerAliasSequenceHelper& MapLongInnerAliasSequenceHelper::operator =(
        MapLongInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_long_inneraliassequencehelper = std::move(x.m_var_map_long_inneraliassequencehelper);

    return *this;
}

bool MapLongInnerAliasSequenceHelper::operator ==(
        const MapLongInnerAliasSequenceHelper& x) const
{

    return (m_var_map_long_inneraliassequencehelper == x.m_var_map_long_inneraliassequencehelper);
}

bool MapLongInnerAliasSequenceHelper::operator !=(
        const MapLongInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapLongInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapLongInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_inneraliassequencehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapLongInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_inneraliassequencehelper.size());
    for (const auto& pair : m_var_map_long_inneraliassequencehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_inneraliassequencehelper;
}

/*!
 * @brief This function copies the value in member var_map_long_inneraliassequencehelper
 * @param _var_map_long_inneraliassequencehelper New value to be copied in member var_map_long_inneraliassequencehelper
 */
void MapLongInnerAliasSequenceHelper::var_map_long_inneraliassequencehelper(
        const std::map<int32_t, Inner_alias_sequence_helper>& _var_map_long_inneraliassequencehelper)
{
    m_var_map_long_inneraliassequencehelper = _var_map_long_inneraliassequencehelper;
}

/*!
 * @brief This function moves the value in member var_map_long_inneraliassequencehelper
 * @param _var_map_long_inneraliassequencehelper New value to be moved in member var_map_long_inneraliassequencehelper
 */
void MapLongInnerAliasSequenceHelper::var_map_long_inneraliassequencehelper(
        std::map<int32_t, Inner_alias_sequence_helper>&& _var_map_long_inneraliassequencehelper)
{
    m_var_map_long_inneraliassequencehelper = std::move(_var_map_long_inneraliassequencehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_inneraliassequencehelper
 * @return Constant reference to member var_map_long_inneraliassequencehelper
 */
const std::map<int32_t, Inner_alias_sequence_helper>& MapLongInnerAliasSequenceHelper::var_map_long_inneraliassequencehelper() const
{
    return m_var_map_long_inneraliassequencehelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_inneraliassequencehelper
 * @return Reference to member var_map_long_inneraliassequencehelper
 */
std::map<int32_t, Inner_alias_sequence_helper>& MapLongInnerAliasSequenceHelper::var_map_long_inneraliassequencehelper()
{
    return m_var_map_long_inneraliassequencehelper;
}


size_t MapLongInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapLongInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerAliasMapHelper::MapLongInnerAliasMapHelper()
{
    // map<long, Inner_alias_map_helper> m_var_map_long_inneraliasmaphelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerAliasMapHelper::~MapLongInnerAliasMapHelper()
{
}

MapLongInnerAliasMapHelper::MapLongInnerAliasMapHelper(
        const MapLongInnerAliasMapHelper& x)
{
    m_var_map_long_inneraliasmaphelper = x.m_var_map_long_inneraliasmaphelper;
}

MapLongInnerAliasMapHelper::MapLongInnerAliasMapHelper(
        MapLongInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_long_inneraliasmaphelper = std::move(x.m_var_map_long_inneraliasmaphelper);
}

MapLongInnerAliasMapHelper& MapLongInnerAliasMapHelper::operator =(
        const MapLongInnerAliasMapHelper& x)
{

    m_var_map_long_inneraliasmaphelper = x.m_var_map_long_inneraliasmaphelper;

    return *this;
}

MapLongInnerAliasMapHelper& MapLongInnerAliasMapHelper::operator =(
        MapLongInnerAliasMapHelper&& x) noexcept
{

    m_var_map_long_inneraliasmaphelper = std::move(x.m_var_map_long_inneraliasmaphelper);

    return *this;
}

bool MapLongInnerAliasMapHelper::operator ==(
        const MapLongInnerAliasMapHelper& x) const
{

    return (m_var_map_long_inneraliasmaphelper == x.m_var_map_long_inneraliasmaphelper);
}

bool MapLongInnerAliasMapHelper::operator !=(
        const MapLongInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapLongInnerAliasMapHelper::getCdrSerializedSize(
        const MapLongInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_inneraliasmaphelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_inneraliasmaphelper.size());
    for (const auto& pair : m_var_map_long_inneraliasmaphelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_inneraliasmaphelper;
}

/*!
 * @brief This function copies the value in member var_map_long_inneraliasmaphelper
 * @param _var_map_long_inneraliasmaphelper New value to be copied in member var_map_long_inneraliasmaphelper
 */
void MapLongInnerAliasMapHelper::var_map_long_inneraliasmaphelper(
        const std::map<int32_t, Inner_alias_map_helper>& _var_map_long_inneraliasmaphelper)
{
    m_var_map_long_inneraliasmaphelper = _var_map_long_inneraliasmaphelper;
}

/*!
 * @brief This function moves the value in member var_map_long_inneraliasmaphelper
 * @param _var_map_long_inneraliasmaphelper New value to be moved in member var_map_long_inneraliasmaphelper
 */
void MapLongInnerAliasMapHelper::var_map_long_inneraliasmaphelper(
        std::map<int32_t, Inner_alias_map_helper>&& _var_map_long_inneraliasmaphelper)
{
    m_var_map_long_inneraliasmaphelper = std::move(_var_map_long_inneraliasmaphelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_inneraliasmaphelper
 * @return Constant reference to member var_map_long_inneraliasmaphelper
 */
const std::map<int32_t, Inner_alias_map_helper>& MapLongInnerAliasMapHelper::var_map_long_inneraliasmaphelper() const
{
    return m_var_map_long_inneraliasmaphelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_inneraliasmaphelper
 * @return Reference to member var_map_long_inneraliasmaphelper
 */
std::map<int32_t, Inner_alias_map_helper>& MapLongInnerAliasMapHelper::var_map_long_inneraliasmaphelper()
{
    return m_var_map_long_inneraliasmaphelper;
}


size_t MapLongInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapLongInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerUnionHelper::MapLongInnerUnionHelper()
{
    // map<long, InnerUnionHelper> m_var_map_long_innerunionhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerUnionHelper::~MapLongInnerUnionHelper()
{
}

MapLongInnerUnionHelper::MapLongInnerUnionHelper(
        const MapLongInnerUnionHelper& x)
{
    m_var_map_long_innerunionhelper = x.m_var_map_long_innerunionhelper;
}

MapLongInnerUnionHelper::MapLongInnerUnionHelper(
        MapLongInnerUnionHelper&& x) noexcept 
{
    m_var_map_long_innerunionhelper = std::move(x.m_var_map_long_innerunionhelper);
}

MapLongInnerUnionHelper& MapLongInnerUnionHelper::operator =(
        const MapLongInnerUnionHelper& x)
{

    m_var_map_long_innerunionhelper = x.m_var_map_long_innerunionhelper;

    return *this;
}

MapLongInnerUnionHelper& MapLongInnerUnionHelper::operator =(
        MapLongInnerUnionHelper&& x) noexcept
{

    m_var_map_long_innerunionhelper = std::move(x.m_var_map_long_innerunionhelper);

    return *this;
}

bool MapLongInnerUnionHelper::operator ==(
        const MapLongInnerUnionHelper& x) const
{

    return (m_var_map_long_innerunionhelper == x.m_var_map_long_innerunionhelper);
}

bool MapLongInnerUnionHelper::operator !=(
        const MapLongInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerUnionHelper_max_cdr_typesize;
}

size_t MapLongInnerUnionHelper::getCdrSerializedSize(
        const MapLongInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_innerunionhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_innerunionhelper.size());
    for (const auto& pair : m_var_map_long_innerunionhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_innerunionhelper;
}

/*!
 * @brief This function copies the value in member var_map_long_innerunionhelper
 * @param _var_map_long_innerunionhelper New value to be copied in member var_map_long_innerunionhelper
 */
void MapLongInnerUnionHelper::var_map_long_innerunionhelper(
        const std::map<int32_t, InnerUnionHelper>& _var_map_long_innerunionhelper)
{
    m_var_map_long_innerunionhelper = _var_map_long_innerunionhelper;
}

/*!
 * @brief This function moves the value in member var_map_long_innerunionhelper
 * @param _var_map_long_innerunionhelper New value to be moved in member var_map_long_innerunionhelper
 */
void MapLongInnerUnionHelper::var_map_long_innerunionhelper(
        std::map<int32_t, InnerUnionHelper>&& _var_map_long_innerunionhelper)
{
    m_var_map_long_innerunionhelper = std::move(_var_map_long_innerunionhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_innerunionhelper
 * @return Constant reference to member var_map_long_innerunionhelper
 */
const std::map<int32_t, InnerUnionHelper>& MapLongInnerUnionHelper::var_map_long_innerunionhelper() const
{
    return m_var_map_long_innerunionhelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_innerunionhelper
 * @return Reference to member var_map_long_innerunionhelper
 */
std::map<int32_t, InnerUnionHelper>& MapLongInnerUnionHelper::var_map_long_innerunionhelper()
{
    return m_var_map_long_innerunionhelper;
}


size_t MapLongInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerUnionHelper_max_key_cdr_typesize;
}

bool MapLongInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerStructureHelper::MapLongInnerStructureHelper()
{
    // map<long, InnerStructureHelper> m_var_map_long_innerstructurehelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerStructureHelper::~MapLongInnerStructureHelper()
{
}

MapLongInnerStructureHelper::MapLongInnerStructureHelper(
        const MapLongInnerStructureHelper& x)
{
    m_var_map_long_innerstructurehelper = x.m_var_map_long_innerstructurehelper;
}

MapLongInnerStructureHelper::MapLongInnerStructureHelper(
        MapLongInnerStructureHelper&& x) noexcept 
{
    m_var_map_long_innerstructurehelper = std::move(x.m_var_map_long_innerstructurehelper);
}

MapLongInnerStructureHelper& MapLongInnerStructureHelper::operator =(
        const MapLongInnerStructureHelper& x)
{

    m_var_map_long_innerstructurehelper = x.m_var_map_long_innerstructurehelper;

    return *this;
}

MapLongInnerStructureHelper& MapLongInnerStructureHelper::operator =(
        MapLongInnerStructureHelper&& x) noexcept
{

    m_var_map_long_innerstructurehelper = std::move(x.m_var_map_long_innerstructurehelper);

    return *this;
}

bool MapLongInnerStructureHelper::operator ==(
        const MapLongInnerStructureHelper& x) const
{

    return (m_var_map_long_innerstructurehelper == x.m_var_map_long_innerstructurehelper);
}

bool MapLongInnerStructureHelper::operator !=(
        const MapLongInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerStructureHelper_max_cdr_typesize;
}

size_t MapLongInnerStructureHelper::getCdrSerializedSize(
        const MapLongInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_innerstructurehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_innerstructurehelper.size());
    for (const auto& pair : m_var_map_long_innerstructurehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_innerstructurehelper;
}

/*!
 * @brief This function copies the value in member var_map_long_innerstructurehelper
 * @param _var_map_long_innerstructurehelper New value to be copied in member var_map_long_innerstructurehelper
 */
void MapLongInnerStructureHelper::var_map_long_innerstructurehelper(
        const std::map<int32_t, InnerStructureHelper>& _var_map_long_innerstructurehelper)
{
    m_var_map_long_innerstructurehelper = _var_map_long_innerstructurehelper;
}

/*!
 * @brief This function moves the value in member var_map_long_innerstructurehelper
 * @param _var_map_long_innerstructurehelper New value to be moved in member var_map_long_innerstructurehelper
 */
void MapLongInnerStructureHelper::var_map_long_innerstructurehelper(
        std::map<int32_t, InnerStructureHelper>&& _var_map_long_innerstructurehelper)
{
    m_var_map_long_innerstructurehelper = std::move(_var_map_long_innerstructurehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_innerstructurehelper
 * @return Constant reference to member var_map_long_innerstructurehelper
 */
const std::map<int32_t, InnerStructureHelper>& MapLongInnerStructureHelper::var_map_long_innerstructurehelper() const
{
    return m_var_map_long_innerstructurehelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_innerstructurehelper
 * @return Reference to member var_map_long_innerstructurehelper
 */
std::map<int32_t, InnerStructureHelper>& MapLongInnerStructureHelper::var_map_long_innerstructurehelper()
{
    return m_var_map_long_innerstructurehelper;
}


size_t MapLongInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerStructureHelper_max_key_cdr_typesize;
}

bool MapLongInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongInnerBitsetHelper::MapLongInnerBitsetHelper()
{
    // map<long, InnerBitsetHelper> m_var_map_long_innerbitsethelper


    // Just to register all known types
    registermapsTypes();
}

MapLongInnerBitsetHelper::~MapLongInnerBitsetHelper()
{
}

MapLongInnerBitsetHelper::MapLongInnerBitsetHelper(
        const MapLongInnerBitsetHelper& x)
{
    m_var_map_long_innerbitsethelper = x.m_var_map_long_innerbitsethelper;
}

MapLongInnerBitsetHelper::MapLongInnerBitsetHelper(
        MapLongInnerBitsetHelper&& x) noexcept 
{
    m_var_map_long_innerbitsethelper = std::move(x.m_var_map_long_innerbitsethelper);
}

MapLongInnerBitsetHelper& MapLongInnerBitsetHelper::operator =(
        const MapLongInnerBitsetHelper& x)
{

    m_var_map_long_innerbitsethelper = x.m_var_map_long_innerbitsethelper;

    return *this;
}

MapLongInnerBitsetHelper& MapLongInnerBitsetHelper::operator =(
        MapLongInnerBitsetHelper&& x) noexcept
{

    m_var_map_long_innerbitsethelper = std::move(x.m_var_map_long_innerbitsethelper);

    return *this;
}

bool MapLongInnerBitsetHelper::operator ==(
        const MapLongInnerBitsetHelper& x) const
{

    return (m_var_map_long_innerbitsethelper == x.m_var_map_long_innerbitsethelper);
}

bool MapLongInnerBitsetHelper::operator !=(
        const MapLongInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapLongInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerBitsetHelper_max_cdr_typesize;
}

size_t MapLongInnerBitsetHelper::getCdrSerializedSize(
        const MapLongInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_long_innerbitsethelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapLongInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_long_innerbitsethelper.size());
    for (const auto& pair : m_var_map_long_innerbitsethelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_long_innerbitsethelper;
}

/*!
 * @brief This function copies the value in member var_map_long_innerbitsethelper
 * @param _var_map_long_innerbitsethelper New value to be copied in member var_map_long_innerbitsethelper
 */
void MapLongInnerBitsetHelper::var_map_long_innerbitsethelper(
        const std::map<int32_t, InnerBitsetHelper>& _var_map_long_innerbitsethelper)
{
    m_var_map_long_innerbitsethelper = _var_map_long_innerbitsethelper;
}

/*!
 * @brief This function moves the value in member var_map_long_innerbitsethelper
 * @param _var_map_long_innerbitsethelper New value to be moved in member var_map_long_innerbitsethelper
 */
void MapLongInnerBitsetHelper::var_map_long_innerbitsethelper(
        std::map<int32_t, InnerBitsetHelper>&& _var_map_long_innerbitsethelper)
{
    m_var_map_long_innerbitsethelper = std::move(_var_map_long_innerbitsethelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_long_innerbitsethelper
 * @return Constant reference to member var_map_long_innerbitsethelper
 */
const std::map<int32_t, InnerBitsetHelper>& MapLongInnerBitsetHelper::var_map_long_innerbitsethelper() const
{
    return m_var_map_long_innerbitsethelper;
}

/*!
 * @brief This function returns a reference to member var_map_long_innerbitsethelper
 * @return Reference to member var_map_long_innerbitsethelper
 */
std::map<int32_t, InnerBitsetHelper>& MapLongInnerBitsetHelper::var_map_long_innerbitsethelper()
{
    return m_var_map_long_innerbitsethelper;
}


size_t MapLongInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapLongInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapLongInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongShort::MapULongShort()
{
    // map<unsigned long, short> m_var_map_ulong_short


    // Just to register all known types
    registermapsTypes();
}

MapULongShort::~MapULongShort()
{
}

MapULongShort::MapULongShort(
        const MapULongShort& x)
{
    m_var_map_ulong_short = x.m_var_map_ulong_short;
}

MapULongShort::MapULongShort(
        MapULongShort&& x) noexcept 
{
    m_var_map_ulong_short = std::move(x.m_var_map_ulong_short);
}

MapULongShort& MapULongShort::operator =(
        const MapULongShort& x)
{

    m_var_map_ulong_short = x.m_var_map_ulong_short;

    return *this;
}

MapULongShort& MapULongShort::operator =(
        MapULongShort&& x) noexcept
{

    m_var_map_ulong_short = std::move(x.m_var_map_ulong_short);

    return *this;
}

bool MapULongShort::operator ==(
        const MapULongShort& x) const
{

    return (m_var_map_ulong_short == x.m_var_map_ulong_short);
}

bool MapULongShort::operator !=(
        const MapULongShort& x) const
{
    return !(*this == x);
}

size_t MapULongShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongShort_max_cdr_typesize;
}

size_t MapULongShort::getCdrSerializedSize(
        const MapULongShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_short())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapULongShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_short.size());
    for (const auto& pair : m_var_map_ulong_short)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_short;
}

/*!
 * @brief This function copies the value in member var_map_ulong_short
 * @param _var_map_ulong_short New value to be copied in member var_map_ulong_short
 */
void MapULongShort::var_map_ulong_short(
        const std::map<uint32_t, int16_t>& _var_map_ulong_short)
{
    m_var_map_ulong_short = _var_map_ulong_short;
}

/*!
 * @brief This function moves the value in member var_map_ulong_short
 * @param _var_map_ulong_short New value to be moved in member var_map_ulong_short
 */
void MapULongShort::var_map_ulong_short(
        std::map<uint32_t, int16_t>&& _var_map_ulong_short)
{
    m_var_map_ulong_short = std::move(_var_map_ulong_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_short
 * @return Constant reference to member var_map_ulong_short
 */
const std::map<uint32_t, int16_t>& MapULongShort::var_map_ulong_short() const
{
    return m_var_map_ulong_short;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_short
 * @return Reference to member var_map_ulong_short
 */
std::map<uint32_t, int16_t>& MapULongShort::var_map_ulong_short()
{
    return m_var_map_ulong_short;
}


size_t MapULongShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongShort_max_key_cdr_typesize;
}

bool MapULongShort::isKeyDefined()
{
    return false;
}

void MapULongShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongUShort::MapULongUShort()
{
    // map<unsigned long, unsigned short> m_var_map_ulong_ushort


    // Just to register all known types
    registermapsTypes();
}

MapULongUShort::~MapULongUShort()
{
}

MapULongUShort::MapULongUShort(
        const MapULongUShort& x)
{
    m_var_map_ulong_ushort = x.m_var_map_ulong_ushort;
}

MapULongUShort::MapULongUShort(
        MapULongUShort&& x) noexcept 
{
    m_var_map_ulong_ushort = std::move(x.m_var_map_ulong_ushort);
}

MapULongUShort& MapULongUShort::operator =(
        const MapULongUShort& x)
{

    m_var_map_ulong_ushort = x.m_var_map_ulong_ushort;

    return *this;
}

MapULongUShort& MapULongUShort::operator =(
        MapULongUShort&& x) noexcept
{

    m_var_map_ulong_ushort = std::move(x.m_var_map_ulong_ushort);

    return *this;
}

bool MapULongUShort::operator ==(
        const MapULongUShort& x) const
{

    return (m_var_map_ulong_ushort == x.m_var_map_ulong_ushort);
}

bool MapULongUShort::operator !=(
        const MapULongUShort& x) const
{
    return !(*this == x);
}

size_t MapULongUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongUShort_max_cdr_typesize;
}

size_t MapULongUShort::getCdrSerializedSize(
        const MapULongUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_ushort())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapULongUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_ushort.size());
    for (const auto& pair : m_var_map_ulong_ushort)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_ushort;
}

/*!
 * @brief This function copies the value in member var_map_ulong_ushort
 * @param _var_map_ulong_ushort New value to be copied in member var_map_ulong_ushort
 */
void MapULongUShort::var_map_ulong_ushort(
        const std::map<uint32_t, uint16_t>& _var_map_ulong_ushort)
{
    m_var_map_ulong_ushort = _var_map_ulong_ushort;
}

/*!
 * @brief This function moves the value in member var_map_ulong_ushort
 * @param _var_map_ulong_ushort New value to be moved in member var_map_ulong_ushort
 */
void MapULongUShort::var_map_ulong_ushort(
        std::map<uint32_t, uint16_t>&& _var_map_ulong_ushort)
{
    m_var_map_ulong_ushort = std::move(_var_map_ulong_ushort);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_ushort
 * @return Constant reference to member var_map_ulong_ushort
 */
const std::map<uint32_t, uint16_t>& MapULongUShort::var_map_ulong_ushort() const
{
    return m_var_map_ulong_ushort;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_ushort
 * @return Reference to member var_map_ulong_ushort
 */
std::map<uint32_t, uint16_t>& MapULongUShort::var_map_ulong_ushort()
{
    return m_var_map_ulong_ushort;
}


size_t MapULongUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongUShort_max_key_cdr_typesize;
}

bool MapULongUShort::isKeyDefined()
{
    return false;
}

void MapULongUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLong::MapULongLong()
{
    // map<unsigned long, long> m_var_map_ulong_long


    // Just to register all known types
    registermapsTypes();
}

MapULongLong::~MapULongLong()
{
}

MapULongLong::MapULongLong(
        const MapULongLong& x)
{
    m_var_map_ulong_long = x.m_var_map_ulong_long;
}

MapULongLong::MapULongLong(
        MapULongLong&& x) noexcept 
{
    m_var_map_ulong_long = std::move(x.m_var_map_ulong_long);
}

MapULongLong& MapULongLong::operator =(
        const MapULongLong& x)
{

    m_var_map_ulong_long = x.m_var_map_ulong_long;

    return *this;
}

MapULongLong& MapULongLong::operator =(
        MapULongLong&& x) noexcept
{

    m_var_map_ulong_long = std::move(x.m_var_map_ulong_long);

    return *this;
}

bool MapULongLong::operator ==(
        const MapULongLong& x) const
{

    return (m_var_map_ulong_long == x.m_var_map_ulong_long);
}

bool MapULongLong::operator !=(
        const MapULongLong& x) const
{
    return !(*this == x);
}

size_t MapULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLong_max_cdr_typesize;
}

size_t MapULongLong::getCdrSerializedSize(
        const MapULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_long())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_long.size());
    for (const auto& pair : m_var_map_ulong_long)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_long;
}

/*!
 * @brief This function copies the value in member var_map_ulong_long
 * @param _var_map_ulong_long New value to be copied in member var_map_ulong_long
 */
void MapULongLong::var_map_ulong_long(
        const std::map<uint32_t, int32_t>& _var_map_ulong_long)
{
    m_var_map_ulong_long = _var_map_ulong_long;
}

/*!
 * @brief This function moves the value in member var_map_ulong_long
 * @param _var_map_ulong_long New value to be moved in member var_map_ulong_long
 */
void MapULongLong::var_map_ulong_long(
        std::map<uint32_t, int32_t>&& _var_map_ulong_long)
{
    m_var_map_ulong_long = std::move(_var_map_ulong_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_long
 * @return Constant reference to member var_map_ulong_long
 */
const std::map<uint32_t, int32_t>& MapULongLong::var_map_ulong_long() const
{
    return m_var_map_ulong_long;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_long
 * @return Reference to member var_map_ulong_long
 */
std::map<uint32_t, int32_t>& MapULongLong::var_map_ulong_long()
{
    return m_var_map_ulong_long;
}


size_t MapULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLong_max_key_cdr_typesize;
}

bool MapULongLong::isKeyDefined()
{
    return false;
}

void MapULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongULong::MapULongULong()
{
    // map<unsigned long, unsigned long> m_var_map_ulong_ulong


    // Just to register all known types
    registermapsTypes();
}

MapULongULong::~MapULongULong()
{
}

MapULongULong::MapULongULong(
        const MapULongULong& x)
{
    m_var_map_ulong_ulong = x.m_var_map_ulong_ulong;
}

MapULongULong::MapULongULong(
        MapULongULong&& x) noexcept 
{
    m_var_map_ulong_ulong = std::move(x.m_var_map_ulong_ulong);
}

MapULongULong& MapULongULong::operator =(
        const MapULongULong& x)
{

    m_var_map_ulong_ulong = x.m_var_map_ulong_ulong;

    return *this;
}

MapULongULong& MapULongULong::operator =(
        MapULongULong&& x) noexcept
{

    m_var_map_ulong_ulong = std::move(x.m_var_map_ulong_ulong);

    return *this;
}

bool MapULongULong::operator ==(
        const MapULongULong& x) const
{

    return (m_var_map_ulong_ulong == x.m_var_map_ulong_ulong);
}

bool MapULongULong::operator !=(
        const MapULongULong& x) const
{
    return !(*this == x);
}

size_t MapULongULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongULong_max_cdr_typesize;
}

size_t MapULongULong::getCdrSerializedSize(
        const MapULongULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_ulong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_ulong.size());
    for (const auto& pair : m_var_map_ulong_ulong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_ulong;
}

/*!
 * @brief This function copies the value in member var_map_ulong_ulong
 * @param _var_map_ulong_ulong New value to be copied in member var_map_ulong_ulong
 */
void MapULongULong::var_map_ulong_ulong(
        const std::map<uint32_t, uint32_t>& _var_map_ulong_ulong)
{
    m_var_map_ulong_ulong = _var_map_ulong_ulong;
}

/*!
 * @brief This function moves the value in member var_map_ulong_ulong
 * @param _var_map_ulong_ulong New value to be moved in member var_map_ulong_ulong
 */
void MapULongULong::var_map_ulong_ulong(
        std::map<uint32_t, uint32_t>&& _var_map_ulong_ulong)
{
    m_var_map_ulong_ulong = std::move(_var_map_ulong_ulong);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_ulong
 * @return Constant reference to member var_map_ulong_ulong
 */
const std::map<uint32_t, uint32_t>& MapULongULong::var_map_ulong_ulong() const
{
    return m_var_map_ulong_ulong;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_ulong
 * @return Reference to member var_map_ulong_ulong
 */
std::map<uint32_t, uint32_t>& MapULongULong::var_map_ulong_ulong()
{
    return m_var_map_ulong_ulong;
}


size_t MapULongULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongULong_max_key_cdr_typesize;
}

bool MapULongULong::isKeyDefined()
{
    return false;
}

void MapULongULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapKeyULongValueLongLong::MapKeyULongValueLongLong()
{
    // map<unsigned long, long long> m_var_map_ulong_longlong


    // Just to register all known types
    registermapsTypes();
}

MapKeyULongValueLongLong::~MapKeyULongValueLongLong()
{
}

MapKeyULongValueLongLong::MapKeyULongValueLongLong(
        const MapKeyULongValueLongLong& x)
{
    m_var_map_ulong_longlong = x.m_var_map_ulong_longlong;
}

MapKeyULongValueLongLong::MapKeyULongValueLongLong(
        MapKeyULongValueLongLong&& x) noexcept 
{
    m_var_map_ulong_longlong = std::move(x.m_var_map_ulong_longlong);
}

MapKeyULongValueLongLong& MapKeyULongValueLongLong::operator =(
        const MapKeyULongValueLongLong& x)
{

    m_var_map_ulong_longlong = x.m_var_map_ulong_longlong;

    return *this;
}

MapKeyULongValueLongLong& MapKeyULongValueLongLong::operator =(
        MapKeyULongValueLongLong&& x) noexcept
{

    m_var_map_ulong_longlong = std::move(x.m_var_map_ulong_longlong);

    return *this;
}

bool MapKeyULongValueLongLong::operator ==(
        const MapKeyULongValueLongLong& x) const
{

    return (m_var_map_ulong_longlong == x.m_var_map_ulong_longlong);
}

bool MapKeyULongValueLongLong::operator !=(
        const MapKeyULongValueLongLong& x) const
{
    return !(*this == x);
}

size_t MapKeyULongValueLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapKeyULongValueLongLong_max_cdr_typesize;
}

size_t MapKeyULongValueLongLong::getCdrSerializedSize(
        const MapKeyULongValueLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_longlong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapKeyULongValueLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_longlong.size());
    for (const auto& pair : m_var_map_ulong_longlong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapKeyULongValueLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_longlong;
}

/*!
 * @brief This function copies the value in member var_map_ulong_longlong
 * @param _var_map_ulong_longlong New value to be copied in member var_map_ulong_longlong
 */
void MapKeyULongValueLongLong::var_map_ulong_longlong(
        const std::map<uint32_t, int64_t>& _var_map_ulong_longlong)
{
    m_var_map_ulong_longlong = _var_map_ulong_longlong;
}

/*!
 * @brief This function moves the value in member var_map_ulong_longlong
 * @param _var_map_ulong_longlong New value to be moved in member var_map_ulong_longlong
 */
void MapKeyULongValueLongLong::var_map_ulong_longlong(
        std::map<uint32_t, int64_t>&& _var_map_ulong_longlong)
{
    m_var_map_ulong_longlong = std::move(_var_map_ulong_longlong);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_longlong
 * @return Constant reference to member var_map_ulong_longlong
 */
const std::map<uint32_t, int64_t>& MapKeyULongValueLongLong::var_map_ulong_longlong() const
{
    return m_var_map_ulong_longlong;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_longlong
 * @return Reference to member var_map_ulong_longlong
 */
std::map<uint32_t, int64_t>& MapKeyULongValueLongLong::var_map_ulong_longlong()
{
    return m_var_map_ulong_longlong;
}


size_t MapKeyULongValueLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapKeyULongValueLongLong_max_key_cdr_typesize;
}

bool MapKeyULongValueLongLong::isKeyDefined()
{
    return false;
}

void MapKeyULongValueLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongULongLong::MapULongULongLong()
{
    // map<unsigned long, unsigned long long> m_var_map_ulong_ulonglong


    // Just to register all known types
    registermapsTypes();
}

MapULongULongLong::~MapULongULongLong()
{
}

MapULongULongLong::MapULongULongLong(
        const MapULongULongLong& x)
{
    m_var_map_ulong_ulonglong = x.m_var_map_ulong_ulonglong;
}

MapULongULongLong::MapULongULongLong(
        MapULongULongLong&& x) noexcept 
{
    m_var_map_ulong_ulonglong = std::move(x.m_var_map_ulong_ulonglong);
}

MapULongULongLong& MapULongULongLong::operator =(
        const MapULongULongLong& x)
{

    m_var_map_ulong_ulonglong = x.m_var_map_ulong_ulonglong;

    return *this;
}

MapULongULongLong& MapULongULongLong::operator =(
        MapULongULongLong&& x) noexcept
{

    m_var_map_ulong_ulonglong = std::move(x.m_var_map_ulong_ulonglong);

    return *this;
}

bool MapULongULongLong::operator ==(
        const MapULongULongLong& x) const
{

    return (m_var_map_ulong_ulonglong == x.m_var_map_ulong_ulonglong);
}

bool MapULongULongLong::operator !=(
        const MapULongULongLong& x) const
{
    return !(*this == x);
}

size_t MapULongULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongULongLong_max_cdr_typesize;
}

size_t MapULongULongLong::getCdrSerializedSize(
        const MapULongULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_ulonglong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapULongULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_ulonglong.size());
    for (const auto& pair : m_var_map_ulong_ulonglong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_ulonglong;
}

/*!
 * @brief This function copies the value in member var_map_ulong_ulonglong
 * @param _var_map_ulong_ulonglong New value to be copied in member var_map_ulong_ulonglong
 */
void MapULongULongLong::var_map_ulong_ulonglong(
        const std::map<uint32_t, uint64_t>& _var_map_ulong_ulonglong)
{
    m_var_map_ulong_ulonglong = _var_map_ulong_ulonglong;
}

/*!
 * @brief This function moves the value in member var_map_ulong_ulonglong
 * @param _var_map_ulong_ulonglong New value to be moved in member var_map_ulong_ulonglong
 */
void MapULongULongLong::var_map_ulong_ulonglong(
        std::map<uint32_t, uint64_t>&& _var_map_ulong_ulonglong)
{
    m_var_map_ulong_ulonglong = std::move(_var_map_ulong_ulonglong);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_ulonglong
 * @return Constant reference to member var_map_ulong_ulonglong
 */
const std::map<uint32_t, uint64_t>& MapULongULongLong::var_map_ulong_ulonglong() const
{
    return m_var_map_ulong_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_ulonglong
 * @return Reference to member var_map_ulong_ulonglong
 */
std::map<uint32_t, uint64_t>& MapULongULongLong::var_map_ulong_ulonglong()
{
    return m_var_map_ulong_ulonglong;
}


size_t MapULongULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongULongLong_max_key_cdr_typesize;
}

bool MapULongULongLong::isKeyDefined()
{
    return false;
}

void MapULongULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongFloat::MapULongFloat()
{
    // map<unsigned long, float> m_var_map_ulong_float


    // Just to register all known types
    registermapsTypes();
}

MapULongFloat::~MapULongFloat()
{
}

MapULongFloat::MapULongFloat(
        const MapULongFloat& x)
{
    m_var_map_ulong_float = x.m_var_map_ulong_float;
}

MapULongFloat::MapULongFloat(
        MapULongFloat&& x) noexcept 
{
    m_var_map_ulong_float = std::move(x.m_var_map_ulong_float);
}

MapULongFloat& MapULongFloat::operator =(
        const MapULongFloat& x)
{

    m_var_map_ulong_float = x.m_var_map_ulong_float;

    return *this;
}

MapULongFloat& MapULongFloat::operator =(
        MapULongFloat&& x) noexcept
{

    m_var_map_ulong_float = std::move(x.m_var_map_ulong_float);

    return *this;
}

bool MapULongFloat::operator ==(
        const MapULongFloat& x) const
{

    return (m_var_map_ulong_float == x.m_var_map_ulong_float);
}

bool MapULongFloat::operator !=(
        const MapULongFloat& x) const
{
    return !(*this == x);
}

size_t MapULongFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongFloat_max_cdr_typesize;
}

size_t MapULongFloat::getCdrSerializedSize(
        const MapULongFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_float())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_float.size());
    for (const auto& pair : m_var_map_ulong_float)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_float;
}

/*!
 * @brief This function copies the value in member var_map_ulong_float
 * @param _var_map_ulong_float New value to be copied in member var_map_ulong_float
 */
void MapULongFloat::var_map_ulong_float(
        const std::map<uint32_t, float>& _var_map_ulong_float)
{
    m_var_map_ulong_float = _var_map_ulong_float;
}

/*!
 * @brief This function moves the value in member var_map_ulong_float
 * @param _var_map_ulong_float New value to be moved in member var_map_ulong_float
 */
void MapULongFloat::var_map_ulong_float(
        std::map<uint32_t, float>&& _var_map_ulong_float)
{
    m_var_map_ulong_float = std::move(_var_map_ulong_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_float
 * @return Constant reference to member var_map_ulong_float
 */
const std::map<uint32_t, float>& MapULongFloat::var_map_ulong_float() const
{
    return m_var_map_ulong_float;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_float
 * @return Reference to member var_map_ulong_float
 */
std::map<uint32_t, float>& MapULongFloat::var_map_ulong_float()
{
    return m_var_map_ulong_float;
}


size_t MapULongFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongFloat_max_key_cdr_typesize;
}

bool MapULongFloat::isKeyDefined()
{
    return false;
}

void MapULongFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongDouble::MapULongDouble()
{
    // map<unsigned long, double> m_var_map_ulong_double


    // Just to register all known types
    registermapsTypes();
}

MapULongDouble::~MapULongDouble()
{
}

MapULongDouble::MapULongDouble(
        const MapULongDouble& x)
{
    m_var_map_ulong_double = x.m_var_map_ulong_double;
}

MapULongDouble::MapULongDouble(
        MapULongDouble&& x) noexcept 
{
    m_var_map_ulong_double = std::move(x.m_var_map_ulong_double);
}

MapULongDouble& MapULongDouble::operator =(
        const MapULongDouble& x)
{

    m_var_map_ulong_double = x.m_var_map_ulong_double;

    return *this;
}

MapULongDouble& MapULongDouble::operator =(
        MapULongDouble&& x) noexcept
{

    m_var_map_ulong_double = std::move(x.m_var_map_ulong_double);

    return *this;
}

bool MapULongDouble::operator ==(
        const MapULongDouble& x) const
{

    return (m_var_map_ulong_double == x.m_var_map_ulong_double);
}

bool MapULongDouble::operator !=(
        const MapULongDouble& x) const
{
    return !(*this == x);
}

size_t MapULongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongDouble_max_cdr_typesize;
}

size_t MapULongDouble::getCdrSerializedSize(
        const MapULongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_double())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapULongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_double.size());
    for (const auto& pair : m_var_map_ulong_double)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_double;
}

/*!
 * @brief This function copies the value in member var_map_ulong_double
 * @param _var_map_ulong_double New value to be copied in member var_map_ulong_double
 */
void MapULongDouble::var_map_ulong_double(
        const std::map<uint32_t, double>& _var_map_ulong_double)
{
    m_var_map_ulong_double = _var_map_ulong_double;
}

/*!
 * @brief This function moves the value in member var_map_ulong_double
 * @param _var_map_ulong_double New value to be moved in member var_map_ulong_double
 */
void MapULongDouble::var_map_ulong_double(
        std::map<uint32_t, double>&& _var_map_ulong_double)
{
    m_var_map_ulong_double = std::move(_var_map_ulong_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_double
 * @return Constant reference to member var_map_ulong_double
 */
const std::map<uint32_t, double>& MapULongDouble::var_map_ulong_double() const
{
    return m_var_map_ulong_double;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_double
 * @return Reference to member var_map_ulong_double
 */
std::map<uint32_t, double>& MapULongDouble::var_map_ulong_double()
{
    return m_var_map_ulong_double;
}


size_t MapULongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongDouble_max_key_cdr_typesize;
}

bool MapULongDouble::isKeyDefined()
{
    return false;
}

void MapULongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapKeyULongValueLongDouble::MapKeyULongValueLongDouble()
{
    // map<unsigned long, long double> m_var_map_ulong_longdouble


    // Just to register all known types
    registermapsTypes();
}

MapKeyULongValueLongDouble::~MapKeyULongValueLongDouble()
{
}

MapKeyULongValueLongDouble::MapKeyULongValueLongDouble(
        const MapKeyULongValueLongDouble& x)
{
    m_var_map_ulong_longdouble = x.m_var_map_ulong_longdouble;
}

MapKeyULongValueLongDouble::MapKeyULongValueLongDouble(
        MapKeyULongValueLongDouble&& x) noexcept 
{
    m_var_map_ulong_longdouble = std::move(x.m_var_map_ulong_longdouble);
}

MapKeyULongValueLongDouble& MapKeyULongValueLongDouble::operator =(
        const MapKeyULongValueLongDouble& x)
{

    m_var_map_ulong_longdouble = x.m_var_map_ulong_longdouble;

    return *this;
}

MapKeyULongValueLongDouble& MapKeyULongValueLongDouble::operator =(
        MapKeyULongValueLongDouble&& x) noexcept
{

    m_var_map_ulong_longdouble = std::move(x.m_var_map_ulong_longdouble);

    return *this;
}

bool MapKeyULongValueLongDouble::operator ==(
        const MapKeyULongValueLongDouble& x) const
{

    return (m_var_map_ulong_longdouble == x.m_var_map_ulong_longdouble);
}

bool MapKeyULongValueLongDouble::operator !=(
        const MapKeyULongValueLongDouble& x) const
{
    return !(*this == x);
}

size_t MapKeyULongValueLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapKeyULongValueLongDouble_max_cdr_typesize;
}

size_t MapKeyULongValueLongDouble::getCdrSerializedSize(
        const MapKeyULongValueLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_longdouble())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapKeyULongValueLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_longdouble.size());
    for (const auto& pair : m_var_map_ulong_longdouble)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapKeyULongValueLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_longdouble;
}

/*!
 * @brief This function copies the value in member var_map_ulong_longdouble
 * @param _var_map_ulong_longdouble New value to be copied in member var_map_ulong_longdouble
 */
void MapKeyULongValueLongDouble::var_map_ulong_longdouble(
        const std::map<uint32_t, long double>& _var_map_ulong_longdouble)
{
    m_var_map_ulong_longdouble = _var_map_ulong_longdouble;
}

/*!
 * @brief This function moves the value in member var_map_ulong_longdouble
 * @param _var_map_ulong_longdouble New value to be moved in member var_map_ulong_longdouble
 */
void MapKeyULongValueLongDouble::var_map_ulong_longdouble(
        std::map<uint32_t, long double>&& _var_map_ulong_longdouble)
{
    m_var_map_ulong_longdouble = std::move(_var_map_ulong_longdouble);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_longdouble
 * @return Constant reference to member var_map_ulong_longdouble
 */
const std::map<uint32_t, long double>& MapKeyULongValueLongDouble::var_map_ulong_longdouble() const
{
    return m_var_map_ulong_longdouble;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_longdouble
 * @return Reference to member var_map_ulong_longdouble
 */
std::map<uint32_t, long double>& MapKeyULongValueLongDouble::var_map_ulong_longdouble()
{
    return m_var_map_ulong_longdouble;
}


size_t MapKeyULongValueLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapKeyULongValueLongDouble_max_key_cdr_typesize;
}

bool MapKeyULongValueLongDouble::isKeyDefined()
{
    return false;
}

void MapKeyULongValueLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongBoolean::MapULongBoolean()
{
    // map<unsigned long, boolean> m_var_map_ulong_boolean


    // Just to register all known types
    registermapsTypes();
}

MapULongBoolean::~MapULongBoolean()
{
}

MapULongBoolean::MapULongBoolean(
        const MapULongBoolean& x)
{
    m_var_map_ulong_boolean = x.m_var_map_ulong_boolean;
}

MapULongBoolean::MapULongBoolean(
        MapULongBoolean&& x) noexcept 
{
    m_var_map_ulong_boolean = std::move(x.m_var_map_ulong_boolean);
}

MapULongBoolean& MapULongBoolean::operator =(
        const MapULongBoolean& x)
{

    m_var_map_ulong_boolean = x.m_var_map_ulong_boolean;

    return *this;
}

MapULongBoolean& MapULongBoolean::operator =(
        MapULongBoolean&& x) noexcept
{

    m_var_map_ulong_boolean = std::move(x.m_var_map_ulong_boolean);

    return *this;
}

bool MapULongBoolean::operator ==(
        const MapULongBoolean& x) const
{

    return (m_var_map_ulong_boolean == x.m_var_map_ulong_boolean);
}

bool MapULongBoolean::operator !=(
        const MapULongBoolean& x) const
{
    return !(*this == x);
}

size_t MapULongBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongBoolean_max_cdr_typesize;
}

size_t MapULongBoolean::getCdrSerializedSize(
        const MapULongBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_boolean())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapULongBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_boolean.size());
    for (const auto& pair : m_var_map_ulong_boolean)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_boolean;
}

/*!
 * @brief This function copies the value in member var_map_ulong_boolean
 * @param _var_map_ulong_boolean New value to be copied in member var_map_ulong_boolean
 */
void MapULongBoolean::var_map_ulong_boolean(
        const std::map<uint32_t, bool>& _var_map_ulong_boolean)
{
    m_var_map_ulong_boolean = _var_map_ulong_boolean;
}

/*!
 * @brief This function moves the value in member var_map_ulong_boolean
 * @param _var_map_ulong_boolean New value to be moved in member var_map_ulong_boolean
 */
void MapULongBoolean::var_map_ulong_boolean(
        std::map<uint32_t, bool>&& _var_map_ulong_boolean)
{
    m_var_map_ulong_boolean = std::move(_var_map_ulong_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_boolean
 * @return Constant reference to member var_map_ulong_boolean
 */
const std::map<uint32_t, bool>& MapULongBoolean::var_map_ulong_boolean() const
{
    return m_var_map_ulong_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_boolean
 * @return Reference to member var_map_ulong_boolean
 */
std::map<uint32_t, bool>& MapULongBoolean::var_map_ulong_boolean()
{
    return m_var_map_ulong_boolean;
}


size_t MapULongBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongBoolean_max_key_cdr_typesize;
}

bool MapULongBoolean::isKeyDefined()
{
    return false;
}

void MapULongBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongOctet::MapULongOctet()
{
    // map<unsigned long, octet> m_var_map_ulong_octet


    // Just to register all known types
    registermapsTypes();
}

MapULongOctet::~MapULongOctet()
{
}

MapULongOctet::MapULongOctet(
        const MapULongOctet& x)
{
    m_var_map_ulong_octet = x.m_var_map_ulong_octet;
}

MapULongOctet::MapULongOctet(
        MapULongOctet&& x) noexcept 
{
    m_var_map_ulong_octet = std::move(x.m_var_map_ulong_octet);
}

MapULongOctet& MapULongOctet::operator =(
        const MapULongOctet& x)
{

    m_var_map_ulong_octet = x.m_var_map_ulong_octet;

    return *this;
}

MapULongOctet& MapULongOctet::operator =(
        MapULongOctet&& x) noexcept
{

    m_var_map_ulong_octet = std::move(x.m_var_map_ulong_octet);

    return *this;
}

bool MapULongOctet::operator ==(
        const MapULongOctet& x) const
{

    return (m_var_map_ulong_octet == x.m_var_map_ulong_octet);
}

bool MapULongOctet::operator !=(
        const MapULongOctet& x) const
{
    return !(*this == x);
}

size_t MapULongOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongOctet_max_cdr_typesize;
}

size_t MapULongOctet::getCdrSerializedSize(
        const MapULongOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_octet())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapULongOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_octet.size());
    for (const auto& pair : m_var_map_ulong_octet)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_octet;
}

/*!
 * @brief This function copies the value in member var_map_ulong_octet
 * @param _var_map_ulong_octet New value to be copied in member var_map_ulong_octet
 */
void MapULongOctet::var_map_ulong_octet(
        const std::map<uint32_t, uint8_t>& _var_map_ulong_octet)
{
    m_var_map_ulong_octet = _var_map_ulong_octet;
}

/*!
 * @brief This function moves the value in member var_map_ulong_octet
 * @param _var_map_ulong_octet New value to be moved in member var_map_ulong_octet
 */
void MapULongOctet::var_map_ulong_octet(
        std::map<uint32_t, uint8_t>&& _var_map_ulong_octet)
{
    m_var_map_ulong_octet = std::move(_var_map_ulong_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_octet
 * @return Constant reference to member var_map_ulong_octet
 */
const std::map<uint32_t, uint8_t>& MapULongOctet::var_map_ulong_octet() const
{
    return m_var_map_ulong_octet;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_octet
 * @return Reference to member var_map_ulong_octet
 */
std::map<uint32_t, uint8_t>& MapULongOctet::var_map_ulong_octet()
{
    return m_var_map_ulong_octet;
}


size_t MapULongOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongOctet_max_key_cdr_typesize;
}

bool MapULongOctet::isKeyDefined()
{
    return false;
}

void MapULongOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongChar::MapULongChar()
{
    // map<unsigned long, char> m_var_map_ulong_char


    // Just to register all known types
    registermapsTypes();
}

MapULongChar::~MapULongChar()
{
}

MapULongChar::MapULongChar(
        const MapULongChar& x)
{
    m_var_map_ulong_char = x.m_var_map_ulong_char;
}

MapULongChar::MapULongChar(
        MapULongChar&& x) noexcept 
{
    m_var_map_ulong_char = std::move(x.m_var_map_ulong_char);
}

MapULongChar& MapULongChar::operator =(
        const MapULongChar& x)
{

    m_var_map_ulong_char = x.m_var_map_ulong_char;

    return *this;
}

MapULongChar& MapULongChar::operator =(
        MapULongChar&& x) noexcept
{

    m_var_map_ulong_char = std::move(x.m_var_map_ulong_char);

    return *this;
}

bool MapULongChar::operator ==(
        const MapULongChar& x) const
{

    return (m_var_map_ulong_char == x.m_var_map_ulong_char);
}

bool MapULongChar::operator !=(
        const MapULongChar& x) const
{
    return !(*this == x);
}

size_t MapULongChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongChar_max_cdr_typesize;
}

size_t MapULongChar::getCdrSerializedSize(
        const MapULongChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_char())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapULongChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_char.size());
    for (const auto& pair : m_var_map_ulong_char)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_char;
}

/*!
 * @brief This function copies the value in member var_map_ulong_char
 * @param _var_map_ulong_char New value to be copied in member var_map_ulong_char
 */
void MapULongChar::var_map_ulong_char(
        const std::map<uint32_t, char>& _var_map_ulong_char)
{
    m_var_map_ulong_char = _var_map_ulong_char;
}

/*!
 * @brief This function moves the value in member var_map_ulong_char
 * @param _var_map_ulong_char New value to be moved in member var_map_ulong_char
 */
void MapULongChar::var_map_ulong_char(
        std::map<uint32_t, char>&& _var_map_ulong_char)
{
    m_var_map_ulong_char = std::move(_var_map_ulong_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_char
 * @return Constant reference to member var_map_ulong_char
 */
const std::map<uint32_t, char>& MapULongChar::var_map_ulong_char() const
{
    return m_var_map_ulong_char;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_char
 * @return Reference to member var_map_ulong_char
 */
std::map<uint32_t, char>& MapULongChar::var_map_ulong_char()
{
    return m_var_map_ulong_char;
}


size_t MapULongChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongChar_max_key_cdr_typesize;
}

bool MapULongChar::isKeyDefined()
{
    return false;
}

void MapULongChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongWChar::MapULongWChar()
{
    // map<unsigned long, wchar> m_var_map_ulong_wchar


    // Just to register all known types
    registermapsTypes();
}

MapULongWChar::~MapULongWChar()
{
}

MapULongWChar::MapULongWChar(
        const MapULongWChar& x)
{
    m_var_map_ulong_wchar = x.m_var_map_ulong_wchar;
}

MapULongWChar::MapULongWChar(
        MapULongWChar&& x) noexcept 
{
    m_var_map_ulong_wchar = std::move(x.m_var_map_ulong_wchar);
}

MapULongWChar& MapULongWChar::operator =(
        const MapULongWChar& x)
{

    m_var_map_ulong_wchar = x.m_var_map_ulong_wchar;

    return *this;
}

MapULongWChar& MapULongWChar::operator =(
        MapULongWChar&& x) noexcept
{

    m_var_map_ulong_wchar = std::move(x.m_var_map_ulong_wchar);

    return *this;
}

bool MapULongWChar::operator ==(
        const MapULongWChar& x) const
{

    return (m_var_map_ulong_wchar == x.m_var_map_ulong_wchar);
}

bool MapULongWChar::operator !=(
        const MapULongWChar& x) const
{
    return !(*this == x);
}

size_t MapULongWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongWChar_max_cdr_typesize;
}

size_t MapULongWChar::getCdrSerializedSize(
        const MapULongWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_wchar())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_wchar.size());
    for (const auto& pair : m_var_map_ulong_wchar)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_wchar;
}

/*!
 * @brief This function copies the value in member var_map_ulong_wchar
 * @param _var_map_ulong_wchar New value to be copied in member var_map_ulong_wchar
 */
void MapULongWChar::var_map_ulong_wchar(
        const std::map<uint32_t, wchar_t>& _var_map_ulong_wchar)
{
    m_var_map_ulong_wchar = _var_map_ulong_wchar;
}

/*!
 * @brief This function moves the value in member var_map_ulong_wchar
 * @param _var_map_ulong_wchar New value to be moved in member var_map_ulong_wchar
 */
void MapULongWChar::var_map_ulong_wchar(
        std::map<uint32_t, wchar_t>&& _var_map_ulong_wchar)
{
    m_var_map_ulong_wchar = std::move(_var_map_ulong_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_wchar
 * @return Constant reference to member var_map_ulong_wchar
 */
const std::map<uint32_t, wchar_t>& MapULongWChar::var_map_ulong_wchar() const
{
    return m_var_map_ulong_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_wchar
 * @return Reference to member var_map_ulong_wchar
 */
std::map<uint32_t, wchar_t>& MapULongWChar::var_map_ulong_wchar()
{
    return m_var_map_ulong_wchar;
}


size_t MapULongWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongWChar_max_key_cdr_typesize;
}

bool MapULongWChar::isKeyDefined()
{
    return false;
}

void MapULongWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongString::MapULongString()
{
    // map<unsigned long, string> m_var_map_ulong_string


    // Just to register all known types
    registermapsTypes();
}

MapULongString::~MapULongString()
{
}

MapULongString::MapULongString(
        const MapULongString& x)
{
    m_var_map_ulong_string = x.m_var_map_ulong_string;
}

MapULongString::MapULongString(
        MapULongString&& x) noexcept 
{
    m_var_map_ulong_string = std::move(x.m_var_map_ulong_string);
}

MapULongString& MapULongString::operator =(
        const MapULongString& x)
{

    m_var_map_ulong_string = x.m_var_map_ulong_string;

    return *this;
}

MapULongString& MapULongString::operator =(
        MapULongString&& x) noexcept
{

    m_var_map_ulong_string = std::move(x.m_var_map_ulong_string);

    return *this;
}

bool MapULongString::operator ==(
        const MapULongString& x) const
{

    return (m_var_map_ulong_string == x.m_var_map_ulong_string);
}

bool MapULongString::operator !=(
        const MapULongString& x) const
{
    return !(*this == x);
}

size_t MapULongString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongString_max_cdr_typesize;
}

size_t MapULongString::getCdrSerializedSize(
        const MapULongString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_string())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapULongString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_string.size());
    for (const auto& pair : m_var_map_ulong_string)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapULongString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ulong_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint32_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_ulong_string[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_ulong_string
 * @param _var_map_ulong_string New value to be copied in member var_map_ulong_string
 */
void MapULongString::var_map_ulong_string(
        const std::map<uint32_t, std::string>& _var_map_ulong_string)
{
    m_var_map_ulong_string = _var_map_ulong_string;
}

/*!
 * @brief This function moves the value in member var_map_ulong_string
 * @param _var_map_ulong_string New value to be moved in member var_map_ulong_string
 */
void MapULongString::var_map_ulong_string(
        std::map<uint32_t, std::string>&& _var_map_ulong_string)
{
    m_var_map_ulong_string = std::move(_var_map_ulong_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_string
 * @return Constant reference to member var_map_ulong_string
 */
const std::map<uint32_t, std::string>& MapULongString::var_map_ulong_string() const
{
    return m_var_map_ulong_string;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_string
 * @return Reference to member var_map_ulong_string
 */
std::map<uint32_t, std::string>& MapULongString::var_map_ulong_string()
{
    return m_var_map_ulong_string;
}


size_t MapULongString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongString_max_key_cdr_typesize;
}

bool MapULongString::isKeyDefined()
{
    return false;
}

void MapULongString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongWString::MapULongWString()
{
    // map<unsigned long, wstring> m_var_map_ulong_wstring


    // Just to register all known types
    registermapsTypes();
}

MapULongWString::~MapULongWString()
{
}

MapULongWString::MapULongWString(
        const MapULongWString& x)
{
    m_var_map_ulong_wstring = x.m_var_map_ulong_wstring;
}

MapULongWString::MapULongWString(
        MapULongWString&& x) noexcept 
{
    m_var_map_ulong_wstring = std::move(x.m_var_map_ulong_wstring);
}

MapULongWString& MapULongWString::operator =(
        const MapULongWString& x)
{

    m_var_map_ulong_wstring = x.m_var_map_ulong_wstring;

    return *this;
}

MapULongWString& MapULongWString::operator =(
        MapULongWString&& x) noexcept
{

    m_var_map_ulong_wstring = std::move(x.m_var_map_ulong_wstring);

    return *this;
}

bool MapULongWString::operator ==(
        const MapULongWString& x) const
{

    return (m_var_map_ulong_wstring == x.m_var_map_ulong_wstring);
}

bool MapULongWString::operator !=(
        const MapULongWString& x) const
{
    return !(*this == x);
}

size_t MapULongWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongWString_max_cdr_typesize;
}

size_t MapULongWString::getCdrSerializedSize(
        const MapULongWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_wstring())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapULongWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_wstring.size());
    for (const auto& pair : m_var_map_ulong_wstring)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapULongWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ulong_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint32_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_ulong_wstring[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_ulong_wstring
 * @param _var_map_ulong_wstring New value to be copied in member var_map_ulong_wstring
 */
void MapULongWString::var_map_ulong_wstring(
        const std::map<uint32_t, std::wstring>& _var_map_ulong_wstring)
{
    m_var_map_ulong_wstring = _var_map_ulong_wstring;
}

/*!
 * @brief This function moves the value in member var_map_ulong_wstring
 * @param _var_map_ulong_wstring New value to be moved in member var_map_ulong_wstring
 */
void MapULongWString::var_map_ulong_wstring(
        std::map<uint32_t, std::wstring>&& _var_map_ulong_wstring)
{
    m_var_map_ulong_wstring = std::move(_var_map_ulong_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_wstring
 * @return Constant reference to member var_map_ulong_wstring
 */
const std::map<uint32_t, std::wstring>& MapULongWString::var_map_ulong_wstring() const
{
    return m_var_map_ulong_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_wstring
 * @return Reference to member var_map_ulong_wstring
 */
std::map<uint32_t, std::wstring>& MapULongWString::var_map_ulong_wstring()
{
    return m_var_map_ulong_wstring;
}


size_t MapULongWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongWString_max_key_cdr_typesize;
}

bool MapULongWString::isKeyDefined()
{
    return false;
}

void MapULongWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerAliasBoundedStringHelper::MapULongInnerAliasBoundedStringHelper()
{
    // map<unsigned long, Inner_alias_bounded_string_helper> m_var_map_ulong_inneraliasboundedstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerAliasBoundedStringHelper::~MapULongInnerAliasBoundedStringHelper()
{
}

MapULongInnerAliasBoundedStringHelper::MapULongInnerAliasBoundedStringHelper(
        const MapULongInnerAliasBoundedStringHelper& x)
{
    m_var_map_ulong_inneraliasboundedstringhelper = x.m_var_map_ulong_inneraliasboundedstringhelper;
}

MapULongInnerAliasBoundedStringHelper::MapULongInnerAliasBoundedStringHelper(
        MapULongInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_ulong_inneraliasboundedstringhelper = std::move(x.m_var_map_ulong_inneraliasboundedstringhelper);
}

MapULongInnerAliasBoundedStringHelper& MapULongInnerAliasBoundedStringHelper::operator =(
        const MapULongInnerAliasBoundedStringHelper& x)
{

    m_var_map_ulong_inneraliasboundedstringhelper = x.m_var_map_ulong_inneraliasboundedstringhelper;

    return *this;
}

MapULongInnerAliasBoundedStringHelper& MapULongInnerAliasBoundedStringHelper::operator =(
        MapULongInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_ulong_inneraliasboundedstringhelper = std::move(x.m_var_map_ulong_inneraliasboundedstringhelper);

    return *this;
}

bool MapULongInnerAliasBoundedStringHelper::operator ==(
        const MapULongInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_ulong_inneraliasboundedstringhelper == x.m_var_map_ulong_inneraliasboundedstringhelper);
}

bool MapULongInnerAliasBoundedStringHelper::operator !=(
        const MapULongInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapULongInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapULongInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_inneraliasboundedstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_inneraliasboundedstringhelper.size());
    for (const auto& pair : m_var_map_ulong_inneraliasboundedstringhelper)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapULongInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ulong_inneraliasboundedstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint32_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_ulong_inneraliasboundedstringhelper[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_ulong_inneraliasboundedstringhelper
 * @param _var_map_ulong_inneraliasboundedstringhelper New value to be copied in member var_map_ulong_inneraliasboundedstringhelper
 */
void MapULongInnerAliasBoundedStringHelper::var_map_ulong_inneraliasboundedstringhelper(
        const std::map<uint32_t, Inner_alias_bounded_string_helper>& _var_map_ulong_inneraliasboundedstringhelper)
{
    m_var_map_ulong_inneraliasboundedstringhelper = _var_map_ulong_inneraliasboundedstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_inneraliasboundedstringhelper
 * @param _var_map_ulong_inneraliasboundedstringhelper New value to be moved in member var_map_ulong_inneraliasboundedstringhelper
 */
void MapULongInnerAliasBoundedStringHelper::var_map_ulong_inneraliasboundedstringhelper(
        std::map<uint32_t, Inner_alias_bounded_string_helper>&& _var_map_ulong_inneraliasboundedstringhelper)
{
    m_var_map_ulong_inneraliasboundedstringhelper = std::move(_var_map_ulong_inneraliasboundedstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_inneraliasboundedstringhelper
 * @return Constant reference to member var_map_ulong_inneraliasboundedstringhelper
 */
const std::map<uint32_t, Inner_alias_bounded_string_helper>& MapULongInnerAliasBoundedStringHelper::var_map_ulong_inneraliasboundedstringhelper() const
{
    return m_var_map_ulong_inneraliasboundedstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_inneraliasboundedstringhelper
 * @return Reference to member var_map_ulong_inneraliasboundedstringhelper
 */
std::map<uint32_t, Inner_alias_bounded_string_helper>& MapULongInnerAliasBoundedStringHelper::var_map_ulong_inneraliasboundedstringhelper()
{
    return m_var_map_ulong_inneraliasboundedstringhelper;
}


size_t MapULongInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapULongInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerAliasBoundedWStringHelper::MapULongInnerAliasBoundedWStringHelper()
{
    // map<unsigned long, Inner_alias_bounded_wstring_helper> m_var_map_ulong_inneraliasboundedwstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerAliasBoundedWStringHelper::~MapULongInnerAliasBoundedWStringHelper()
{
}

MapULongInnerAliasBoundedWStringHelper::MapULongInnerAliasBoundedWStringHelper(
        const MapULongInnerAliasBoundedWStringHelper& x)
{
    m_var_map_ulong_inneraliasboundedwstringhelper = x.m_var_map_ulong_inneraliasboundedwstringhelper;
}

MapULongInnerAliasBoundedWStringHelper::MapULongInnerAliasBoundedWStringHelper(
        MapULongInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_ulong_inneraliasboundedwstringhelper = std::move(x.m_var_map_ulong_inneraliasboundedwstringhelper);
}

MapULongInnerAliasBoundedWStringHelper& MapULongInnerAliasBoundedWStringHelper::operator =(
        const MapULongInnerAliasBoundedWStringHelper& x)
{

    m_var_map_ulong_inneraliasboundedwstringhelper = x.m_var_map_ulong_inneraliasboundedwstringhelper;

    return *this;
}

MapULongInnerAliasBoundedWStringHelper& MapULongInnerAliasBoundedWStringHelper::operator =(
        MapULongInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_ulong_inneraliasboundedwstringhelper = std::move(x.m_var_map_ulong_inneraliasboundedwstringhelper);

    return *this;
}

bool MapULongInnerAliasBoundedWStringHelper::operator ==(
        const MapULongInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_ulong_inneraliasboundedwstringhelper == x.m_var_map_ulong_inneraliasboundedwstringhelper);
}

bool MapULongInnerAliasBoundedWStringHelper::operator !=(
        const MapULongInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapULongInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapULongInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_inneraliasboundedwstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_inneraliasboundedwstringhelper.size());
    for (const auto& pair : m_var_map_ulong_inneraliasboundedwstringhelper)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapULongInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ulong_inneraliasboundedwstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint32_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_ulong_inneraliasboundedwstringhelper[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_ulong_inneraliasboundedwstringhelper
 * @param _var_map_ulong_inneraliasboundedwstringhelper New value to be copied in member var_map_ulong_inneraliasboundedwstringhelper
 */
void MapULongInnerAliasBoundedWStringHelper::var_map_ulong_inneraliasboundedwstringhelper(
        const std::map<uint32_t, Inner_alias_bounded_wstring_helper>& _var_map_ulong_inneraliasboundedwstringhelper)
{
    m_var_map_ulong_inneraliasboundedwstringhelper = _var_map_ulong_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_inneraliasboundedwstringhelper
 * @param _var_map_ulong_inneraliasboundedwstringhelper New value to be moved in member var_map_ulong_inneraliasboundedwstringhelper
 */
void MapULongInnerAliasBoundedWStringHelper::var_map_ulong_inneraliasboundedwstringhelper(
        std::map<uint32_t, Inner_alias_bounded_wstring_helper>&& _var_map_ulong_inneraliasboundedwstringhelper)
{
    m_var_map_ulong_inneraliasboundedwstringhelper = std::move(_var_map_ulong_inneraliasboundedwstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_inneraliasboundedwstringhelper
 * @return Constant reference to member var_map_ulong_inneraliasboundedwstringhelper
 */
const std::map<uint32_t, Inner_alias_bounded_wstring_helper>& MapULongInnerAliasBoundedWStringHelper::var_map_ulong_inneraliasboundedwstringhelper() const
{
    return m_var_map_ulong_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_inneraliasboundedwstringhelper
 * @return Reference to member var_map_ulong_inneraliasboundedwstringhelper
 */
std::map<uint32_t, Inner_alias_bounded_wstring_helper>& MapULongInnerAliasBoundedWStringHelper::var_map_ulong_inneraliasboundedwstringhelper()
{
    return m_var_map_ulong_inneraliasboundedwstringhelper;
}


size_t MapULongInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapULongInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerEnumHelper::MapULongInnerEnumHelper()
{
    // map<unsigned long, InnerEnumHelper> m_var_map_ulong_innerenumhelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerEnumHelper::~MapULongInnerEnumHelper()
{
}

MapULongInnerEnumHelper::MapULongInnerEnumHelper(
        const MapULongInnerEnumHelper& x)
{
    m_var_map_ulong_innerenumhelper = x.m_var_map_ulong_innerenumhelper;
}

MapULongInnerEnumHelper::MapULongInnerEnumHelper(
        MapULongInnerEnumHelper&& x) noexcept 
{
    m_var_map_ulong_innerenumhelper = std::move(x.m_var_map_ulong_innerenumhelper);
}

MapULongInnerEnumHelper& MapULongInnerEnumHelper::operator =(
        const MapULongInnerEnumHelper& x)
{

    m_var_map_ulong_innerenumhelper = x.m_var_map_ulong_innerenumhelper;

    return *this;
}

MapULongInnerEnumHelper& MapULongInnerEnumHelper::operator =(
        MapULongInnerEnumHelper&& x) noexcept
{

    m_var_map_ulong_innerenumhelper = std::move(x.m_var_map_ulong_innerenumhelper);

    return *this;
}

bool MapULongInnerEnumHelper::operator ==(
        const MapULongInnerEnumHelper& x) const
{

    return (m_var_map_ulong_innerenumhelper == x.m_var_map_ulong_innerenumhelper);
}

bool MapULongInnerEnumHelper::operator !=(
        const MapULongInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerEnumHelper_max_cdr_typesize;
}

size_t MapULongInnerEnumHelper::getCdrSerializedSize(
        const MapULongInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_innerenumhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_innerenumhelper.size());
    for (const auto& pair : m_var_map_ulong_innerenumhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapULongInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ulong_innerenumhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        uint32_t key;
        dcdr >> key;

        uint32_t value;
        dcdr >> value;
        m_var_map_ulong_innerenumhelper[key] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_ulong_innerenumhelper
 * @param _var_map_ulong_innerenumhelper New value to be copied in member var_map_ulong_innerenumhelper
 */
void MapULongInnerEnumHelper::var_map_ulong_innerenumhelper(
        const std::map<uint32_t, InnerEnumHelper>& _var_map_ulong_innerenumhelper)
{
    m_var_map_ulong_innerenumhelper = _var_map_ulong_innerenumhelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_innerenumhelper
 * @param _var_map_ulong_innerenumhelper New value to be moved in member var_map_ulong_innerenumhelper
 */
void MapULongInnerEnumHelper::var_map_ulong_innerenumhelper(
        std::map<uint32_t, InnerEnumHelper>&& _var_map_ulong_innerenumhelper)
{
    m_var_map_ulong_innerenumhelper = std::move(_var_map_ulong_innerenumhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_innerenumhelper
 * @return Constant reference to member var_map_ulong_innerenumhelper
 */
const std::map<uint32_t, InnerEnumHelper>& MapULongInnerEnumHelper::var_map_ulong_innerenumhelper() const
{
    return m_var_map_ulong_innerenumhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_innerenumhelper
 * @return Reference to member var_map_ulong_innerenumhelper
 */
std::map<uint32_t, InnerEnumHelper>& MapULongInnerEnumHelper::var_map_ulong_innerenumhelper()
{
    return m_var_map_ulong_innerenumhelper;
}


size_t MapULongInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerEnumHelper_max_key_cdr_typesize;
}

bool MapULongInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerBitMaskHelper::MapULongInnerBitMaskHelper()
{
    // map<unsigned long, InnerBitMaskHelper> m_var_map_ulong_innerbitmaskhelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerBitMaskHelper::~MapULongInnerBitMaskHelper()
{
}

MapULongInnerBitMaskHelper::MapULongInnerBitMaskHelper(
        const MapULongInnerBitMaskHelper& x)
{
    m_var_map_ulong_innerbitmaskhelper = x.m_var_map_ulong_innerbitmaskhelper;
}

MapULongInnerBitMaskHelper::MapULongInnerBitMaskHelper(
        MapULongInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_ulong_innerbitmaskhelper = std::move(x.m_var_map_ulong_innerbitmaskhelper);
}

MapULongInnerBitMaskHelper& MapULongInnerBitMaskHelper::operator =(
        const MapULongInnerBitMaskHelper& x)
{

    m_var_map_ulong_innerbitmaskhelper = x.m_var_map_ulong_innerbitmaskhelper;

    return *this;
}

MapULongInnerBitMaskHelper& MapULongInnerBitMaskHelper::operator =(
        MapULongInnerBitMaskHelper&& x) noexcept
{

    m_var_map_ulong_innerbitmaskhelper = std::move(x.m_var_map_ulong_innerbitmaskhelper);

    return *this;
}

bool MapULongInnerBitMaskHelper::operator ==(
        const MapULongInnerBitMaskHelper& x) const
{

    return (m_var_map_ulong_innerbitmaskhelper == x.m_var_map_ulong_innerbitmaskhelper);
}

bool MapULongInnerBitMaskHelper::operator !=(
        const MapULongInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapULongInnerBitMaskHelper::getCdrSerializedSize(
        const MapULongInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_innerbitmaskhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_innerbitmaskhelper.size());
    for (const auto& pair : m_var_map_ulong_innerbitmaskhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapULongInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_ulong_innerbitmaskhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        uint32_t key;
        dcdr >> key;

        uint32_t value;        
        dcdr >> value;        
        m_var_map_ulong_innerbitmaskhelper[key] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_ulong_innerbitmaskhelper
 * @param _var_map_ulong_innerbitmaskhelper New value to be copied in member var_map_ulong_innerbitmaskhelper
 */
void MapULongInnerBitMaskHelper::var_map_ulong_innerbitmaskhelper(
        const std::map<uint32_t, InnerBitMaskHelper>& _var_map_ulong_innerbitmaskhelper)
{
    m_var_map_ulong_innerbitmaskhelper = _var_map_ulong_innerbitmaskhelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_innerbitmaskhelper
 * @param _var_map_ulong_innerbitmaskhelper New value to be moved in member var_map_ulong_innerbitmaskhelper
 */
void MapULongInnerBitMaskHelper::var_map_ulong_innerbitmaskhelper(
        std::map<uint32_t, InnerBitMaskHelper>&& _var_map_ulong_innerbitmaskhelper)
{
    m_var_map_ulong_innerbitmaskhelper = std::move(_var_map_ulong_innerbitmaskhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_innerbitmaskhelper
 * @return Constant reference to member var_map_ulong_innerbitmaskhelper
 */
const std::map<uint32_t, InnerBitMaskHelper>& MapULongInnerBitMaskHelper::var_map_ulong_innerbitmaskhelper() const
{
    return m_var_map_ulong_innerbitmaskhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_innerbitmaskhelper
 * @return Reference to member var_map_ulong_innerbitmaskhelper
 */
std::map<uint32_t, InnerBitMaskHelper>& MapULongInnerBitMaskHelper::var_map_ulong_innerbitmaskhelper()
{
    return m_var_map_ulong_innerbitmaskhelper;
}


size_t MapULongInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapULongInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerAliasHelper::MapULongInnerAliasHelper()
{
    // map<unsigned long, InnerAliasHelper> m_var_map_ulong_inneraliashelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerAliasHelper::~MapULongInnerAliasHelper()
{
}

MapULongInnerAliasHelper::MapULongInnerAliasHelper(
        const MapULongInnerAliasHelper& x)
{
    m_var_map_ulong_inneraliashelper = x.m_var_map_ulong_inneraliashelper;
}

MapULongInnerAliasHelper::MapULongInnerAliasHelper(
        MapULongInnerAliasHelper&& x) noexcept 
{
    m_var_map_ulong_inneraliashelper = std::move(x.m_var_map_ulong_inneraliashelper);
}

MapULongInnerAliasHelper& MapULongInnerAliasHelper::operator =(
        const MapULongInnerAliasHelper& x)
{

    m_var_map_ulong_inneraliashelper = x.m_var_map_ulong_inneraliashelper;

    return *this;
}

MapULongInnerAliasHelper& MapULongInnerAliasHelper::operator =(
        MapULongInnerAliasHelper&& x) noexcept
{

    m_var_map_ulong_inneraliashelper = std::move(x.m_var_map_ulong_inneraliashelper);

    return *this;
}

bool MapULongInnerAliasHelper::operator ==(
        const MapULongInnerAliasHelper& x) const
{

    return (m_var_map_ulong_inneraliashelper == x.m_var_map_ulong_inneraliashelper);
}

bool MapULongInnerAliasHelper::operator !=(
        const MapULongInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasHelper_max_cdr_typesize;
}

size_t MapULongInnerAliasHelper::getCdrSerializedSize(
        const MapULongInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_inneraliashelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_inneraliashelper.size());
    for (const auto& pair : m_var_map_ulong_inneraliashelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_inneraliashelper;
}

/*!
 * @brief This function copies the value in member var_map_ulong_inneraliashelper
 * @param _var_map_ulong_inneraliashelper New value to be copied in member var_map_ulong_inneraliashelper
 */
void MapULongInnerAliasHelper::var_map_ulong_inneraliashelper(
        const std::map<uint32_t, InnerAliasHelper>& _var_map_ulong_inneraliashelper)
{
    m_var_map_ulong_inneraliashelper = _var_map_ulong_inneraliashelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_inneraliashelper
 * @param _var_map_ulong_inneraliashelper New value to be moved in member var_map_ulong_inneraliashelper
 */
void MapULongInnerAliasHelper::var_map_ulong_inneraliashelper(
        std::map<uint32_t, InnerAliasHelper>&& _var_map_ulong_inneraliashelper)
{
    m_var_map_ulong_inneraliashelper = std::move(_var_map_ulong_inneraliashelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_inneraliashelper
 * @return Constant reference to member var_map_ulong_inneraliashelper
 */
const std::map<uint32_t, InnerAliasHelper>& MapULongInnerAliasHelper::var_map_ulong_inneraliashelper() const
{
    return m_var_map_ulong_inneraliashelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_inneraliashelper
 * @return Reference to member var_map_ulong_inneraliashelper
 */
std::map<uint32_t, InnerAliasHelper>& MapULongInnerAliasHelper::var_map_ulong_inneraliashelper()
{
    return m_var_map_ulong_inneraliashelper;
}


size_t MapULongInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasHelper_max_key_cdr_typesize;
}

bool MapULongInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerAliasArrayHelper::MapULongInnerAliasArrayHelper()
{
    // map<unsigned long, Inner_alias_array_helper> m_var_map_ulong_inneraliasarrayhelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerAliasArrayHelper::~MapULongInnerAliasArrayHelper()
{
}

MapULongInnerAliasArrayHelper::MapULongInnerAliasArrayHelper(
        const MapULongInnerAliasArrayHelper& x)
{
    m_var_map_ulong_inneraliasarrayhelper = x.m_var_map_ulong_inneraliasarrayhelper;
}

MapULongInnerAliasArrayHelper::MapULongInnerAliasArrayHelper(
        MapULongInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_ulong_inneraliasarrayhelper = std::move(x.m_var_map_ulong_inneraliasarrayhelper);
}

MapULongInnerAliasArrayHelper& MapULongInnerAliasArrayHelper::operator =(
        const MapULongInnerAliasArrayHelper& x)
{

    m_var_map_ulong_inneraliasarrayhelper = x.m_var_map_ulong_inneraliasarrayhelper;

    return *this;
}

MapULongInnerAliasArrayHelper& MapULongInnerAliasArrayHelper::operator =(
        MapULongInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_ulong_inneraliasarrayhelper = std::move(x.m_var_map_ulong_inneraliasarrayhelper);

    return *this;
}

bool MapULongInnerAliasArrayHelper::operator ==(
        const MapULongInnerAliasArrayHelper& x) const
{

    return (m_var_map_ulong_inneraliasarrayhelper == x.m_var_map_ulong_inneraliasarrayhelper);
}

bool MapULongInnerAliasArrayHelper::operator !=(
        const MapULongInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapULongInnerAliasArrayHelper::getCdrSerializedSize(
        const MapULongInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_inneraliasarrayhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_inneraliasarrayhelper.size());
    for (const auto& pair : m_var_map_ulong_inneraliasarrayhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_inneraliasarrayhelper;
}

/*!
 * @brief This function copies the value in member var_map_ulong_inneraliasarrayhelper
 * @param _var_map_ulong_inneraliasarrayhelper New value to be copied in member var_map_ulong_inneraliasarrayhelper
 */
void MapULongInnerAliasArrayHelper::var_map_ulong_inneraliasarrayhelper(
        const std::map<uint32_t, Inner_alias_array_helper>& _var_map_ulong_inneraliasarrayhelper)
{
    m_var_map_ulong_inneraliasarrayhelper = _var_map_ulong_inneraliasarrayhelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_inneraliasarrayhelper
 * @param _var_map_ulong_inneraliasarrayhelper New value to be moved in member var_map_ulong_inneraliasarrayhelper
 */
void MapULongInnerAliasArrayHelper::var_map_ulong_inneraliasarrayhelper(
        std::map<uint32_t, Inner_alias_array_helper>&& _var_map_ulong_inneraliasarrayhelper)
{
    m_var_map_ulong_inneraliasarrayhelper = std::move(_var_map_ulong_inneraliasarrayhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_inneraliasarrayhelper
 * @return Constant reference to member var_map_ulong_inneraliasarrayhelper
 */
const std::map<uint32_t, Inner_alias_array_helper>& MapULongInnerAliasArrayHelper::var_map_ulong_inneraliasarrayhelper() const
{
    return m_var_map_ulong_inneraliasarrayhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_inneraliasarrayhelper
 * @return Reference to member var_map_ulong_inneraliasarrayhelper
 */
std::map<uint32_t, Inner_alias_array_helper>& MapULongInnerAliasArrayHelper::var_map_ulong_inneraliasarrayhelper()
{
    return m_var_map_ulong_inneraliasarrayhelper;
}


size_t MapULongInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapULongInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerAliasSequenceHelper::MapULongInnerAliasSequenceHelper()
{
    // map<unsigned long, Inner_alias_sequence_helper> m_var_map_ulong_inneraliassequencehelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerAliasSequenceHelper::~MapULongInnerAliasSequenceHelper()
{
}

MapULongInnerAliasSequenceHelper::MapULongInnerAliasSequenceHelper(
        const MapULongInnerAliasSequenceHelper& x)
{
    m_var_map_ulong_inneraliassequencehelper = x.m_var_map_ulong_inneraliassequencehelper;
}

MapULongInnerAliasSequenceHelper::MapULongInnerAliasSequenceHelper(
        MapULongInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_ulong_inneraliassequencehelper = std::move(x.m_var_map_ulong_inneraliassequencehelper);
}

MapULongInnerAliasSequenceHelper& MapULongInnerAliasSequenceHelper::operator =(
        const MapULongInnerAliasSequenceHelper& x)
{

    m_var_map_ulong_inneraliassequencehelper = x.m_var_map_ulong_inneraliassequencehelper;

    return *this;
}

MapULongInnerAliasSequenceHelper& MapULongInnerAliasSequenceHelper::operator =(
        MapULongInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_ulong_inneraliassequencehelper = std::move(x.m_var_map_ulong_inneraliassequencehelper);

    return *this;
}

bool MapULongInnerAliasSequenceHelper::operator ==(
        const MapULongInnerAliasSequenceHelper& x) const
{

    return (m_var_map_ulong_inneraliassequencehelper == x.m_var_map_ulong_inneraliassequencehelper);
}

bool MapULongInnerAliasSequenceHelper::operator !=(
        const MapULongInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapULongInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapULongInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_inneraliassequencehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapULongInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_inneraliassequencehelper.size());
    for (const auto& pair : m_var_map_ulong_inneraliassequencehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_inneraliassequencehelper;
}

/*!
 * @brief This function copies the value in member var_map_ulong_inneraliassequencehelper
 * @param _var_map_ulong_inneraliassequencehelper New value to be copied in member var_map_ulong_inneraliassequencehelper
 */
void MapULongInnerAliasSequenceHelper::var_map_ulong_inneraliassequencehelper(
        const std::map<uint32_t, Inner_alias_sequence_helper>& _var_map_ulong_inneraliassequencehelper)
{
    m_var_map_ulong_inneraliassequencehelper = _var_map_ulong_inneraliassequencehelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_inneraliassequencehelper
 * @param _var_map_ulong_inneraliassequencehelper New value to be moved in member var_map_ulong_inneraliassequencehelper
 */
void MapULongInnerAliasSequenceHelper::var_map_ulong_inneraliassequencehelper(
        std::map<uint32_t, Inner_alias_sequence_helper>&& _var_map_ulong_inneraliassequencehelper)
{
    m_var_map_ulong_inneraliassequencehelper = std::move(_var_map_ulong_inneraliassequencehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_inneraliassequencehelper
 * @return Constant reference to member var_map_ulong_inneraliassequencehelper
 */
const std::map<uint32_t, Inner_alias_sequence_helper>& MapULongInnerAliasSequenceHelper::var_map_ulong_inneraliassequencehelper() const
{
    return m_var_map_ulong_inneraliassequencehelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_inneraliassequencehelper
 * @return Reference to member var_map_ulong_inneraliassequencehelper
 */
std::map<uint32_t, Inner_alias_sequence_helper>& MapULongInnerAliasSequenceHelper::var_map_ulong_inneraliassequencehelper()
{
    return m_var_map_ulong_inneraliassequencehelper;
}


size_t MapULongInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapULongInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerAliasMapHelper::MapULongInnerAliasMapHelper()
{
    // map<unsigned long, Inner_alias_map_helper> m_var_map_ulong_inneraliasmaphelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerAliasMapHelper::~MapULongInnerAliasMapHelper()
{
}

MapULongInnerAliasMapHelper::MapULongInnerAliasMapHelper(
        const MapULongInnerAliasMapHelper& x)
{
    m_var_map_ulong_inneraliasmaphelper = x.m_var_map_ulong_inneraliasmaphelper;
}

MapULongInnerAliasMapHelper::MapULongInnerAliasMapHelper(
        MapULongInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_ulong_inneraliasmaphelper = std::move(x.m_var_map_ulong_inneraliasmaphelper);
}

MapULongInnerAliasMapHelper& MapULongInnerAliasMapHelper::operator =(
        const MapULongInnerAliasMapHelper& x)
{

    m_var_map_ulong_inneraliasmaphelper = x.m_var_map_ulong_inneraliasmaphelper;

    return *this;
}

MapULongInnerAliasMapHelper& MapULongInnerAliasMapHelper::operator =(
        MapULongInnerAliasMapHelper&& x) noexcept
{

    m_var_map_ulong_inneraliasmaphelper = std::move(x.m_var_map_ulong_inneraliasmaphelper);

    return *this;
}

bool MapULongInnerAliasMapHelper::operator ==(
        const MapULongInnerAliasMapHelper& x) const
{

    return (m_var_map_ulong_inneraliasmaphelper == x.m_var_map_ulong_inneraliasmaphelper);
}

bool MapULongInnerAliasMapHelper::operator !=(
        const MapULongInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapULongInnerAliasMapHelper::getCdrSerializedSize(
        const MapULongInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_inneraliasmaphelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_inneraliasmaphelper.size());
    for (const auto& pair : m_var_map_ulong_inneraliasmaphelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_inneraliasmaphelper;
}

/*!
 * @brief This function copies the value in member var_map_ulong_inneraliasmaphelper
 * @param _var_map_ulong_inneraliasmaphelper New value to be copied in member var_map_ulong_inneraliasmaphelper
 */
void MapULongInnerAliasMapHelper::var_map_ulong_inneraliasmaphelper(
        const std::map<uint32_t, Inner_alias_map_helper>& _var_map_ulong_inneraliasmaphelper)
{
    m_var_map_ulong_inneraliasmaphelper = _var_map_ulong_inneraliasmaphelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_inneraliasmaphelper
 * @param _var_map_ulong_inneraliasmaphelper New value to be moved in member var_map_ulong_inneraliasmaphelper
 */
void MapULongInnerAliasMapHelper::var_map_ulong_inneraliasmaphelper(
        std::map<uint32_t, Inner_alias_map_helper>&& _var_map_ulong_inneraliasmaphelper)
{
    m_var_map_ulong_inneraliasmaphelper = std::move(_var_map_ulong_inneraliasmaphelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_inneraliasmaphelper
 * @return Constant reference to member var_map_ulong_inneraliasmaphelper
 */
const std::map<uint32_t, Inner_alias_map_helper>& MapULongInnerAliasMapHelper::var_map_ulong_inneraliasmaphelper() const
{
    return m_var_map_ulong_inneraliasmaphelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_inneraliasmaphelper
 * @return Reference to member var_map_ulong_inneraliasmaphelper
 */
std::map<uint32_t, Inner_alias_map_helper>& MapULongInnerAliasMapHelper::var_map_ulong_inneraliasmaphelper()
{
    return m_var_map_ulong_inneraliasmaphelper;
}


size_t MapULongInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapULongInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerUnionHelper::MapULongInnerUnionHelper()
{
    // map<unsigned long, InnerUnionHelper> m_var_map_ulong_innerunionhelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerUnionHelper::~MapULongInnerUnionHelper()
{
}

MapULongInnerUnionHelper::MapULongInnerUnionHelper(
        const MapULongInnerUnionHelper& x)
{
    m_var_map_ulong_innerunionhelper = x.m_var_map_ulong_innerunionhelper;
}

MapULongInnerUnionHelper::MapULongInnerUnionHelper(
        MapULongInnerUnionHelper&& x) noexcept 
{
    m_var_map_ulong_innerunionhelper = std::move(x.m_var_map_ulong_innerunionhelper);
}

MapULongInnerUnionHelper& MapULongInnerUnionHelper::operator =(
        const MapULongInnerUnionHelper& x)
{

    m_var_map_ulong_innerunionhelper = x.m_var_map_ulong_innerunionhelper;

    return *this;
}

MapULongInnerUnionHelper& MapULongInnerUnionHelper::operator =(
        MapULongInnerUnionHelper&& x) noexcept
{

    m_var_map_ulong_innerunionhelper = std::move(x.m_var_map_ulong_innerunionhelper);

    return *this;
}

bool MapULongInnerUnionHelper::operator ==(
        const MapULongInnerUnionHelper& x) const
{

    return (m_var_map_ulong_innerunionhelper == x.m_var_map_ulong_innerunionhelper);
}

bool MapULongInnerUnionHelper::operator !=(
        const MapULongInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerUnionHelper_max_cdr_typesize;
}

size_t MapULongInnerUnionHelper::getCdrSerializedSize(
        const MapULongInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_innerunionhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_innerunionhelper.size());
    for (const auto& pair : m_var_map_ulong_innerunionhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_innerunionhelper;
}

/*!
 * @brief This function copies the value in member var_map_ulong_innerunionhelper
 * @param _var_map_ulong_innerunionhelper New value to be copied in member var_map_ulong_innerunionhelper
 */
void MapULongInnerUnionHelper::var_map_ulong_innerunionhelper(
        const std::map<uint32_t, InnerUnionHelper>& _var_map_ulong_innerunionhelper)
{
    m_var_map_ulong_innerunionhelper = _var_map_ulong_innerunionhelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_innerunionhelper
 * @param _var_map_ulong_innerunionhelper New value to be moved in member var_map_ulong_innerunionhelper
 */
void MapULongInnerUnionHelper::var_map_ulong_innerunionhelper(
        std::map<uint32_t, InnerUnionHelper>&& _var_map_ulong_innerunionhelper)
{
    m_var_map_ulong_innerunionhelper = std::move(_var_map_ulong_innerunionhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_innerunionhelper
 * @return Constant reference to member var_map_ulong_innerunionhelper
 */
const std::map<uint32_t, InnerUnionHelper>& MapULongInnerUnionHelper::var_map_ulong_innerunionhelper() const
{
    return m_var_map_ulong_innerunionhelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_innerunionhelper
 * @return Reference to member var_map_ulong_innerunionhelper
 */
std::map<uint32_t, InnerUnionHelper>& MapULongInnerUnionHelper::var_map_ulong_innerunionhelper()
{
    return m_var_map_ulong_innerunionhelper;
}


size_t MapULongInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerUnionHelper_max_key_cdr_typesize;
}

bool MapULongInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerStructureHelper::MapULongInnerStructureHelper()
{
    // map<unsigned long, InnerStructureHelper> m_var_map_ulong_innerstructurehelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerStructureHelper::~MapULongInnerStructureHelper()
{
}

MapULongInnerStructureHelper::MapULongInnerStructureHelper(
        const MapULongInnerStructureHelper& x)
{
    m_var_map_ulong_innerstructurehelper = x.m_var_map_ulong_innerstructurehelper;
}

MapULongInnerStructureHelper::MapULongInnerStructureHelper(
        MapULongInnerStructureHelper&& x) noexcept 
{
    m_var_map_ulong_innerstructurehelper = std::move(x.m_var_map_ulong_innerstructurehelper);
}

MapULongInnerStructureHelper& MapULongInnerStructureHelper::operator =(
        const MapULongInnerStructureHelper& x)
{

    m_var_map_ulong_innerstructurehelper = x.m_var_map_ulong_innerstructurehelper;

    return *this;
}

MapULongInnerStructureHelper& MapULongInnerStructureHelper::operator =(
        MapULongInnerStructureHelper&& x) noexcept
{

    m_var_map_ulong_innerstructurehelper = std::move(x.m_var_map_ulong_innerstructurehelper);

    return *this;
}

bool MapULongInnerStructureHelper::operator ==(
        const MapULongInnerStructureHelper& x) const
{

    return (m_var_map_ulong_innerstructurehelper == x.m_var_map_ulong_innerstructurehelper);
}

bool MapULongInnerStructureHelper::operator !=(
        const MapULongInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerStructureHelper_max_cdr_typesize;
}

size_t MapULongInnerStructureHelper::getCdrSerializedSize(
        const MapULongInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_innerstructurehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_innerstructurehelper.size());
    for (const auto& pair : m_var_map_ulong_innerstructurehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_innerstructurehelper;
}

/*!
 * @brief This function copies the value in member var_map_ulong_innerstructurehelper
 * @param _var_map_ulong_innerstructurehelper New value to be copied in member var_map_ulong_innerstructurehelper
 */
void MapULongInnerStructureHelper::var_map_ulong_innerstructurehelper(
        const std::map<uint32_t, InnerStructureHelper>& _var_map_ulong_innerstructurehelper)
{
    m_var_map_ulong_innerstructurehelper = _var_map_ulong_innerstructurehelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_innerstructurehelper
 * @param _var_map_ulong_innerstructurehelper New value to be moved in member var_map_ulong_innerstructurehelper
 */
void MapULongInnerStructureHelper::var_map_ulong_innerstructurehelper(
        std::map<uint32_t, InnerStructureHelper>&& _var_map_ulong_innerstructurehelper)
{
    m_var_map_ulong_innerstructurehelper = std::move(_var_map_ulong_innerstructurehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_innerstructurehelper
 * @return Constant reference to member var_map_ulong_innerstructurehelper
 */
const std::map<uint32_t, InnerStructureHelper>& MapULongInnerStructureHelper::var_map_ulong_innerstructurehelper() const
{
    return m_var_map_ulong_innerstructurehelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_innerstructurehelper
 * @return Reference to member var_map_ulong_innerstructurehelper
 */
std::map<uint32_t, InnerStructureHelper>& MapULongInnerStructureHelper::var_map_ulong_innerstructurehelper()
{
    return m_var_map_ulong_innerstructurehelper;
}


size_t MapULongInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerStructureHelper_max_key_cdr_typesize;
}

bool MapULongInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongInnerBitsetHelper::MapULongInnerBitsetHelper()
{
    // map<unsigned long, InnerBitsetHelper> m_var_map_ulong_innerbitsethelper


    // Just to register all known types
    registermapsTypes();
}

MapULongInnerBitsetHelper::~MapULongInnerBitsetHelper()
{
}

MapULongInnerBitsetHelper::MapULongInnerBitsetHelper(
        const MapULongInnerBitsetHelper& x)
{
    m_var_map_ulong_innerbitsethelper = x.m_var_map_ulong_innerbitsethelper;
}

MapULongInnerBitsetHelper::MapULongInnerBitsetHelper(
        MapULongInnerBitsetHelper&& x) noexcept 
{
    m_var_map_ulong_innerbitsethelper = std::move(x.m_var_map_ulong_innerbitsethelper);
}

MapULongInnerBitsetHelper& MapULongInnerBitsetHelper::operator =(
        const MapULongInnerBitsetHelper& x)
{

    m_var_map_ulong_innerbitsethelper = x.m_var_map_ulong_innerbitsethelper;

    return *this;
}

MapULongInnerBitsetHelper& MapULongInnerBitsetHelper::operator =(
        MapULongInnerBitsetHelper&& x) noexcept
{

    m_var_map_ulong_innerbitsethelper = std::move(x.m_var_map_ulong_innerbitsethelper);

    return *this;
}

bool MapULongInnerBitsetHelper::operator ==(
        const MapULongInnerBitsetHelper& x) const
{

    return (m_var_map_ulong_innerbitsethelper == x.m_var_map_ulong_innerbitsethelper);
}

bool MapULongInnerBitsetHelper::operator !=(
        const MapULongInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapULongInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerBitsetHelper_max_cdr_typesize;
}

size_t MapULongInnerBitsetHelper::getCdrSerializedSize(
        const MapULongInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_ulong_innerbitsethelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapULongInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_ulong_innerbitsethelper.size());
    for (const auto& pair : m_var_map_ulong_innerbitsethelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_ulong_innerbitsethelper;
}

/*!
 * @brief This function copies the value in member var_map_ulong_innerbitsethelper
 * @param _var_map_ulong_innerbitsethelper New value to be copied in member var_map_ulong_innerbitsethelper
 */
void MapULongInnerBitsetHelper::var_map_ulong_innerbitsethelper(
        const std::map<uint32_t, InnerBitsetHelper>& _var_map_ulong_innerbitsethelper)
{
    m_var_map_ulong_innerbitsethelper = _var_map_ulong_innerbitsethelper;
}

/*!
 * @brief This function moves the value in member var_map_ulong_innerbitsethelper
 * @param _var_map_ulong_innerbitsethelper New value to be moved in member var_map_ulong_innerbitsethelper
 */
void MapULongInnerBitsetHelper::var_map_ulong_innerbitsethelper(
        std::map<uint32_t, InnerBitsetHelper>&& _var_map_ulong_innerbitsethelper)
{
    m_var_map_ulong_innerbitsethelper = std::move(_var_map_ulong_innerbitsethelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_ulong_innerbitsethelper
 * @return Constant reference to member var_map_ulong_innerbitsethelper
 */
const std::map<uint32_t, InnerBitsetHelper>& MapULongInnerBitsetHelper::var_map_ulong_innerbitsethelper() const
{
    return m_var_map_ulong_innerbitsethelper;
}

/*!
 * @brief This function returns a reference to member var_map_ulong_innerbitsethelper
 * @return Reference to member var_map_ulong_innerbitsethelper
 */
std::map<uint32_t, InnerBitsetHelper>& MapULongInnerBitsetHelper::var_map_ulong_innerbitsethelper()
{
    return m_var_map_ulong_innerbitsethelper;
}


size_t MapULongInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapULongInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapULongInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongShort::MapLongLongShort()
{
    // map<long long, short> m_var_map_longlong_short


    // Just to register all known types
    registermapsTypes();
}

MapLongLongShort::~MapLongLongShort()
{
}

MapLongLongShort::MapLongLongShort(
        const MapLongLongShort& x)
{
    m_var_map_longlong_short = x.m_var_map_longlong_short;
}

MapLongLongShort::MapLongLongShort(
        MapLongLongShort&& x) noexcept 
{
    m_var_map_longlong_short = std::move(x.m_var_map_longlong_short);
}

MapLongLongShort& MapLongLongShort::operator =(
        const MapLongLongShort& x)
{

    m_var_map_longlong_short = x.m_var_map_longlong_short;

    return *this;
}

MapLongLongShort& MapLongLongShort::operator =(
        MapLongLongShort&& x) noexcept
{

    m_var_map_longlong_short = std::move(x.m_var_map_longlong_short);

    return *this;
}

bool MapLongLongShort::operator ==(
        const MapLongLongShort& x) const
{

    return (m_var_map_longlong_short == x.m_var_map_longlong_short);
}

bool MapLongLongShort::operator !=(
        const MapLongLongShort& x) const
{
    return !(*this == x);
}

size_t MapLongLongShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongShort_max_cdr_typesize;
}

size_t MapLongLongShort::getCdrSerializedSize(
        const MapLongLongShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_short())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_short.size());
    for (const auto& pair : m_var_map_longlong_short)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_short;
}

/*!
 * @brief This function copies the value in member var_map_longlong_short
 * @param _var_map_longlong_short New value to be copied in member var_map_longlong_short
 */
void MapLongLongShort::var_map_longlong_short(
        const std::map<int64_t, int16_t>& _var_map_longlong_short)
{
    m_var_map_longlong_short = _var_map_longlong_short;
}

/*!
 * @brief This function moves the value in member var_map_longlong_short
 * @param _var_map_longlong_short New value to be moved in member var_map_longlong_short
 */
void MapLongLongShort::var_map_longlong_short(
        std::map<int64_t, int16_t>&& _var_map_longlong_short)
{
    m_var_map_longlong_short = std::move(_var_map_longlong_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_short
 * @return Constant reference to member var_map_longlong_short
 */
const std::map<int64_t, int16_t>& MapLongLongShort::var_map_longlong_short() const
{
    return m_var_map_longlong_short;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_short
 * @return Reference to member var_map_longlong_short
 */
std::map<int64_t, int16_t>& MapLongLongShort::var_map_longlong_short()
{
    return m_var_map_longlong_short;
}


size_t MapLongLongShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongShort_max_key_cdr_typesize;
}

bool MapLongLongShort::isKeyDefined()
{
    return false;
}

void MapLongLongShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongUShort::MapLongLongUShort()
{
    // map<long long, unsigned short> m_var_map_longlong_ushort


    // Just to register all known types
    registermapsTypes();
}

MapLongLongUShort::~MapLongLongUShort()
{
}

MapLongLongUShort::MapLongLongUShort(
        const MapLongLongUShort& x)
{
    m_var_map_longlong_ushort = x.m_var_map_longlong_ushort;
}

MapLongLongUShort::MapLongLongUShort(
        MapLongLongUShort&& x) noexcept 
{
    m_var_map_longlong_ushort = std::move(x.m_var_map_longlong_ushort);
}

MapLongLongUShort& MapLongLongUShort::operator =(
        const MapLongLongUShort& x)
{

    m_var_map_longlong_ushort = x.m_var_map_longlong_ushort;

    return *this;
}

MapLongLongUShort& MapLongLongUShort::operator =(
        MapLongLongUShort&& x) noexcept
{

    m_var_map_longlong_ushort = std::move(x.m_var_map_longlong_ushort);

    return *this;
}

bool MapLongLongUShort::operator ==(
        const MapLongLongUShort& x) const
{

    return (m_var_map_longlong_ushort == x.m_var_map_longlong_ushort);
}

bool MapLongLongUShort::operator !=(
        const MapLongLongUShort& x) const
{
    return !(*this == x);
}

size_t MapLongLongUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongUShort_max_cdr_typesize;
}

size_t MapLongLongUShort::getCdrSerializedSize(
        const MapLongLongUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_ushort())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_ushort.size());
    for (const auto& pair : m_var_map_longlong_ushort)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_ushort;
}

/*!
 * @brief This function copies the value in member var_map_longlong_ushort
 * @param _var_map_longlong_ushort New value to be copied in member var_map_longlong_ushort
 */
void MapLongLongUShort::var_map_longlong_ushort(
        const std::map<int64_t, uint16_t>& _var_map_longlong_ushort)
{
    m_var_map_longlong_ushort = _var_map_longlong_ushort;
}

/*!
 * @brief This function moves the value in member var_map_longlong_ushort
 * @param _var_map_longlong_ushort New value to be moved in member var_map_longlong_ushort
 */
void MapLongLongUShort::var_map_longlong_ushort(
        std::map<int64_t, uint16_t>&& _var_map_longlong_ushort)
{
    m_var_map_longlong_ushort = std::move(_var_map_longlong_ushort);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_ushort
 * @return Constant reference to member var_map_longlong_ushort
 */
const std::map<int64_t, uint16_t>& MapLongLongUShort::var_map_longlong_ushort() const
{
    return m_var_map_longlong_ushort;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_ushort
 * @return Reference to member var_map_longlong_ushort
 */
std::map<int64_t, uint16_t>& MapLongLongUShort::var_map_longlong_ushort()
{
    return m_var_map_longlong_ushort;
}


size_t MapLongLongUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongUShort_max_key_cdr_typesize;
}

bool MapLongLongUShort::isKeyDefined()
{
    return false;
}

void MapLongLongUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongKeyLongValue::MapLongLongKeyLongValue()
{
    // map<long long, long> m_var_map_longlong_long


    // Just to register all known types
    registermapsTypes();
}

MapLongLongKeyLongValue::~MapLongLongKeyLongValue()
{
}

MapLongLongKeyLongValue::MapLongLongKeyLongValue(
        const MapLongLongKeyLongValue& x)
{
    m_var_map_longlong_long = x.m_var_map_longlong_long;
}

MapLongLongKeyLongValue::MapLongLongKeyLongValue(
        MapLongLongKeyLongValue&& x) noexcept 
{
    m_var_map_longlong_long = std::move(x.m_var_map_longlong_long);
}

MapLongLongKeyLongValue& MapLongLongKeyLongValue::operator =(
        const MapLongLongKeyLongValue& x)
{

    m_var_map_longlong_long = x.m_var_map_longlong_long;

    return *this;
}

MapLongLongKeyLongValue& MapLongLongKeyLongValue::operator =(
        MapLongLongKeyLongValue&& x) noexcept
{

    m_var_map_longlong_long = std::move(x.m_var_map_longlong_long);

    return *this;
}

bool MapLongLongKeyLongValue::operator ==(
        const MapLongLongKeyLongValue& x) const
{

    return (m_var_map_longlong_long == x.m_var_map_longlong_long);
}

bool MapLongLongKeyLongValue::operator !=(
        const MapLongLongKeyLongValue& x) const
{
    return !(*this == x);
}

size_t MapLongLongKeyLongValue::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongKeyLongValue_max_cdr_typesize;
}

size_t MapLongLongKeyLongValue::getCdrSerializedSize(
        const MapLongLongKeyLongValue& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_long())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongKeyLongValue::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_long.size());
    for (const auto& pair : m_var_map_longlong_long)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongKeyLongValue::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_long;
}

/*!
 * @brief This function copies the value in member var_map_longlong_long
 * @param _var_map_longlong_long New value to be copied in member var_map_longlong_long
 */
void MapLongLongKeyLongValue::var_map_longlong_long(
        const std::map<int64_t, int32_t>& _var_map_longlong_long)
{
    m_var_map_longlong_long = _var_map_longlong_long;
}

/*!
 * @brief This function moves the value in member var_map_longlong_long
 * @param _var_map_longlong_long New value to be moved in member var_map_longlong_long
 */
void MapLongLongKeyLongValue::var_map_longlong_long(
        std::map<int64_t, int32_t>&& _var_map_longlong_long)
{
    m_var_map_longlong_long = std::move(_var_map_longlong_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_long
 * @return Constant reference to member var_map_longlong_long
 */
const std::map<int64_t, int32_t>& MapLongLongKeyLongValue::var_map_longlong_long() const
{
    return m_var_map_longlong_long;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_long
 * @return Reference to member var_map_longlong_long
 */
std::map<int64_t, int32_t>& MapLongLongKeyLongValue::var_map_longlong_long()
{
    return m_var_map_longlong_long;
}


size_t MapLongLongKeyLongValue::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongKeyLongValue_max_key_cdr_typesize;
}

bool MapLongLongKeyLongValue::isKeyDefined()
{
    return false;
}

void MapLongLongKeyLongValue::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongULong::MapLongLongULong()
{
    // map<long long, unsigned long> m_var_map_longlong_ulong


    // Just to register all known types
    registermapsTypes();
}

MapLongLongULong::~MapLongLongULong()
{
}

MapLongLongULong::MapLongLongULong(
        const MapLongLongULong& x)
{
    m_var_map_longlong_ulong = x.m_var_map_longlong_ulong;
}

MapLongLongULong::MapLongLongULong(
        MapLongLongULong&& x) noexcept 
{
    m_var_map_longlong_ulong = std::move(x.m_var_map_longlong_ulong);
}

MapLongLongULong& MapLongLongULong::operator =(
        const MapLongLongULong& x)
{

    m_var_map_longlong_ulong = x.m_var_map_longlong_ulong;

    return *this;
}

MapLongLongULong& MapLongLongULong::operator =(
        MapLongLongULong&& x) noexcept
{

    m_var_map_longlong_ulong = std::move(x.m_var_map_longlong_ulong);

    return *this;
}

bool MapLongLongULong::operator ==(
        const MapLongLongULong& x) const
{

    return (m_var_map_longlong_ulong == x.m_var_map_longlong_ulong);
}

bool MapLongLongULong::operator !=(
        const MapLongLongULong& x) const
{
    return !(*this == x);
}

size_t MapLongLongULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongULong_max_cdr_typesize;
}

size_t MapLongLongULong::getCdrSerializedSize(
        const MapLongLongULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_ulong())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_ulong.size());
    for (const auto& pair : m_var_map_longlong_ulong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_ulong;
}

/*!
 * @brief This function copies the value in member var_map_longlong_ulong
 * @param _var_map_longlong_ulong New value to be copied in member var_map_longlong_ulong
 */
void MapLongLongULong::var_map_longlong_ulong(
        const std::map<int64_t, uint32_t>& _var_map_longlong_ulong)
{
    m_var_map_longlong_ulong = _var_map_longlong_ulong;
}

/*!
 * @brief This function moves the value in member var_map_longlong_ulong
 * @param _var_map_longlong_ulong New value to be moved in member var_map_longlong_ulong
 */
void MapLongLongULong::var_map_longlong_ulong(
        std::map<int64_t, uint32_t>&& _var_map_longlong_ulong)
{
    m_var_map_longlong_ulong = std::move(_var_map_longlong_ulong);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_ulong
 * @return Constant reference to member var_map_longlong_ulong
 */
const std::map<int64_t, uint32_t>& MapLongLongULong::var_map_longlong_ulong() const
{
    return m_var_map_longlong_ulong;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_ulong
 * @return Reference to member var_map_longlong_ulong
 */
std::map<int64_t, uint32_t>& MapLongLongULong::var_map_longlong_ulong()
{
    return m_var_map_longlong_ulong;
}


size_t MapLongLongULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongULong_max_key_cdr_typesize;
}

bool MapLongLongULong::isKeyDefined()
{
    return false;
}

void MapLongLongULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongLongLong::MapLongLongLongLong()
{
    // map<long long, long long> m_var_map_longlong_longlong


    // Just to register all known types
    registermapsTypes();
}

MapLongLongLongLong::~MapLongLongLongLong()
{
}

MapLongLongLongLong::MapLongLongLongLong(
        const MapLongLongLongLong& x)
{
    m_var_map_longlong_longlong = x.m_var_map_longlong_longlong;
}

MapLongLongLongLong::MapLongLongLongLong(
        MapLongLongLongLong&& x) noexcept 
{
    m_var_map_longlong_longlong = std::move(x.m_var_map_longlong_longlong);
}

MapLongLongLongLong& MapLongLongLongLong::operator =(
        const MapLongLongLongLong& x)
{

    m_var_map_longlong_longlong = x.m_var_map_longlong_longlong;

    return *this;
}

MapLongLongLongLong& MapLongLongLongLong::operator =(
        MapLongLongLongLong&& x) noexcept
{

    m_var_map_longlong_longlong = std::move(x.m_var_map_longlong_longlong);

    return *this;
}

bool MapLongLongLongLong::operator ==(
        const MapLongLongLongLong& x) const
{

    return (m_var_map_longlong_longlong == x.m_var_map_longlong_longlong);
}

bool MapLongLongLongLong::operator !=(
        const MapLongLongLongLong& x) const
{
    return !(*this == x);
}

size_t MapLongLongLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongLongLong_max_cdr_typesize;
}

size_t MapLongLongLongLong::getCdrSerializedSize(
        const MapLongLongLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_longlong())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_longlong.size());
    for (const auto& pair : m_var_map_longlong_longlong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_longlong;
}

/*!
 * @brief This function copies the value in member var_map_longlong_longlong
 * @param _var_map_longlong_longlong New value to be copied in member var_map_longlong_longlong
 */
void MapLongLongLongLong::var_map_longlong_longlong(
        const std::map<int64_t, int64_t>& _var_map_longlong_longlong)
{
    m_var_map_longlong_longlong = _var_map_longlong_longlong;
}

/*!
 * @brief This function moves the value in member var_map_longlong_longlong
 * @param _var_map_longlong_longlong New value to be moved in member var_map_longlong_longlong
 */
void MapLongLongLongLong::var_map_longlong_longlong(
        std::map<int64_t, int64_t>&& _var_map_longlong_longlong)
{
    m_var_map_longlong_longlong = std::move(_var_map_longlong_longlong);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_longlong
 * @return Constant reference to member var_map_longlong_longlong
 */
const std::map<int64_t, int64_t>& MapLongLongLongLong::var_map_longlong_longlong() const
{
    return m_var_map_longlong_longlong;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_longlong
 * @return Reference to member var_map_longlong_longlong
 */
std::map<int64_t, int64_t>& MapLongLongLongLong::var_map_longlong_longlong()
{
    return m_var_map_longlong_longlong;
}


size_t MapLongLongLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongLongLong_max_key_cdr_typesize;
}

bool MapLongLongLongLong::isKeyDefined()
{
    return false;
}

void MapLongLongLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongULongLong::MapLongLongULongLong()
{
    // map<long long, unsigned long long> m_var_map_longlong_ulonglong


    // Just to register all known types
    registermapsTypes();
}

MapLongLongULongLong::~MapLongLongULongLong()
{
}

MapLongLongULongLong::MapLongLongULongLong(
        const MapLongLongULongLong& x)
{
    m_var_map_longlong_ulonglong = x.m_var_map_longlong_ulonglong;
}

MapLongLongULongLong::MapLongLongULongLong(
        MapLongLongULongLong&& x) noexcept 
{
    m_var_map_longlong_ulonglong = std::move(x.m_var_map_longlong_ulonglong);
}

MapLongLongULongLong& MapLongLongULongLong::operator =(
        const MapLongLongULongLong& x)
{

    m_var_map_longlong_ulonglong = x.m_var_map_longlong_ulonglong;

    return *this;
}

MapLongLongULongLong& MapLongLongULongLong::operator =(
        MapLongLongULongLong&& x) noexcept
{

    m_var_map_longlong_ulonglong = std::move(x.m_var_map_longlong_ulonglong);

    return *this;
}

bool MapLongLongULongLong::operator ==(
        const MapLongLongULongLong& x) const
{

    return (m_var_map_longlong_ulonglong == x.m_var_map_longlong_ulonglong);
}

bool MapLongLongULongLong::operator !=(
        const MapLongLongULongLong& x) const
{
    return !(*this == x);
}

size_t MapLongLongULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongULongLong_max_cdr_typesize;
}

size_t MapLongLongULongLong::getCdrSerializedSize(
        const MapLongLongULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_ulonglong())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_ulonglong.size());
    for (const auto& pair : m_var_map_longlong_ulonglong)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_ulonglong;
}

/*!
 * @brief This function copies the value in member var_map_longlong_ulonglong
 * @param _var_map_longlong_ulonglong New value to be copied in member var_map_longlong_ulonglong
 */
void MapLongLongULongLong::var_map_longlong_ulonglong(
        const std::map<int64_t, uint64_t>& _var_map_longlong_ulonglong)
{
    m_var_map_longlong_ulonglong = _var_map_longlong_ulonglong;
}

/*!
 * @brief This function moves the value in member var_map_longlong_ulonglong
 * @param _var_map_longlong_ulonglong New value to be moved in member var_map_longlong_ulonglong
 */
void MapLongLongULongLong::var_map_longlong_ulonglong(
        std::map<int64_t, uint64_t>&& _var_map_longlong_ulonglong)
{
    m_var_map_longlong_ulonglong = std::move(_var_map_longlong_ulonglong);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_ulonglong
 * @return Constant reference to member var_map_longlong_ulonglong
 */
const std::map<int64_t, uint64_t>& MapLongLongULongLong::var_map_longlong_ulonglong() const
{
    return m_var_map_longlong_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_ulonglong
 * @return Reference to member var_map_longlong_ulonglong
 */
std::map<int64_t, uint64_t>& MapLongLongULongLong::var_map_longlong_ulonglong()
{
    return m_var_map_longlong_ulonglong;
}


size_t MapLongLongULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongULongLong_max_key_cdr_typesize;
}

bool MapLongLongULongLong::isKeyDefined()
{
    return false;
}

void MapLongLongULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongFloat::MapLongLongFloat()
{
    // map<long long, float> m_var_map_longlong_float


    // Just to register all known types
    registermapsTypes();
}

MapLongLongFloat::~MapLongLongFloat()
{
}

MapLongLongFloat::MapLongLongFloat(
        const MapLongLongFloat& x)
{
    m_var_map_longlong_float = x.m_var_map_longlong_float;
}

MapLongLongFloat::MapLongLongFloat(
        MapLongLongFloat&& x) noexcept 
{
    m_var_map_longlong_float = std::move(x.m_var_map_longlong_float);
}

MapLongLongFloat& MapLongLongFloat::operator =(
        const MapLongLongFloat& x)
{

    m_var_map_longlong_float = x.m_var_map_longlong_float;

    return *this;
}

MapLongLongFloat& MapLongLongFloat::operator =(
        MapLongLongFloat&& x) noexcept
{

    m_var_map_longlong_float = std::move(x.m_var_map_longlong_float);

    return *this;
}

bool MapLongLongFloat::operator ==(
        const MapLongLongFloat& x) const
{

    return (m_var_map_longlong_float == x.m_var_map_longlong_float);
}

bool MapLongLongFloat::operator !=(
        const MapLongLongFloat& x) const
{
    return !(*this == x);
}

size_t MapLongLongFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongFloat_max_cdr_typesize;
}

size_t MapLongLongFloat::getCdrSerializedSize(
        const MapLongLongFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_float())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_float.size());
    for (const auto& pair : m_var_map_longlong_float)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_float;
}

/*!
 * @brief This function copies the value in member var_map_longlong_float
 * @param _var_map_longlong_float New value to be copied in member var_map_longlong_float
 */
void MapLongLongFloat::var_map_longlong_float(
        const std::map<int64_t, float>& _var_map_longlong_float)
{
    m_var_map_longlong_float = _var_map_longlong_float;
}

/*!
 * @brief This function moves the value in member var_map_longlong_float
 * @param _var_map_longlong_float New value to be moved in member var_map_longlong_float
 */
void MapLongLongFloat::var_map_longlong_float(
        std::map<int64_t, float>&& _var_map_longlong_float)
{
    m_var_map_longlong_float = std::move(_var_map_longlong_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_float
 * @return Constant reference to member var_map_longlong_float
 */
const std::map<int64_t, float>& MapLongLongFloat::var_map_longlong_float() const
{
    return m_var_map_longlong_float;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_float
 * @return Reference to member var_map_longlong_float
 */
std::map<int64_t, float>& MapLongLongFloat::var_map_longlong_float()
{
    return m_var_map_longlong_float;
}


size_t MapLongLongFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongFloat_max_key_cdr_typesize;
}

bool MapLongLongFloat::isKeyDefined()
{
    return false;
}

void MapLongLongFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongKeyDoubleValue::MapLongLongKeyDoubleValue()
{
    // map<long long, double> m_var_map_longlong_double


    // Just to register all known types
    registermapsTypes();
}

MapLongLongKeyDoubleValue::~MapLongLongKeyDoubleValue()
{
}

MapLongLongKeyDoubleValue::MapLongLongKeyDoubleValue(
        const MapLongLongKeyDoubleValue& x)
{
    m_var_map_longlong_double = x.m_var_map_longlong_double;
}

MapLongLongKeyDoubleValue::MapLongLongKeyDoubleValue(
        MapLongLongKeyDoubleValue&& x) noexcept 
{
    m_var_map_longlong_double = std::move(x.m_var_map_longlong_double);
}

MapLongLongKeyDoubleValue& MapLongLongKeyDoubleValue::operator =(
        const MapLongLongKeyDoubleValue& x)
{

    m_var_map_longlong_double = x.m_var_map_longlong_double;

    return *this;
}

MapLongLongKeyDoubleValue& MapLongLongKeyDoubleValue::operator =(
        MapLongLongKeyDoubleValue&& x) noexcept
{

    m_var_map_longlong_double = std::move(x.m_var_map_longlong_double);

    return *this;
}

bool MapLongLongKeyDoubleValue::operator ==(
        const MapLongLongKeyDoubleValue& x) const
{

    return (m_var_map_longlong_double == x.m_var_map_longlong_double);
}

bool MapLongLongKeyDoubleValue::operator !=(
        const MapLongLongKeyDoubleValue& x) const
{
    return !(*this == x);
}

size_t MapLongLongKeyDoubleValue::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongKeyDoubleValue_max_cdr_typesize;
}

size_t MapLongLongKeyDoubleValue::getCdrSerializedSize(
        const MapLongLongKeyDoubleValue& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_double())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongKeyDoubleValue::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_double.size());
    for (const auto& pair : m_var_map_longlong_double)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongKeyDoubleValue::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_double;
}

/*!
 * @brief This function copies the value in member var_map_longlong_double
 * @param _var_map_longlong_double New value to be copied in member var_map_longlong_double
 */
void MapLongLongKeyDoubleValue::var_map_longlong_double(
        const std::map<int64_t, double>& _var_map_longlong_double)
{
    m_var_map_longlong_double = _var_map_longlong_double;
}

/*!
 * @brief This function moves the value in member var_map_longlong_double
 * @param _var_map_longlong_double New value to be moved in member var_map_longlong_double
 */
void MapLongLongKeyDoubleValue::var_map_longlong_double(
        std::map<int64_t, double>&& _var_map_longlong_double)
{
    m_var_map_longlong_double = std::move(_var_map_longlong_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_double
 * @return Constant reference to member var_map_longlong_double
 */
const std::map<int64_t, double>& MapLongLongKeyDoubleValue::var_map_longlong_double() const
{
    return m_var_map_longlong_double;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_double
 * @return Reference to member var_map_longlong_double
 */
std::map<int64_t, double>& MapLongLongKeyDoubleValue::var_map_longlong_double()
{
    return m_var_map_longlong_double;
}


size_t MapLongLongKeyDoubleValue::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongKeyDoubleValue_max_key_cdr_typesize;
}

bool MapLongLongKeyDoubleValue::isKeyDefined()
{
    return false;
}

void MapLongLongKeyDoubleValue::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongLongDouble::MapLongLongLongDouble()
{
    // map<long long, long double> m_var_map_longlong_longdouble


    // Just to register all known types
    registermapsTypes();
}

MapLongLongLongDouble::~MapLongLongLongDouble()
{
}

MapLongLongLongDouble::MapLongLongLongDouble(
        const MapLongLongLongDouble& x)
{
    m_var_map_longlong_longdouble = x.m_var_map_longlong_longdouble;
}

MapLongLongLongDouble::MapLongLongLongDouble(
        MapLongLongLongDouble&& x) noexcept 
{
    m_var_map_longlong_longdouble = std::move(x.m_var_map_longlong_longdouble);
}

MapLongLongLongDouble& MapLongLongLongDouble::operator =(
        const MapLongLongLongDouble& x)
{

    m_var_map_longlong_longdouble = x.m_var_map_longlong_longdouble;

    return *this;
}

MapLongLongLongDouble& MapLongLongLongDouble::operator =(
        MapLongLongLongDouble&& x) noexcept
{

    m_var_map_longlong_longdouble = std::move(x.m_var_map_longlong_longdouble);

    return *this;
}

bool MapLongLongLongDouble::operator ==(
        const MapLongLongLongDouble& x) const
{

    return (m_var_map_longlong_longdouble == x.m_var_map_longlong_longdouble);
}

bool MapLongLongLongDouble::operator !=(
        const MapLongLongLongDouble& x) const
{
    return !(*this == x);
}

size_t MapLongLongLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongLongDouble_max_cdr_typesize;
}

size_t MapLongLongLongDouble::getCdrSerializedSize(
        const MapLongLongLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_longdouble())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapLongLongLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_longdouble.size());
    for (const auto& pair : m_var_map_longlong_longdouble)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_longdouble;
}

/*!
 * @brief This function copies the value in member var_map_longlong_longdouble
 * @param _var_map_longlong_longdouble New value to be copied in member var_map_longlong_longdouble
 */
void MapLongLongLongDouble::var_map_longlong_longdouble(
        const std::map<int64_t, long double>& _var_map_longlong_longdouble)
{
    m_var_map_longlong_longdouble = _var_map_longlong_longdouble;
}

/*!
 * @brief This function moves the value in member var_map_longlong_longdouble
 * @param _var_map_longlong_longdouble New value to be moved in member var_map_longlong_longdouble
 */
void MapLongLongLongDouble::var_map_longlong_longdouble(
        std::map<int64_t, long double>&& _var_map_longlong_longdouble)
{
    m_var_map_longlong_longdouble = std::move(_var_map_longlong_longdouble);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_longdouble
 * @return Constant reference to member var_map_longlong_longdouble
 */
const std::map<int64_t, long double>& MapLongLongLongDouble::var_map_longlong_longdouble() const
{
    return m_var_map_longlong_longdouble;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_longdouble
 * @return Reference to member var_map_longlong_longdouble
 */
std::map<int64_t, long double>& MapLongLongLongDouble::var_map_longlong_longdouble()
{
    return m_var_map_longlong_longdouble;
}


size_t MapLongLongLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongLongDouble_max_key_cdr_typesize;
}

bool MapLongLongLongDouble::isKeyDefined()
{
    return false;
}

void MapLongLongLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongBoolean::MapLongLongBoolean()
{
    // map<long long, boolean> m_var_map_longlong_boolean


    // Just to register all known types
    registermapsTypes();
}

MapLongLongBoolean::~MapLongLongBoolean()
{
}

MapLongLongBoolean::MapLongLongBoolean(
        const MapLongLongBoolean& x)
{
    m_var_map_longlong_boolean = x.m_var_map_longlong_boolean;
}

MapLongLongBoolean::MapLongLongBoolean(
        MapLongLongBoolean&& x) noexcept 
{
    m_var_map_longlong_boolean = std::move(x.m_var_map_longlong_boolean);
}

MapLongLongBoolean& MapLongLongBoolean::operator =(
        const MapLongLongBoolean& x)
{

    m_var_map_longlong_boolean = x.m_var_map_longlong_boolean;

    return *this;
}

MapLongLongBoolean& MapLongLongBoolean::operator =(
        MapLongLongBoolean&& x) noexcept
{

    m_var_map_longlong_boolean = std::move(x.m_var_map_longlong_boolean);

    return *this;
}

bool MapLongLongBoolean::operator ==(
        const MapLongLongBoolean& x) const
{

    return (m_var_map_longlong_boolean == x.m_var_map_longlong_boolean);
}

bool MapLongLongBoolean::operator !=(
        const MapLongLongBoolean& x) const
{
    return !(*this == x);
}

size_t MapLongLongBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongBoolean_max_cdr_typesize;
}

size_t MapLongLongBoolean::getCdrSerializedSize(
        const MapLongLongBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_boolean())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_boolean.size());
    for (const auto& pair : m_var_map_longlong_boolean)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_boolean;
}

/*!
 * @brief This function copies the value in member var_map_longlong_boolean
 * @param _var_map_longlong_boolean New value to be copied in member var_map_longlong_boolean
 */
void MapLongLongBoolean::var_map_longlong_boolean(
        const std::map<int64_t, bool>& _var_map_longlong_boolean)
{
    m_var_map_longlong_boolean = _var_map_longlong_boolean;
}

/*!
 * @brief This function moves the value in member var_map_longlong_boolean
 * @param _var_map_longlong_boolean New value to be moved in member var_map_longlong_boolean
 */
void MapLongLongBoolean::var_map_longlong_boolean(
        std::map<int64_t, bool>&& _var_map_longlong_boolean)
{
    m_var_map_longlong_boolean = std::move(_var_map_longlong_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_boolean
 * @return Constant reference to member var_map_longlong_boolean
 */
const std::map<int64_t, bool>& MapLongLongBoolean::var_map_longlong_boolean() const
{
    return m_var_map_longlong_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_boolean
 * @return Reference to member var_map_longlong_boolean
 */
std::map<int64_t, bool>& MapLongLongBoolean::var_map_longlong_boolean()
{
    return m_var_map_longlong_boolean;
}


size_t MapLongLongBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongBoolean_max_key_cdr_typesize;
}

bool MapLongLongBoolean::isKeyDefined()
{
    return false;
}

void MapLongLongBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongOctet::MapLongLongOctet()
{
    // map<long long, octet> m_var_map_longlong_octet


    // Just to register all known types
    registermapsTypes();
}

MapLongLongOctet::~MapLongLongOctet()
{
}

MapLongLongOctet::MapLongLongOctet(
        const MapLongLongOctet& x)
{
    m_var_map_longlong_octet = x.m_var_map_longlong_octet;
}

MapLongLongOctet::MapLongLongOctet(
        MapLongLongOctet&& x) noexcept 
{
    m_var_map_longlong_octet = std::move(x.m_var_map_longlong_octet);
}

MapLongLongOctet& MapLongLongOctet::operator =(
        const MapLongLongOctet& x)
{

    m_var_map_longlong_octet = x.m_var_map_longlong_octet;

    return *this;
}

MapLongLongOctet& MapLongLongOctet::operator =(
        MapLongLongOctet&& x) noexcept
{

    m_var_map_longlong_octet = std::move(x.m_var_map_longlong_octet);

    return *this;
}

bool MapLongLongOctet::operator ==(
        const MapLongLongOctet& x) const
{

    return (m_var_map_longlong_octet == x.m_var_map_longlong_octet);
}

bool MapLongLongOctet::operator !=(
        const MapLongLongOctet& x) const
{
    return !(*this == x);
}

size_t MapLongLongOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongOctet_max_cdr_typesize;
}

size_t MapLongLongOctet::getCdrSerializedSize(
        const MapLongLongOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_octet())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_octet.size());
    for (const auto& pair : m_var_map_longlong_octet)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_octet;
}

/*!
 * @brief This function copies the value in member var_map_longlong_octet
 * @param _var_map_longlong_octet New value to be copied in member var_map_longlong_octet
 */
void MapLongLongOctet::var_map_longlong_octet(
        const std::map<int64_t, uint8_t>& _var_map_longlong_octet)
{
    m_var_map_longlong_octet = _var_map_longlong_octet;
}

/*!
 * @brief This function moves the value in member var_map_longlong_octet
 * @param _var_map_longlong_octet New value to be moved in member var_map_longlong_octet
 */
void MapLongLongOctet::var_map_longlong_octet(
        std::map<int64_t, uint8_t>&& _var_map_longlong_octet)
{
    m_var_map_longlong_octet = std::move(_var_map_longlong_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_octet
 * @return Constant reference to member var_map_longlong_octet
 */
const std::map<int64_t, uint8_t>& MapLongLongOctet::var_map_longlong_octet() const
{
    return m_var_map_longlong_octet;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_octet
 * @return Reference to member var_map_longlong_octet
 */
std::map<int64_t, uint8_t>& MapLongLongOctet::var_map_longlong_octet()
{
    return m_var_map_longlong_octet;
}


size_t MapLongLongOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongOctet_max_key_cdr_typesize;
}

bool MapLongLongOctet::isKeyDefined()
{
    return false;
}

void MapLongLongOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongChar::MapLongLongChar()
{
    // map<long long, char> m_var_map_longlong_char


    // Just to register all known types
    registermapsTypes();
}

MapLongLongChar::~MapLongLongChar()
{
}

MapLongLongChar::MapLongLongChar(
        const MapLongLongChar& x)
{
    m_var_map_longlong_char = x.m_var_map_longlong_char;
}

MapLongLongChar::MapLongLongChar(
        MapLongLongChar&& x) noexcept 
{
    m_var_map_longlong_char = std::move(x.m_var_map_longlong_char);
}

MapLongLongChar& MapLongLongChar::operator =(
        const MapLongLongChar& x)
{

    m_var_map_longlong_char = x.m_var_map_longlong_char;

    return *this;
}

MapLongLongChar& MapLongLongChar::operator =(
        MapLongLongChar&& x) noexcept
{

    m_var_map_longlong_char = std::move(x.m_var_map_longlong_char);

    return *this;
}

bool MapLongLongChar::operator ==(
        const MapLongLongChar& x) const
{

    return (m_var_map_longlong_char == x.m_var_map_longlong_char);
}

bool MapLongLongChar::operator !=(
        const MapLongLongChar& x) const
{
    return !(*this == x);
}

size_t MapLongLongChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongChar_max_cdr_typesize;
}

size_t MapLongLongChar::getCdrSerializedSize(
        const MapLongLongChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_char())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_char.size());
    for (const auto& pair : m_var_map_longlong_char)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_char;
}

/*!
 * @brief This function copies the value in member var_map_longlong_char
 * @param _var_map_longlong_char New value to be copied in member var_map_longlong_char
 */
void MapLongLongChar::var_map_longlong_char(
        const std::map<int64_t, char>& _var_map_longlong_char)
{
    m_var_map_longlong_char = _var_map_longlong_char;
}

/*!
 * @brief This function moves the value in member var_map_longlong_char
 * @param _var_map_longlong_char New value to be moved in member var_map_longlong_char
 */
void MapLongLongChar::var_map_longlong_char(
        std::map<int64_t, char>&& _var_map_longlong_char)
{
    m_var_map_longlong_char = std::move(_var_map_longlong_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_char
 * @return Constant reference to member var_map_longlong_char
 */
const std::map<int64_t, char>& MapLongLongChar::var_map_longlong_char() const
{
    return m_var_map_longlong_char;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_char
 * @return Reference to member var_map_longlong_char
 */
std::map<int64_t, char>& MapLongLongChar::var_map_longlong_char()
{
    return m_var_map_longlong_char;
}


size_t MapLongLongChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongChar_max_key_cdr_typesize;
}

bool MapLongLongChar::isKeyDefined()
{
    return false;
}

void MapLongLongChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongWChar::MapLongLongWChar()
{
    // map<long long, wchar> m_var_map_longlong_wchar


    // Just to register all known types
    registermapsTypes();
}

MapLongLongWChar::~MapLongLongWChar()
{
}

MapLongLongWChar::MapLongLongWChar(
        const MapLongLongWChar& x)
{
    m_var_map_longlong_wchar = x.m_var_map_longlong_wchar;
}

MapLongLongWChar::MapLongLongWChar(
        MapLongLongWChar&& x) noexcept 
{
    m_var_map_longlong_wchar = std::move(x.m_var_map_longlong_wchar);
}

MapLongLongWChar& MapLongLongWChar::operator =(
        const MapLongLongWChar& x)
{

    m_var_map_longlong_wchar = x.m_var_map_longlong_wchar;

    return *this;
}

MapLongLongWChar& MapLongLongWChar::operator =(
        MapLongLongWChar&& x) noexcept
{

    m_var_map_longlong_wchar = std::move(x.m_var_map_longlong_wchar);

    return *this;
}

bool MapLongLongWChar::operator ==(
        const MapLongLongWChar& x) const
{

    return (m_var_map_longlong_wchar == x.m_var_map_longlong_wchar);
}

bool MapLongLongWChar::operator !=(
        const MapLongLongWChar& x) const
{
    return !(*this == x);
}

size_t MapLongLongWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongWChar_max_cdr_typesize;
}

size_t MapLongLongWChar::getCdrSerializedSize(
        const MapLongLongWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_wchar())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_wchar.size());
    for (const auto& pair : m_var_map_longlong_wchar)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_wchar;
}

/*!
 * @brief This function copies the value in member var_map_longlong_wchar
 * @param _var_map_longlong_wchar New value to be copied in member var_map_longlong_wchar
 */
void MapLongLongWChar::var_map_longlong_wchar(
        const std::map<int64_t, wchar_t>& _var_map_longlong_wchar)
{
    m_var_map_longlong_wchar = _var_map_longlong_wchar;
}

/*!
 * @brief This function moves the value in member var_map_longlong_wchar
 * @param _var_map_longlong_wchar New value to be moved in member var_map_longlong_wchar
 */
void MapLongLongWChar::var_map_longlong_wchar(
        std::map<int64_t, wchar_t>&& _var_map_longlong_wchar)
{
    m_var_map_longlong_wchar = std::move(_var_map_longlong_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_wchar
 * @return Constant reference to member var_map_longlong_wchar
 */
const std::map<int64_t, wchar_t>& MapLongLongWChar::var_map_longlong_wchar() const
{
    return m_var_map_longlong_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_wchar
 * @return Reference to member var_map_longlong_wchar
 */
std::map<int64_t, wchar_t>& MapLongLongWChar::var_map_longlong_wchar()
{
    return m_var_map_longlong_wchar;
}


size_t MapLongLongWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongWChar_max_key_cdr_typesize;
}

bool MapLongLongWChar::isKeyDefined()
{
    return false;
}

void MapLongLongWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongString::MapLongLongString()
{
    // map<long long, string> m_var_map_longlong_string


    // Just to register all known types
    registermapsTypes();
}

MapLongLongString::~MapLongLongString()
{
}

MapLongLongString::MapLongLongString(
        const MapLongLongString& x)
{
    m_var_map_longlong_string = x.m_var_map_longlong_string;
}

MapLongLongString::MapLongLongString(
        MapLongLongString&& x) noexcept 
{
    m_var_map_longlong_string = std::move(x.m_var_map_longlong_string);
}

MapLongLongString& MapLongLongString::operator =(
        const MapLongLongString& x)
{

    m_var_map_longlong_string = x.m_var_map_longlong_string;

    return *this;
}

MapLongLongString& MapLongLongString::operator =(
        MapLongLongString&& x) noexcept
{

    m_var_map_longlong_string = std::move(x.m_var_map_longlong_string);

    return *this;
}

bool MapLongLongString::operator ==(
        const MapLongLongString& x) const
{

    return (m_var_map_longlong_string == x.m_var_map_longlong_string);
}

bool MapLongLongString::operator !=(
        const MapLongLongString& x) const
{
    return !(*this == x);
}

size_t MapLongLongString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongString_max_cdr_typesize;
}

size_t MapLongLongString::getCdrSerializedSize(
        const MapLongLongString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_string())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapLongLongString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_string.size());
    for (const auto& pair : m_var_map_longlong_string)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapLongLongString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_longlong_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int64_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_longlong_string[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_longlong_string
 * @param _var_map_longlong_string New value to be copied in member var_map_longlong_string
 */
void MapLongLongString::var_map_longlong_string(
        const std::map<int64_t, std::string>& _var_map_longlong_string)
{
    m_var_map_longlong_string = _var_map_longlong_string;
}

/*!
 * @brief This function moves the value in member var_map_longlong_string
 * @param _var_map_longlong_string New value to be moved in member var_map_longlong_string
 */
void MapLongLongString::var_map_longlong_string(
        std::map<int64_t, std::string>&& _var_map_longlong_string)
{
    m_var_map_longlong_string = std::move(_var_map_longlong_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_string
 * @return Constant reference to member var_map_longlong_string
 */
const std::map<int64_t, std::string>& MapLongLongString::var_map_longlong_string() const
{
    return m_var_map_longlong_string;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_string
 * @return Reference to member var_map_longlong_string
 */
std::map<int64_t, std::string>& MapLongLongString::var_map_longlong_string()
{
    return m_var_map_longlong_string;
}


size_t MapLongLongString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongString_max_key_cdr_typesize;
}

bool MapLongLongString::isKeyDefined()
{
    return false;
}

void MapLongLongString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongWString::MapLongLongWString()
{
    // map<long long, wstring> m_var_map_longlong_wstring


    // Just to register all known types
    registermapsTypes();
}

MapLongLongWString::~MapLongLongWString()
{
}

MapLongLongWString::MapLongLongWString(
        const MapLongLongWString& x)
{
    m_var_map_longlong_wstring = x.m_var_map_longlong_wstring;
}

MapLongLongWString::MapLongLongWString(
        MapLongLongWString&& x) noexcept 
{
    m_var_map_longlong_wstring = std::move(x.m_var_map_longlong_wstring);
}

MapLongLongWString& MapLongLongWString::operator =(
        const MapLongLongWString& x)
{

    m_var_map_longlong_wstring = x.m_var_map_longlong_wstring;

    return *this;
}

MapLongLongWString& MapLongLongWString::operator =(
        MapLongLongWString&& x) noexcept
{

    m_var_map_longlong_wstring = std::move(x.m_var_map_longlong_wstring);

    return *this;
}

bool MapLongLongWString::operator ==(
        const MapLongLongWString& x) const
{

    return (m_var_map_longlong_wstring == x.m_var_map_longlong_wstring);
}

bool MapLongLongWString::operator !=(
        const MapLongLongWString& x) const
{
    return !(*this == x);
}

size_t MapLongLongWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongWString_max_cdr_typesize;
}

size_t MapLongLongWString::getCdrSerializedSize(
        const MapLongLongWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_wstring())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapLongLongWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_wstring.size());
    for (const auto& pair : m_var_map_longlong_wstring)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapLongLongWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_longlong_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int64_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_longlong_wstring[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_longlong_wstring
 * @param _var_map_longlong_wstring New value to be copied in member var_map_longlong_wstring
 */
void MapLongLongWString::var_map_longlong_wstring(
        const std::map<int64_t, std::wstring>& _var_map_longlong_wstring)
{
    m_var_map_longlong_wstring = _var_map_longlong_wstring;
}

/*!
 * @brief This function moves the value in member var_map_longlong_wstring
 * @param _var_map_longlong_wstring New value to be moved in member var_map_longlong_wstring
 */
void MapLongLongWString::var_map_longlong_wstring(
        std::map<int64_t, std::wstring>&& _var_map_longlong_wstring)
{
    m_var_map_longlong_wstring = std::move(_var_map_longlong_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_wstring
 * @return Constant reference to member var_map_longlong_wstring
 */
const std::map<int64_t, std::wstring>& MapLongLongWString::var_map_longlong_wstring() const
{
    return m_var_map_longlong_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_wstring
 * @return Reference to member var_map_longlong_wstring
 */
std::map<int64_t, std::wstring>& MapLongLongWString::var_map_longlong_wstring()
{
    return m_var_map_longlong_wstring;
}


size_t MapLongLongWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongWString_max_key_cdr_typesize;
}

bool MapLongLongWString::isKeyDefined()
{
    return false;
}

void MapLongLongWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerAliasBoundedStringHelper::MapLongLongInnerAliasBoundedStringHelper()
{
    // map<long long, Inner_alias_bounded_string_helper> m_var_map_longlong_inneraliasboundedstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerAliasBoundedStringHelper::~MapLongLongInnerAliasBoundedStringHelper()
{
}

MapLongLongInnerAliasBoundedStringHelper::MapLongLongInnerAliasBoundedStringHelper(
        const MapLongLongInnerAliasBoundedStringHelper& x)
{
    m_var_map_longlong_inneraliasboundedstringhelper = x.m_var_map_longlong_inneraliasboundedstringhelper;
}

MapLongLongInnerAliasBoundedStringHelper::MapLongLongInnerAliasBoundedStringHelper(
        MapLongLongInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_longlong_inneraliasboundedstringhelper = std::move(x.m_var_map_longlong_inneraliasboundedstringhelper);
}

MapLongLongInnerAliasBoundedStringHelper& MapLongLongInnerAliasBoundedStringHelper::operator =(
        const MapLongLongInnerAliasBoundedStringHelper& x)
{

    m_var_map_longlong_inneraliasboundedstringhelper = x.m_var_map_longlong_inneraliasboundedstringhelper;

    return *this;
}

MapLongLongInnerAliasBoundedStringHelper& MapLongLongInnerAliasBoundedStringHelper::operator =(
        MapLongLongInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_longlong_inneraliasboundedstringhelper = std::move(x.m_var_map_longlong_inneraliasboundedstringhelper);

    return *this;
}

bool MapLongLongInnerAliasBoundedStringHelper::operator ==(
        const MapLongLongInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_longlong_inneraliasboundedstringhelper == x.m_var_map_longlong_inneraliasboundedstringhelper);
}

bool MapLongLongInnerAliasBoundedStringHelper::operator !=(
        const MapLongLongInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapLongLongInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapLongLongInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_inneraliasboundedstringhelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_inneraliasboundedstringhelper.size());
    for (const auto& pair : m_var_map_longlong_inneraliasboundedstringhelper)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapLongLongInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_longlong_inneraliasboundedstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int64_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_longlong_inneraliasboundedstringhelper[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_longlong_inneraliasboundedstringhelper
 * @param _var_map_longlong_inneraliasboundedstringhelper New value to be copied in member var_map_longlong_inneraliasboundedstringhelper
 */
void MapLongLongInnerAliasBoundedStringHelper::var_map_longlong_inneraliasboundedstringhelper(
        const std::map<int64_t, Inner_alias_bounded_string_helper>& _var_map_longlong_inneraliasboundedstringhelper)
{
    m_var_map_longlong_inneraliasboundedstringhelper = _var_map_longlong_inneraliasboundedstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_inneraliasboundedstringhelper
 * @param _var_map_longlong_inneraliasboundedstringhelper New value to be moved in member var_map_longlong_inneraliasboundedstringhelper
 */
void MapLongLongInnerAliasBoundedStringHelper::var_map_longlong_inneraliasboundedstringhelper(
        std::map<int64_t, Inner_alias_bounded_string_helper>&& _var_map_longlong_inneraliasboundedstringhelper)
{
    m_var_map_longlong_inneraliasboundedstringhelper = std::move(_var_map_longlong_inneraliasboundedstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_inneraliasboundedstringhelper
 * @return Constant reference to member var_map_longlong_inneraliasboundedstringhelper
 */
const std::map<int64_t, Inner_alias_bounded_string_helper>& MapLongLongInnerAliasBoundedStringHelper::var_map_longlong_inneraliasboundedstringhelper() const
{
    return m_var_map_longlong_inneraliasboundedstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_inneraliasboundedstringhelper
 * @return Reference to member var_map_longlong_inneraliasboundedstringhelper
 */
std::map<int64_t, Inner_alias_bounded_string_helper>& MapLongLongInnerAliasBoundedStringHelper::var_map_longlong_inneraliasboundedstringhelper()
{
    return m_var_map_longlong_inneraliasboundedstringhelper;
}


size_t MapLongLongInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerAliasBoundedWStringHelper::MapLongLongInnerAliasBoundedWStringHelper()
{
    // map<long long, Inner_alias_bounded_wstring_helper> m_var_map_longlong_inneraliasboundedwstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerAliasBoundedWStringHelper::~MapLongLongInnerAliasBoundedWStringHelper()
{
}

MapLongLongInnerAliasBoundedWStringHelper::MapLongLongInnerAliasBoundedWStringHelper(
        const MapLongLongInnerAliasBoundedWStringHelper& x)
{
    m_var_map_longlong_inneraliasboundedwstringhelper = x.m_var_map_longlong_inneraliasboundedwstringhelper;
}

MapLongLongInnerAliasBoundedWStringHelper::MapLongLongInnerAliasBoundedWStringHelper(
        MapLongLongInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_longlong_inneraliasboundedwstringhelper = std::move(x.m_var_map_longlong_inneraliasboundedwstringhelper);
}

MapLongLongInnerAliasBoundedWStringHelper& MapLongLongInnerAliasBoundedWStringHelper::operator =(
        const MapLongLongInnerAliasBoundedWStringHelper& x)
{

    m_var_map_longlong_inneraliasboundedwstringhelper = x.m_var_map_longlong_inneraliasboundedwstringhelper;

    return *this;
}

MapLongLongInnerAliasBoundedWStringHelper& MapLongLongInnerAliasBoundedWStringHelper::operator =(
        MapLongLongInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_longlong_inneraliasboundedwstringhelper = std::move(x.m_var_map_longlong_inneraliasboundedwstringhelper);

    return *this;
}

bool MapLongLongInnerAliasBoundedWStringHelper::operator ==(
        const MapLongLongInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_longlong_inneraliasboundedwstringhelper == x.m_var_map_longlong_inneraliasboundedwstringhelper);
}

bool MapLongLongInnerAliasBoundedWStringHelper::operator !=(
        const MapLongLongInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapLongLongInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapLongLongInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_inneraliasboundedwstringhelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_inneraliasboundedwstringhelper.size());
    for (const auto& pair : m_var_map_longlong_inneraliasboundedwstringhelper)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapLongLongInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_longlong_inneraliasboundedwstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            int64_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_longlong_inneraliasboundedwstringhelper[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_longlong_inneraliasboundedwstringhelper
 * @param _var_map_longlong_inneraliasboundedwstringhelper New value to be copied in member var_map_longlong_inneraliasboundedwstringhelper
 */
void MapLongLongInnerAliasBoundedWStringHelper::var_map_longlong_inneraliasboundedwstringhelper(
        const std::map<int64_t, Inner_alias_bounded_wstring_helper>& _var_map_longlong_inneraliasboundedwstringhelper)
{
    m_var_map_longlong_inneraliasboundedwstringhelper = _var_map_longlong_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_inneraliasboundedwstringhelper
 * @param _var_map_longlong_inneraliasboundedwstringhelper New value to be moved in member var_map_longlong_inneraliasboundedwstringhelper
 */
void MapLongLongInnerAliasBoundedWStringHelper::var_map_longlong_inneraliasboundedwstringhelper(
        std::map<int64_t, Inner_alias_bounded_wstring_helper>&& _var_map_longlong_inneraliasboundedwstringhelper)
{
    m_var_map_longlong_inneraliasboundedwstringhelper = std::move(_var_map_longlong_inneraliasboundedwstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_inneraliasboundedwstringhelper
 * @return Constant reference to member var_map_longlong_inneraliasboundedwstringhelper
 */
const std::map<int64_t, Inner_alias_bounded_wstring_helper>& MapLongLongInnerAliasBoundedWStringHelper::var_map_longlong_inneraliasboundedwstringhelper() const
{
    return m_var_map_longlong_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_inneraliasboundedwstringhelper
 * @return Reference to member var_map_longlong_inneraliasboundedwstringhelper
 */
std::map<int64_t, Inner_alias_bounded_wstring_helper>& MapLongLongInnerAliasBoundedWStringHelper::var_map_longlong_inneraliasboundedwstringhelper()
{
    return m_var_map_longlong_inneraliasboundedwstringhelper;
}


size_t MapLongLongInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerEnumHelper::MapLongLongInnerEnumHelper()
{
    // map<long long, InnerEnumHelper> m_var_map_longlong_innerenumhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerEnumHelper::~MapLongLongInnerEnumHelper()
{
}

MapLongLongInnerEnumHelper::MapLongLongInnerEnumHelper(
        const MapLongLongInnerEnumHelper& x)
{
    m_var_map_longlong_innerenumhelper = x.m_var_map_longlong_innerenumhelper;
}

MapLongLongInnerEnumHelper::MapLongLongInnerEnumHelper(
        MapLongLongInnerEnumHelper&& x) noexcept 
{
    m_var_map_longlong_innerenumhelper = std::move(x.m_var_map_longlong_innerenumhelper);
}

MapLongLongInnerEnumHelper& MapLongLongInnerEnumHelper::operator =(
        const MapLongLongInnerEnumHelper& x)
{

    m_var_map_longlong_innerenumhelper = x.m_var_map_longlong_innerenumhelper;

    return *this;
}

MapLongLongInnerEnumHelper& MapLongLongInnerEnumHelper::operator =(
        MapLongLongInnerEnumHelper&& x) noexcept
{

    m_var_map_longlong_innerenumhelper = std::move(x.m_var_map_longlong_innerenumhelper);

    return *this;
}

bool MapLongLongInnerEnumHelper::operator ==(
        const MapLongLongInnerEnumHelper& x) const
{

    return (m_var_map_longlong_innerenumhelper == x.m_var_map_longlong_innerenumhelper);
}

bool MapLongLongInnerEnumHelper::operator !=(
        const MapLongLongInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerEnumHelper_max_cdr_typesize;
}

size_t MapLongLongInnerEnumHelper::getCdrSerializedSize(
        const MapLongLongInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_innerenumhelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_innerenumhelper.size());
    for (const auto& pair : m_var_map_longlong_innerenumhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapLongLongInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_longlong_innerenumhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        int64_t key;
        dcdr >> key;

        uint32_t value;
        dcdr >> value;
        m_var_map_longlong_innerenumhelper[key] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_longlong_innerenumhelper
 * @param _var_map_longlong_innerenumhelper New value to be copied in member var_map_longlong_innerenumhelper
 */
void MapLongLongInnerEnumHelper::var_map_longlong_innerenumhelper(
        const std::map<int64_t, InnerEnumHelper>& _var_map_longlong_innerenumhelper)
{
    m_var_map_longlong_innerenumhelper = _var_map_longlong_innerenumhelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_innerenumhelper
 * @param _var_map_longlong_innerenumhelper New value to be moved in member var_map_longlong_innerenumhelper
 */
void MapLongLongInnerEnumHelper::var_map_longlong_innerenumhelper(
        std::map<int64_t, InnerEnumHelper>&& _var_map_longlong_innerenumhelper)
{
    m_var_map_longlong_innerenumhelper = std::move(_var_map_longlong_innerenumhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_innerenumhelper
 * @return Constant reference to member var_map_longlong_innerenumhelper
 */
const std::map<int64_t, InnerEnumHelper>& MapLongLongInnerEnumHelper::var_map_longlong_innerenumhelper() const
{
    return m_var_map_longlong_innerenumhelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_innerenumhelper
 * @return Reference to member var_map_longlong_innerenumhelper
 */
std::map<int64_t, InnerEnumHelper>& MapLongLongInnerEnumHelper::var_map_longlong_innerenumhelper()
{
    return m_var_map_longlong_innerenumhelper;
}


size_t MapLongLongInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerEnumHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerBitMaskHelper::MapLongLongInnerBitMaskHelper()
{
    // map<long long, InnerBitMaskHelper> m_var_map_longlong_innerbitmaskhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerBitMaskHelper::~MapLongLongInnerBitMaskHelper()
{
}

MapLongLongInnerBitMaskHelper::MapLongLongInnerBitMaskHelper(
        const MapLongLongInnerBitMaskHelper& x)
{
    m_var_map_longlong_innerbitmaskhelper = x.m_var_map_longlong_innerbitmaskhelper;
}

MapLongLongInnerBitMaskHelper::MapLongLongInnerBitMaskHelper(
        MapLongLongInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_longlong_innerbitmaskhelper = std::move(x.m_var_map_longlong_innerbitmaskhelper);
}

MapLongLongInnerBitMaskHelper& MapLongLongInnerBitMaskHelper::operator =(
        const MapLongLongInnerBitMaskHelper& x)
{

    m_var_map_longlong_innerbitmaskhelper = x.m_var_map_longlong_innerbitmaskhelper;

    return *this;
}

MapLongLongInnerBitMaskHelper& MapLongLongInnerBitMaskHelper::operator =(
        MapLongLongInnerBitMaskHelper&& x) noexcept
{

    m_var_map_longlong_innerbitmaskhelper = std::move(x.m_var_map_longlong_innerbitmaskhelper);

    return *this;
}

bool MapLongLongInnerBitMaskHelper::operator ==(
        const MapLongLongInnerBitMaskHelper& x) const
{

    return (m_var_map_longlong_innerbitmaskhelper == x.m_var_map_longlong_innerbitmaskhelper);
}

bool MapLongLongInnerBitMaskHelper::operator !=(
        const MapLongLongInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapLongLongInnerBitMaskHelper::getCdrSerializedSize(
        const MapLongLongInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_innerbitmaskhelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_innerbitmaskhelper.size());
    for (const auto& pair : m_var_map_longlong_innerbitmaskhelper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapLongLongInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_longlong_innerbitmaskhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        int64_t key;
        dcdr >> key;

        uint32_t value;        
        dcdr >> value;        
        m_var_map_longlong_innerbitmaskhelper[key] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_longlong_innerbitmaskhelper
 * @param _var_map_longlong_innerbitmaskhelper New value to be copied in member var_map_longlong_innerbitmaskhelper
 */
void MapLongLongInnerBitMaskHelper::var_map_longlong_innerbitmaskhelper(
        const std::map<int64_t, InnerBitMaskHelper>& _var_map_longlong_innerbitmaskhelper)
{
    m_var_map_longlong_innerbitmaskhelper = _var_map_longlong_innerbitmaskhelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_innerbitmaskhelper
 * @param _var_map_longlong_innerbitmaskhelper New value to be moved in member var_map_longlong_innerbitmaskhelper
 */
void MapLongLongInnerBitMaskHelper::var_map_longlong_innerbitmaskhelper(
        std::map<int64_t, InnerBitMaskHelper>&& _var_map_longlong_innerbitmaskhelper)
{
    m_var_map_longlong_innerbitmaskhelper = std::move(_var_map_longlong_innerbitmaskhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_innerbitmaskhelper
 * @return Constant reference to member var_map_longlong_innerbitmaskhelper
 */
const std::map<int64_t, InnerBitMaskHelper>& MapLongLongInnerBitMaskHelper::var_map_longlong_innerbitmaskhelper() const
{
    return m_var_map_longlong_innerbitmaskhelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_innerbitmaskhelper
 * @return Reference to member var_map_longlong_innerbitmaskhelper
 */
std::map<int64_t, InnerBitMaskHelper>& MapLongLongInnerBitMaskHelper::var_map_longlong_innerbitmaskhelper()
{
    return m_var_map_longlong_innerbitmaskhelper;
}


size_t MapLongLongInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerAliasHelper::MapLongLongInnerAliasHelper()
{
    // map<long long, InnerAliasHelper> m_var_map_longlong_inneraliashelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerAliasHelper::~MapLongLongInnerAliasHelper()
{
}

MapLongLongInnerAliasHelper::MapLongLongInnerAliasHelper(
        const MapLongLongInnerAliasHelper& x)
{
    m_var_map_longlong_inneraliashelper = x.m_var_map_longlong_inneraliashelper;
}

MapLongLongInnerAliasHelper::MapLongLongInnerAliasHelper(
        MapLongLongInnerAliasHelper&& x) noexcept 
{
    m_var_map_longlong_inneraliashelper = std::move(x.m_var_map_longlong_inneraliashelper);
}

MapLongLongInnerAliasHelper& MapLongLongInnerAliasHelper::operator =(
        const MapLongLongInnerAliasHelper& x)
{

    m_var_map_longlong_inneraliashelper = x.m_var_map_longlong_inneraliashelper;

    return *this;
}

MapLongLongInnerAliasHelper& MapLongLongInnerAliasHelper::operator =(
        MapLongLongInnerAliasHelper&& x) noexcept
{

    m_var_map_longlong_inneraliashelper = std::move(x.m_var_map_longlong_inneraliashelper);

    return *this;
}

bool MapLongLongInnerAliasHelper::operator ==(
        const MapLongLongInnerAliasHelper& x) const
{

    return (m_var_map_longlong_inneraliashelper == x.m_var_map_longlong_inneraliashelper);
}

bool MapLongLongInnerAliasHelper::operator !=(
        const MapLongLongInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasHelper_max_cdr_typesize;
}

size_t MapLongLongInnerAliasHelper::getCdrSerializedSize(
        const MapLongLongInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_inneraliashelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_inneraliashelper.size());
    for (const auto& pair : m_var_map_longlong_inneraliashelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_inneraliashelper;
}

/*!
 * @brief This function copies the value in member var_map_longlong_inneraliashelper
 * @param _var_map_longlong_inneraliashelper New value to be copied in member var_map_longlong_inneraliashelper
 */
void MapLongLongInnerAliasHelper::var_map_longlong_inneraliashelper(
        const std::map<int64_t, InnerAliasHelper>& _var_map_longlong_inneraliashelper)
{
    m_var_map_longlong_inneraliashelper = _var_map_longlong_inneraliashelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_inneraliashelper
 * @param _var_map_longlong_inneraliashelper New value to be moved in member var_map_longlong_inneraliashelper
 */
void MapLongLongInnerAliasHelper::var_map_longlong_inneraliashelper(
        std::map<int64_t, InnerAliasHelper>&& _var_map_longlong_inneraliashelper)
{
    m_var_map_longlong_inneraliashelper = std::move(_var_map_longlong_inneraliashelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_inneraliashelper
 * @return Constant reference to member var_map_longlong_inneraliashelper
 */
const std::map<int64_t, InnerAliasHelper>& MapLongLongInnerAliasHelper::var_map_longlong_inneraliashelper() const
{
    return m_var_map_longlong_inneraliashelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_inneraliashelper
 * @return Reference to member var_map_longlong_inneraliashelper
 */
std::map<int64_t, InnerAliasHelper>& MapLongLongInnerAliasHelper::var_map_longlong_inneraliashelper()
{
    return m_var_map_longlong_inneraliashelper;
}


size_t MapLongLongInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerAliasArrayHelper::MapLongLongInnerAliasArrayHelper()
{
    // map<long long, Inner_alias_array_helper> m_var_map_longlong_inneraliasarrayhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerAliasArrayHelper::~MapLongLongInnerAliasArrayHelper()
{
}

MapLongLongInnerAliasArrayHelper::MapLongLongInnerAliasArrayHelper(
        const MapLongLongInnerAliasArrayHelper& x)
{
    m_var_map_longlong_inneraliasarrayhelper = x.m_var_map_longlong_inneraliasarrayhelper;
}

MapLongLongInnerAliasArrayHelper::MapLongLongInnerAliasArrayHelper(
        MapLongLongInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_longlong_inneraliasarrayhelper = std::move(x.m_var_map_longlong_inneraliasarrayhelper);
}

MapLongLongInnerAliasArrayHelper& MapLongLongInnerAliasArrayHelper::operator =(
        const MapLongLongInnerAliasArrayHelper& x)
{

    m_var_map_longlong_inneraliasarrayhelper = x.m_var_map_longlong_inneraliasarrayhelper;

    return *this;
}

MapLongLongInnerAliasArrayHelper& MapLongLongInnerAliasArrayHelper::operator =(
        MapLongLongInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_longlong_inneraliasarrayhelper = std::move(x.m_var_map_longlong_inneraliasarrayhelper);

    return *this;
}

bool MapLongLongInnerAliasArrayHelper::operator ==(
        const MapLongLongInnerAliasArrayHelper& x) const
{

    return (m_var_map_longlong_inneraliasarrayhelper == x.m_var_map_longlong_inneraliasarrayhelper);
}

bool MapLongLongInnerAliasArrayHelper::operator !=(
        const MapLongLongInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapLongLongInnerAliasArrayHelper::getCdrSerializedSize(
        const MapLongLongInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_inneraliasarrayhelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_inneraliasarrayhelper.size());
    for (const auto& pair : m_var_map_longlong_inneraliasarrayhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_inneraliasarrayhelper;
}

/*!
 * @brief This function copies the value in member var_map_longlong_inneraliasarrayhelper
 * @param _var_map_longlong_inneraliasarrayhelper New value to be copied in member var_map_longlong_inneraliasarrayhelper
 */
void MapLongLongInnerAliasArrayHelper::var_map_longlong_inneraliasarrayhelper(
        const std::map<int64_t, Inner_alias_array_helper>& _var_map_longlong_inneraliasarrayhelper)
{
    m_var_map_longlong_inneraliasarrayhelper = _var_map_longlong_inneraliasarrayhelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_inneraliasarrayhelper
 * @param _var_map_longlong_inneraliasarrayhelper New value to be moved in member var_map_longlong_inneraliasarrayhelper
 */
void MapLongLongInnerAliasArrayHelper::var_map_longlong_inneraliasarrayhelper(
        std::map<int64_t, Inner_alias_array_helper>&& _var_map_longlong_inneraliasarrayhelper)
{
    m_var_map_longlong_inneraliasarrayhelper = std::move(_var_map_longlong_inneraliasarrayhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_inneraliasarrayhelper
 * @return Constant reference to member var_map_longlong_inneraliasarrayhelper
 */
const std::map<int64_t, Inner_alias_array_helper>& MapLongLongInnerAliasArrayHelper::var_map_longlong_inneraliasarrayhelper() const
{
    return m_var_map_longlong_inneraliasarrayhelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_inneraliasarrayhelper
 * @return Reference to member var_map_longlong_inneraliasarrayhelper
 */
std::map<int64_t, Inner_alias_array_helper>& MapLongLongInnerAliasArrayHelper::var_map_longlong_inneraliasarrayhelper()
{
    return m_var_map_longlong_inneraliasarrayhelper;
}


size_t MapLongLongInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerAliasSequenceHelper::MapLongLongInnerAliasSequenceHelper()
{
    // map<long long, Inner_alias_sequence_helper> m_var_map_longlong_inneraliassequencehelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerAliasSequenceHelper::~MapLongLongInnerAliasSequenceHelper()
{
}

MapLongLongInnerAliasSequenceHelper::MapLongLongInnerAliasSequenceHelper(
        const MapLongLongInnerAliasSequenceHelper& x)
{
    m_var_map_longlong_inneraliassequencehelper = x.m_var_map_longlong_inneraliassequencehelper;
}

MapLongLongInnerAliasSequenceHelper::MapLongLongInnerAliasSequenceHelper(
        MapLongLongInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_longlong_inneraliassequencehelper = std::move(x.m_var_map_longlong_inneraliassequencehelper);
}

MapLongLongInnerAliasSequenceHelper& MapLongLongInnerAliasSequenceHelper::operator =(
        const MapLongLongInnerAliasSequenceHelper& x)
{

    m_var_map_longlong_inneraliassequencehelper = x.m_var_map_longlong_inneraliassequencehelper;

    return *this;
}

MapLongLongInnerAliasSequenceHelper& MapLongLongInnerAliasSequenceHelper::operator =(
        MapLongLongInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_longlong_inneraliassequencehelper = std::move(x.m_var_map_longlong_inneraliassequencehelper);

    return *this;
}

bool MapLongLongInnerAliasSequenceHelper::operator ==(
        const MapLongLongInnerAliasSequenceHelper& x) const
{

    return (m_var_map_longlong_inneraliassequencehelper == x.m_var_map_longlong_inneraliassequencehelper);
}

bool MapLongLongInnerAliasSequenceHelper::operator !=(
        const MapLongLongInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapLongLongInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapLongLongInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_inneraliassequencehelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_inneraliassequencehelper.size());
    for (const auto& pair : m_var_map_longlong_inneraliassequencehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_inneraliassequencehelper;
}

/*!
 * @brief This function copies the value in member var_map_longlong_inneraliassequencehelper
 * @param _var_map_longlong_inneraliassequencehelper New value to be copied in member var_map_longlong_inneraliassequencehelper
 */
void MapLongLongInnerAliasSequenceHelper::var_map_longlong_inneraliassequencehelper(
        const std::map<int64_t, Inner_alias_sequence_helper>& _var_map_longlong_inneraliassequencehelper)
{
    m_var_map_longlong_inneraliassequencehelper = _var_map_longlong_inneraliassequencehelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_inneraliassequencehelper
 * @param _var_map_longlong_inneraliassequencehelper New value to be moved in member var_map_longlong_inneraliassequencehelper
 */
void MapLongLongInnerAliasSequenceHelper::var_map_longlong_inneraliassequencehelper(
        std::map<int64_t, Inner_alias_sequence_helper>&& _var_map_longlong_inneraliassequencehelper)
{
    m_var_map_longlong_inneraliassequencehelper = std::move(_var_map_longlong_inneraliassequencehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_inneraliassequencehelper
 * @return Constant reference to member var_map_longlong_inneraliassequencehelper
 */
const std::map<int64_t, Inner_alias_sequence_helper>& MapLongLongInnerAliasSequenceHelper::var_map_longlong_inneraliassequencehelper() const
{
    return m_var_map_longlong_inneraliassequencehelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_inneraliassequencehelper
 * @return Reference to member var_map_longlong_inneraliassequencehelper
 */
std::map<int64_t, Inner_alias_sequence_helper>& MapLongLongInnerAliasSequenceHelper::var_map_longlong_inneraliassequencehelper()
{
    return m_var_map_longlong_inneraliassequencehelper;
}


size_t MapLongLongInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerAliasMapHelper::MapLongLongInnerAliasMapHelper()
{
    // map<long long, Inner_alias_map_helper> m_var_map_longlong_inneraliasmaphelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerAliasMapHelper::~MapLongLongInnerAliasMapHelper()
{
}

MapLongLongInnerAliasMapHelper::MapLongLongInnerAliasMapHelper(
        const MapLongLongInnerAliasMapHelper& x)
{
    m_var_map_longlong_inneraliasmaphelper = x.m_var_map_longlong_inneraliasmaphelper;
}

MapLongLongInnerAliasMapHelper::MapLongLongInnerAliasMapHelper(
        MapLongLongInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_longlong_inneraliasmaphelper = std::move(x.m_var_map_longlong_inneraliasmaphelper);
}

MapLongLongInnerAliasMapHelper& MapLongLongInnerAliasMapHelper::operator =(
        const MapLongLongInnerAliasMapHelper& x)
{

    m_var_map_longlong_inneraliasmaphelper = x.m_var_map_longlong_inneraliasmaphelper;

    return *this;
}

MapLongLongInnerAliasMapHelper& MapLongLongInnerAliasMapHelper::operator =(
        MapLongLongInnerAliasMapHelper&& x) noexcept
{

    m_var_map_longlong_inneraliasmaphelper = std::move(x.m_var_map_longlong_inneraliasmaphelper);

    return *this;
}

bool MapLongLongInnerAliasMapHelper::operator ==(
        const MapLongLongInnerAliasMapHelper& x) const
{

    return (m_var_map_longlong_inneraliasmaphelper == x.m_var_map_longlong_inneraliasmaphelper);
}

bool MapLongLongInnerAliasMapHelper::operator !=(
        const MapLongLongInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapLongLongInnerAliasMapHelper::getCdrSerializedSize(
        const MapLongLongInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_inneraliasmaphelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_inneraliasmaphelper.size());
    for (const auto& pair : m_var_map_longlong_inneraliasmaphelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_inneraliasmaphelper;
}

/*!
 * @brief This function copies the value in member var_map_longlong_inneraliasmaphelper
 * @param _var_map_longlong_inneraliasmaphelper New value to be copied in member var_map_longlong_inneraliasmaphelper
 */
void MapLongLongInnerAliasMapHelper::var_map_longlong_inneraliasmaphelper(
        const std::map<int64_t, Inner_alias_map_helper>& _var_map_longlong_inneraliasmaphelper)
{
    m_var_map_longlong_inneraliasmaphelper = _var_map_longlong_inneraliasmaphelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_inneraliasmaphelper
 * @param _var_map_longlong_inneraliasmaphelper New value to be moved in member var_map_longlong_inneraliasmaphelper
 */
void MapLongLongInnerAliasMapHelper::var_map_longlong_inneraliasmaphelper(
        std::map<int64_t, Inner_alias_map_helper>&& _var_map_longlong_inneraliasmaphelper)
{
    m_var_map_longlong_inneraliasmaphelper = std::move(_var_map_longlong_inneraliasmaphelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_inneraliasmaphelper
 * @return Constant reference to member var_map_longlong_inneraliasmaphelper
 */
const std::map<int64_t, Inner_alias_map_helper>& MapLongLongInnerAliasMapHelper::var_map_longlong_inneraliasmaphelper() const
{
    return m_var_map_longlong_inneraliasmaphelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_inneraliasmaphelper
 * @return Reference to member var_map_longlong_inneraliasmaphelper
 */
std::map<int64_t, Inner_alias_map_helper>& MapLongLongInnerAliasMapHelper::var_map_longlong_inneraliasmaphelper()
{
    return m_var_map_longlong_inneraliasmaphelper;
}


size_t MapLongLongInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerUnionHelper::MapLongLongInnerUnionHelper()
{
    // map<long long, InnerUnionHelper> m_var_map_longlong_innerunionhelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerUnionHelper::~MapLongLongInnerUnionHelper()
{
}

MapLongLongInnerUnionHelper::MapLongLongInnerUnionHelper(
        const MapLongLongInnerUnionHelper& x)
{
    m_var_map_longlong_innerunionhelper = x.m_var_map_longlong_innerunionhelper;
}

MapLongLongInnerUnionHelper::MapLongLongInnerUnionHelper(
        MapLongLongInnerUnionHelper&& x) noexcept 
{
    m_var_map_longlong_innerunionhelper = std::move(x.m_var_map_longlong_innerunionhelper);
}

MapLongLongInnerUnionHelper& MapLongLongInnerUnionHelper::operator =(
        const MapLongLongInnerUnionHelper& x)
{

    m_var_map_longlong_innerunionhelper = x.m_var_map_longlong_innerunionhelper;

    return *this;
}

MapLongLongInnerUnionHelper& MapLongLongInnerUnionHelper::operator =(
        MapLongLongInnerUnionHelper&& x) noexcept
{

    m_var_map_longlong_innerunionhelper = std::move(x.m_var_map_longlong_innerunionhelper);

    return *this;
}

bool MapLongLongInnerUnionHelper::operator ==(
        const MapLongLongInnerUnionHelper& x) const
{

    return (m_var_map_longlong_innerunionhelper == x.m_var_map_longlong_innerunionhelper);
}

bool MapLongLongInnerUnionHelper::operator !=(
        const MapLongLongInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerUnionHelper_max_cdr_typesize;
}

size_t MapLongLongInnerUnionHelper::getCdrSerializedSize(
        const MapLongLongInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_innerunionhelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_innerunionhelper.size());
    for (const auto& pair : m_var_map_longlong_innerunionhelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_innerunionhelper;
}

/*!
 * @brief This function copies the value in member var_map_longlong_innerunionhelper
 * @param _var_map_longlong_innerunionhelper New value to be copied in member var_map_longlong_innerunionhelper
 */
void MapLongLongInnerUnionHelper::var_map_longlong_innerunionhelper(
        const std::map<int64_t, InnerUnionHelper>& _var_map_longlong_innerunionhelper)
{
    m_var_map_longlong_innerunionhelper = _var_map_longlong_innerunionhelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_innerunionhelper
 * @param _var_map_longlong_innerunionhelper New value to be moved in member var_map_longlong_innerunionhelper
 */
void MapLongLongInnerUnionHelper::var_map_longlong_innerunionhelper(
        std::map<int64_t, InnerUnionHelper>&& _var_map_longlong_innerunionhelper)
{
    m_var_map_longlong_innerunionhelper = std::move(_var_map_longlong_innerunionhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_innerunionhelper
 * @return Constant reference to member var_map_longlong_innerunionhelper
 */
const std::map<int64_t, InnerUnionHelper>& MapLongLongInnerUnionHelper::var_map_longlong_innerunionhelper() const
{
    return m_var_map_longlong_innerunionhelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_innerunionhelper
 * @return Reference to member var_map_longlong_innerunionhelper
 */
std::map<int64_t, InnerUnionHelper>& MapLongLongInnerUnionHelper::var_map_longlong_innerunionhelper()
{
    return m_var_map_longlong_innerunionhelper;
}


size_t MapLongLongInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerUnionHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerStructureHelper::MapLongLongInnerStructureHelper()
{
    // map<long long, InnerStructureHelper> m_var_map_longlong_innerstructurehelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerStructureHelper::~MapLongLongInnerStructureHelper()
{
}

MapLongLongInnerStructureHelper::MapLongLongInnerStructureHelper(
        const MapLongLongInnerStructureHelper& x)
{
    m_var_map_longlong_innerstructurehelper = x.m_var_map_longlong_innerstructurehelper;
}

MapLongLongInnerStructureHelper::MapLongLongInnerStructureHelper(
        MapLongLongInnerStructureHelper&& x) noexcept 
{
    m_var_map_longlong_innerstructurehelper = std::move(x.m_var_map_longlong_innerstructurehelper);
}

MapLongLongInnerStructureHelper& MapLongLongInnerStructureHelper::operator =(
        const MapLongLongInnerStructureHelper& x)
{

    m_var_map_longlong_innerstructurehelper = x.m_var_map_longlong_innerstructurehelper;

    return *this;
}

MapLongLongInnerStructureHelper& MapLongLongInnerStructureHelper::operator =(
        MapLongLongInnerStructureHelper&& x) noexcept
{

    m_var_map_longlong_innerstructurehelper = std::move(x.m_var_map_longlong_innerstructurehelper);

    return *this;
}

bool MapLongLongInnerStructureHelper::operator ==(
        const MapLongLongInnerStructureHelper& x) const
{

    return (m_var_map_longlong_innerstructurehelper == x.m_var_map_longlong_innerstructurehelper);
}

bool MapLongLongInnerStructureHelper::operator !=(
        const MapLongLongInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerStructureHelper_max_cdr_typesize;
}

size_t MapLongLongInnerStructureHelper::getCdrSerializedSize(
        const MapLongLongInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_innerstructurehelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_innerstructurehelper.size());
    for (const auto& pair : m_var_map_longlong_innerstructurehelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_innerstructurehelper;
}

/*!
 * @brief This function copies the value in member var_map_longlong_innerstructurehelper
 * @param _var_map_longlong_innerstructurehelper New value to be copied in member var_map_longlong_innerstructurehelper
 */
void MapLongLongInnerStructureHelper::var_map_longlong_innerstructurehelper(
        const std::map<int64_t, InnerStructureHelper>& _var_map_longlong_innerstructurehelper)
{
    m_var_map_longlong_innerstructurehelper = _var_map_longlong_innerstructurehelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_innerstructurehelper
 * @param _var_map_longlong_innerstructurehelper New value to be moved in member var_map_longlong_innerstructurehelper
 */
void MapLongLongInnerStructureHelper::var_map_longlong_innerstructurehelper(
        std::map<int64_t, InnerStructureHelper>&& _var_map_longlong_innerstructurehelper)
{
    m_var_map_longlong_innerstructurehelper = std::move(_var_map_longlong_innerstructurehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_innerstructurehelper
 * @return Constant reference to member var_map_longlong_innerstructurehelper
 */
const std::map<int64_t, InnerStructureHelper>& MapLongLongInnerStructureHelper::var_map_longlong_innerstructurehelper() const
{
    return m_var_map_longlong_innerstructurehelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_innerstructurehelper
 * @return Reference to member var_map_longlong_innerstructurehelper
 */
std::map<int64_t, InnerStructureHelper>& MapLongLongInnerStructureHelper::var_map_longlong_innerstructurehelper()
{
    return m_var_map_longlong_innerstructurehelper;
}


size_t MapLongLongInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerStructureHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapLongLongInnerBitsetHelper::MapLongLongInnerBitsetHelper()
{
    // map<long long, InnerBitsetHelper> m_var_map_longlong_innerbitsethelper


    // Just to register all known types
    registermapsTypes();
}

MapLongLongInnerBitsetHelper::~MapLongLongInnerBitsetHelper()
{
}

MapLongLongInnerBitsetHelper::MapLongLongInnerBitsetHelper(
        const MapLongLongInnerBitsetHelper& x)
{
    m_var_map_longlong_innerbitsethelper = x.m_var_map_longlong_innerbitsethelper;
}

MapLongLongInnerBitsetHelper::MapLongLongInnerBitsetHelper(
        MapLongLongInnerBitsetHelper&& x) noexcept 
{
    m_var_map_longlong_innerbitsethelper = std::move(x.m_var_map_longlong_innerbitsethelper);
}

MapLongLongInnerBitsetHelper& MapLongLongInnerBitsetHelper::operator =(
        const MapLongLongInnerBitsetHelper& x)
{

    m_var_map_longlong_innerbitsethelper = x.m_var_map_longlong_innerbitsethelper;

    return *this;
}

MapLongLongInnerBitsetHelper& MapLongLongInnerBitsetHelper::operator =(
        MapLongLongInnerBitsetHelper&& x) noexcept
{

    m_var_map_longlong_innerbitsethelper = std::move(x.m_var_map_longlong_innerbitsethelper);

    return *this;
}

bool MapLongLongInnerBitsetHelper::operator ==(
        const MapLongLongInnerBitsetHelper& x) const
{

    return (m_var_map_longlong_innerbitsethelper == x.m_var_map_longlong_innerbitsethelper);
}

bool MapLongLongInnerBitsetHelper::operator !=(
        const MapLongLongInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapLongLongInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerBitsetHelper_max_cdr_typesize;
}

size_t MapLongLongInnerBitsetHelper::getCdrSerializedSize(
        const MapLongLongInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_longlong_innerbitsethelper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapLongLongInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_longlong_innerbitsethelper.size());
    for (const auto& pair : m_var_map_longlong_innerbitsethelper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapLongLongInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_longlong_innerbitsethelper;
}

/*!
 * @brief This function copies the value in member var_map_longlong_innerbitsethelper
 * @param _var_map_longlong_innerbitsethelper New value to be copied in member var_map_longlong_innerbitsethelper
 */
void MapLongLongInnerBitsetHelper::var_map_longlong_innerbitsethelper(
        const std::map<int64_t, InnerBitsetHelper>& _var_map_longlong_innerbitsethelper)
{
    m_var_map_longlong_innerbitsethelper = _var_map_longlong_innerbitsethelper;
}

/*!
 * @brief This function moves the value in member var_map_longlong_innerbitsethelper
 * @param _var_map_longlong_innerbitsethelper New value to be moved in member var_map_longlong_innerbitsethelper
 */
void MapLongLongInnerBitsetHelper::var_map_longlong_innerbitsethelper(
        std::map<int64_t, InnerBitsetHelper>&& _var_map_longlong_innerbitsethelper)
{
    m_var_map_longlong_innerbitsethelper = std::move(_var_map_longlong_innerbitsethelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_longlong_innerbitsethelper
 * @return Constant reference to member var_map_longlong_innerbitsethelper
 */
const std::map<int64_t, InnerBitsetHelper>& MapLongLongInnerBitsetHelper::var_map_longlong_innerbitsethelper() const
{
    return m_var_map_longlong_innerbitsethelper;
}

/*!
 * @brief This function returns a reference to member var_map_longlong_innerbitsethelper
 * @return Reference to member var_map_longlong_innerbitsethelper
 */
std::map<int64_t, InnerBitsetHelper>& MapLongLongInnerBitsetHelper::var_map_longlong_innerbitsethelper()
{
    return m_var_map_longlong_innerbitsethelper;
}


size_t MapLongLongInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapLongLongInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapLongLongInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapLongLongInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongShort::MapULongLongShort()
{
    // map<unsigned long long, short> m_var_map_u_long_long_short


    // Just to register all known types
    registermapsTypes();
}

MapULongLongShort::~MapULongLongShort()
{
}

MapULongLongShort::MapULongLongShort(
        const MapULongLongShort& x)
{
    m_var_map_u_long_long_short = x.m_var_map_u_long_long_short;
}

MapULongLongShort::MapULongLongShort(
        MapULongLongShort&& x) noexcept 
{
    m_var_map_u_long_long_short = std::move(x.m_var_map_u_long_long_short);
}

MapULongLongShort& MapULongLongShort::operator =(
        const MapULongLongShort& x)
{

    m_var_map_u_long_long_short = x.m_var_map_u_long_long_short;

    return *this;
}

MapULongLongShort& MapULongLongShort::operator =(
        MapULongLongShort&& x) noexcept
{

    m_var_map_u_long_long_short = std::move(x.m_var_map_u_long_long_short);

    return *this;
}

bool MapULongLongShort::operator ==(
        const MapULongLongShort& x) const
{

    return (m_var_map_u_long_long_short == x.m_var_map_u_long_long_short);
}

bool MapULongLongShort::operator !=(
        const MapULongLongShort& x) const
{
    return !(*this == x);
}

size_t MapULongLongShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongShort_max_cdr_typesize;
}

size_t MapULongLongShort::getCdrSerializedSize(
        const MapULongLongShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_short())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_short.size());
    for (const auto& pair : m_var_map_u_long_long_short)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_short;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_short
 * @param _var_map_u_long_long_short New value to be copied in member var_map_u_long_long_short
 */
void MapULongLongShort::var_map_u_long_long_short(
        const std::map<uint64_t, int16_t>& _var_map_u_long_long_short)
{
    m_var_map_u_long_long_short = _var_map_u_long_long_short;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_short
 * @param _var_map_u_long_long_short New value to be moved in member var_map_u_long_long_short
 */
void MapULongLongShort::var_map_u_long_long_short(
        std::map<uint64_t, int16_t>&& _var_map_u_long_long_short)
{
    m_var_map_u_long_long_short = std::move(_var_map_u_long_long_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_short
 * @return Constant reference to member var_map_u_long_long_short
 */
const std::map<uint64_t, int16_t>& MapULongLongShort::var_map_u_long_long_short() const
{
    return m_var_map_u_long_long_short;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_short
 * @return Reference to member var_map_u_long_long_short
 */
std::map<uint64_t, int16_t>& MapULongLongShort::var_map_u_long_long_short()
{
    return m_var_map_u_long_long_short;
}


size_t MapULongLongShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongShort_max_key_cdr_typesize;
}

bool MapULongLongShort::isKeyDefined()
{
    return false;
}

void MapULongLongShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongUShort::MapULongLongUShort()
{
    // map<unsigned long long, unsigned short> m_var_map_u_long_long_u_short


    // Just to register all known types
    registermapsTypes();
}

MapULongLongUShort::~MapULongLongUShort()
{
}

MapULongLongUShort::MapULongLongUShort(
        const MapULongLongUShort& x)
{
    m_var_map_u_long_long_u_short = x.m_var_map_u_long_long_u_short;
}

MapULongLongUShort::MapULongLongUShort(
        MapULongLongUShort&& x) noexcept 
{
    m_var_map_u_long_long_u_short = std::move(x.m_var_map_u_long_long_u_short);
}

MapULongLongUShort& MapULongLongUShort::operator =(
        const MapULongLongUShort& x)
{

    m_var_map_u_long_long_u_short = x.m_var_map_u_long_long_u_short;

    return *this;
}

MapULongLongUShort& MapULongLongUShort::operator =(
        MapULongLongUShort&& x) noexcept
{

    m_var_map_u_long_long_u_short = std::move(x.m_var_map_u_long_long_u_short);

    return *this;
}

bool MapULongLongUShort::operator ==(
        const MapULongLongUShort& x) const
{

    return (m_var_map_u_long_long_u_short == x.m_var_map_u_long_long_u_short);
}

bool MapULongLongUShort::operator !=(
        const MapULongLongUShort& x) const
{
    return !(*this == x);
}

size_t MapULongLongUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongUShort_max_cdr_typesize;
}

size_t MapULongLongUShort::getCdrSerializedSize(
        const MapULongLongUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_u_short())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_u_short.size());
    for (const auto& pair : m_var_map_u_long_long_u_short)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_u_short;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_u_short
 * @param _var_map_u_long_long_u_short New value to be copied in member var_map_u_long_long_u_short
 */
void MapULongLongUShort::var_map_u_long_long_u_short(
        const std::map<uint64_t, uint16_t>& _var_map_u_long_long_u_short)
{
    m_var_map_u_long_long_u_short = _var_map_u_long_long_u_short;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_u_short
 * @param _var_map_u_long_long_u_short New value to be moved in member var_map_u_long_long_u_short
 */
void MapULongLongUShort::var_map_u_long_long_u_short(
        std::map<uint64_t, uint16_t>&& _var_map_u_long_long_u_short)
{
    m_var_map_u_long_long_u_short = std::move(_var_map_u_long_long_u_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_u_short
 * @return Constant reference to member var_map_u_long_long_u_short
 */
const std::map<uint64_t, uint16_t>& MapULongLongUShort::var_map_u_long_long_u_short() const
{
    return m_var_map_u_long_long_u_short;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_u_short
 * @return Reference to member var_map_u_long_long_u_short
 */
std::map<uint64_t, uint16_t>& MapULongLongUShort::var_map_u_long_long_u_short()
{
    return m_var_map_u_long_long_u_short;
}


size_t MapULongLongUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongUShort_max_key_cdr_typesize;
}

bool MapULongLongUShort::isKeyDefined()
{
    return false;
}

void MapULongLongUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongLong::MapULongLongLong()
{
    // map<unsigned long long, long> m_var_map_u_long_long_long


    // Just to register all known types
    registermapsTypes();
}

MapULongLongLong::~MapULongLongLong()
{
}

MapULongLongLong::MapULongLongLong(
        const MapULongLongLong& x)
{
    m_var_map_u_long_long_long = x.m_var_map_u_long_long_long;
}

MapULongLongLong::MapULongLongLong(
        MapULongLongLong&& x) noexcept 
{
    m_var_map_u_long_long_long = std::move(x.m_var_map_u_long_long_long);
}

MapULongLongLong& MapULongLongLong::operator =(
        const MapULongLongLong& x)
{

    m_var_map_u_long_long_long = x.m_var_map_u_long_long_long;

    return *this;
}

MapULongLongLong& MapULongLongLong::operator =(
        MapULongLongLong&& x) noexcept
{

    m_var_map_u_long_long_long = std::move(x.m_var_map_u_long_long_long);

    return *this;
}

bool MapULongLongLong::operator ==(
        const MapULongLongLong& x) const
{

    return (m_var_map_u_long_long_long == x.m_var_map_u_long_long_long);
}

bool MapULongLongLong::operator !=(
        const MapULongLongLong& x) const
{
    return !(*this == x);
}

size_t MapULongLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongLong_max_cdr_typesize;
}

size_t MapULongLongLong::getCdrSerializedSize(
        const MapULongLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_long())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_long.size());
    for (const auto& pair : m_var_map_u_long_long_long)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_long;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_long
 * @param _var_map_u_long_long_long New value to be copied in member var_map_u_long_long_long
 */
void MapULongLongLong::var_map_u_long_long_long(
        const std::map<uint64_t, int32_t>& _var_map_u_long_long_long)
{
    m_var_map_u_long_long_long = _var_map_u_long_long_long;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_long
 * @param _var_map_u_long_long_long New value to be moved in member var_map_u_long_long_long
 */
void MapULongLongLong::var_map_u_long_long_long(
        std::map<uint64_t, int32_t>&& _var_map_u_long_long_long)
{
    m_var_map_u_long_long_long = std::move(_var_map_u_long_long_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_long
 * @return Constant reference to member var_map_u_long_long_long
 */
const std::map<uint64_t, int32_t>& MapULongLongLong::var_map_u_long_long_long() const
{
    return m_var_map_u_long_long_long;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_long
 * @return Reference to member var_map_u_long_long_long
 */
std::map<uint64_t, int32_t>& MapULongLongLong::var_map_u_long_long_long()
{
    return m_var_map_u_long_long_long;
}


size_t MapULongLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongLong_max_key_cdr_typesize;
}

bool MapULongLongLong::isKeyDefined()
{
    return false;
}

void MapULongLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongULong::MapULongLongULong()
{
    // map<unsigned long long, unsigned long> m_var_map_u_long_long_u_long


    // Just to register all known types
    registermapsTypes();
}

MapULongLongULong::~MapULongLongULong()
{
}

MapULongLongULong::MapULongLongULong(
        const MapULongLongULong& x)
{
    m_var_map_u_long_long_u_long = x.m_var_map_u_long_long_u_long;
}

MapULongLongULong::MapULongLongULong(
        MapULongLongULong&& x) noexcept 
{
    m_var_map_u_long_long_u_long = std::move(x.m_var_map_u_long_long_u_long);
}

MapULongLongULong& MapULongLongULong::operator =(
        const MapULongLongULong& x)
{

    m_var_map_u_long_long_u_long = x.m_var_map_u_long_long_u_long;

    return *this;
}

MapULongLongULong& MapULongLongULong::operator =(
        MapULongLongULong&& x) noexcept
{

    m_var_map_u_long_long_u_long = std::move(x.m_var_map_u_long_long_u_long);

    return *this;
}

bool MapULongLongULong::operator ==(
        const MapULongLongULong& x) const
{

    return (m_var_map_u_long_long_u_long == x.m_var_map_u_long_long_u_long);
}

bool MapULongLongULong::operator !=(
        const MapULongLongULong& x) const
{
    return !(*this == x);
}

size_t MapULongLongULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongULong_max_cdr_typesize;
}

size_t MapULongLongULong::getCdrSerializedSize(
        const MapULongLongULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_u_long())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_u_long.size());
    for (const auto& pair : m_var_map_u_long_long_u_long)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_u_long;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_u_long
 * @param _var_map_u_long_long_u_long New value to be copied in member var_map_u_long_long_u_long
 */
void MapULongLongULong::var_map_u_long_long_u_long(
        const std::map<uint64_t, uint32_t>& _var_map_u_long_long_u_long)
{
    m_var_map_u_long_long_u_long = _var_map_u_long_long_u_long;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_u_long
 * @param _var_map_u_long_long_u_long New value to be moved in member var_map_u_long_long_u_long
 */
void MapULongLongULong::var_map_u_long_long_u_long(
        std::map<uint64_t, uint32_t>&& _var_map_u_long_long_u_long)
{
    m_var_map_u_long_long_u_long = std::move(_var_map_u_long_long_u_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_u_long
 * @return Constant reference to member var_map_u_long_long_u_long
 */
const std::map<uint64_t, uint32_t>& MapULongLongULong::var_map_u_long_long_u_long() const
{
    return m_var_map_u_long_long_u_long;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_u_long
 * @return Reference to member var_map_u_long_long_u_long
 */
std::map<uint64_t, uint32_t>& MapULongLongULong::var_map_u_long_long_u_long()
{
    return m_var_map_u_long_long_u_long;
}


size_t MapULongLongULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongULong_max_key_cdr_typesize;
}

bool MapULongLongULong::isKeyDefined()
{
    return false;
}

void MapULongLongULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongLongLong::MapULongLongLongLong()
{
    // map<unsigned long long, long long> m_var_map_u_long_long_long_long


    // Just to register all known types
    registermapsTypes();
}

MapULongLongLongLong::~MapULongLongLongLong()
{
}

MapULongLongLongLong::MapULongLongLongLong(
        const MapULongLongLongLong& x)
{
    m_var_map_u_long_long_long_long = x.m_var_map_u_long_long_long_long;
}

MapULongLongLongLong::MapULongLongLongLong(
        MapULongLongLongLong&& x) noexcept 
{
    m_var_map_u_long_long_long_long = std::move(x.m_var_map_u_long_long_long_long);
}

MapULongLongLongLong& MapULongLongLongLong::operator =(
        const MapULongLongLongLong& x)
{

    m_var_map_u_long_long_long_long = x.m_var_map_u_long_long_long_long;

    return *this;
}

MapULongLongLongLong& MapULongLongLongLong::operator =(
        MapULongLongLongLong&& x) noexcept
{

    m_var_map_u_long_long_long_long = std::move(x.m_var_map_u_long_long_long_long);

    return *this;
}

bool MapULongLongLongLong::operator ==(
        const MapULongLongLongLong& x) const
{

    return (m_var_map_u_long_long_long_long == x.m_var_map_u_long_long_long_long);
}

bool MapULongLongLongLong::operator !=(
        const MapULongLongLongLong& x) const
{
    return !(*this == x);
}

size_t MapULongLongLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongLongLong_max_cdr_typesize;
}

size_t MapULongLongLongLong::getCdrSerializedSize(
        const MapULongLongLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_long_long())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_long_long.size());
    for (const auto& pair : m_var_map_u_long_long_long_long)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_long_long;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_long_long
 * @param _var_map_u_long_long_long_long New value to be copied in member var_map_u_long_long_long_long
 */
void MapULongLongLongLong::var_map_u_long_long_long_long(
        const std::map<uint64_t, int64_t>& _var_map_u_long_long_long_long)
{
    m_var_map_u_long_long_long_long = _var_map_u_long_long_long_long;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_long_long
 * @param _var_map_u_long_long_long_long New value to be moved in member var_map_u_long_long_long_long
 */
void MapULongLongLongLong::var_map_u_long_long_long_long(
        std::map<uint64_t, int64_t>&& _var_map_u_long_long_long_long)
{
    m_var_map_u_long_long_long_long = std::move(_var_map_u_long_long_long_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_long_long
 * @return Constant reference to member var_map_u_long_long_long_long
 */
const std::map<uint64_t, int64_t>& MapULongLongLongLong::var_map_u_long_long_long_long() const
{
    return m_var_map_u_long_long_long_long;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_long_long
 * @return Reference to member var_map_u_long_long_long_long
 */
std::map<uint64_t, int64_t>& MapULongLongLongLong::var_map_u_long_long_long_long()
{
    return m_var_map_u_long_long_long_long;
}


size_t MapULongLongLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongLongLong_max_key_cdr_typesize;
}

bool MapULongLongLongLong::isKeyDefined()
{
    return false;
}

void MapULongLongLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongULongLong::MapULongLongULongLong()
{
    // map<unsigned long long, unsigned long long> m_var_map_u_long_long_u_long_long


    // Just to register all known types
    registermapsTypes();
}

MapULongLongULongLong::~MapULongLongULongLong()
{
}

MapULongLongULongLong::MapULongLongULongLong(
        const MapULongLongULongLong& x)
{
    m_var_map_u_long_long_u_long_long = x.m_var_map_u_long_long_u_long_long;
}

MapULongLongULongLong::MapULongLongULongLong(
        MapULongLongULongLong&& x) noexcept 
{
    m_var_map_u_long_long_u_long_long = std::move(x.m_var_map_u_long_long_u_long_long);
}

MapULongLongULongLong& MapULongLongULongLong::operator =(
        const MapULongLongULongLong& x)
{

    m_var_map_u_long_long_u_long_long = x.m_var_map_u_long_long_u_long_long;

    return *this;
}

MapULongLongULongLong& MapULongLongULongLong::operator =(
        MapULongLongULongLong&& x) noexcept
{

    m_var_map_u_long_long_u_long_long = std::move(x.m_var_map_u_long_long_u_long_long);

    return *this;
}

bool MapULongLongULongLong::operator ==(
        const MapULongLongULongLong& x) const
{

    return (m_var_map_u_long_long_u_long_long == x.m_var_map_u_long_long_u_long_long);
}

bool MapULongLongULongLong::operator !=(
        const MapULongLongULongLong& x) const
{
    return !(*this == x);
}

size_t MapULongLongULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongULongLong_max_cdr_typesize;
}

size_t MapULongLongULongLong::getCdrSerializedSize(
        const MapULongLongULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_u_long_long())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_u_long_long.size());
    for (const auto& pair : m_var_map_u_long_long_u_long_long)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_u_long_long;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_u_long_long
 * @param _var_map_u_long_long_u_long_long New value to be copied in member var_map_u_long_long_u_long_long
 */
void MapULongLongULongLong::var_map_u_long_long_u_long_long(
        const std::map<uint64_t, uint64_t>& _var_map_u_long_long_u_long_long)
{
    m_var_map_u_long_long_u_long_long = _var_map_u_long_long_u_long_long;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_u_long_long
 * @param _var_map_u_long_long_u_long_long New value to be moved in member var_map_u_long_long_u_long_long
 */
void MapULongLongULongLong::var_map_u_long_long_u_long_long(
        std::map<uint64_t, uint64_t>&& _var_map_u_long_long_u_long_long)
{
    m_var_map_u_long_long_u_long_long = std::move(_var_map_u_long_long_u_long_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_u_long_long
 * @return Constant reference to member var_map_u_long_long_u_long_long
 */
const std::map<uint64_t, uint64_t>& MapULongLongULongLong::var_map_u_long_long_u_long_long() const
{
    return m_var_map_u_long_long_u_long_long;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_u_long_long
 * @return Reference to member var_map_u_long_long_u_long_long
 */
std::map<uint64_t, uint64_t>& MapULongLongULongLong::var_map_u_long_long_u_long_long()
{
    return m_var_map_u_long_long_u_long_long;
}


size_t MapULongLongULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongULongLong_max_key_cdr_typesize;
}

bool MapULongLongULongLong::isKeyDefined()
{
    return false;
}

void MapULongLongULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongFloat::MapULongLongFloat()
{
    // map<unsigned long long, float> m_var_map_u_long_long_float


    // Just to register all known types
    registermapsTypes();
}

MapULongLongFloat::~MapULongLongFloat()
{
}

MapULongLongFloat::MapULongLongFloat(
        const MapULongLongFloat& x)
{
    m_var_map_u_long_long_float = x.m_var_map_u_long_long_float;
}

MapULongLongFloat::MapULongLongFloat(
        MapULongLongFloat&& x) noexcept 
{
    m_var_map_u_long_long_float = std::move(x.m_var_map_u_long_long_float);
}

MapULongLongFloat& MapULongLongFloat::operator =(
        const MapULongLongFloat& x)
{

    m_var_map_u_long_long_float = x.m_var_map_u_long_long_float;

    return *this;
}

MapULongLongFloat& MapULongLongFloat::operator =(
        MapULongLongFloat&& x) noexcept
{

    m_var_map_u_long_long_float = std::move(x.m_var_map_u_long_long_float);

    return *this;
}

bool MapULongLongFloat::operator ==(
        const MapULongLongFloat& x) const
{

    return (m_var_map_u_long_long_float == x.m_var_map_u_long_long_float);
}

bool MapULongLongFloat::operator !=(
        const MapULongLongFloat& x) const
{
    return !(*this == x);
}

size_t MapULongLongFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongFloat_max_cdr_typesize;
}

size_t MapULongLongFloat::getCdrSerializedSize(
        const MapULongLongFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_float())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_float.size());
    for (const auto& pair : m_var_map_u_long_long_float)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_float;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_float
 * @param _var_map_u_long_long_float New value to be copied in member var_map_u_long_long_float
 */
void MapULongLongFloat::var_map_u_long_long_float(
        const std::map<uint64_t, float>& _var_map_u_long_long_float)
{
    m_var_map_u_long_long_float = _var_map_u_long_long_float;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_float
 * @param _var_map_u_long_long_float New value to be moved in member var_map_u_long_long_float
 */
void MapULongLongFloat::var_map_u_long_long_float(
        std::map<uint64_t, float>&& _var_map_u_long_long_float)
{
    m_var_map_u_long_long_float = std::move(_var_map_u_long_long_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_float
 * @return Constant reference to member var_map_u_long_long_float
 */
const std::map<uint64_t, float>& MapULongLongFloat::var_map_u_long_long_float() const
{
    return m_var_map_u_long_long_float;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_float
 * @return Reference to member var_map_u_long_long_float
 */
std::map<uint64_t, float>& MapULongLongFloat::var_map_u_long_long_float()
{
    return m_var_map_u_long_long_float;
}


size_t MapULongLongFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongFloat_max_key_cdr_typesize;
}

bool MapULongLongFloat::isKeyDefined()
{
    return false;
}

void MapULongLongFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapKeyULongLongValueDouble::MapKeyULongLongValueDouble()
{
    // map<unsigned long long, double> m_var_map_u_long_long_double


    // Just to register all known types
    registermapsTypes();
}

MapKeyULongLongValueDouble::~MapKeyULongLongValueDouble()
{
}

MapKeyULongLongValueDouble::MapKeyULongLongValueDouble(
        const MapKeyULongLongValueDouble& x)
{
    m_var_map_u_long_long_double = x.m_var_map_u_long_long_double;
}

MapKeyULongLongValueDouble::MapKeyULongLongValueDouble(
        MapKeyULongLongValueDouble&& x) noexcept 
{
    m_var_map_u_long_long_double = std::move(x.m_var_map_u_long_long_double);
}

MapKeyULongLongValueDouble& MapKeyULongLongValueDouble::operator =(
        const MapKeyULongLongValueDouble& x)
{

    m_var_map_u_long_long_double = x.m_var_map_u_long_long_double;

    return *this;
}

MapKeyULongLongValueDouble& MapKeyULongLongValueDouble::operator =(
        MapKeyULongLongValueDouble&& x) noexcept
{

    m_var_map_u_long_long_double = std::move(x.m_var_map_u_long_long_double);

    return *this;
}

bool MapKeyULongLongValueDouble::operator ==(
        const MapKeyULongLongValueDouble& x) const
{

    return (m_var_map_u_long_long_double == x.m_var_map_u_long_long_double);
}

bool MapKeyULongLongValueDouble::operator !=(
        const MapKeyULongLongValueDouble& x) const
{
    return !(*this == x);
}

size_t MapKeyULongLongValueDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapKeyULongLongValueDouble_max_cdr_typesize;
}

size_t MapKeyULongLongValueDouble::getCdrSerializedSize(
        const MapKeyULongLongValueDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_double())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapKeyULongLongValueDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_double.size());
    for (const auto& pair : m_var_map_u_long_long_double)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapKeyULongLongValueDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_double;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_double
 * @param _var_map_u_long_long_double New value to be copied in member var_map_u_long_long_double
 */
void MapKeyULongLongValueDouble::var_map_u_long_long_double(
        const std::map<uint64_t, double>& _var_map_u_long_long_double)
{
    m_var_map_u_long_long_double = _var_map_u_long_long_double;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_double
 * @param _var_map_u_long_long_double New value to be moved in member var_map_u_long_long_double
 */
void MapKeyULongLongValueDouble::var_map_u_long_long_double(
        std::map<uint64_t, double>&& _var_map_u_long_long_double)
{
    m_var_map_u_long_long_double = std::move(_var_map_u_long_long_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_double
 * @return Constant reference to member var_map_u_long_long_double
 */
const std::map<uint64_t, double>& MapKeyULongLongValueDouble::var_map_u_long_long_double() const
{
    return m_var_map_u_long_long_double;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_double
 * @return Reference to member var_map_u_long_long_double
 */
std::map<uint64_t, double>& MapKeyULongLongValueDouble::var_map_u_long_long_double()
{
    return m_var_map_u_long_long_double;
}


size_t MapKeyULongLongValueDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapKeyULongLongValueDouble_max_key_cdr_typesize;
}

bool MapKeyULongLongValueDouble::isKeyDefined()
{
    return false;
}

void MapKeyULongLongValueDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongLongDouble::MapULongLongLongDouble()
{
    // map<unsigned long long, long double> m_var_map_u_long_long_long_double


    // Just to register all known types
    registermapsTypes();
}

MapULongLongLongDouble::~MapULongLongLongDouble()
{
}

MapULongLongLongDouble::MapULongLongLongDouble(
        const MapULongLongLongDouble& x)
{
    m_var_map_u_long_long_long_double = x.m_var_map_u_long_long_long_double;
}

MapULongLongLongDouble::MapULongLongLongDouble(
        MapULongLongLongDouble&& x) noexcept 
{
    m_var_map_u_long_long_long_double = std::move(x.m_var_map_u_long_long_long_double);
}

MapULongLongLongDouble& MapULongLongLongDouble::operator =(
        const MapULongLongLongDouble& x)
{

    m_var_map_u_long_long_long_double = x.m_var_map_u_long_long_long_double;

    return *this;
}

MapULongLongLongDouble& MapULongLongLongDouble::operator =(
        MapULongLongLongDouble&& x) noexcept
{

    m_var_map_u_long_long_long_double = std::move(x.m_var_map_u_long_long_long_double);

    return *this;
}

bool MapULongLongLongDouble::operator ==(
        const MapULongLongLongDouble& x) const
{

    return (m_var_map_u_long_long_long_double == x.m_var_map_u_long_long_long_double);
}

bool MapULongLongLongDouble::operator !=(
        const MapULongLongLongDouble& x) const
{
    return !(*this == x);
}

size_t MapULongLongLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongLongDouble_max_cdr_typesize;
}

size_t MapULongLongLongDouble::getCdrSerializedSize(
        const MapULongLongLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_long_double())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapULongLongLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_long_double.size());
    for (const auto& pair : m_var_map_u_long_long_long_double)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_long_double;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_long_double
 * @param _var_map_u_long_long_long_double New value to be copied in member var_map_u_long_long_long_double
 */
void MapULongLongLongDouble::var_map_u_long_long_long_double(
        const std::map<uint64_t, long double>& _var_map_u_long_long_long_double)
{
    m_var_map_u_long_long_long_double = _var_map_u_long_long_long_double;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_long_double
 * @param _var_map_u_long_long_long_double New value to be moved in member var_map_u_long_long_long_double
 */
void MapULongLongLongDouble::var_map_u_long_long_long_double(
        std::map<uint64_t, long double>&& _var_map_u_long_long_long_double)
{
    m_var_map_u_long_long_long_double = std::move(_var_map_u_long_long_long_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_long_double
 * @return Constant reference to member var_map_u_long_long_long_double
 */
const std::map<uint64_t, long double>& MapULongLongLongDouble::var_map_u_long_long_long_double() const
{
    return m_var_map_u_long_long_long_double;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_long_double
 * @return Reference to member var_map_u_long_long_long_double
 */
std::map<uint64_t, long double>& MapULongLongLongDouble::var_map_u_long_long_long_double()
{
    return m_var_map_u_long_long_long_double;
}


size_t MapULongLongLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongLongDouble_max_key_cdr_typesize;
}

bool MapULongLongLongDouble::isKeyDefined()
{
    return false;
}

void MapULongLongLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongBoolean::MapULongLongBoolean()
{
    // map<unsigned long long, boolean> m_var_map_u_long_long_boolean


    // Just to register all known types
    registermapsTypes();
}

MapULongLongBoolean::~MapULongLongBoolean()
{
}

MapULongLongBoolean::MapULongLongBoolean(
        const MapULongLongBoolean& x)
{
    m_var_map_u_long_long_boolean = x.m_var_map_u_long_long_boolean;
}

MapULongLongBoolean::MapULongLongBoolean(
        MapULongLongBoolean&& x) noexcept 
{
    m_var_map_u_long_long_boolean = std::move(x.m_var_map_u_long_long_boolean);
}

MapULongLongBoolean& MapULongLongBoolean::operator =(
        const MapULongLongBoolean& x)
{

    m_var_map_u_long_long_boolean = x.m_var_map_u_long_long_boolean;

    return *this;
}

MapULongLongBoolean& MapULongLongBoolean::operator =(
        MapULongLongBoolean&& x) noexcept
{

    m_var_map_u_long_long_boolean = std::move(x.m_var_map_u_long_long_boolean);

    return *this;
}

bool MapULongLongBoolean::operator ==(
        const MapULongLongBoolean& x) const
{

    return (m_var_map_u_long_long_boolean == x.m_var_map_u_long_long_boolean);
}

bool MapULongLongBoolean::operator !=(
        const MapULongLongBoolean& x) const
{
    return !(*this == x);
}

size_t MapULongLongBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongBoolean_max_cdr_typesize;
}

size_t MapULongLongBoolean::getCdrSerializedSize(
        const MapULongLongBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_boolean())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_boolean.size());
    for (const auto& pair : m_var_map_u_long_long_boolean)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_boolean;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_boolean
 * @param _var_map_u_long_long_boolean New value to be copied in member var_map_u_long_long_boolean
 */
void MapULongLongBoolean::var_map_u_long_long_boolean(
        const std::map<uint64_t, bool>& _var_map_u_long_long_boolean)
{
    m_var_map_u_long_long_boolean = _var_map_u_long_long_boolean;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_boolean
 * @param _var_map_u_long_long_boolean New value to be moved in member var_map_u_long_long_boolean
 */
void MapULongLongBoolean::var_map_u_long_long_boolean(
        std::map<uint64_t, bool>&& _var_map_u_long_long_boolean)
{
    m_var_map_u_long_long_boolean = std::move(_var_map_u_long_long_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_boolean
 * @return Constant reference to member var_map_u_long_long_boolean
 */
const std::map<uint64_t, bool>& MapULongLongBoolean::var_map_u_long_long_boolean() const
{
    return m_var_map_u_long_long_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_boolean
 * @return Reference to member var_map_u_long_long_boolean
 */
std::map<uint64_t, bool>& MapULongLongBoolean::var_map_u_long_long_boolean()
{
    return m_var_map_u_long_long_boolean;
}


size_t MapULongLongBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongBoolean_max_key_cdr_typesize;
}

bool MapULongLongBoolean::isKeyDefined()
{
    return false;
}

void MapULongLongBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongOctet::MapULongLongOctet()
{
    // map<unsigned long long, octet> m_var_map_u_long_long_octet


    // Just to register all known types
    registermapsTypes();
}

MapULongLongOctet::~MapULongLongOctet()
{
}

MapULongLongOctet::MapULongLongOctet(
        const MapULongLongOctet& x)
{
    m_var_map_u_long_long_octet = x.m_var_map_u_long_long_octet;
}

MapULongLongOctet::MapULongLongOctet(
        MapULongLongOctet&& x) noexcept 
{
    m_var_map_u_long_long_octet = std::move(x.m_var_map_u_long_long_octet);
}

MapULongLongOctet& MapULongLongOctet::operator =(
        const MapULongLongOctet& x)
{

    m_var_map_u_long_long_octet = x.m_var_map_u_long_long_octet;

    return *this;
}

MapULongLongOctet& MapULongLongOctet::operator =(
        MapULongLongOctet&& x) noexcept
{

    m_var_map_u_long_long_octet = std::move(x.m_var_map_u_long_long_octet);

    return *this;
}

bool MapULongLongOctet::operator ==(
        const MapULongLongOctet& x) const
{

    return (m_var_map_u_long_long_octet == x.m_var_map_u_long_long_octet);
}

bool MapULongLongOctet::operator !=(
        const MapULongLongOctet& x) const
{
    return !(*this == x);
}

size_t MapULongLongOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongOctet_max_cdr_typesize;
}

size_t MapULongLongOctet::getCdrSerializedSize(
        const MapULongLongOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_octet())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_octet.size());
    for (const auto& pair : m_var_map_u_long_long_octet)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_octet;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_octet
 * @param _var_map_u_long_long_octet New value to be copied in member var_map_u_long_long_octet
 */
void MapULongLongOctet::var_map_u_long_long_octet(
        const std::map<uint64_t, uint8_t>& _var_map_u_long_long_octet)
{
    m_var_map_u_long_long_octet = _var_map_u_long_long_octet;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_octet
 * @param _var_map_u_long_long_octet New value to be moved in member var_map_u_long_long_octet
 */
void MapULongLongOctet::var_map_u_long_long_octet(
        std::map<uint64_t, uint8_t>&& _var_map_u_long_long_octet)
{
    m_var_map_u_long_long_octet = std::move(_var_map_u_long_long_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_octet
 * @return Constant reference to member var_map_u_long_long_octet
 */
const std::map<uint64_t, uint8_t>& MapULongLongOctet::var_map_u_long_long_octet() const
{
    return m_var_map_u_long_long_octet;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_octet
 * @return Reference to member var_map_u_long_long_octet
 */
std::map<uint64_t, uint8_t>& MapULongLongOctet::var_map_u_long_long_octet()
{
    return m_var_map_u_long_long_octet;
}


size_t MapULongLongOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongOctet_max_key_cdr_typesize;
}

bool MapULongLongOctet::isKeyDefined()
{
    return false;
}

void MapULongLongOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongChar::MapULongLongChar()
{
    // map<unsigned long long, char> m_var_map_u_long_long_char


    // Just to register all known types
    registermapsTypes();
}

MapULongLongChar::~MapULongLongChar()
{
}

MapULongLongChar::MapULongLongChar(
        const MapULongLongChar& x)
{
    m_var_map_u_long_long_char = x.m_var_map_u_long_long_char;
}

MapULongLongChar::MapULongLongChar(
        MapULongLongChar&& x) noexcept 
{
    m_var_map_u_long_long_char = std::move(x.m_var_map_u_long_long_char);
}

MapULongLongChar& MapULongLongChar::operator =(
        const MapULongLongChar& x)
{

    m_var_map_u_long_long_char = x.m_var_map_u_long_long_char;

    return *this;
}

MapULongLongChar& MapULongLongChar::operator =(
        MapULongLongChar&& x) noexcept
{

    m_var_map_u_long_long_char = std::move(x.m_var_map_u_long_long_char);

    return *this;
}

bool MapULongLongChar::operator ==(
        const MapULongLongChar& x) const
{

    return (m_var_map_u_long_long_char == x.m_var_map_u_long_long_char);
}

bool MapULongLongChar::operator !=(
        const MapULongLongChar& x) const
{
    return !(*this == x);
}

size_t MapULongLongChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongChar_max_cdr_typesize;
}

size_t MapULongLongChar::getCdrSerializedSize(
        const MapULongLongChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_char())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_char.size());
    for (const auto& pair : m_var_map_u_long_long_char)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_char;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_char
 * @param _var_map_u_long_long_char New value to be copied in member var_map_u_long_long_char
 */
void MapULongLongChar::var_map_u_long_long_char(
        const std::map<uint64_t, char>& _var_map_u_long_long_char)
{
    m_var_map_u_long_long_char = _var_map_u_long_long_char;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_char
 * @param _var_map_u_long_long_char New value to be moved in member var_map_u_long_long_char
 */
void MapULongLongChar::var_map_u_long_long_char(
        std::map<uint64_t, char>&& _var_map_u_long_long_char)
{
    m_var_map_u_long_long_char = std::move(_var_map_u_long_long_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_char
 * @return Constant reference to member var_map_u_long_long_char
 */
const std::map<uint64_t, char>& MapULongLongChar::var_map_u_long_long_char() const
{
    return m_var_map_u_long_long_char;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_char
 * @return Reference to member var_map_u_long_long_char
 */
std::map<uint64_t, char>& MapULongLongChar::var_map_u_long_long_char()
{
    return m_var_map_u_long_long_char;
}


size_t MapULongLongChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongChar_max_key_cdr_typesize;
}

bool MapULongLongChar::isKeyDefined()
{
    return false;
}

void MapULongLongChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongWChar::MapULongLongWChar()
{
    // map<unsigned long long, wchar> m_var_map_u_long_long_wchar


    // Just to register all known types
    registermapsTypes();
}

MapULongLongWChar::~MapULongLongWChar()
{
}

MapULongLongWChar::MapULongLongWChar(
        const MapULongLongWChar& x)
{
    m_var_map_u_long_long_wchar = x.m_var_map_u_long_long_wchar;
}

MapULongLongWChar::MapULongLongWChar(
        MapULongLongWChar&& x) noexcept 
{
    m_var_map_u_long_long_wchar = std::move(x.m_var_map_u_long_long_wchar);
}

MapULongLongWChar& MapULongLongWChar::operator =(
        const MapULongLongWChar& x)
{

    m_var_map_u_long_long_wchar = x.m_var_map_u_long_long_wchar;

    return *this;
}

MapULongLongWChar& MapULongLongWChar::operator =(
        MapULongLongWChar&& x) noexcept
{

    m_var_map_u_long_long_wchar = std::move(x.m_var_map_u_long_long_wchar);

    return *this;
}

bool MapULongLongWChar::operator ==(
        const MapULongLongWChar& x) const
{

    return (m_var_map_u_long_long_wchar == x.m_var_map_u_long_long_wchar);
}

bool MapULongLongWChar::operator !=(
        const MapULongLongWChar& x) const
{
    return !(*this == x);
}

size_t MapULongLongWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongWChar_max_cdr_typesize;
}

size_t MapULongLongWChar::getCdrSerializedSize(
        const MapULongLongWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_wchar())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_wchar.size());
    for (const auto& pair : m_var_map_u_long_long_wchar)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_wchar;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_wchar
 * @param _var_map_u_long_long_wchar New value to be copied in member var_map_u_long_long_wchar
 */
void MapULongLongWChar::var_map_u_long_long_wchar(
        const std::map<uint64_t, wchar_t>& _var_map_u_long_long_wchar)
{
    m_var_map_u_long_long_wchar = _var_map_u_long_long_wchar;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_wchar
 * @param _var_map_u_long_long_wchar New value to be moved in member var_map_u_long_long_wchar
 */
void MapULongLongWChar::var_map_u_long_long_wchar(
        std::map<uint64_t, wchar_t>&& _var_map_u_long_long_wchar)
{
    m_var_map_u_long_long_wchar = std::move(_var_map_u_long_long_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_wchar
 * @return Constant reference to member var_map_u_long_long_wchar
 */
const std::map<uint64_t, wchar_t>& MapULongLongWChar::var_map_u_long_long_wchar() const
{
    return m_var_map_u_long_long_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_wchar
 * @return Reference to member var_map_u_long_long_wchar
 */
std::map<uint64_t, wchar_t>& MapULongLongWChar::var_map_u_long_long_wchar()
{
    return m_var_map_u_long_long_wchar;
}


size_t MapULongLongWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongWChar_max_key_cdr_typesize;
}

bool MapULongLongWChar::isKeyDefined()
{
    return false;
}

void MapULongLongWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongString::MapULongLongString()
{
    // map<unsigned long long, string> m_var_map_u_long_long_string


    // Just to register all known types
    registermapsTypes();
}

MapULongLongString::~MapULongLongString()
{
}

MapULongLongString::MapULongLongString(
        const MapULongLongString& x)
{
    m_var_map_u_long_long_string = x.m_var_map_u_long_long_string;
}

MapULongLongString::MapULongLongString(
        MapULongLongString&& x) noexcept 
{
    m_var_map_u_long_long_string = std::move(x.m_var_map_u_long_long_string);
}

MapULongLongString& MapULongLongString::operator =(
        const MapULongLongString& x)
{

    m_var_map_u_long_long_string = x.m_var_map_u_long_long_string;

    return *this;
}

MapULongLongString& MapULongLongString::operator =(
        MapULongLongString&& x) noexcept
{

    m_var_map_u_long_long_string = std::move(x.m_var_map_u_long_long_string);

    return *this;
}

bool MapULongLongString::operator ==(
        const MapULongLongString& x) const
{

    return (m_var_map_u_long_long_string == x.m_var_map_u_long_long_string);
}

bool MapULongLongString::operator !=(
        const MapULongLongString& x) const
{
    return !(*this == x);
}

size_t MapULongLongString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongString_max_cdr_typesize;
}

size_t MapULongLongString::getCdrSerializedSize(
        const MapULongLongString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_string())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapULongLongString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_string.size());
    for (const auto& pair : m_var_map_u_long_long_string)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapULongLongString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_u_long_long_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint64_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_u_long_long_string[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_u_long_long_string
 * @param _var_map_u_long_long_string New value to be copied in member var_map_u_long_long_string
 */
void MapULongLongString::var_map_u_long_long_string(
        const std::map<uint64_t, std::string>& _var_map_u_long_long_string)
{
    m_var_map_u_long_long_string = _var_map_u_long_long_string;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_string
 * @param _var_map_u_long_long_string New value to be moved in member var_map_u_long_long_string
 */
void MapULongLongString::var_map_u_long_long_string(
        std::map<uint64_t, std::string>&& _var_map_u_long_long_string)
{
    m_var_map_u_long_long_string = std::move(_var_map_u_long_long_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_string
 * @return Constant reference to member var_map_u_long_long_string
 */
const std::map<uint64_t, std::string>& MapULongLongString::var_map_u_long_long_string() const
{
    return m_var_map_u_long_long_string;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_string
 * @return Reference to member var_map_u_long_long_string
 */
std::map<uint64_t, std::string>& MapULongLongString::var_map_u_long_long_string()
{
    return m_var_map_u_long_long_string;
}


size_t MapULongLongString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongString_max_key_cdr_typesize;
}

bool MapULongLongString::isKeyDefined()
{
    return false;
}

void MapULongLongString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongWString::MapULongLongWString()
{
    // map<unsigned long long, wstring> m_var_map_u_long_long_wstring


    // Just to register all known types
    registermapsTypes();
}

MapULongLongWString::~MapULongLongWString()
{
}

MapULongLongWString::MapULongLongWString(
        const MapULongLongWString& x)
{
    m_var_map_u_long_long_wstring = x.m_var_map_u_long_long_wstring;
}

MapULongLongWString::MapULongLongWString(
        MapULongLongWString&& x) noexcept 
{
    m_var_map_u_long_long_wstring = std::move(x.m_var_map_u_long_long_wstring);
}

MapULongLongWString& MapULongLongWString::operator =(
        const MapULongLongWString& x)
{

    m_var_map_u_long_long_wstring = x.m_var_map_u_long_long_wstring;

    return *this;
}

MapULongLongWString& MapULongLongWString::operator =(
        MapULongLongWString&& x) noexcept
{

    m_var_map_u_long_long_wstring = std::move(x.m_var_map_u_long_long_wstring);

    return *this;
}

bool MapULongLongWString::operator ==(
        const MapULongLongWString& x) const
{

    return (m_var_map_u_long_long_wstring == x.m_var_map_u_long_long_wstring);
}

bool MapULongLongWString::operator !=(
        const MapULongLongWString& x) const
{
    return !(*this == x);
}

size_t MapULongLongWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongWString_max_cdr_typesize;
}

size_t MapULongLongWString::getCdrSerializedSize(
        const MapULongLongWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_wstring())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapULongLongWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_wstring.size());
    for (const auto& pair : m_var_map_u_long_long_wstring)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapULongLongWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_u_long_long_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint64_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_u_long_long_wstring[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_u_long_long_wstring
 * @param _var_map_u_long_long_wstring New value to be copied in member var_map_u_long_long_wstring
 */
void MapULongLongWString::var_map_u_long_long_wstring(
        const std::map<uint64_t, std::wstring>& _var_map_u_long_long_wstring)
{
    m_var_map_u_long_long_wstring = _var_map_u_long_long_wstring;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_wstring
 * @param _var_map_u_long_long_wstring New value to be moved in member var_map_u_long_long_wstring
 */
void MapULongLongWString::var_map_u_long_long_wstring(
        std::map<uint64_t, std::wstring>&& _var_map_u_long_long_wstring)
{
    m_var_map_u_long_long_wstring = std::move(_var_map_u_long_long_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_wstring
 * @return Constant reference to member var_map_u_long_long_wstring
 */
const std::map<uint64_t, std::wstring>& MapULongLongWString::var_map_u_long_long_wstring() const
{
    return m_var_map_u_long_long_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_wstring
 * @return Reference to member var_map_u_long_long_wstring
 */
std::map<uint64_t, std::wstring>& MapULongLongWString::var_map_u_long_long_wstring()
{
    return m_var_map_u_long_long_wstring;
}


size_t MapULongLongWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongWString_max_key_cdr_typesize;
}

bool MapULongLongWString::isKeyDefined()
{
    return false;
}

void MapULongLongWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerAliasBoundedStringHelper::MapULongLongInnerAliasBoundedStringHelper()
{
    // map<unsigned long long, Inner_alias_bounded_string_helper> m_var_map_u_long_long_inner_alias_bounded_string_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerAliasBoundedStringHelper::~MapULongLongInnerAliasBoundedStringHelper()
{
}

MapULongLongInnerAliasBoundedStringHelper::MapULongLongInnerAliasBoundedStringHelper(
        const MapULongLongInnerAliasBoundedStringHelper& x)
{
    m_var_map_u_long_long_inner_alias_bounded_string_helper = x.m_var_map_u_long_long_inner_alias_bounded_string_helper;
}

MapULongLongInnerAliasBoundedStringHelper::MapULongLongInnerAliasBoundedStringHelper(
        MapULongLongInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_alias_bounded_string_helper = std::move(x.m_var_map_u_long_long_inner_alias_bounded_string_helper);
}

MapULongLongInnerAliasBoundedStringHelper& MapULongLongInnerAliasBoundedStringHelper::operator =(
        const MapULongLongInnerAliasBoundedStringHelper& x)
{

    m_var_map_u_long_long_inner_alias_bounded_string_helper = x.m_var_map_u_long_long_inner_alias_bounded_string_helper;

    return *this;
}

MapULongLongInnerAliasBoundedStringHelper& MapULongLongInnerAliasBoundedStringHelper::operator =(
        MapULongLongInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_alias_bounded_string_helper = std::move(x.m_var_map_u_long_long_inner_alias_bounded_string_helper);

    return *this;
}

bool MapULongLongInnerAliasBoundedStringHelper::operator ==(
        const MapULongLongInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_u_long_long_inner_alias_bounded_string_helper == x.m_var_map_u_long_long_inner_alias_bounded_string_helper);
}

bool MapULongLongInnerAliasBoundedStringHelper::operator !=(
        const MapULongLongInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapULongLongInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapULongLongInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_alias_bounded_string_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_alias_bounded_string_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_alias_bounded_string_helper)
    {
        scdr << pair.first;    scdr << pair.second.c_str();
    }}

void MapULongLongInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_u_long_long_inner_alias_bounded_string_helper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint64_t key;
            dcdr >> key;

            std::string value;
            dcdr >> value;
            m_var_map_u_long_long_inner_alias_bounded_string_helper[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_alias_bounded_string_helper
 * @param _var_map_u_long_long_inner_alias_bounded_string_helper New value to be copied in member var_map_u_long_long_inner_alias_bounded_string_helper
 */
void MapULongLongInnerAliasBoundedStringHelper::var_map_u_long_long_inner_alias_bounded_string_helper(
        const std::map<uint64_t, Inner_alias_bounded_string_helper>& _var_map_u_long_long_inner_alias_bounded_string_helper)
{
    m_var_map_u_long_long_inner_alias_bounded_string_helper = _var_map_u_long_long_inner_alias_bounded_string_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_alias_bounded_string_helper
 * @param _var_map_u_long_long_inner_alias_bounded_string_helper New value to be moved in member var_map_u_long_long_inner_alias_bounded_string_helper
 */
void MapULongLongInnerAliasBoundedStringHelper::var_map_u_long_long_inner_alias_bounded_string_helper(
        std::map<uint64_t, Inner_alias_bounded_string_helper>&& _var_map_u_long_long_inner_alias_bounded_string_helper)
{
    m_var_map_u_long_long_inner_alias_bounded_string_helper = std::move(_var_map_u_long_long_inner_alias_bounded_string_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_alias_bounded_string_helper
 * @return Constant reference to member var_map_u_long_long_inner_alias_bounded_string_helper
 */
const std::map<uint64_t, Inner_alias_bounded_string_helper>& MapULongLongInnerAliasBoundedStringHelper::var_map_u_long_long_inner_alias_bounded_string_helper() const
{
    return m_var_map_u_long_long_inner_alias_bounded_string_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_alias_bounded_string_helper
 * @return Reference to member var_map_u_long_long_inner_alias_bounded_string_helper
 */
std::map<uint64_t, Inner_alias_bounded_string_helper>& MapULongLongInnerAliasBoundedStringHelper::var_map_u_long_long_inner_alias_bounded_string_helper()
{
    return m_var_map_u_long_long_inner_alias_bounded_string_helper;
}


size_t MapULongLongInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerAliasBoundedWStringHelper::MapULongLongInnerAliasBoundedWStringHelper()
{
    // map<unsigned long long, Inner_alias_bounded_wstring_helper> m_var_map_u_long_long_inner_alias_bounded_wstring_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerAliasBoundedWStringHelper::~MapULongLongInnerAliasBoundedWStringHelper()
{
}

MapULongLongInnerAliasBoundedWStringHelper::MapULongLongInnerAliasBoundedWStringHelper(
        const MapULongLongInnerAliasBoundedWStringHelper& x)
{
    m_var_map_u_long_long_inner_alias_bounded_wstring_helper = x.m_var_map_u_long_long_inner_alias_bounded_wstring_helper;
}

MapULongLongInnerAliasBoundedWStringHelper::MapULongLongInnerAliasBoundedWStringHelper(
        MapULongLongInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_alias_bounded_wstring_helper = std::move(x.m_var_map_u_long_long_inner_alias_bounded_wstring_helper);
}

MapULongLongInnerAliasBoundedWStringHelper& MapULongLongInnerAliasBoundedWStringHelper::operator =(
        const MapULongLongInnerAliasBoundedWStringHelper& x)
{

    m_var_map_u_long_long_inner_alias_bounded_wstring_helper = x.m_var_map_u_long_long_inner_alias_bounded_wstring_helper;

    return *this;
}

MapULongLongInnerAliasBoundedWStringHelper& MapULongLongInnerAliasBoundedWStringHelper::operator =(
        MapULongLongInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_alias_bounded_wstring_helper = std::move(x.m_var_map_u_long_long_inner_alias_bounded_wstring_helper);

    return *this;
}

bool MapULongLongInnerAliasBoundedWStringHelper::operator ==(
        const MapULongLongInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_u_long_long_inner_alias_bounded_wstring_helper == x.m_var_map_u_long_long_inner_alias_bounded_wstring_helper);
}

bool MapULongLongInnerAliasBoundedWStringHelper::operator !=(
        const MapULongLongInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapULongLongInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapULongLongInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_alias_bounded_wstring_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_alias_bounded_wstring_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_alias_bounded_wstring_helper)
    {
        scdr << pair.first;    scdr << pair.second;
    }}

void MapULongLongInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_u_long_long_inner_alias_bounded_wstring_helper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            uint64_t key;
            dcdr >> key;

            std::wstring value;
            dcdr >> value;
            m_var_map_u_long_long_inner_alias_bounded_wstring_helper[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_alias_bounded_wstring_helper
 * @param _var_map_u_long_long_inner_alias_bounded_wstring_helper New value to be copied in member var_map_u_long_long_inner_alias_bounded_wstring_helper
 */
void MapULongLongInnerAliasBoundedWStringHelper::var_map_u_long_long_inner_alias_bounded_wstring_helper(
        const std::map<uint64_t, Inner_alias_bounded_wstring_helper>& _var_map_u_long_long_inner_alias_bounded_wstring_helper)
{
    m_var_map_u_long_long_inner_alias_bounded_wstring_helper = _var_map_u_long_long_inner_alias_bounded_wstring_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_alias_bounded_wstring_helper
 * @param _var_map_u_long_long_inner_alias_bounded_wstring_helper New value to be moved in member var_map_u_long_long_inner_alias_bounded_wstring_helper
 */
void MapULongLongInnerAliasBoundedWStringHelper::var_map_u_long_long_inner_alias_bounded_wstring_helper(
        std::map<uint64_t, Inner_alias_bounded_wstring_helper>&& _var_map_u_long_long_inner_alias_bounded_wstring_helper)
{
    m_var_map_u_long_long_inner_alias_bounded_wstring_helper = std::move(_var_map_u_long_long_inner_alias_bounded_wstring_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_alias_bounded_wstring_helper
 * @return Constant reference to member var_map_u_long_long_inner_alias_bounded_wstring_helper
 */
const std::map<uint64_t, Inner_alias_bounded_wstring_helper>& MapULongLongInnerAliasBoundedWStringHelper::var_map_u_long_long_inner_alias_bounded_wstring_helper() const
{
    return m_var_map_u_long_long_inner_alias_bounded_wstring_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_alias_bounded_wstring_helper
 * @return Reference to member var_map_u_long_long_inner_alias_bounded_wstring_helper
 */
std::map<uint64_t, Inner_alias_bounded_wstring_helper>& MapULongLongInnerAliasBoundedWStringHelper::var_map_u_long_long_inner_alias_bounded_wstring_helper()
{
    return m_var_map_u_long_long_inner_alias_bounded_wstring_helper;
}


size_t MapULongLongInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerEnumHelper::MapULongLongInnerEnumHelper()
{
    // map<unsigned long long, InnerEnumHelper> m_var_map_u_long_long_inner_enum_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerEnumHelper::~MapULongLongInnerEnumHelper()
{
}

MapULongLongInnerEnumHelper::MapULongLongInnerEnumHelper(
        const MapULongLongInnerEnumHelper& x)
{
    m_var_map_u_long_long_inner_enum_helper = x.m_var_map_u_long_long_inner_enum_helper;
}

MapULongLongInnerEnumHelper::MapULongLongInnerEnumHelper(
        MapULongLongInnerEnumHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_enum_helper = std::move(x.m_var_map_u_long_long_inner_enum_helper);
}

MapULongLongInnerEnumHelper& MapULongLongInnerEnumHelper::operator =(
        const MapULongLongInnerEnumHelper& x)
{

    m_var_map_u_long_long_inner_enum_helper = x.m_var_map_u_long_long_inner_enum_helper;

    return *this;
}

MapULongLongInnerEnumHelper& MapULongLongInnerEnumHelper::operator =(
        MapULongLongInnerEnumHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_enum_helper = std::move(x.m_var_map_u_long_long_inner_enum_helper);

    return *this;
}

bool MapULongLongInnerEnumHelper::operator ==(
        const MapULongLongInnerEnumHelper& x) const
{

    return (m_var_map_u_long_long_inner_enum_helper == x.m_var_map_u_long_long_inner_enum_helper);
}

bool MapULongLongInnerEnumHelper::operator !=(
        const MapULongLongInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerEnumHelper_max_cdr_typesize;
}

size_t MapULongLongInnerEnumHelper::getCdrSerializedSize(
        const MapULongLongInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_enum_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_enum_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_enum_helper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapULongLongInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_u_long_long_inner_enum_helper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        uint64_t key;
        dcdr >> key;

        uint32_t value;
        dcdr >> value;
        m_var_map_u_long_long_inner_enum_helper[key] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_enum_helper
 * @param _var_map_u_long_long_inner_enum_helper New value to be copied in member var_map_u_long_long_inner_enum_helper
 */
void MapULongLongInnerEnumHelper::var_map_u_long_long_inner_enum_helper(
        const std::map<uint64_t, InnerEnumHelper>& _var_map_u_long_long_inner_enum_helper)
{
    m_var_map_u_long_long_inner_enum_helper = _var_map_u_long_long_inner_enum_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_enum_helper
 * @param _var_map_u_long_long_inner_enum_helper New value to be moved in member var_map_u_long_long_inner_enum_helper
 */
void MapULongLongInnerEnumHelper::var_map_u_long_long_inner_enum_helper(
        std::map<uint64_t, InnerEnumHelper>&& _var_map_u_long_long_inner_enum_helper)
{
    m_var_map_u_long_long_inner_enum_helper = std::move(_var_map_u_long_long_inner_enum_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_enum_helper
 * @return Constant reference to member var_map_u_long_long_inner_enum_helper
 */
const std::map<uint64_t, InnerEnumHelper>& MapULongLongInnerEnumHelper::var_map_u_long_long_inner_enum_helper() const
{
    return m_var_map_u_long_long_inner_enum_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_enum_helper
 * @return Reference to member var_map_u_long_long_inner_enum_helper
 */
std::map<uint64_t, InnerEnumHelper>& MapULongLongInnerEnumHelper::var_map_u_long_long_inner_enum_helper()
{
    return m_var_map_u_long_long_inner_enum_helper;
}


size_t MapULongLongInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerEnumHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerBitMaskHelper::MapULongLongInnerBitMaskHelper()
{
    // map<unsigned long long, InnerBitMaskHelper> m_var_map_u_long_long_inner_bit_mask_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerBitMaskHelper::~MapULongLongInnerBitMaskHelper()
{
}

MapULongLongInnerBitMaskHelper::MapULongLongInnerBitMaskHelper(
        const MapULongLongInnerBitMaskHelper& x)
{
    m_var_map_u_long_long_inner_bit_mask_helper = x.m_var_map_u_long_long_inner_bit_mask_helper;
}

MapULongLongInnerBitMaskHelper::MapULongLongInnerBitMaskHelper(
        MapULongLongInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_bit_mask_helper = std::move(x.m_var_map_u_long_long_inner_bit_mask_helper);
}

MapULongLongInnerBitMaskHelper& MapULongLongInnerBitMaskHelper::operator =(
        const MapULongLongInnerBitMaskHelper& x)
{

    m_var_map_u_long_long_inner_bit_mask_helper = x.m_var_map_u_long_long_inner_bit_mask_helper;

    return *this;
}

MapULongLongInnerBitMaskHelper& MapULongLongInnerBitMaskHelper::operator =(
        MapULongLongInnerBitMaskHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_bit_mask_helper = std::move(x.m_var_map_u_long_long_inner_bit_mask_helper);

    return *this;
}

bool MapULongLongInnerBitMaskHelper::operator ==(
        const MapULongLongInnerBitMaskHelper& x) const
{

    return (m_var_map_u_long_long_inner_bit_mask_helper == x.m_var_map_u_long_long_inner_bit_mask_helper);
}

bool MapULongLongInnerBitMaskHelper::operator !=(
        const MapULongLongInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapULongLongInnerBitMaskHelper::getCdrSerializedSize(
        const MapULongLongInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_bit_mask_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_bit_mask_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_bit_mask_helper)
    {
        scdr << pair.first;    scdr << static_cast<uint32_t>(pair.second);
    }}

void MapULongLongInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_u_long_long_inner_bit_mask_helper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        uint64_t key;
        dcdr >> key;

        uint32_t value;        
        dcdr >> value;        
        m_var_map_u_long_long_inner_bit_mask_helper[key] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_bit_mask_helper
 * @param _var_map_u_long_long_inner_bit_mask_helper New value to be copied in member var_map_u_long_long_inner_bit_mask_helper
 */
void MapULongLongInnerBitMaskHelper::var_map_u_long_long_inner_bit_mask_helper(
        const std::map<uint64_t, InnerBitMaskHelper>& _var_map_u_long_long_inner_bit_mask_helper)
{
    m_var_map_u_long_long_inner_bit_mask_helper = _var_map_u_long_long_inner_bit_mask_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_bit_mask_helper
 * @param _var_map_u_long_long_inner_bit_mask_helper New value to be moved in member var_map_u_long_long_inner_bit_mask_helper
 */
void MapULongLongInnerBitMaskHelper::var_map_u_long_long_inner_bit_mask_helper(
        std::map<uint64_t, InnerBitMaskHelper>&& _var_map_u_long_long_inner_bit_mask_helper)
{
    m_var_map_u_long_long_inner_bit_mask_helper = std::move(_var_map_u_long_long_inner_bit_mask_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_bit_mask_helper
 * @return Constant reference to member var_map_u_long_long_inner_bit_mask_helper
 */
const std::map<uint64_t, InnerBitMaskHelper>& MapULongLongInnerBitMaskHelper::var_map_u_long_long_inner_bit_mask_helper() const
{
    return m_var_map_u_long_long_inner_bit_mask_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_bit_mask_helper
 * @return Reference to member var_map_u_long_long_inner_bit_mask_helper
 */
std::map<uint64_t, InnerBitMaskHelper>& MapULongLongInnerBitMaskHelper::var_map_u_long_long_inner_bit_mask_helper()
{
    return m_var_map_u_long_long_inner_bit_mask_helper;
}


size_t MapULongLongInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerAliasHelper::MapULongLongInnerAliasHelper()
{
    // map<unsigned long long, InnerAliasHelper> m_var_map_u_long_long_inner_alias_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerAliasHelper::~MapULongLongInnerAliasHelper()
{
}

MapULongLongInnerAliasHelper::MapULongLongInnerAliasHelper(
        const MapULongLongInnerAliasHelper& x)
{
    m_var_map_u_long_long_inner_alias_helper = x.m_var_map_u_long_long_inner_alias_helper;
}

MapULongLongInnerAliasHelper::MapULongLongInnerAliasHelper(
        MapULongLongInnerAliasHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_alias_helper = std::move(x.m_var_map_u_long_long_inner_alias_helper);
}

MapULongLongInnerAliasHelper& MapULongLongInnerAliasHelper::operator =(
        const MapULongLongInnerAliasHelper& x)
{

    m_var_map_u_long_long_inner_alias_helper = x.m_var_map_u_long_long_inner_alias_helper;

    return *this;
}

MapULongLongInnerAliasHelper& MapULongLongInnerAliasHelper::operator =(
        MapULongLongInnerAliasHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_alias_helper = std::move(x.m_var_map_u_long_long_inner_alias_helper);

    return *this;
}

bool MapULongLongInnerAliasHelper::operator ==(
        const MapULongLongInnerAliasHelper& x) const
{

    return (m_var_map_u_long_long_inner_alias_helper == x.m_var_map_u_long_long_inner_alias_helper);
}

bool MapULongLongInnerAliasHelper::operator !=(
        const MapULongLongInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasHelper_max_cdr_typesize;
}

size_t MapULongLongInnerAliasHelper::getCdrSerializedSize(
        const MapULongLongInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_alias_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_alias_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_alias_helper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_inner_alias_helper;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_alias_helper
 * @param _var_map_u_long_long_inner_alias_helper New value to be copied in member var_map_u_long_long_inner_alias_helper
 */
void MapULongLongInnerAliasHelper::var_map_u_long_long_inner_alias_helper(
        const std::map<uint64_t, InnerAliasHelper>& _var_map_u_long_long_inner_alias_helper)
{
    m_var_map_u_long_long_inner_alias_helper = _var_map_u_long_long_inner_alias_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_alias_helper
 * @param _var_map_u_long_long_inner_alias_helper New value to be moved in member var_map_u_long_long_inner_alias_helper
 */
void MapULongLongInnerAliasHelper::var_map_u_long_long_inner_alias_helper(
        std::map<uint64_t, InnerAliasHelper>&& _var_map_u_long_long_inner_alias_helper)
{
    m_var_map_u_long_long_inner_alias_helper = std::move(_var_map_u_long_long_inner_alias_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_alias_helper
 * @return Constant reference to member var_map_u_long_long_inner_alias_helper
 */
const std::map<uint64_t, InnerAliasHelper>& MapULongLongInnerAliasHelper::var_map_u_long_long_inner_alias_helper() const
{
    return m_var_map_u_long_long_inner_alias_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_alias_helper
 * @return Reference to member var_map_u_long_long_inner_alias_helper
 */
std::map<uint64_t, InnerAliasHelper>& MapULongLongInnerAliasHelper::var_map_u_long_long_inner_alias_helper()
{
    return m_var_map_u_long_long_inner_alias_helper;
}


size_t MapULongLongInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerAliasArrayHelper::MapULongLongInnerAliasArrayHelper()
{
    // map<unsigned long long, Inner_alias_array_helper> m_var_map_u_long_long_inner_alias_array_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerAliasArrayHelper::~MapULongLongInnerAliasArrayHelper()
{
}

MapULongLongInnerAliasArrayHelper::MapULongLongInnerAliasArrayHelper(
        const MapULongLongInnerAliasArrayHelper& x)
{
    m_var_map_u_long_long_inner_alias_array_helper = x.m_var_map_u_long_long_inner_alias_array_helper;
}

MapULongLongInnerAliasArrayHelper::MapULongLongInnerAliasArrayHelper(
        MapULongLongInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_alias_array_helper = std::move(x.m_var_map_u_long_long_inner_alias_array_helper);
}

MapULongLongInnerAliasArrayHelper& MapULongLongInnerAliasArrayHelper::operator =(
        const MapULongLongInnerAliasArrayHelper& x)
{

    m_var_map_u_long_long_inner_alias_array_helper = x.m_var_map_u_long_long_inner_alias_array_helper;

    return *this;
}

MapULongLongInnerAliasArrayHelper& MapULongLongInnerAliasArrayHelper::operator =(
        MapULongLongInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_alias_array_helper = std::move(x.m_var_map_u_long_long_inner_alias_array_helper);

    return *this;
}

bool MapULongLongInnerAliasArrayHelper::operator ==(
        const MapULongLongInnerAliasArrayHelper& x) const
{

    return (m_var_map_u_long_long_inner_alias_array_helper == x.m_var_map_u_long_long_inner_alias_array_helper);
}

bool MapULongLongInnerAliasArrayHelper::operator !=(
        const MapULongLongInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapULongLongInnerAliasArrayHelper::getCdrSerializedSize(
        const MapULongLongInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_alias_array_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_alias_array_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_alias_array_helper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_inner_alias_array_helper;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_alias_array_helper
 * @param _var_map_u_long_long_inner_alias_array_helper New value to be copied in member var_map_u_long_long_inner_alias_array_helper
 */
void MapULongLongInnerAliasArrayHelper::var_map_u_long_long_inner_alias_array_helper(
        const std::map<uint64_t, Inner_alias_array_helper>& _var_map_u_long_long_inner_alias_array_helper)
{
    m_var_map_u_long_long_inner_alias_array_helper = _var_map_u_long_long_inner_alias_array_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_alias_array_helper
 * @param _var_map_u_long_long_inner_alias_array_helper New value to be moved in member var_map_u_long_long_inner_alias_array_helper
 */
void MapULongLongInnerAliasArrayHelper::var_map_u_long_long_inner_alias_array_helper(
        std::map<uint64_t, Inner_alias_array_helper>&& _var_map_u_long_long_inner_alias_array_helper)
{
    m_var_map_u_long_long_inner_alias_array_helper = std::move(_var_map_u_long_long_inner_alias_array_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_alias_array_helper
 * @return Constant reference to member var_map_u_long_long_inner_alias_array_helper
 */
const std::map<uint64_t, Inner_alias_array_helper>& MapULongLongInnerAliasArrayHelper::var_map_u_long_long_inner_alias_array_helper() const
{
    return m_var_map_u_long_long_inner_alias_array_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_alias_array_helper
 * @return Reference to member var_map_u_long_long_inner_alias_array_helper
 */
std::map<uint64_t, Inner_alias_array_helper>& MapULongLongInnerAliasArrayHelper::var_map_u_long_long_inner_alias_array_helper()
{
    return m_var_map_u_long_long_inner_alias_array_helper;
}


size_t MapULongLongInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerAliasSequenceHelper::MapULongLongInnerAliasSequenceHelper()
{
    // map<unsigned long long, Inner_alias_sequence_helper> m_var_map_u_long_long_inner_alias_sequence_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerAliasSequenceHelper::~MapULongLongInnerAliasSequenceHelper()
{
}

MapULongLongInnerAliasSequenceHelper::MapULongLongInnerAliasSequenceHelper(
        const MapULongLongInnerAliasSequenceHelper& x)
{
    m_var_map_u_long_long_inner_alias_sequence_helper = x.m_var_map_u_long_long_inner_alias_sequence_helper;
}

MapULongLongInnerAliasSequenceHelper::MapULongLongInnerAliasSequenceHelper(
        MapULongLongInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_alias_sequence_helper = std::move(x.m_var_map_u_long_long_inner_alias_sequence_helper);
}

MapULongLongInnerAliasSequenceHelper& MapULongLongInnerAliasSequenceHelper::operator =(
        const MapULongLongInnerAliasSequenceHelper& x)
{

    m_var_map_u_long_long_inner_alias_sequence_helper = x.m_var_map_u_long_long_inner_alias_sequence_helper;

    return *this;
}

MapULongLongInnerAliasSequenceHelper& MapULongLongInnerAliasSequenceHelper::operator =(
        MapULongLongInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_alias_sequence_helper = std::move(x.m_var_map_u_long_long_inner_alias_sequence_helper);

    return *this;
}

bool MapULongLongInnerAliasSequenceHelper::operator ==(
        const MapULongLongInnerAliasSequenceHelper& x) const
{

    return (m_var_map_u_long_long_inner_alias_sequence_helper == x.m_var_map_u_long_long_inner_alias_sequence_helper);
}

bool MapULongLongInnerAliasSequenceHelper::operator !=(
        const MapULongLongInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapULongLongInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapULongLongInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_alias_sequence_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_alias_sequence_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_alias_sequence_helper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_inner_alias_sequence_helper;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_alias_sequence_helper
 * @param _var_map_u_long_long_inner_alias_sequence_helper New value to be copied in member var_map_u_long_long_inner_alias_sequence_helper
 */
void MapULongLongInnerAliasSequenceHelper::var_map_u_long_long_inner_alias_sequence_helper(
        const std::map<uint64_t, Inner_alias_sequence_helper>& _var_map_u_long_long_inner_alias_sequence_helper)
{
    m_var_map_u_long_long_inner_alias_sequence_helper = _var_map_u_long_long_inner_alias_sequence_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_alias_sequence_helper
 * @param _var_map_u_long_long_inner_alias_sequence_helper New value to be moved in member var_map_u_long_long_inner_alias_sequence_helper
 */
void MapULongLongInnerAliasSequenceHelper::var_map_u_long_long_inner_alias_sequence_helper(
        std::map<uint64_t, Inner_alias_sequence_helper>&& _var_map_u_long_long_inner_alias_sequence_helper)
{
    m_var_map_u_long_long_inner_alias_sequence_helper = std::move(_var_map_u_long_long_inner_alias_sequence_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_alias_sequence_helper
 * @return Constant reference to member var_map_u_long_long_inner_alias_sequence_helper
 */
const std::map<uint64_t, Inner_alias_sequence_helper>& MapULongLongInnerAliasSequenceHelper::var_map_u_long_long_inner_alias_sequence_helper() const
{
    return m_var_map_u_long_long_inner_alias_sequence_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_alias_sequence_helper
 * @return Reference to member var_map_u_long_long_inner_alias_sequence_helper
 */
std::map<uint64_t, Inner_alias_sequence_helper>& MapULongLongInnerAliasSequenceHelper::var_map_u_long_long_inner_alias_sequence_helper()
{
    return m_var_map_u_long_long_inner_alias_sequence_helper;
}


size_t MapULongLongInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerAliasMapHelper::MapULongLongInnerAliasMapHelper()
{
    // map<unsigned long long, Inner_alias_map_helper> m_var_map_u_long_long_inner_alias_map_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerAliasMapHelper::~MapULongLongInnerAliasMapHelper()
{
}

MapULongLongInnerAliasMapHelper::MapULongLongInnerAliasMapHelper(
        const MapULongLongInnerAliasMapHelper& x)
{
    m_var_map_u_long_long_inner_alias_map_helper = x.m_var_map_u_long_long_inner_alias_map_helper;
}

MapULongLongInnerAliasMapHelper::MapULongLongInnerAliasMapHelper(
        MapULongLongInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_alias_map_helper = std::move(x.m_var_map_u_long_long_inner_alias_map_helper);
}

MapULongLongInnerAliasMapHelper& MapULongLongInnerAliasMapHelper::operator =(
        const MapULongLongInnerAliasMapHelper& x)
{

    m_var_map_u_long_long_inner_alias_map_helper = x.m_var_map_u_long_long_inner_alias_map_helper;

    return *this;
}

MapULongLongInnerAliasMapHelper& MapULongLongInnerAliasMapHelper::operator =(
        MapULongLongInnerAliasMapHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_alias_map_helper = std::move(x.m_var_map_u_long_long_inner_alias_map_helper);

    return *this;
}

bool MapULongLongInnerAliasMapHelper::operator ==(
        const MapULongLongInnerAliasMapHelper& x) const
{

    return (m_var_map_u_long_long_inner_alias_map_helper == x.m_var_map_u_long_long_inner_alias_map_helper);
}

bool MapULongLongInnerAliasMapHelper::operator !=(
        const MapULongLongInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapULongLongInnerAliasMapHelper::getCdrSerializedSize(
        const MapULongLongInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_alias_map_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_alias_map_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_alias_map_helper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_inner_alias_map_helper;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_alias_map_helper
 * @param _var_map_u_long_long_inner_alias_map_helper New value to be copied in member var_map_u_long_long_inner_alias_map_helper
 */
void MapULongLongInnerAliasMapHelper::var_map_u_long_long_inner_alias_map_helper(
        const std::map<uint64_t, Inner_alias_map_helper>& _var_map_u_long_long_inner_alias_map_helper)
{
    m_var_map_u_long_long_inner_alias_map_helper = _var_map_u_long_long_inner_alias_map_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_alias_map_helper
 * @param _var_map_u_long_long_inner_alias_map_helper New value to be moved in member var_map_u_long_long_inner_alias_map_helper
 */
void MapULongLongInnerAliasMapHelper::var_map_u_long_long_inner_alias_map_helper(
        std::map<uint64_t, Inner_alias_map_helper>&& _var_map_u_long_long_inner_alias_map_helper)
{
    m_var_map_u_long_long_inner_alias_map_helper = std::move(_var_map_u_long_long_inner_alias_map_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_alias_map_helper
 * @return Constant reference to member var_map_u_long_long_inner_alias_map_helper
 */
const std::map<uint64_t, Inner_alias_map_helper>& MapULongLongInnerAliasMapHelper::var_map_u_long_long_inner_alias_map_helper() const
{
    return m_var_map_u_long_long_inner_alias_map_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_alias_map_helper
 * @return Reference to member var_map_u_long_long_inner_alias_map_helper
 */
std::map<uint64_t, Inner_alias_map_helper>& MapULongLongInnerAliasMapHelper::var_map_u_long_long_inner_alias_map_helper()
{
    return m_var_map_u_long_long_inner_alias_map_helper;
}


size_t MapULongLongInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerUnionHelper::MapULongLongInnerUnionHelper()
{
    // map<unsigned long long, InnerUnionHelper> m_var_map_u_long_long_inner_union_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerUnionHelper::~MapULongLongInnerUnionHelper()
{
}

MapULongLongInnerUnionHelper::MapULongLongInnerUnionHelper(
        const MapULongLongInnerUnionHelper& x)
{
    m_var_map_u_long_long_inner_union_helper = x.m_var_map_u_long_long_inner_union_helper;
}

MapULongLongInnerUnionHelper::MapULongLongInnerUnionHelper(
        MapULongLongInnerUnionHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_union_helper = std::move(x.m_var_map_u_long_long_inner_union_helper);
}

MapULongLongInnerUnionHelper& MapULongLongInnerUnionHelper::operator =(
        const MapULongLongInnerUnionHelper& x)
{

    m_var_map_u_long_long_inner_union_helper = x.m_var_map_u_long_long_inner_union_helper;

    return *this;
}

MapULongLongInnerUnionHelper& MapULongLongInnerUnionHelper::operator =(
        MapULongLongInnerUnionHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_union_helper = std::move(x.m_var_map_u_long_long_inner_union_helper);

    return *this;
}

bool MapULongLongInnerUnionHelper::operator ==(
        const MapULongLongInnerUnionHelper& x) const
{

    return (m_var_map_u_long_long_inner_union_helper == x.m_var_map_u_long_long_inner_union_helper);
}

bool MapULongLongInnerUnionHelper::operator !=(
        const MapULongLongInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerUnionHelper_max_cdr_typesize;
}

size_t MapULongLongInnerUnionHelper::getCdrSerializedSize(
        const MapULongLongInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_union_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_union_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_union_helper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_inner_union_helper;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_union_helper
 * @param _var_map_u_long_long_inner_union_helper New value to be copied in member var_map_u_long_long_inner_union_helper
 */
void MapULongLongInnerUnionHelper::var_map_u_long_long_inner_union_helper(
        const std::map<uint64_t, InnerUnionHelper>& _var_map_u_long_long_inner_union_helper)
{
    m_var_map_u_long_long_inner_union_helper = _var_map_u_long_long_inner_union_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_union_helper
 * @param _var_map_u_long_long_inner_union_helper New value to be moved in member var_map_u_long_long_inner_union_helper
 */
void MapULongLongInnerUnionHelper::var_map_u_long_long_inner_union_helper(
        std::map<uint64_t, InnerUnionHelper>&& _var_map_u_long_long_inner_union_helper)
{
    m_var_map_u_long_long_inner_union_helper = std::move(_var_map_u_long_long_inner_union_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_union_helper
 * @return Constant reference to member var_map_u_long_long_inner_union_helper
 */
const std::map<uint64_t, InnerUnionHelper>& MapULongLongInnerUnionHelper::var_map_u_long_long_inner_union_helper() const
{
    return m_var_map_u_long_long_inner_union_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_union_helper
 * @return Reference to member var_map_u_long_long_inner_union_helper
 */
std::map<uint64_t, InnerUnionHelper>& MapULongLongInnerUnionHelper::var_map_u_long_long_inner_union_helper()
{
    return m_var_map_u_long_long_inner_union_helper;
}


size_t MapULongLongInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerUnionHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerStructureHelper::MapULongLongInnerStructureHelper()
{
    // map<unsigned long long, InnerStructureHelper> m_var_map_u_long_long_inner_structure_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerStructureHelper::~MapULongLongInnerStructureHelper()
{
}

MapULongLongInnerStructureHelper::MapULongLongInnerStructureHelper(
        const MapULongLongInnerStructureHelper& x)
{
    m_var_map_u_long_long_inner_structure_helper = x.m_var_map_u_long_long_inner_structure_helper;
}

MapULongLongInnerStructureHelper::MapULongLongInnerStructureHelper(
        MapULongLongInnerStructureHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_structure_helper = std::move(x.m_var_map_u_long_long_inner_structure_helper);
}

MapULongLongInnerStructureHelper& MapULongLongInnerStructureHelper::operator =(
        const MapULongLongInnerStructureHelper& x)
{

    m_var_map_u_long_long_inner_structure_helper = x.m_var_map_u_long_long_inner_structure_helper;

    return *this;
}

MapULongLongInnerStructureHelper& MapULongLongInnerStructureHelper::operator =(
        MapULongLongInnerStructureHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_structure_helper = std::move(x.m_var_map_u_long_long_inner_structure_helper);

    return *this;
}

bool MapULongLongInnerStructureHelper::operator ==(
        const MapULongLongInnerStructureHelper& x) const
{

    return (m_var_map_u_long_long_inner_structure_helper == x.m_var_map_u_long_long_inner_structure_helper);
}

bool MapULongLongInnerStructureHelper::operator !=(
        const MapULongLongInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerStructureHelper_max_cdr_typesize;
}

size_t MapULongLongInnerStructureHelper::getCdrSerializedSize(
        const MapULongLongInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_structure_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_structure_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_structure_helper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_inner_structure_helper;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_structure_helper
 * @param _var_map_u_long_long_inner_structure_helper New value to be copied in member var_map_u_long_long_inner_structure_helper
 */
void MapULongLongInnerStructureHelper::var_map_u_long_long_inner_structure_helper(
        const std::map<uint64_t, InnerStructureHelper>& _var_map_u_long_long_inner_structure_helper)
{
    m_var_map_u_long_long_inner_structure_helper = _var_map_u_long_long_inner_structure_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_structure_helper
 * @param _var_map_u_long_long_inner_structure_helper New value to be moved in member var_map_u_long_long_inner_structure_helper
 */
void MapULongLongInnerStructureHelper::var_map_u_long_long_inner_structure_helper(
        std::map<uint64_t, InnerStructureHelper>&& _var_map_u_long_long_inner_structure_helper)
{
    m_var_map_u_long_long_inner_structure_helper = std::move(_var_map_u_long_long_inner_structure_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_structure_helper
 * @return Constant reference to member var_map_u_long_long_inner_structure_helper
 */
const std::map<uint64_t, InnerStructureHelper>& MapULongLongInnerStructureHelper::var_map_u_long_long_inner_structure_helper() const
{
    return m_var_map_u_long_long_inner_structure_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_structure_helper
 * @return Reference to member var_map_u_long_long_inner_structure_helper
 */
std::map<uint64_t, InnerStructureHelper>& MapULongLongInnerStructureHelper::var_map_u_long_long_inner_structure_helper()
{
    return m_var_map_u_long_long_inner_structure_helper;
}


size_t MapULongLongInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerStructureHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapULongLongInnerBitsetHelper::MapULongLongInnerBitsetHelper()
{
    // map<unsigned long long, InnerBitsetHelper> m_var_map_u_long_long_inner_bitset_helper


    // Just to register all known types
    registermapsTypes();
}

MapULongLongInnerBitsetHelper::~MapULongLongInnerBitsetHelper()
{
}

MapULongLongInnerBitsetHelper::MapULongLongInnerBitsetHelper(
        const MapULongLongInnerBitsetHelper& x)
{
    m_var_map_u_long_long_inner_bitset_helper = x.m_var_map_u_long_long_inner_bitset_helper;
}

MapULongLongInnerBitsetHelper::MapULongLongInnerBitsetHelper(
        MapULongLongInnerBitsetHelper&& x) noexcept 
{
    m_var_map_u_long_long_inner_bitset_helper = std::move(x.m_var_map_u_long_long_inner_bitset_helper);
}

MapULongLongInnerBitsetHelper& MapULongLongInnerBitsetHelper::operator =(
        const MapULongLongInnerBitsetHelper& x)
{

    m_var_map_u_long_long_inner_bitset_helper = x.m_var_map_u_long_long_inner_bitset_helper;

    return *this;
}

MapULongLongInnerBitsetHelper& MapULongLongInnerBitsetHelper::operator =(
        MapULongLongInnerBitsetHelper&& x) noexcept
{

    m_var_map_u_long_long_inner_bitset_helper = std::move(x.m_var_map_u_long_long_inner_bitset_helper);

    return *this;
}

bool MapULongLongInnerBitsetHelper::operator ==(
        const MapULongLongInnerBitsetHelper& x) const
{

    return (m_var_map_u_long_long_inner_bitset_helper == x.m_var_map_u_long_long_inner_bitset_helper);
}

bool MapULongLongInnerBitsetHelper::operator !=(
        const MapULongLongInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapULongLongInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerBitsetHelper_max_cdr_typesize;
}

size_t MapULongLongInnerBitsetHelper::getCdrSerializedSize(
        const MapULongLongInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_u_long_long_inner_bitset_helper())
    {
        (void)a;

            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapULongLongInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_u_long_long_inner_bitset_helper.size());
    for (const auto& pair : m_var_map_u_long_long_inner_bitset_helper)
    {
        scdr << pair.first;    scdr << pair.second;}}

void MapULongLongInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_map_u_long_long_inner_bitset_helper;
}

/*!
 * @brief This function copies the value in member var_map_u_long_long_inner_bitset_helper
 * @param _var_map_u_long_long_inner_bitset_helper New value to be copied in member var_map_u_long_long_inner_bitset_helper
 */
void MapULongLongInnerBitsetHelper::var_map_u_long_long_inner_bitset_helper(
        const std::map<uint64_t, InnerBitsetHelper>& _var_map_u_long_long_inner_bitset_helper)
{
    m_var_map_u_long_long_inner_bitset_helper = _var_map_u_long_long_inner_bitset_helper;
}

/*!
 * @brief This function moves the value in member var_map_u_long_long_inner_bitset_helper
 * @param _var_map_u_long_long_inner_bitset_helper New value to be moved in member var_map_u_long_long_inner_bitset_helper
 */
void MapULongLongInnerBitsetHelper::var_map_u_long_long_inner_bitset_helper(
        std::map<uint64_t, InnerBitsetHelper>&& _var_map_u_long_long_inner_bitset_helper)
{
    m_var_map_u_long_long_inner_bitset_helper = std::move(_var_map_u_long_long_inner_bitset_helper);
}

/*!
 * @brief This function returns a constant reference to member var_map_u_long_long_inner_bitset_helper
 * @return Constant reference to member var_map_u_long_long_inner_bitset_helper
 */
const std::map<uint64_t, InnerBitsetHelper>& MapULongLongInnerBitsetHelper::var_map_u_long_long_inner_bitset_helper() const
{
    return m_var_map_u_long_long_inner_bitset_helper;
}

/*!
 * @brief This function returns a reference to member var_map_u_long_long_inner_bitset_helper
 * @return Reference to member var_map_u_long_long_inner_bitset_helper
 */
std::map<uint64_t, InnerBitsetHelper>& MapULongLongInnerBitsetHelper::var_map_u_long_long_inner_bitset_helper()
{
    return m_var_map_u_long_long_inner_bitset_helper;
}


size_t MapULongLongInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapULongLongInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapULongLongInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapULongLongInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringShort::MapStringShort()
{
    // map<string, short> m_var_map_string_short


    // Just to register all known types
    registermapsTypes();
}

MapStringShort::~MapStringShort()
{
}

MapStringShort::MapStringShort(
        const MapStringShort& x)
{
    m_var_map_string_short = x.m_var_map_string_short;
}

MapStringShort::MapStringShort(
        MapStringShort&& x) noexcept 
{
    m_var_map_string_short = std::move(x.m_var_map_string_short);
}

MapStringShort& MapStringShort::operator =(
        const MapStringShort& x)
{

    m_var_map_string_short = x.m_var_map_string_short;

    return *this;
}

MapStringShort& MapStringShort::operator =(
        MapStringShort&& x) noexcept
{

    m_var_map_string_short = std::move(x.m_var_map_string_short);

    return *this;
}

bool MapStringShort::operator ==(
        const MapStringShort& x) const
{

    return (m_var_map_string_short == x.m_var_map_string_short);
}

bool MapStringShort::operator !=(
        const MapStringShort& x) const
{
    return !(*this == x);
}

size_t MapStringShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringShort_max_cdr_typesize;
}

size_t MapStringShort::getCdrSerializedSize(
        const MapStringShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_short())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapStringShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_short.size());
    for (const auto& pair : m_var_map_string_short)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_short.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            int16_t value;
            dcdr >> value;
            m_var_map_string_short[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_short
 * @param _var_map_string_short New value to be copied in member var_map_string_short
 */
void MapStringShort::var_map_string_short(
        const std::map<std::string, int16_t>& _var_map_string_short)
{
    m_var_map_string_short = _var_map_string_short;
}

/*!
 * @brief This function moves the value in member var_map_string_short
 * @param _var_map_string_short New value to be moved in member var_map_string_short
 */
void MapStringShort::var_map_string_short(
        std::map<std::string, int16_t>&& _var_map_string_short)
{
    m_var_map_string_short = std::move(_var_map_string_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_short
 * @return Constant reference to member var_map_string_short
 */
const std::map<std::string, int16_t>& MapStringShort::var_map_string_short() const
{
    return m_var_map_string_short;
}

/*!
 * @brief This function returns a reference to member var_map_string_short
 * @return Reference to member var_map_string_short
 */
std::map<std::string, int16_t>& MapStringShort::var_map_string_short()
{
    return m_var_map_string_short;
}


size_t MapStringShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringShort_max_key_cdr_typesize;
}

bool MapStringShort::isKeyDefined()
{
    return false;
}

void MapStringShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringUShort::MapStringUShort()
{
    // map<string, unsigned short> m_var_map_string_ushort


    // Just to register all known types
    registermapsTypes();
}

MapStringUShort::~MapStringUShort()
{
}

MapStringUShort::MapStringUShort(
        const MapStringUShort& x)
{
    m_var_map_string_ushort = x.m_var_map_string_ushort;
}

MapStringUShort::MapStringUShort(
        MapStringUShort&& x) noexcept 
{
    m_var_map_string_ushort = std::move(x.m_var_map_string_ushort);
}

MapStringUShort& MapStringUShort::operator =(
        const MapStringUShort& x)
{

    m_var_map_string_ushort = x.m_var_map_string_ushort;

    return *this;
}

MapStringUShort& MapStringUShort::operator =(
        MapStringUShort&& x) noexcept
{

    m_var_map_string_ushort = std::move(x.m_var_map_string_ushort);

    return *this;
}

bool MapStringUShort::operator ==(
        const MapStringUShort& x) const
{

    return (m_var_map_string_ushort == x.m_var_map_string_ushort);
}

bool MapStringUShort::operator !=(
        const MapStringUShort& x) const
{
    return !(*this == x);
}

size_t MapStringUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringUShort_max_cdr_typesize;
}

size_t MapStringUShort::getCdrSerializedSize(
        const MapStringUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_ushort())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapStringUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_ushort.size());
    for (const auto& pair : m_var_map_string_ushort)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_ushort.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            uint16_t value;
            dcdr >> value;
            m_var_map_string_ushort[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_ushort
 * @param _var_map_string_ushort New value to be copied in member var_map_string_ushort
 */
void MapStringUShort::var_map_string_ushort(
        const std::map<std::string, uint16_t>& _var_map_string_ushort)
{
    m_var_map_string_ushort = _var_map_string_ushort;
}

/*!
 * @brief This function moves the value in member var_map_string_ushort
 * @param _var_map_string_ushort New value to be moved in member var_map_string_ushort
 */
void MapStringUShort::var_map_string_ushort(
        std::map<std::string, uint16_t>&& _var_map_string_ushort)
{
    m_var_map_string_ushort = std::move(_var_map_string_ushort);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_ushort
 * @return Constant reference to member var_map_string_ushort
 */
const std::map<std::string, uint16_t>& MapStringUShort::var_map_string_ushort() const
{
    return m_var_map_string_ushort;
}

/*!
 * @brief This function returns a reference to member var_map_string_ushort
 * @return Reference to member var_map_string_ushort
 */
std::map<std::string, uint16_t>& MapStringUShort::var_map_string_ushort()
{
    return m_var_map_string_ushort;
}


size_t MapStringUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringUShort_max_key_cdr_typesize;
}

bool MapStringUShort::isKeyDefined()
{
    return false;
}

void MapStringUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringLong::MapStringLong()
{
    // map<string, long> m_var_map_string_long


    // Just to register all known types
    registermapsTypes();
}

MapStringLong::~MapStringLong()
{
}

MapStringLong::MapStringLong(
        const MapStringLong& x)
{
    m_var_map_string_long = x.m_var_map_string_long;
}

MapStringLong::MapStringLong(
        MapStringLong&& x) noexcept 
{
    m_var_map_string_long = std::move(x.m_var_map_string_long);
}

MapStringLong& MapStringLong::operator =(
        const MapStringLong& x)
{

    m_var_map_string_long = x.m_var_map_string_long;

    return *this;
}

MapStringLong& MapStringLong::operator =(
        MapStringLong&& x) noexcept
{

    m_var_map_string_long = std::move(x.m_var_map_string_long);

    return *this;
}

bool MapStringLong::operator ==(
        const MapStringLong& x) const
{

    return (m_var_map_string_long == x.m_var_map_string_long);
}

bool MapStringLong::operator !=(
        const MapStringLong& x) const
{
    return !(*this == x);
}

size_t MapStringLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringLong_max_cdr_typesize;
}

size_t MapStringLong::getCdrSerializedSize(
        const MapStringLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_long())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapStringLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_long.size());
    for (const auto& pair : m_var_map_string_long)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_long.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            int32_t value;
            dcdr >> value;
            m_var_map_string_long[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_long
 * @param _var_map_string_long New value to be copied in member var_map_string_long
 */
void MapStringLong::var_map_string_long(
        const std::map<std::string, int32_t>& _var_map_string_long)
{
    m_var_map_string_long = _var_map_string_long;
}

/*!
 * @brief This function moves the value in member var_map_string_long
 * @param _var_map_string_long New value to be moved in member var_map_string_long
 */
void MapStringLong::var_map_string_long(
        std::map<std::string, int32_t>&& _var_map_string_long)
{
    m_var_map_string_long = std::move(_var_map_string_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_long
 * @return Constant reference to member var_map_string_long
 */
const std::map<std::string, int32_t>& MapStringLong::var_map_string_long() const
{
    return m_var_map_string_long;
}

/*!
 * @brief This function returns a reference to member var_map_string_long
 * @return Reference to member var_map_string_long
 */
std::map<std::string, int32_t>& MapStringLong::var_map_string_long()
{
    return m_var_map_string_long;
}


size_t MapStringLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringLong_max_key_cdr_typesize;
}

bool MapStringLong::isKeyDefined()
{
    return false;
}

void MapStringLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringULong::MapStringULong()
{
    // map<string, unsigned long> m_var_map_string_ulong


    // Just to register all known types
    registermapsTypes();
}

MapStringULong::~MapStringULong()
{
}

MapStringULong::MapStringULong(
        const MapStringULong& x)
{
    m_var_map_string_ulong = x.m_var_map_string_ulong;
}

MapStringULong::MapStringULong(
        MapStringULong&& x) noexcept 
{
    m_var_map_string_ulong = std::move(x.m_var_map_string_ulong);
}

MapStringULong& MapStringULong::operator =(
        const MapStringULong& x)
{

    m_var_map_string_ulong = x.m_var_map_string_ulong;

    return *this;
}

MapStringULong& MapStringULong::operator =(
        MapStringULong&& x) noexcept
{

    m_var_map_string_ulong = std::move(x.m_var_map_string_ulong);

    return *this;
}

bool MapStringULong::operator ==(
        const MapStringULong& x) const
{

    return (m_var_map_string_ulong == x.m_var_map_string_ulong);
}

bool MapStringULong::operator !=(
        const MapStringULong& x) const
{
    return !(*this == x);
}

size_t MapStringULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringULong_max_cdr_typesize;
}

size_t MapStringULong::getCdrSerializedSize(
        const MapStringULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_ulong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapStringULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_ulong.size());
    for (const auto& pair : m_var_map_string_ulong)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_ulong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            uint32_t value;
            dcdr >> value;
            m_var_map_string_ulong[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_ulong
 * @param _var_map_string_ulong New value to be copied in member var_map_string_ulong
 */
void MapStringULong::var_map_string_ulong(
        const std::map<std::string, uint32_t>& _var_map_string_ulong)
{
    m_var_map_string_ulong = _var_map_string_ulong;
}

/*!
 * @brief This function moves the value in member var_map_string_ulong
 * @param _var_map_string_ulong New value to be moved in member var_map_string_ulong
 */
void MapStringULong::var_map_string_ulong(
        std::map<std::string, uint32_t>&& _var_map_string_ulong)
{
    m_var_map_string_ulong = std::move(_var_map_string_ulong);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_ulong
 * @return Constant reference to member var_map_string_ulong
 */
const std::map<std::string, uint32_t>& MapStringULong::var_map_string_ulong() const
{
    return m_var_map_string_ulong;
}

/*!
 * @brief This function returns a reference to member var_map_string_ulong
 * @return Reference to member var_map_string_ulong
 */
std::map<std::string, uint32_t>& MapStringULong::var_map_string_ulong()
{
    return m_var_map_string_ulong;
}


size_t MapStringULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringULong_max_key_cdr_typesize;
}

bool MapStringULong::isKeyDefined()
{
    return false;
}

void MapStringULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringLongLong::MapStringLongLong()
{
    // map<string, long long> m_var_map_string_longlong


    // Just to register all known types
    registermapsTypes();
}

MapStringLongLong::~MapStringLongLong()
{
}

MapStringLongLong::MapStringLongLong(
        const MapStringLongLong& x)
{
    m_var_map_string_longlong = x.m_var_map_string_longlong;
}

MapStringLongLong::MapStringLongLong(
        MapStringLongLong&& x) noexcept 
{
    m_var_map_string_longlong = std::move(x.m_var_map_string_longlong);
}

MapStringLongLong& MapStringLongLong::operator =(
        const MapStringLongLong& x)
{

    m_var_map_string_longlong = x.m_var_map_string_longlong;

    return *this;
}

MapStringLongLong& MapStringLongLong::operator =(
        MapStringLongLong&& x) noexcept
{

    m_var_map_string_longlong = std::move(x.m_var_map_string_longlong);

    return *this;
}

bool MapStringLongLong::operator ==(
        const MapStringLongLong& x) const
{

    return (m_var_map_string_longlong == x.m_var_map_string_longlong);
}

bool MapStringLongLong::operator !=(
        const MapStringLongLong& x) const
{
    return !(*this == x);
}

size_t MapStringLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringLongLong_max_cdr_typesize;
}

size_t MapStringLongLong::getCdrSerializedSize(
        const MapStringLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_longlong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapStringLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_longlong.size());
    for (const auto& pair : m_var_map_string_longlong)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_longlong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            int64_t value;
            dcdr >> value;
            m_var_map_string_longlong[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_longlong
 * @param _var_map_string_longlong New value to be copied in member var_map_string_longlong
 */
void MapStringLongLong::var_map_string_longlong(
        const std::map<std::string, int64_t>& _var_map_string_longlong)
{
    m_var_map_string_longlong = _var_map_string_longlong;
}

/*!
 * @brief This function moves the value in member var_map_string_longlong
 * @param _var_map_string_longlong New value to be moved in member var_map_string_longlong
 */
void MapStringLongLong::var_map_string_longlong(
        std::map<std::string, int64_t>&& _var_map_string_longlong)
{
    m_var_map_string_longlong = std::move(_var_map_string_longlong);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_longlong
 * @return Constant reference to member var_map_string_longlong
 */
const std::map<std::string, int64_t>& MapStringLongLong::var_map_string_longlong() const
{
    return m_var_map_string_longlong;
}

/*!
 * @brief This function returns a reference to member var_map_string_longlong
 * @return Reference to member var_map_string_longlong
 */
std::map<std::string, int64_t>& MapStringLongLong::var_map_string_longlong()
{
    return m_var_map_string_longlong;
}


size_t MapStringLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringLongLong_max_key_cdr_typesize;
}

bool MapStringLongLong::isKeyDefined()
{
    return false;
}

void MapStringLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringULongLong::MapStringULongLong()
{
    // map<string, unsigned long long> m_var_map_string_ulonglong


    // Just to register all known types
    registermapsTypes();
}

MapStringULongLong::~MapStringULongLong()
{
}

MapStringULongLong::MapStringULongLong(
        const MapStringULongLong& x)
{
    m_var_map_string_ulonglong = x.m_var_map_string_ulonglong;
}

MapStringULongLong::MapStringULongLong(
        MapStringULongLong&& x) noexcept 
{
    m_var_map_string_ulonglong = std::move(x.m_var_map_string_ulonglong);
}

MapStringULongLong& MapStringULongLong::operator =(
        const MapStringULongLong& x)
{

    m_var_map_string_ulonglong = x.m_var_map_string_ulonglong;

    return *this;
}

MapStringULongLong& MapStringULongLong::operator =(
        MapStringULongLong&& x) noexcept
{

    m_var_map_string_ulonglong = std::move(x.m_var_map_string_ulonglong);

    return *this;
}

bool MapStringULongLong::operator ==(
        const MapStringULongLong& x) const
{

    return (m_var_map_string_ulonglong == x.m_var_map_string_ulonglong);
}

bool MapStringULongLong::operator !=(
        const MapStringULongLong& x) const
{
    return !(*this == x);
}

size_t MapStringULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringULongLong_max_cdr_typesize;
}

size_t MapStringULongLong::getCdrSerializedSize(
        const MapStringULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_ulonglong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapStringULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_ulonglong.size());
    for (const auto& pair : m_var_map_string_ulonglong)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_ulonglong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            uint64_t value;
            dcdr >> value;
            m_var_map_string_ulonglong[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_ulonglong
 * @param _var_map_string_ulonglong New value to be copied in member var_map_string_ulonglong
 */
void MapStringULongLong::var_map_string_ulonglong(
        const std::map<std::string, uint64_t>& _var_map_string_ulonglong)
{
    m_var_map_string_ulonglong = _var_map_string_ulonglong;
}

/*!
 * @brief This function moves the value in member var_map_string_ulonglong
 * @param _var_map_string_ulonglong New value to be moved in member var_map_string_ulonglong
 */
void MapStringULongLong::var_map_string_ulonglong(
        std::map<std::string, uint64_t>&& _var_map_string_ulonglong)
{
    m_var_map_string_ulonglong = std::move(_var_map_string_ulonglong);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_ulonglong
 * @return Constant reference to member var_map_string_ulonglong
 */
const std::map<std::string, uint64_t>& MapStringULongLong::var_map_string_ulonglong() const
{
    return m_var_map_string_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_map_string_ulonglong
 * @return Reference to member var_map_string_ulonglong
 */
std::map<std::string, uint64_t>& MapStringULongLong::var_map_string_ulonglong()
{
    return m_var_map_string_ulonglong;
}


size_t MapStringULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringULongLong_max_key_cdr_typesize;
}

bool MapStringULongLong::isKeyDefined()
{
    return false;
}

void MapStringULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringFloat::MapStringFloat()
{
    // map<string, float> m_var_map_string_float


    // Just to register all known types
    registermapsTypes();
}

MapStringFloat::~MapStringFloat()
{
}

MapStringFloat::MapStringFloat(
        const MapStringFloat& x)
{
    m_var_map_string_float = x.m_var_map_string_float;
}

MapStringFloat::MapStringFloat(
        MapStringFloat&& x) noexcept 
{
    m_var_map_string_float = std::move(x.m_var_map_string_float);
}

MapStringFloat& MapStringFloat::operator =(
        const MapStringFloat& x)
{

    m_var_map_string_float = x.m_var_map_string_float;

    return *this;
}

MapStringFloat& MapStringFloat::operator =(
        MapStringFloat&& x) noexcept
{

    m_var_map_string_float = std::move(x.m_var_map_string_float);

    return *this;
}

bool MapStringFloat::operator ==(
        const MapStringFloat& x) const
{

    return (m_var_map_string_float == x.m_var_map_string_float);
}

bool MapStringFloat::operator !=(
        const MapStringFloat& x) const
{
    return !(*this == x);
}

size_t MapStringFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringFloat_max_cdr_typesize;
}

size_t MapStringFloat::getCdrSerializedSize(
        const MapStringFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_float())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapStringFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_float.size());
    for (const auto& pair : m_var_map_string_float)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_float.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            float value;
            dcdr >> value;
            m_var_map_string_float[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_float
 * @param _var_map_string_float New value to be copied in member var_map_string_float
 */
void MapStringFloat::var_map_string_float(
        const std::map<std::string, float>& _var_map_string_float)
{
    m_var_map_string_float = _var_map_string_float;
}

/*!
 * @brief This function moves the value in member var_map_string_float
 * @param _var_map_string_float New value to be moved in member var_map_string_float
 */
void MapStringFloat::var_map_string_float(
        std::map<std::string, float>&& _var_map_string_float)
{
    m_var_map_string_float = std::move(_var_map_string_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_float
 * @return Constant reference to member var_map_string_float
 */
const std::map<std::string, float>& MapStringFloat::var_map_string_float() const
{
    return m_var_map_string_float;
}

/*!
 * @brief This function returns a reference to member var_map_string_float
 * @return Reference to member var_map_string_float
 */
std::map<std::string, float>& MapStringFloat::var_map_string_float()
{
    return m_var_map_string_float;
}


size_t MapStringFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringFloat_max_key_cdr_typesize;
}

bool MapStringFloat::isKeyDefined()
{
    return false;
}

void MapStringFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringDouble::MapStringDouble()
{
    // map<string, double> m_var_map_string_double


    // Just to register all known types
    registermapsTypes();
}

MapStringDouble::~MapStringDouble()
{
}

MapStringDouble::MapStringDouble(
        const MapStringDouble& x)
{
    m_var_map_string_double = x.m_var_map_string_double;
}

MapStringDouble::MapStringDouble(
        MapStringDouble&& x) noexcept 
{
    m_var_map_string_double = std::move(x.m_var_map_string_double);
}

MapStringDouble& MapStringDouble::operator =(
        const MapStringDouble& x)
{

    m_var_map_string_double = x.m_var_map_string_double;

    return *this;
}

MapStringDouble& MapStringDouble::operator =(
        MapStringDouble&& x) noexcept
{

    m_var_map_string_double = std::move(x.m_var_map_string_double);

    return *this;
}

bool MapStringDouble::operator ==(
        const MapStringDouble& x) const
{

    return (m_var_map_string_double == x.m_var_map_string_double);
}

bool MapStringDouble::operator !=(
        const MapStringDouble& x) const
{
    return !(*this == x);
}

size_t MapStringDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringDouble_max_cdr_typesize;
}

size_t MapStringDouble::getCdrSerializedSize(
        const MapStringDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_double())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapStringDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_double.size());
    for (const auto& pair : m_var_map_string_double)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_double.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            double value;
            dcdr >> value;
            m_var_map_string_double[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_double
 * @param _var_map_string_double New value to be copied in member var_map_string_double
 */
void MapStringDouble::var_map_string_double(
        const std::map<std::string, double>& _var_map_string_double)
{
    m_var_map_string_double = _var_map_string_double;
}

/*!
 * @brief This function moves the value in member var_map_string_double
 * @param _var_map_string_double New value to be moved in member var_map_string_double
 */
void MapStringDouble::var_map_string_double(
        std::map<std::string, double>&& _var_map_string_double)
{
    m_var_map_string_double = std::move(_var_map_string_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_double
 * @return Constant reference to member var_map_string_double
 */
const std::map<std::string, double>& MapStringDouble::var_map_string_double() const
{
    return m_var_map_string_double;
}

/*!
 * @brief This function returns a reference to member var_map_string_double
 * @return Reference to member var_map_string_double
 */
std::map<std::string, double>& MapStringDouble::var_map_string_double()
{
    return m_var_map_string_double;
}


size_t MapStringDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringDouble_max_key_cdr_typesize;
}

bool MapStringDouble::isKeyDefined()
{
    return false;
}

void MapStringDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringLongDouble::MapStringLongDouble()
{
    // map<string, long double> m_var_map_string_longdouble


    // Just to register all known types
    registermapsTypes();
}

MapStringLongDouble::~MapStringLongDouble()
{
}

MapStringLongDouble::MapStringLongDouble(
        const MapStringLongDouble& x)
{
    m_var_map_string_longdouble = x.m_var_map_string_longdouble;
}

MapStringLongDouble::MapStringLongDouble(
        MapStringLongDouble&& x) noexcept 
{
    m_var_map_string_longdouble = std::move(x.m_var_map_string_longdouble);
}

MapStringLongDouble& MapStringLongDouble::operator =(
        const MapStringLongDouble& x)
{

    m_var_map_string_longdouble = x.m_var_map_string_longdouble;

    return *this;
}

MapStringLongDouble& MapStringLongDouble::operator =(
        MapStringLongDouble&& x) noexcept
{

    m_var_map_string_longdouble = std::move(x.m_var_map_string_longdouble);

    return *this;
}

bool MapStringLongDouble::operator ==(
        const MapStringLongDouble& x) const
{

    return (m_var_map_string_longdouble == x.m_var_map_string_longdouble);
}

bool MapStringLongDouble::operator !=(
        const MapStringLongDouble& x) const
{
    return !(*this == x);
}

size_t MapStringLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringLongDouble_max_cdr_typesize;
}

size_t MapStringLongDouble::getCdrSerializedSize(
        const MapStringLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_longdouble())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapStringLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_longdouble.size());
    for (const auto& pair : m_var_map_string_longdouble)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_longdouble.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            long double value;
            dcdr >> value;
            m_var_map_string_longdouble[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_longdouble
 * @param _var_map_string_longdouble New value to be copied in member var_map_string_longdouble
 */
void MapStringLongDouble::var_map_string_longdouble(
        const std::map<std::string, long double>& _var_map_string_longdouble)
{
    m_var_map_string_longdouble = _var_map_string_longdouble;
}

/*!
 * @brief This function moves the value in member var_map_string_longdouble
 * @param _var_map_string_longdouble New value to be moved in member var_map_string_longdouble
 */
void MapStringLongDouble::var_map_string_longdouble(
        std::map<std::string, long double>&& _var_map_string_longdouble)
{
    m_var_map_string_longdouble = std::move(_var_map_string_longdouble);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_longdouble
 * @return Constant reference to member var_map_string_longdouble
 */
const std::map<std::string, long double>& MapStringLongDouble::var_map_string_longdouble() const
{
    return m_var_map_string_longdouble;
}

/*!
 * @brief This function returns a reference to member var_map_string_longdouble
 * @return Reference to member var_map_string_longdouble
 */
std::map<std::string, long double>& MapStringLongDouble::var_map_string_longdouble()
{
    return m_var_map_string_longdouble;
}


size_t MapStringLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringLongDouble_max_key_cdr_typesize;
}

bool MapStringLongDouble::isKeyDefined()
{
    return false;
}

void MapStringLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringBoolean::MapStringBoolean()
{
    // map<string, boolean> m_var_map_string_boolean


    // Just to register all known types
    registermapsTypes();
}

MapStringBoolean::~MapStringBoolean()
{
}

MapStringBoolean::MapStringBoolean(
        const MapStringBoolean& x)
{
    m_var_map_string_boolean = x.m_var_map_string_boolean;
}

MapStringBoolean::MapStringBoolean(
        MapStringBoolean&& x) noexcept 
{
    m_var_map_string_boolean = std::move(x.m_var_map_string_boolean);
}

MapStringBoolean& MapStringBoolean::operator =(
        const MapStringBoolean& x)
{

    m_var_map_string_boolean = x.m_var_map_string_boolean;

    return *this;
}

MapStringBoolean& MapStringBoolean::operator =(
        MapStringBoolean&& x) noexcept
{

    m_var_map_string_boolean = std::move(x.m_var_map_string_boolean);

    return *this;
}

bool MapStringBoolean::operator ==(
        const MapStringBoolean& x) const
{

    return (m_var_map_string_boolean == x.m_var_map_string_boolean);
}

bool MapStringBoolean::operator !=(
        const MapStringBoolean& x) const
{
    return !(*this == x);
}

size_t MapStringBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringBoolean_max_cdr_typesize;
}

size_t MapStringBoolean::getCdrSerializedSize(
        const MapStringBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_boolean())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapStringBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_boolean.size());
    for (const auto& pair : m_var_map_string_boolean)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_boolean.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            bool value;
            dcdr >> value;
            m_var_map_string_boolean[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_boolean
 * @param _var_map_string_boolean New value to be copied in member var_map_string_boolean
 */
void MapStringBoolean::var_map_string_boolean(
        const std::map<std::string, bool>& _var_map_string_boolean)
{
    m_var_map_string_boolean = _var_map_string_boolean;
}

/*!
 * @brief This function moves the value in member var_map_string_boolean
 * @param _var_map_string_boolean New value to be moved in member var_map_string_boolean
 */
void MapStringBoolean::var_map_string_boolean(
        std::map<std::string, bool>&& _var_map_string_boolean)
{
    m_var_map_string_boolean = std::move(_var_map_string_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_boolean
 * @return Constant reference to member var_map_string_boolean
 */
const std::map<std::string, bool>& MapStringBoolean::var_map_string_boolean() const
{
    return m_var_map_string_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_string_boolean
 * @return Reference to member var_map_string_boolean
 */
std::map<std::string, bool>& MapStringBoolean::var_map_string_boolean()
{
    return m_var_map_string_boolean;
}


size_t MapStringBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringBoolean_max_key_cdr_typesize;
}

bool MapStringBoolean::isKeyDefined()
{
    return false;
}

void MapStringBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringOctet::MapStringOctet()
{
    // map<string, octet> m_var_map_string_octet


    // Just to register all known types
    registermapsTypes();
}

MapStringOctet::~MapStringOctet()
{
}

MapStringOctet::MapStringOctet(
        const MapStringOctet& x)
{
    m_var_map_string_octet = x.m_var_map_string_octet;
}

MapStringOctet::MapStringOctet(
        MapStringOctet&& x) noexcept 
{
    m_var_map_string_octet = std::move(x.m_var_map_string_octet);
}

MapStringOctet& MapStringOctet::operator =(
        const MapStringOctet& x)
{

    m_var_map_string_octet = x.m_var_map_string_octet;

    return *this;
}

MapStringOctet& MapStringOctet::operator =(
        MapStringOctet&& x) noexcept
{

    m_var_map_string_octet = std::move(x.m_var_map_string_octet);

    return *this;
}

bool MapStringOctet::operator ==(
        const MapStringOctet& x) const
{

    return (m_var_map_string_octet == x.m_var_map_string_octet);
}

bool MapStringOctet::operator !=(
        const MapStringOctet& x) const
{
    return !(*this == x);
}

size_t MapStringOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringOctet_max_cdr_typesize;
}

size_t MapStringOctet::getCdrSerializedSize(
        const MapStringOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_octet())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapStringOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_octet.size());
    for (const auto& pair : m_var_map_string_octet)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_octet.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            uint8_t value;
            dcdr >> value;
            m_var_map_string_octet[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_octet
 * @param _var_map_string_octet New value to be copied in member var_map_string_octet
 */
void MapStringOctet::var_map_string_octet(
        const std::map<std::string, uint8_t>& _var_map_string_octet)
{
    m_var_map_string_octet = _var_map_string_octet;
}

/*!
 * @brief This function moves the value in member var_map_string_octet
 * @param _var_map_string_octet New value to be moved in member var_map_string_octet
 */
void MapStringOctet::var_map_string_octet(
        std::map<std::string, uint8_t>&& _var_map_string_octet)
{
    m_var_map_string_octet = std::move(_var_map_string_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_octet
 * @return Constant reference to member var_map_string_octet
 */
const std::map<std::string, uint8_t>& MapStringOctet::var_map_string_octet() const
{
    return m_var_map_string_octet;
}

/*!
 * @brief This function returns a reference to member var_map_string_octet
 * @return Reference to member var_map_string_octet
 */
std::map<std::string, uint8_t>& MapStringOctet::var_map_string_octet()
{
    return m_var_map_string_octet;
}


size_t MapStringOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringOctet_max_key_cdr_typesize;
}

bool MapStringOctet::isKeyDefined()
{
    return false;
}

void MapStringOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringChar::MapStringChar()
{
    // map<string, char> m_var_map_string_char


    // Just to register all known types
    registermapsTypes();
}

MapStringChar::~MapStringChar()
{
}

MapStringChar::MapStringChar(
        const MapStringChar& x)
{
    m_var_map_string_char = x.m_var_map_string_char;
}

MapStringChar::MapStringChar(
        MapStringChar&& x) noexcept 
{
    m_var_map_string_char = std::move(x.m_var_map_string_char);
}

MapStringChar& MapStringChar::operator =(
        const MapStringChar& x)
{

    m_var_map_string_char = x.m_var_map_string_char;

    return *this;
}

MapStringChar& MapStringChar::operator =(
        MapStringChar&& x) noexcept
{

    m_var_map_string_char = std::move(x.m_var_map_string_char);

    return *this;
}

bool MapStringChar::operator ==(
        const MapStringChar& x) const
{

    return (m_var_map_string_char == x.m_var_map_string_char);
}

bool MapStringChar::operator !=(
        const MapStringChar& x) const
{
    return !(*this == x);
}

size_t MapStringChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringChar_max_cdr_typesize;
}

size_t MapStringChar::getCdrSerializedSize(
        const MapStringChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_char())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapStringChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_char.size());
    for (const auto& pair : m_var_map_string_char)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_char.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            char value;
            dcdr >> value;
            m_var_map_string_char[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_char
 * @param _var_map_string_char New value to be copied in member var_map_string_char
 */
void MapStringChar::var_map_string_char(
        const std::map<std::string, char>& _var_map_string_char)
{
    m_var_map_string_char = _var_map_string_char;
}

/*!
 * @brief This function moves the value in member var_map_string_char
 * @param _var_map_string_char New value to be moved in member var_map_string_char
 */
void MapStringChar::var_map_string_char(
        std::map<std::string, char>&& _var_map_string_char)
{
    m_var_map_string_char = std::move(_var_map_string_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_char
 * @return Constant reference to member var_map_string_char
 */
const std::map<std::string, char>& MapStringChar::var_map_string_char() const
{
    return m_var_map_string_char;
}

/*!
 * @brief This function returns a reference to member var_map_string_char
 * @return Reference to member var_map_string_char
 */
std::map<std::string, char>& MapStringChar::var_map_string_char()
{
    return m_var_map_string_char;
}


size_t MapStringChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringChar_max_key_cdr_typesize;
}

bool MapStringChar::isKeyDefined()
{
    return false;
}

void MapStringChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringWChar::MapStringWChar()
{
    // map<string, wchar> m_var_map_string_wchar


    // Just to register all known types
    registermapsTypes();
}

MapStringWChar::~MapStringWChar()
{
}

MapStringWChar::MapStringWChar(
        const MapStringWChar& x)
{
    m_var_map_string_wchar = x.m_var_map_string_wchar;
}

MapStringWChar::MapStringWChar(
        MapStringWChar&& x) noexcept 
{
    m_var_map_string_wchar = std::move(x.m_var_map_string_wchar);
}

MapStringWChar& MapStringWChar::operator =(
        const MapStringWChar& x)
{

    m_var_map_string_wchar = x.m_var_map_string_wchar;

    return *this;
}

MapStringWChar& MapStringWChar::operator =(
        MapStringWChar&& x) noexcept
{

    m_var_map_string_wchar = std::move(x.m_var_map_string_wchar);

    return *this;
}

bool MapStringWChar::operator ==(
        const MapStringWChar& x) const
{

    return (m_var_map_string_wchar == x.m_var_map_string_wchar);
}

bool MapStringWChar::operator !=(
        const MapStringWChar& x) const
{
    return !(*this == x);
}

size_t MapStringWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringWChar_max_cdr_typesize;
}

size_t MapStringWChar::getCdrSerializedSize(
        const MapStringWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_wchar())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapStringWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_wchar.size());
    for (const auto& pair : m_var_map_string_wchar)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_wchar.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            wchar_t value;
            dcdr >> value;
            m_var_map_string_wchar[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_wchar
 * @param _var_map_string_wchar New value to be copied in member var_map_string_wchar
 */
void MapStringWChar::var_map_string_wchar(
        const std::map<std::string, wchar_t>& _var_map_string_wchar)
{
    m_var_map_string_wchar = _var_map_string_wchar;
}

/*!
 * @brief This function moves the value in member var_map_string_wchar
 * @param _var_map_string_wchar New value to be moved in member var_map_string_wchar
 */
void MapStringWChar::var_map_string_wchar(
        std::map<std::string, wchar_t>&& _var_map_string_wchar)
{
    m_var_map_string_wchar = std::move(_var_map_string_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_wchar
 * @return Constant reference to member var_map_string_wchar
 */
const std::map<std::string, wchar_t>& MapStringWChar::var_map_string_wchar() const
{
    return m_var_map_string_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_string_wchar
 * @return Reference to member var_map_string_wchar
 */
std::map<std::string, wchar_t>& MapStringWChar::var_map_string_wchar()
{
    return m_var_map_string_wchar;
}


size_t MapStringWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringWChar_max_key_cdr_typesize;
}

bool MapStringWChar::isKeyDefined()
{
    return false;
}

void MapStringWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringString::MapStringString()
{
    // map<string, string> m_var_map_string_string


    // Just to register all known types
    registermapsTypes();
}

MapStringString::~MapStringString()
{
}

MapStringString::MapStringString(
        const MapStringString& x)
{
    m_var_map_string_string = x.m_var_map_string_string;
}

MapStringString::MapStringString(
        MapStringString&& x) noexcept 
{
    m_var_map_string_string = std::move(x.m_var_map_string_string);
}

MapStringString& MapStringString::operator =(
        const MapStringString& x)
{

    m_var_map_string_string = x.m_var_map_string_string;

    return *this;
}

MapStringString& MapStringString::operator =(
        MapStringString&& x) noexcept
{

    m_var_map_string_string = std::move(x.m_var_map_string_string);

    return *this;
}

bool MapStringString::operator ==(
        const MapStringString& x) const
{

    return (m_var_map_string_string == x.m_var_map_string_string);
}

bool MapStringString::operator !=(
        const MapStringString& x) const
{
    return !(*this == x);
}

size_t MapStringString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringString_max_cdr_typesize;
}

size_t MapStringString::getCdrSerializedSize(
        const MapStringString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_string())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapStringString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_string.size());
    for (const auto& pair : m_var_map_string_string)
    {
        scdr << pair.first.c_str();
        scdr << pair.second.c_str();
    }}

void MapStringString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            std::string value;
            dcdr >> value;
            m_var_map_string_string[key.c_str()] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_string_string
 * @param _var_map_string_string New value to be copied in member var_map_string_string
 */
void MapStringString::var_map_string_string(
        const std::map<std::string, std::string>& _var_map_string_string)
{
    m_var_map_string_string = _var_map_string_string;
}

/*!
 * @brief This function moves the value in member var_map_string_string
 * @param _var_map_string_string New value to be moved in member var_map_string_string
 */
void MapStringString::var_map_string_string(
        std::map<std::string, std::string>&& _var_map_string_string)
{
    m_var_map_string_string = std::move(_var_map_string_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_string
 * @return Constant reference to member var_map_string_string
 */
const std::map<std::string, std::string>& MapStringString::var_map_string_string() const
{
    return m_var_map_string_string;
}

/*!
 * @brief This function returns a reference to member var_map_string_string
 * @return Reference to member var_map_string_string
 */
std::map<std::string, std::string>& MapStringString::var_map_string_string()
{
    return m_var_map_string_string;
}


size_t MapStringString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringString_max_key_cdr_typesize;
}

bool MapStringString::isKeyDefined()
{
    return false;
}

void MapStringString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringWString::MapStringWString()
{
    // map<string, wstring> m_var_map_string_wstring


    // Just to register all known types
    registermapsTypes();
}

MapStringWString::~MapStringWString()
{
}

MapStringWString::MapStringWString(
        const MapStringWString& x)
{
    m_var_map_string_wstring = x.m_var_map_string_wstring;
}

MapStringWString::MapStringWString(
        MapStringWString&& x) noexcept 
{
    m_var_map_string_wstring = std::move(x.m_var_map_string_wstring);
}

MapStringWString& MapStringWString::operator =(
        const MapStringWString& x)
{

    m_var_map_string_wstring = x.m_var_map_string_wstring;

    return *this;
}

MapStringWString& MapStringWString::operator =(
        MapStringWString&& x) noexcept
{

    m_var_map_string_wstring = std::move(x.m_var_map_string_wstring);

    return *this;
}

bool MapStringWString::operator ==(
        const MapStringWString& x) const
{

    return (m_var_map_string_wstring == x.m_var_map_string_wstring);
}

bool MapStringWString::operator !=(
        const MapStringWString& x) const
{
    return !(*this == x);
}

size_t MapStringWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringWString_max_cdr_typesize;
}

size_t MapStringWString::getCdrSerializedSize(
        const MapStringWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_wstring())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapStringWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_wstring.size());
    for (const auto& pair : m_var_map_string_wstring)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;
    }}

void MapStringWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            std::wstring value;
            dcdr >> value;
            m_var_map_string_wstring[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_wstring
 * @param _var_map_string_wstring New value to be copied in member var_map_string_wstring
 */
void MapStringWString::var_map_string_wstring(
        const std::map<std::string, std::wstring>& _var_map_string_wstring)
{
    m_var_map_string_wstring = _var_map_string_wstring;
}

/*!
 * @brief This function moves the value in member var_map_string_wstring
 * @param _var_map_string_wstring New value to be moved in member var_map_string_wstring
 */
void MapStringWString::var_map_string_wstring(
        std::map<std::string, std::wstring>&& _var_map_string_wstring)
{
    m_var_map_string_wstring = std::move(_var_map_string_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_wstring
 * @return Constant reference to member var_map_string_wstring
 */
const std::map<std::string, std::wstring>& MapStringWString::var_map_string_wstring() const
{
    return m_var_map_string_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_string_wstring
 * @return Reference to member var_map_string_wstring
 */
std::map<std::string, std::wstring>& MapStringWString::var_map_string_wstring()
{
    return m_var_map_string_wstring;
}


size_t MapStringWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringWString_max_key_cdr_typesize;
}

bool MapStringWString::isKeyDefined()
{
    return false;
}

void MapStringWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerAliasBoundedStringHelper::MapStringInnerAliasBoundedStringHelper()
{
    // map<string, Inner_alias_bounded_string_helper> m_var_map_string_inneraliasboundedstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerAliasBoundedStringHelper::~MapStringInnerAliasBoundedStringHelper()
{
}

MapStringInnerAliasBoundedStringHelper::MapStringInnerAliasBoundedStringHelper(
        const MapStringInnerAliasBoundedStringHelper& x)
{
    m_var_map_string_inneraliasboundedstringhelper = x.m_var_map_string_inneraliasboundedstringhelper;
}

MapStringInnerAliasBoundedStringHelper::MapStringInnerAliasBoundedStringHelper(
        MapStringInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_string_inneraliasboundedstringhelper = std::move(x.m_var_map_string_inneraliasboundedstringhelper);
}

MapStringInnerAliasBoundedStringHelper& MapStringInnerAliasBoundedStringHelper::operator =(
        const MapStringInnerAliasBoundedStringHelper& x)
{

    m_var_map_string_inneraliasboundedstringhelper = x.m_var_map_string_inneraliasboundedstringhelper;

    return *this;
}

MapStringInnerAliasBoundedStringHelper& MapStringInnerAliasBoundedStringHelper::operator =(
        MapStringInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_string_inneraliasboundedstringhelper = std::move(x.m_var_map_string_inneraliasboundedstringhelper);

    return *this;
}

bool MapStringInnerAliasBoundedStringHelper::operator ==(
        const MapStringInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_string_inneraliasboundedstringhelper == x.m_var_map_string_inneraliasboundedstringhelper);
}

bool MapStringInnerAliasBoundedStringHelper::operator !=(
        const MapStringInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapStringInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapStringInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_inneraliasboundedstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_inneraliasboundedstringhelper.size());
    for (const auto& pair : m_var_map_string_inneraliasboundedstringhelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second.c_str();
    }}

void MapStringInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_inneraliasboundedstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            std::string value;
            dcdr >> value;
            m_var_map_string_inneraliasboundedstringhelper[key.c_str()] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_string_inneraliasboundedstringhelper
 * @param _var_map_string_inneraliasboundedstringhelper New value to be copied in member var_map_string_inneraliasboundedstringhelper
 */
void MapStringInnerAliasBoundedStringHelper::var_map_string_inneraliasboundedstringhelper(
        const std::map<std::string, Inner_alias_bounded_string_helper>& _var_map_string_inneraliasboundedstringhelper)
{
    m_var_map_string_inneraliasboundedstringhelper = _var_map_string_inneraliasboundedstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_string_inneraliasboundedstringhelper
 * @param _var_map_string_inneraliasboundedstringhelper New value to be moved in member var_map_string_inneraliasboundedstringhelper
 */
void MapStringInnerAliasBoundedStringHelper::var_map_string_inneraliasboundedstringhelper(
        std::map<std::string, Inner_alias_bounded_string_helper>&& _var_map_string_inneraliasboundedstringhelper)
{
    m_var_map_string_inneraliasboundedstringhelper = std::move(_var_map_string_inneraliasboundedstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_inneraliasboundedstringhelper
 * @return Constant reference to member var_map_string_inneraliasboundedstringhelper
 */
const std::map<std::string, Inner_alias_bounded_string_helper>& MapStringInnerAliasBoundedStringHelper::var_map_string_inneraliasboundedstringhelper() const
{
    return m_var_map_string_inneraliasboundedstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_inneraliasboundedstringhelper
 * @return Reference to member var_map_string_inneraliasboundedstringhelper
 */
std::map<std::string, Inner_alias_bounded_string_helper>& MapStringInnerAliasBoundedStringHelper::var_map_string_inneraliasboundedstringhelper()
{
    return m_var_map_string_inneraliasboundedstringhelper;
}


size_t MapStringInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapStringInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerAliasBoundedWStringHelper::MapStringInnerAliasBoundedWStringHelper()
{
    // map<string, Inner_alias_bounded_wstring_helper> m_var_map_string_inneraliasboundedwstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerAliasBoundedWStringHelper::~MapStringInnerAliasBoundedWStringHelper()
{
}

MapStringInnerAliasBoundedWStringHelper::MapStringInnerAliasBoundedWStringHelper(
        const MapStringInnerAliasBoundedWStringHelper& x)
{
    m_var_map_string_inneraliasboundedwstringhelper = x.m_var_map_string_inneraliasboundedwstringhelper;
}

MapStringInnerAliasBoundedWStringHelper::MapStringInnerAliasBoundedWStringHelper(
        MapStringInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_string_inneraliasboundedwstringhelper = std::move(x.m_var_map_string_inneraliasboundedwstringhelper);
}

MapStringInnerAliasBoundedWStringHelper& MapStringInnerAliasBoundedWStringHelper::operator =(
        const MapStringInnerAliasBoundedWStringHelper& x)
{

    m_var_map_string_inneraliasboundedwstringhelper = x.m_var_map_string_inneraliasboundedwstringhelper;

    return *this;
}

MapStringInnerAliasBoundedWStringHelper& MapStringInnerAliasBoundedWStringHelper::operator =(
        MapStringInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_string_inneraliasboundedwstringhelper = std::move(x.m_var_map_string_inneraliasboundedwstringhelper);

    return *this;
}

bool MapStringInnerAliasBoundedWStringHelper::operator ==(
        const MapStringInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_string_inneraliasboundedwstringhelper == x.m_var_map_string_inneraliasboundedwstringhelper);
}

bool MapStringInnerAliasBoundedWStringHelper::operator !=(
        const MapStringInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapStringInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapStringInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_inneraliasboundedwstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_inneraliasboundedwstringhelper.size());
    for (const auto& pair : m_var_map_string_inneraliasboundedwstringhelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;
    }}

void MapStringInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_inneraliasboundedwstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            std::wstring value;
            dcdr >> value;
            m_var_map_string_inneraliasboundedwstringhelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_inneraliasboundedwstringhelper
 * @param _var_map_string_inneraliasboundedwstringhelper New value to be copied in member var_map_string_inneraliasboundedwstringhelper
 */
void MapStringInnerAliasBoundedWStringHelper::var_map_string_inneraliasboundedwstringhelper(
        const std::map<std::string, Inner_alias_bounded_wstring_helper>& _var_map_string_inneraliasboundedwstringhelper)
{
    m_var_map_string_inneraliasboundedwstringhelper = _var_map_string_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_string_inneraliasboundedwstringhelper
 * @param _var_map_string_inneraliasboundedwstringhelper New value to be moved in member var_map_string_inneraliasboundedwstringhelper
 */
void MapStringInnerAliasBoundedWStringHelper::var_map_string_inneraliasboundedwstringhelper(
        std::map<std::string, Inner_alias_bounded_wstring_helper>&& _var_map_string_inneraliasboundedwstringhelper)
{
    m_var_map_string_inneraliasboundedwstringhelper = std::move(_var_map_string_inneraliasboundedwstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_inneraliasboundedwstringhelper
 * @return Constant reference to member var_map_string_inneraliasboundedwstringhelper
 */
const std::map<std::string, Inner_alias_bounded_wstring_helper>& MapStringInnerAliasBoundedWStringHelper::var_map_string_inneraliasboundedwstringhelper() const
{
    return m_var_map_string_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_inneraliasboundedwstringhelper
 * @return Reference to member var_map_string_inneraliasboundedwstringhelper
 */
std::map<std::string, Inner_alias_bounded_wstring_helper>& MapStringInnerAliasBoundedWStringHelper::var_map_string_inneraliasboundedwstringhelper()
{
    return m_var_map_string_inneraliasboundedwstringhelper;
}


size_t MapStringInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapStringInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerEnumHelper::MapStringInnerEnumHelper()
{
    // map<string, InnerEnumHelper> m_var_map_string_innerenumhelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerEnumHelper::~MapStringInnerEnumHelper()
{
}

MapStringInnerEnumHelper::MapStringInnerEnumHelper(
        const MapStringInnerEnumHelper& x)
{
    m_var_map_string_innerenumhelper = x.m_var_map_string_innerenumhelper;
}

MapStringInnerEnumHelper::MapStringInnerEnumHelper(
        MapStringInnerEnumHelper&& x) noexcept 
{
    m_var_map_string_innerenumhelper = std::move(x.m_var_map_string_innerenumhelper);
}

MapStringInnerEnumHelper& MapStringInnerEnumHelper::operator =(
        const MapStringInnerEnumHelper& x)
{

    m_var_map_string_innerenumhelper = x.m_var_map_string_innerenumhelper;

    return *this;
}

MapStringInnerEnumHelper& MapStringInnerEnumHelper::operator =(
        MapStringInnerEnumHelper&& x) noexcept
{

    m_var_map_string_innerenumhelper = std::move(x.m_var_map_string_innerenumhelper);

    return *this;
}

bool MapStringInnerEnumHelper::operator ==(
        const MapStringInnerEnumHelper& x) const
{

    return (m_var_map_string_innerenumhelper == x.m_var_map_string_innerenumhelper);
}

bool MapStringInnerEnumHelper::operator !=(
        const MapStringInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerEnumHelper_max_cdr_typesize;
}

size_t MapStringInnerEnumHelper::getCdrSerializedSize(
        const MapStringInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_innerenumhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_innerenumhelper.size());
    for (const auto& pair : m_var_map_string_innerenumhelper)
    {
        scdr << pair.first.c_str();
        scdr << static_cast<uint32_t>(pair.second);
    }}

void MapStringInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_innerenumhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        std::string key;
            dcdr >> key;


        uint32_t value;
        dcdr >> value;
        m_var_map_string_innerenumhelper[key.c_str()] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_string_innerenumhelper
 * @param _var_map_string_innerenumhelper New value to be copied in member var_map_string_innerenumhelper
 */
void MapStringInnerEnumHelper::var_map_string_innerenumhelper(
        const std::map<std::string, InnerEnumHelper>& _var_map_string_innerenumhelper)
{
    m_var_map_string_innerenumhelper = _var_map_string_innerenumhelper;
}

/*!
 * @brief This function moves the value in member var_map_string_innerenumhelper
 * @param _var_map_string_innerenumhelper New value to be moved in member var_map_string_innerenumhelper
 */
void MapStringInnerEnumHelper::var_map_string_innerenumhelper(
        std::map<std::string, InnerEnumHelper>&& _var_map_string_innerenumhelper)
{
    m_var_map_string_innerenumhelper = std::move(_var_map_string_innerenumhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_innerenumhelper
 * @return Constant reference to member var_map_string_innerenumhelper
 */
const std::map<std::string, InnerEnumHelper>& MapStringInnerEnumHelper::var_map_string_innerenumhelper() const
{
    return m_var_map_string_innerenumhelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_innerenumhelper
 * @return Reference to member var_map_string_innerenumhelper
 */
std::map<std::string, InnerEnumHelper>& MapStringInnerEnumHelper::var_map_string_innerenumhelper()
{
    return m_var_map_string_innerenumhelper;
}


size_t MapStringInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerEnumHelper_max_key_cdr_typesize;
}

bool MapStringInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerBitMaskHelper::MapStringInnerBitMaskHelper()
{
    // map<string, InnerBitMaskHelper> m_var_map_string_innerbitmaskhelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerBitMaskHelper::~MapStringInnerBitMaskHelper()
{
}

MapStringInnerBitMaskHelper::MapStringInnerBitMaskHelper(
        const MapStringInnerBitMaskHelper& x)
{
    m_var_map_string_innerbitmaskhelper = x.m_var_map_string_innerbitmaskhelper;
}

MapStringInnerBitMaskHelper::MapStringInnerBitMaskHelper(
        MapStringInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_string_innerbitmaskhelper = std::move(x.m_var_map_string_innerbitmaskhelper);
}

MapStringInnerBitMaskHelper& MapStringInnerBitMaskHelper::operator =(
        const MapStringInnerBitMaskHelper& x)
{

    m_var_map_string_innerbitmaskhelper = x.m_var_map_string_innerbitmaskhelper;

    return *this;
}

MapStringInnerBitMaskHelper& MapStringInnerBitMaskHelper::operator =(
        MapStringInnerBitMaskHelper&& x) noexcept
{

    m_var_map_string_innerbitmaskhelper = std::move(x.m_var_map_string_innerbitmaskhelper);

    return *this;
}

bool MapStringInnerBitMaskHelper::operator ==(
        const MapStringInnerBitMaskHelper& x) const
{

    return (m_var_map_string_innerbitmaskhelper == x.m_var_map_string_innerbitmaskhelper);
}

bool MapStringInnerBitMaskHelper::operator !=(
        const MapStringInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapStringInnerBitMaskHelper::getCdrSerializedSize(
        const MapStringInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_innerbitmaskhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_innerbitmaskhelper.size());
    for (const auto& pair : m_var_map_string_innerbitmaskhelper)
    {
        scdr << pair.first.c_str();
        scdr << static_cast<uint32_t>(pair.second);
    }}

void MapStringInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_innerbitmaskhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        std::string key;
            dcdr >> key;


        uint32_t value;        
        dcdr >> value;        
        m_var_map_string_innerbitmaskhelper[key.c_str()] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_string_innerbitmaskhelper
 * @param _var_map_string_innerbitmaskhelper New value to be copied in member var_map_string_innerbitmaskhelper
 */
void MapStringInnerBitMaskHelper::var_map_string_innerbitmaskhelper(
        const std::map<std::string, InnerBitMaskHelper>& _var_map_string_innerbitmaskhelper)
{
    m_var_map_string_innerbitmaskhelper = _var_map_string_innerbitmaskhelper;
}

/*!
 * @brief This function moves the value in member var_map_string_innerbitmaskhelper
 * @param _var_map_string_innerbitmaskhelper New value to be moved in member var_map_string_innerbitmaskhelper
 */
void MapStringInnerBitMaskHelper::var_map_string_innerbitmaskhelper(
        std::map<std::string, InnerBitMaskHelper>&& _var_map_string_innerbitmaskhelper)
{
    m_var_map_string_innerbitmaskhelper = std::move(_var_map_string_innerbitmaskhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_innerbitmaskhelper
 * @return Constant reference to member var_map_string_innerbitmaskhelper
 */
const std::map<std::string, InnerBitMaskHelper>& MapStringInnerBitMaskHelper::var_map_string_innerbitmaskhelper() const
{
    return m_var_map_string_innerbitmaskhelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_innerbitmaskhelper
 * @return Reference to member var_map_string_innerbitmaskhelper
 */
std::map<std::string, InnerBitMaskHelper>& MapStringInnerBitMaskHelper::var_map_string_innerbitmaskhelper()
{
    return m_var_map_string_innerbitmaskhelper;
}


size_t MapStringInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapStringInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerAliasHelper::MapStringInnerAliasHelper()
{
    // map<string, InnerAliasHelper> m_var_map_string_inneraliashelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerAliasHelper::~MapStringInnerAliasHelper()
{
}

MapStringInnerAliasHelper::MapStringInnerAliasHelper(
        const MapStringInnerAliasHelper& x)
{
    m_var_map_string_inneraliashelper = x.m_var_map_string_inneraliashelper;
}

MapStringInnerAliasHelper::MapStringInnerAliasHelper(
        MapStringInnerAliasHelper&& x) noexcept 
{
    m_var_map_string_inneraliashelper = std::move(x.m_var_map_string_inneraliashelper);
}

MapStringInnerAliasHelper& MapStringInnerAliasHelper::operator =(
        const MapStringInnerAliasHelper& x)
{

    m_var_map_string_inneraliashelper = x.m_var_map_string_inneraliashelper;

    return *this;
}

MapStringInnerAliasHelper& MapStringInnerAliasHelper::operator =(
        MapStringInnerAliasHelper&& x) noexcept
{

    m_var_map_string_inneraliashelper = std::move(x.m_var_map_string_inneraliashelper);

    return *this;
}

bool MapStringInnerAliasHelper::operator ==(
        const MapStringInnerAliasHelper& x) const
{

    return (m_var_map_string_inneraliashelper == x.m_var_map_string_inneraliashelper);
}

bool MapStringInnerAliasHelper::operator !=(
        const MapStringInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasHelper_max_cdr_typesize;
}

size_t MapStringInnerAliasHelper::getCdrSerializedSize(
        const MapStringInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_inneraliashelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_inneraliashelper.size());
    for (const auto& pair : m_var_map_string_inneraliashelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_inneraliashelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            InnerAliasHelper value;
            dcdr >> value;
            m_var_map_string_inneraliashelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_inneraliashelper
 * @param _var_map_string_inneraliashelper New value to be copied in member var_map_string_inneraliashelper
 */
void MapStringInnerAliasHelper::var_map_string_inneraliashelper(
        const std::map<std::string, InnerAliasHelper>& _var_map_string_inneraliashelper)
{
    m_var_map_string_inneraliashelper = _var_map_string_inneraliashelper;
}

/*!
 * @brief This function moves the value in member var_map_string_inneraliashelper
 * @param _var_map_string_inneraliashelper New value to be moved in member var_map_string_inneraliashelper
 */
void MapStringInnerAliasHelper::var_map_string_inneraliashelper(
        std::map<std::string, InnerAliasHelper>&& _var_map_string_inneraliashelper)
{
    m_var_map_string_inneraliashelper = std::move(_var_map_string_inneraliashelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_inneraliashelper
 * @return Constant reference to member var_map_string_inneraliashelper
 */
const std::map<std::string, InnerAliasHelper>& MapStringInnerAliasHelper::var_map_string_inneraliashelper() const
{
    return m_var_map_string_inneraliashelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_inneraliashelper
 * @return Reference to member var_map_string_inneraliashelper
 */
std::map<std::string, InnerAliasHelper>& MapStringInnerAliasHelper::var_map_string_inneraliashelper()
{
    return m_var_map_string_inneraliashelper;
}


size_t MapStringInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasHelper_max_key_cdr_typesize;
}

bool MapStringInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerAliasArrayHelper::MapStringInnerAliasArrayHelper()
{
    // map<string, Inner_alias_array_helper> m_var_map_string_inneraliasarrayhelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerAliasArrayHelper::~MapStringInnerAliasArrayHelper()
{
}

MapStringInnerAliasArrayHelper::MapStringInnerAliasArrayHelper(
        const MapStringInnerAliasArrayHelper& x)
{
    m_var_map_string_inneraliasarrayhelper = x.m_var_map_string_inneraliasarrayhelper;
}

MapStringInnerAliasArrayHelper::MapStringInnerAliasArrayHelper(
        MapStringInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_string_inneraliasarrayhelper = std::move(x.m_var_map_string_inneraliasarrayhelper);
}

MapStringInnerAliasArrayHelper& MapStringInnerAliasArrayHelper::operator =(
        const MapStringInnerAliasArrayHelper& x)
{

    m_var_map_string_inneraliasarrayhelper = x.m_var_map_string_inneraliasarrayhelper;

    return *this;
}

MapStringInnerAliasArrayHelper& MapStringInnerAliasArrayHelper::operator =(
        MapStringInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_string_inneraliasarrayhelper = std::move(x.m_var_map_string_inneraliasarrayhelper);

    return *this;
}

bool MapStringInnerAliasArrayHelper::operator ==(
        const MapStringInnerAliasArrayHelper& x) const
{

    return (m_var_map_string_inneraliasarrayhelper == x.m_var_map_string_inneraliasarrayhelper);
}

bool MapStringInnerAliasArrayHelper::operator !=(
        const MapStringInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapStringInnerAliasArrayHelper::getCdrSerializedSize(
        const MapStringInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_inneraliasarrayhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_inneraliasarrayhelper.size());
    for (const auto& pair : m_var_map_string_inneraliasarrayhelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_inneraliasarrayhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            Inner_alias_array_helper value;
            dcdr >> value;
            m_var_map_string_inneraliasarrayhelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_inneraliasarrayhelper
 * @param _var_map_string_inneraliasarrayhelper New value to be copied in member var_map_string_inneraliasarrayhelper
 */
void MapStringInnerAliasArrayHelper::var_map_string_inneraliasarrayhelper(
        const std::map<std::string, Inner_alias_array_helper>& _var_map_string_inneraliasarrayhelper)
{
    m_var_map_string_inneraliasarrayhelper = _var_map_string_inneraliasarrayhelper;
}

/*!
 * @brief This function moves the value in member var_map_string_inneraliasarrayhelper
 * @param _var_map_string_inneraliasarrayhelper New value to be moved in member var_map_string_inneraliasarrayhelper
 */
void MapStringInnerAliasArrayHelper::var_map_string_inneraliasarrayhelper(
        std::map<std::string, Inner_alias_array_helper>&& _var_map_string_inneraliasarrayhelper)
{
    m_var_map_string_inneraliasarrayhelper = std::move(_var_map_string_inneraliasarrayhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_inneraliasarrayhelper
 * @return Constant reference to member var_map_string_inneraliasarrayhelper
 */
const std::map<std::string, Inner_alias_array_helper>& MapStringInnerAliasArrayHelper::var_map_string_inneraliasarrayhelper() const
{
    return m_var_map_string_inneraliasarrayhelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_inneraliasarrayhelper
 * @return Reference to member var_map_string_inneraliasarrayhelper
 */
std::map<std::string, Inner_alias_array_helper>& MapStringInnerAliasArrayHelper::var_map_string_inneraliasarrayhelper()
{
    return m_var_map_string_inneraliasarrayhelper;
}


size_t MapStringInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapStringInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerAliasSequenceHelper::MapStringInnerAliasSequenceHelper()
{
    // map<string, Inner_alias_sequence_helper> m_var_map_string_inneraliassequencehelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerAliasSequenceHelper::~MapStringInnerAliasSequenceHelper()
{
}

MapStringInnerAliasSequenceHelper::MapStringInnerAliasSequenceHelper(
        const MapStringInnerAliasSequenceHelper& x)
{
    m_var_map_string_inneraliassequencehelper = x.m_var_map_string_inneraliassequencehelper;
}

MapStringInnerAliasSequenceHelper::MapStringInnerAliasSequenceHelper(
        MapStringInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_string_inneraliassequencehelper = std::move(x.m_var_map_string_inneraliassequencehelper);
}

MapStringInnerAliasSequenceHelper& MapStringInnerAliasSequenceHelper::operator =(
        const MapStringInnerAliasSequenceHelper& x)
{

    m_var_map_string_inneraliassequencehelper = x.m_var_map_string_inneraliassequencehelper;

    return *this;
}

MapStringInnerAliasSequenceHelper& MapStringInnerAliasSequenceHelper::operator =(
        MapStringInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_string_inneraliassequencehelper = std::move(x.m_var_map_string_inneraliassequencehelper);

    return *this;
}

bool MapStringInnerAliasSequenceHelper::operator ==(
        const MapStringInnerAliasSequenceHelper& x) const
{

    return (m_var_map_string_inneraliassequencehelper == x.m_var_map_string_inneraliassequencehelper);
}

bool MapStringInnerAliasSequenceHelper::operator !=(
        const MapStringInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapStringInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapStringInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_inneraliassequencehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapStringInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_inneraliassequencehelper.size());
    for (const auto& pair : m_var_map_string_inneraliassequencehelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_inneraliassequencehelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            Inner_alias_sequence_helper value;
            dcdr >> value;
            m_var_map_string_inneraliassequencehelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_inneraliassequencehelper
 * @param _var_map_string_inneraliassequencehelper New value to be copied in member var_map_string_inneraliassequencehelper
 */
void MapStringInnerAliasSequenceHelper::var_map_string_inneraliassequencehelper(
        const std::map<std::string, Inner_alias_sequence_helper>& _var_map_string_inneraliassequencehelper)
{
    m_var_map_string_inneraliassequencehelper = _var_map_string_inneraliassequencehelper;
}

/*!
 * @brief This function moves the value in member var_map_string_inneraliassequencehelper
 * @param _var_map_string_inneraliassequencehelper New value to be moved in member var_map_string_inneraliassequencehelper
 */
void MapStringInnerAliasSequenceHelper::var_map_string_inneraliassequencehelper(
        std::map<std::string, Inner_alias_sequence_helper>&& _var_map_string_inneraliassequencehelper)
{
    m_var_map_string_inneraliassequencehelper = std::move(_var_map_string_inneraliassequencehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_inneraliassequencehelper
 * @return Constant reference to member var_map_string_inneraliassequencehelper
 */
const std::map<std::string, Inner_alias_sequence_helper>& MapStringInnerAliasSequenceHelper::var_map_string_inneraliassequencehelper() const
{
    return m_var_map_string_inneraliassequencehelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_inneraliassequencehelper
 * @return Reference to member var_map_string_inneraliassequencehelper
 */
std::map<std::string, Inner_alias_sequence_helper>& MapStringInnerAliasSequenceHelper::var_map_string_inneraliassequencehelper()
{
    return m_var_map_string_inneraliassequencehelper;
}


size_t MapStringInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapStringInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerAliasMapHelper::MapStringInnerAliasMapHelper()
{
    // map<string, Inner_alias_map_helper> m_var_map_string_inneraliasmaphelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerAliasMapHelper::~MapStringInnerAliasMapHelper()
{
}

MapStringInnerAliasMapHelper::MapStringInnerAliasMapHelper(
        const MapStringInnerAliasMapHelper& x)
{
    m_var_map_string_inneraliasmaphelper = x.m_var_map_string_inneraliasmaphelper;
}

MapStringInnerAliasMapHelper::MapStringInnerAliasMapHelper(
        MapStringInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_string_inneraliasmaphelper = std::move(x.m_var_map_string_inneraliasmaphelper);
}

MapStringInnerAliasMapHelper& MapStringInnerAliasMapHelper::operator =(
        const MapStringInnerAliasMapHelper& x)
{

    m_var_map_string_inneraliasmaphelper = x.m_var_map_string_inneraliasmaphelper;

    return *this;
}

MapStringInnerAliasMapHelper& MapStringInnerAliasMapHelper::operator =(
        MapStringInnerAliasMapHelper&& x) noexcept
{

    m_var_map_string_inneraliasmaphelper = std::move(x.m_var_map_string_inneraliasmaphelper);

    return *this;
}

bool MapStringInnerAliasMapHelper::operator ==(
        const MapStringInnerAliasMapHelper& x) const
{

    return (m_var_map_string_inneraliasmaphelper == x.m_var_map_string_inneraliasmaphelper);
}

bool MapStringInnerAliasMapHelper::operator !=(
        const MapStringInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapStringInnerAliasMapHelper::getCdrSerializedSize(
        const MapStringInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_inneraliasmaphelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_inneraliasmaphelper.size());
    for (const auto& pair : m_var_map_string_inneraliasmaphelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_inneraliasmaphelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            Inner_alias_map_helper value;
            dcdr >> value;
            m_var_map_string_inneraliasmaphelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_inneraliasmaphelper
 * @param _var_map_string_inneraliasmaphelper New value to be copied in member var_map_string_inneraliasmaphelper
 */
void MapStringInnerAliasMapHelper::var_map_string_inneraliasmaphelper(
        const std::map<std::string, Inner_alias_map_helper>& _var_map_string_inneraliasmaphelper)
{
    m_var_map_string_inneraliasmaphelper = _var_map_string_inneraliasmaphelper;
}

/*!
 * @brief This function moves the value in member var_map_string_inneraliasmaphelper
 * @param _var_map_string_inneraliasmaphelper New value to be moved in member var_map_string_inneraliasmaphelper
 */
void MapStringInnerAliasMapHelper::var_map_string_inneraliasmaphelper(
        std::map<std::string, Inner_alias_map_helper>&& _var_map_string_inneraliasmaphelper)
{
    m_var_map_string_inneraliasmaphelper = std::move(_var_map_string_inneraliasmaphelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_inneraliasmaphelper
 * @return Constant reference to member var_map_string_inneraliasmaphelper
 */
const std::map<std::string, Inner_alias_map_helper>& MapStringInnerAliasMapHelper::var_map_string_inneraliasmaphelper() const
{
    return m_var_map_string_inneraliasmaphelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_inneraliasmaphelper
 * @return Reference to member var_map_string_inneraliasmaphelper
 */
std::map<std::string, Inner_alias_map_helper>& MapStringInnerAliasMapHelper::var_map_string_inneraliasmaphelper()
{
    return m_var_map_string_inneraliasmaphelper;
}


size_t MapStringInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapStringInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerUnionHelper::MapStringInnerUnionHelper()
{
    // map<string, InnerUnionHelper> m_var_map_string_innerunionhelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerUnionHelper::~MapStringInnerUnionHelper()
{
}

MapStringInnerUnionHelper::MapStringInnerUnionHelper(
        const MapStringInnerUnionHelper& x)
{
    m_var_map_string_innerunionhelper = x.m_var_map_string_innerunionhelper;
}

MapStringInnerUnionHelper::MapStringInnerUnionHelper(
        MapStringInnerUnionHelper&& x) noexcept 
{
    m_var_map_string_innerunionhelper = std::move(x.m_var_map_string_innerunionhelper);
}

MapStringInnerUnionHelper& MapStringInnerUnionHelper::operator =(
        const MapStringInnerUnionHelper& x)
{

    m_var_map_string_innerunionhelper = x.m_var_map_string_innerunionhelper;

    return *this;
}

MapStringInnerUnionHelper& MapStringInnerUnionHelper::operator =(
        MapStringInnerUnionHelper&& x) noexcept
{

    m_var_map_string_innerunionhelper = std::move(x.m_var_map_string_innerunionhelper);

    return *this;
}

bool MapStringInnerUnionHelper::operator ==(
        const MapStringInnerUnionHelper& x) const
{

    return (m_var_map_string_innerunionhelper == x.m_var_map_string_innerunionhelper);
}

bool MapStringInnerUnionHelper::operator !=(
        const MapStringInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerUnionHelper_max_cdr_typesize;
}

size_t MapStringInnerUnionHelper::getCdrSerializedSize(
        const MapStringInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_innerunionhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_innerunionhelper.size());
    for (const auto& pair : m_var_map_string_innerunionhelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_innerunionhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            InnerUnionHelper value;
            dcdr >> value;
            m_var_map_string_innerunionhelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_innerunionhelper
 * @param _var_map_string_innerunionhelper New value to be copied in member var_map_string_innerunionhelper
 */
void MapStringInnerUnionHelper::var_map_string_innerunionhelper(
        const std::map<std::string, InnerUnionHelper>& _var_map_string_innerunionhelper)
{
    m_var_map_string_innerunionhelper = _var_map_string_innerunionhelper;
}

/*!
 * @brief This function moves the value in member var_map_string_innerunionhelper
 * @param _var_map_string_innerunionhelper New value to be moved in member var_map_string_innerunionhelper
 */
void MapStringInnerUnionHelper::var_map_string_innerunionhelper(
        std::map<std::string, InnerUnionHelper>&& _var_map_string_innerunionhelper)
{
    m_var_map_string_innerunionhelper = std::move(_var_map_string_innerunionhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_innerunionhelper
 * @return Constant reference to member var_map_string_innerunionhelper
 */
const std::map<std::string, InnerUnionHelper>& MapStringInnerUnionHelper::var_map_string_innerunionhelper() const
{
    return m_var_map_string_innerunionhelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_innerunionhelper
 * @return Reference to member var_map_string_innerunionhelper
 */
std::map<std::string, InnerUnionHelper>& MapStringInnerUnionHelper::var_map_string_innerunionhelper()
{
    return m_var_map_string_innerunionhelper;
}


size_t MapStringInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerUnionHelper_max_key_cdr_typesize;
}

bool MapStringInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerStructureHelper::MapStringInnerStructureHelper()
{
    // map<string, InnerStructureHelper> m_var_map_string_innerstructurehelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerStructureHelper::~MapStringInnerStructureHelper()
{
}

MapStringInnerStructureHelper::MapStringInnerStructureHelper(
        const MapStringInnerStructureHelper& x)
{
    m_var_map_string_innerstructurehelper = x.m_var_map_string_innerstructurehelper;
}

MapStringInnerStructureHelper::MapStringInnerStructureHelper(
        MapStringInnerStructureHelper&& x) noexcept 
{
    m_var_map_string_innerstructurehelper = std::move(x.m_var_map_string_innerstructurehelper);
}

MapStringInnerStructureHelper& MapStringInnerStructureHelper::operator =(
        const MapStringInnerStructureHelper& x)
{

    m_var_map_string_innerstructurehelper = x.m_var_map_string_innerstructurehelper;

    return *this;
}

MapStringInnerStructureHelper& MapStringInnerStructureHelper::operator =(
        MapStringInnerStructureHelper&& x) noexcept
{

    m_var_map_string_innerstructurehelper = std::move(x.m_var_map_string_innerstructurehelper);

    return *this;
}

bool MapStringInnerStructureHelper::operator ==(
        const MapStringInnerStructureHelper& x) const
{

    return (m_var_map_string_innerstructurehelper == x.m_var_map_string_innerstructurehelper);
}

bool MapStringInnerStructureHelper::operator !=(
        const MapStringInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerStructureHelper_max_cdr_typesize;
}

size_t MapStringInnerStructureHelper::getCdrSerializedSize(
        const MapStringInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_innerstructurehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_innerstructurehelper.size());
    for (const auto& pair : m_var_map_string_innerstructurehelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_innerstructurehelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            InnerStructureHelper value;
            dcdr >> value;
            m_var_map_string_innerstructurehelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_innerstructurehelper
 * @param _var_map_string_innerstructurehelper New value to be copied in member var_map_string_innerstructurehelper
 */
void MapStringInnerStructureHelper::var_map_string_innerstructurehelper(
        const std::map<std::string, InnerStructureHelper>& _var_map_string_innerstructurehelper)
{
    m_var_map_string_innerstructurehelper = _var_map_string_innerstructurehelper;
}

/*!
 * @brief This function moves the value in member var_map_string_innerstructurehelper
 * @param _var_map_string_innerstructurehelper New value to be moved in member var_map_string_innerstructurehelper
 */
void MapStringInnerStructureHelper::var_map_string_innerstructurehelper(
        std::map<std::string, InnerStructureHelper>&& _var_map_string_innerstructurehelper)
{
    m_var_map_string_innerstructurehelper = std::move(_var_map_string_innerstructurehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_innerstructurehelper
 * @return Constant reference to member var_map_string_innerstructurehelper
 */
const std::map<std::string, InnerStructureHelper>& MapStringInnerStructureHelper::var_map_string_innerstructurehelper() const
{
    return m_var_map_string_innerstructurehelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_innerstructurehelper
 * @return Reference to member var_map_string_innerstructurehelper
 */
std::map<std::string, InnerStructureHelper>& MapStringInnerStructureHelper::var_map_string_innerstructurehelper()
{
    return m_var_map_string_innerstructurehelper;
}


size_t MapStringInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerStructureHelper_max_key_cdr_typesize;
}

bool MapStringInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapStringInnerBitsetHelper::MapStringInnerBitsetHelper()
{
    // map<string, InnerBitsetHelper> m_var_map_string_innerbitsethelper


    // Just to register all known types
    registermapsTypes();
}

MapStringInnerBitsetHelper::~MapStringInnerBitsetHelper()
{
}

MapStringInnerBitsetHelper::MapStringInnerBitsetHelper(
        const MapStringInnerBitsetHelper& x)
{
    m_var_map_string_innerbitsethelper = x.m_var_map_string_innerbitsethelper;
}

MapStringInnerBitsetHelper::MapStringInnerBitsetHelper(
        MapStringInnerBitsetHelper&& x) noexcept 
{
    m_var_map_string_innerbitsethelper = std::move(x.m_var_map_string_innerbitsethelper);
}

MapStringInnerBitsetHelper& MapStringInnerBitsetHelper::operator =(
        const MapStringInnerBitsetHelper& x)
{

    m_var_map_string_innerbitsethelper = x.m_var_map_string_innerbitsethelper;

    return *this;
}

MapStringInnerBitsetHelper& MapStringInnerBitsetHelper::operator =(
        MapStringInnerBitsetHelper&& x) noexcept
{

    m_var_map_string_innerbitsethelper = std::move(x.m_var_map_string_innerbitsethelper);

    return *this;
}

bool MapStringInnerBitsetHelper::operator ==(
        const MapStringInnerBitsetHelper& x) const
{

    return (m_var_map_string_innerbitsethelper == x.m_var_map_string_innerbitsethelper);
}

bool MapStringInnerBitsetHelper::operator !=(
        const MapStringInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapStringInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerBitsetHelper_max_cdr_typesize;
}

size_t MapStringInnerBitsetHelper::getCdrSerializedSize(
        const MapStringInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_string_innerbitsethelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapStringInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_string_innerbitsethelper.size());
    for (const auto& pair : m_var_map_string_innerbitsethelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapStringInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_string_innerbitsethelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                dcdr >> key;


            InnerBitsetHelper value;
            dcdr >> value;
            m_var_map_string_innerbitsethelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_string_innerbitsethelper
 * @param _var_map_string_innerbitsethelper New value to be copied in member var_map_string_innerbitsethelper
 */
void MapStringInnerBitsetHelper::var_map_string_innerbitsethelper(
        const std::map<std::string, InnerBitsetHelper>& _var_map_string_innerbitsethelper)
{
    m_var_map_string_innerbitsethelper = _var_map_string_innerbitsethelper;
}

/*!
 * @brief This function moves the value in member var_map_string_innerbitsethelper
 * @param _var_map_string_innerbitsethelper New value to be moved in member var_map_string_innerbitsethelper
 */
void MapStringInnerBitsetHelper::var_map_string_innerbitsethelper(
        std::map<std::string, InnerBitsetHelper>&& _var_map_string_innerbitsethelper)
{
    m_var_map_string_innerbitsethelper = std::move(_var_map_string_innerbitsethelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_string_innerbitsethelper
 * @return Constant reference to member var_map_string_innerbitsethelper
 */
const std::map<std::string, InnerBitsetHelper>& MapStringInnerBitsetHelper::var_map_string_innerbitsethelper() const
{
    return m_var_map_string_innerbitsethelper;
}

/*!
 * @brief This function returns a reference to member var_map_string_innerbitsethelper
 * @return Reference to member var_map_string_innerbitsethelper
 */
std::map<std::string, InnerBitsetHelper>& MapStringInnerBitsetHelper::var_map_string_innerbitsethelper()
{
    return m_var_map_string_innerbitsethelper;
}


size_t MapStringInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapStringInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapStringInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapStringInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringShort::MapWStringShort()
{
    // map<wstring, short> m_var_map_wstring_short


    // Just to register all known types
    registermapsTypes();
}

MapWStringShort::~MapWStringShort()
{
}

MapWStringShort::MapWStringShort(
        const MapWStringShort& x)
{
    m_var_map_wstring_short = x.m_var_map_wstring_short;
}

MapWStringShort::MapWStringShort(
        MapWStringShort&& x) noexcept 
{
    m_var_map_wstring_short = std::move(x.m_var_map_wstring_short);
}

MapWStringShort& MapWStringShort::operator =(
        const MapWStringShort& x)
{

    m_var_map_wstring_short = x.m_var_map_wstring_short;

    return *this;
}

MapWStringShort& MapWStringShort::operator =(
        MapWStringShort&& x) noexcept
{

    m_var_map_wstring_short = std::move(x.m_var_map_wstring_short);

    return *this;
}

bool MapWStringShort::operator ==(
        const MapWStringShort& x) const
{

    return (m_var_map_wstring_short == x.m_var_map_wstring_short);
}

bool MapWStringShort::operator !=(
        const MapWStringShort& x) const
{
    return !(*this == x);
}

size_t MapWStringShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringShort_max_cdr_typesize;
}

size_t MapWStringShort::getCdrSerializedSize(
        const MapWStringShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_short())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapWStringShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_short.size());
    for (const auto& pair : m_var_map_wstring_short)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_short.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            int16_t value;
            dcdr >> value;
            m_var_map_wstring_short[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_short
 * @param _var_map_wstring_short New value to be copied in member var_map_wstring_short
 */
void MapWStringShort::var_map_wstring_short(
        const std::map<std::wstring, int16_t>& _var_map_wstring_short)
{
    m_var_map_wstring_short = _var_map_wstring_short;
}

/*!
 * @brief This function moves the value in member var_map_wstring_short
 * @param _var_map_wstring_short New value to be moved in member var_map_wstring_short
 */
void MapWStringShort::var_map_wstring_short(
        std::map<std::wstring, int16_t>&& _var_map_wstring_short)
{
    m_var_map_wstring_short = std::move(_var_map_wstring_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_short
 * @return Constant reference to member var_map_wstring_short
 */
const std::map<std::wstring, int16_t>& MapWStringShort::var_map_wstring_short() const
{
    return m_var_map_wstring_short;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_short
 * @return Reference to member var_map_wstring_short
 */
std::map<std::wstring, int16_t>& MapWStringShort::var_map_wstring_short()
{
    return m_var_map_wstring_short;
}


size_t MapWStringShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringShort_max_key_cdr_typesize;
}

bool MapWStringShort::isKeyDefined()
{
    return false;
}

void MapWStringShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringUShort::MapWStringUShort()
{
    // map<wstring, unsigned short> m_var_map_wstring_ushort


    // Just to register all known types
    registermapsTypes();
}

MapWStringUShort::~MapWStringUShort()
{
}

MapWStringUShort::MapWStringUShort(
        const MapWStringUShort& x)
{
    m_var_map_wstring_ushort = x.m_var_map_wstring_ushort;
}

MapWStringUShort::MapWStringUShort(
        MapWStringUShort&& x) noexcept 
{
    m_var_map_wstring_ushort = std::move(x.m_var_map_wstring_ushort);
}

MapWStringUShort& MapWStringUShort::operator =(
        const MapWStringUShort& x)
{

    m_var_map_wstring_ushort = x.m_var_map_wstring_ushort;

    return *this;
}

MapWStringUShort& MapWStringUShort::operator =(
        MapWStringUShort&& x) noexcept
{

    m_var_map_wstring_ushort = std::move(x.m_var_map_wstring_ushort);

    return *this;
}

bool MapWStringUShort::operator ==(
        const MapWStringUShort& x) const
{

    return (m_var_map_wstring_ushort == x.m_var_map_wstring_ushort);
}

bool MapWStringUShort::operator !=(
        const MapWStringUShort& x) const
{
    return !(*this == x);
}

size_t MapWStringUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringUShort_max_cdr_typesize;
}

size_t MapWStringUShort::getCdrSerializedSize(
        const MapWStringUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_ushort())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapWStringUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_ushort.size());
    for (const auto& pair : m_var_map_wstring_ushort)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_ushort.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            uint16_t value;
            dcdr >> value;
            m_var_map_wstring_ushort[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_ushort
 * @param _var_map_wstring_ushort New value to be copied in member var_map_wstring_ushort
 */
void MapWStringUShort::var_map_wstring_ushort(
        const std::map<std::wstring, uint16_t>& _var_map_wstring_ushort)
{
    m_var_map_wstring_ushort = _var_map_wstring_ushort;
}

/*!
 * @brief This function moves the value in member var_map_wstring_ushort
 * @param _var_map_wstring_ushort New value to be moved in member var_map_wstring_ushort
 */
void MapWStringUShort::var_map_wstring_ushort(
        std::map<std::wstring, uint16_t>&& _var_map_wstring_ushort)
{
    m_var_map_wstring_ushort = std::move(_var_map_wstring_ushort);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_ushort
 * @return Constant reference to member var_map_wstring_ushort
 */
const std::map<std::wstring, uint16_t>& MapWStringUShort::var_map_wstring_ushort() const
{
    return m_var_map_wstring_ushort;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_ushort
 * @return Reference to member var_map_wstring_ushort
 */
std::map<std::wstring, uint16_t>& MapWStringUShort::var_map_wstring_ushort()
{
    return m_var_map_wstring_ushort;
}


size_t MapWStringUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringUShort_max_key_cdr_typesize;
}

bool MapWStringUShort::isKeyDefined()
{
    return false;
}

void MapWStringUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringLong::MapWStringLong()
{
    // map<wstring, long> m_var_map_wstring_long


    // Just to register all known types
    registermapsTypes();
}

MapWStringLong::~MapWStringLong()
{
}

MapWStringLong::MapWStringLong(
        const MapWStringLong& x)
{
    m_var_map_wstring_long = x.m_var_map_wstring_long;
}

MapWStringLong::MapWStringLong(
        MapWStringLong&& x) noexcept 
{
    m_var_map_wstring_long = std::move(x.m_var_map_wstring_long);
}

MapWStringLong& MapWStringLong::operator =(
        const MapWStringLong& x)
{

    m_var_map_wstring_long = x.m_var_map_wstring_long;

    return *this;
}

MapWStringLong& MapWStringLong::operator =(
        MapWStringLong&& x) noexcept
{

    m_var_map_wstring_long = std::move(x.m_var_map_wstring_long);

    return *this;
}

bool MapWStringLong::operator ==(
        const MapWStringLong& x) const
{

    return (m_var_map_wstring_long == x.m_var_map_wstring_long);
}

bool MapWStringLong::operator !=(
        const MapWStringLong& x) const
{
    return !(*this == x);
}

size_t MapWStringLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringLong_max_cdr_typesize;
}

size_t MapWStringLong::getCdrSerializedSize(
        const MapWStringLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_long())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapWStringLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_long.size());
    for (const auto& pair : m_var_map_wstring_long)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_long.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            int32_t value;
            dcdr >> value;
            m_var_map_wstring_long[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_long
 * @param _var_map_wstring_long New value to be copied in member var_map_wstring_long
 */
void MapWStringLong::var_map_wstring_long(
        const std::map<std::wstring, int32_t>& _var_map_wstring_long)
{
    m_var_map_wstring_long = _var_map_wstring_long;
}

/*!
 * @brief This function moves the value in member var_map_wstring_long
 * @param _var_map_wstring_long New value to be moved in member var_map_wstring_long
 */
void MapWStringLong::var_map_wstring_long(
        std::map<std::wstring, int32_t>&& _var_map_wstring_long)
{
    m_var_map_wstring_long = std::move(_var_map_wstring_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_long
 * @return Constant reference to member var_map_wstring_long
 */
const std::map<std::wstring, int32_t>& MapWStringLong::var_map_wstring_long() const
{
    return m_var_map_wstring_long;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_long
 * @return Reference to member var_map_wstring_long
 */
std::map<std::wstring, int32_t>& MapWStringLong::var_map_wstring_long()
{
    return m_var_map_wstring_long;
}


size_t MapWStringLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringLong_max_key_cdr_typesize;
}

bool MapWStringLong::isKeyDefined()
{
    return false;
}

void MapWStringLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringULong::MapWStringULong()
{
    // map<wstring, unsigned long> m_var_map_wstring_ulong


    // Just to register all known types
    registermapsTypes();
}

MapWStringULong::~MapWStringULong()
{
}

MapWStringULong::MapWStringULong(
        const MapWStringULong& x)
{
    m_var_map_wstring_ulong = x.m_var_map_wstring_ulong;
}

MapWStringULong::MapWStringULong(
        MapWStringULong&& x) noexcept 
{
    m_var_map_wstring_ulong = std::move(x.m_var_map_wstring_ulong);
}

MapWStringULong& MapWStringULong::operator =(
        const MapWStringULong& x)
{

    m_var_map_wstring_ulong = x.m_var_map_wstring_ulong;

    return *this;
}

MapWStringULong& MapWStringULong::operator =(
        MapWStringULong&& x) noexcept
{

    m_var_map_wstring_ulong = std::move(x.m_var_map_wstring_ulong);

    return *this;
}

bool MapWStringULong::operator ==(
        const MapWStringULong& x) const
{

    return (m_var_map_wstring_ulong == x.m_var_map_wstring_ulong);
}

bool MapWStringULong::operator !=(
        const MapWStringULong& x) const
{
    return !(*this == x);
}

size_t MapWStringULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringULong_max_cdr_typesize;
}

size_t MapWStringULong::getCdrSerializedSize(
        const MapWStringULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_ulong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapWStringULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_ulong.size());
    for (const auto& pair : m_var_map_wstring_ulong)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_ulong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            uint32_t value;
            dcdr >> value;
            m_var_map_wstring_ulong[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_ulong
 * @param _var_map_wstring_ulong New value to be copied in member var_map_wstring_ulong
 */
void MapWStringULong::var_map_wstring_ulong(
        const std::map<std::wstring, uint32_t>& _var_map_wstring_ulong)
{
    m_var_map_wstring_ulong = _var_map_wstring_ulong;
}

/*!
 * @brief This function moves the value in member var_map_wstring_ulong
 * @param _var_map_wstring_ulong New value to be moved in member var_map_wstring_ulong
 */
void MapWStringULong::var_map_wstring_ulong(
        std::map<std::wstring, uint32_t>&& _var_map_wstring_ulong)
{
    m_var_map_wstring_ulong = std::move(_var_map_wstring_ulong);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_ulong
 * @return Constant reference to member var_map_wstring_ulong
 */
const std::map<std::wstring, uint32_t>& MapWStringULong::var_map_wstring_ulong() const
{
    return m_var_map_wstring_ulong;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_ulong
 * @return Reference to member var_map_wstring_ulong
 */
std::map<std::wstring, uint32_t>& MapWStringULong::var_map_wstring_ulong()
{
    return m_var_map_wstring_ulong;
}


size_t MapWStringULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringULong_max_key_cdr_typesize;
}

bool MapWStringULong::isKeyDefined()
{
    return false;
}

void MapWStringULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringLongLong::MapWStringLongLong()
{
    // map<wstring, long long> m_var_map_wstring_longlong


    // Just to register all known types
    registermapsTypes();
}

MapWStringLongLong::~MapWStringLongLong()
{
}

MapWStringLongLong::MapWStringLongLong(
        const MapWStringLongLong& x)
{
    m_var_map_wstring_longlong = x.m_var_map_wstring_longlong;
}

MapWStringLongLong::MapWStringLongLong(
        MapWStringLongLong&& x) noexcept 
{
    m_var_map_wstring_longlong = std::move(x.m_var_map_wstring_longlong);
}

MapWStringLongLong& MapWStringLongLong::operator =(
        const MapWStringLongLong& x)
{

    m_var_map_wstring_longlong = x.m_var_map_wstring_longlong;

    return *this;
}

MapWStringLongLong& MapWStringLongLong::operator =(
        MapWStringLongLong&& x) noexcept
{

    m_var_map_wstring_longlong = std::move(x.m_var_map_wstring_longlong);

    return *this;
}

bool MapWStringLongLong::operator ==(
        const MapWStringLongLong& x) const
{

    return (m_var_map_wstring_longlong == x.m_var_map_wstring_longlong);
}

bool MapWStringLongLong::operator !=(
        const MapWStringLongLong& x) const
{
    return !(*this == x);
}

size_t MapWStringLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringLongLong_max_cdr_typesize;
}

size_t MapWStringLongLong::getCdrSerializedSize(
        const MapWStringLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_longlong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapWStringLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_longlong.size());
    for (const auto& pair : m_var_map_wstring_longlong)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_longlong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            int64_t value;
            dcdr >> value;
            m_var_map_wstring_longlong[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_longlong
 * @param _var_map_wstring_longlong New value to be copied in member var_map_wstring_longlong
 */
void MapWStringLongLong::var_map_wstring_longlong(
        const std::map<std::wstring, int64_t>& _var_map_wstring_longlong)
{
    m_var_map_wstring_longlong = _var_map_wstring_longlong;
}

/*!
 * @brief This function moves the value in member var_map_wstring_longlong
 * @param _var_map_wstring_longlong New value to be moved in member var_map_wstring_longlong
 */
void MapWStringLongLong::var_map_wstring_longlong(
        std::map<std::wstring, int64_t>&& _var_map_wstring_longlong)
{
    m_var_map_wstring_longlong = std::move(_var_map_wstring_longlong);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_longlong
 * @return Constant reference to member var_map_wstring_longlong
 */
const std::map<std::wstring, int64_t>& MapWStringLongLong::var_map_wstring_longlong() const
{
    return m_var_map_wstring_longlong;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_longlong
 * @return Reference to member var_map_wstring_longlong
 */
std::map<std::wstring, int64_t>& MapWStringLongLong::var_map_wstring_longlong()
{
    return m_var_map_wstring_longlong;
}


size_t MapWStringLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringLongLong_max_key_cdr_typesize;
}

bool MapWStringLongLong::isKeyDefined()
{
    return false;
}

void MapWStringLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringULongLong::MapWStringULongLong()
{
    // map<wstring, unsigned long long> m_var_map_wstring_ulonglong


    // Just to register all known types
    registermapsTypes();
}

MapWStringULongLong::~MapWStringULongLong()
{
}

MapWStringULongLong::MapWStringULongLong(
        const MapWStringULongLong& x)
{
    m_var_map_wstring_ulonglong = x.m_var_map_wstring_ulonglong;
}

MapWStringULongLong::MapWStringULongLong(
        MapWStringULongLong&& x) noexcept 
{
    m_var_map_wstring_ulonglong = std::move(x.m_var_map_wstring_ulonglong);
}

MapWStringULongLong& MapWStringULongLong::operator =(
        const MapWStringULongLong& x)
{

    m_var_map_wstring_ulonglong = x.m_var_map_wstring_ulonglong;

    return *this;
}

MapWStringULongLong& MapWStringULongLong::operator =(
        MapWStringULongLong&& x) noexcept
{

    m_var_map_wstring_ulonglong = std::move(x.m_var_map_wstring_ulonglong);

    return *this;
}

bool MapWStringULongLong::operator ==(
        const MapWStringULongLong& x) const
{

    return (m_var_map_wstring_ulonglong == x.m_var_map_wstring_ulonglong);
}

bool MapWStringULongLong::operator !=(
        const MapWStringULongLong& x) const
{
    return !(*this == x);
}

size_t MapWStringULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringULongLong_max_cdr_typesize;
}

size_t MapWStringULongLong::getCdrSerializedSize(
        const MapWStringULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_ulonglong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapWStringULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_ulonglong.size());
    for (const auto& pair : m_var_map_wstring_ulonglong)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_ulonglong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            uint64_t value;
            dcdr >> value;
            m_var_map_wstring_ulonglong[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_ulonglong
 * @param _var_map_wstring_ulonglong New value to be copied in member var_map_wstring_ulonglong
 */
void MapWStringULongLong::var_map_wstring_ulonglong(
        const std::map<std::wstring, uint64_t>& _var_map_wstring_ulonglong)
{
    m_var_map_wstring_ulonglong = _var_map_wstring_ulonglong;
}

/*!
 * @brief This function moves the value in member var_map_wstring_ulonglong
 * @param _var_map_wstring_ulonglong New value to be moved in member var_map_wstring_ulonglong
 */
void MapWStringULongLong::var_map_wstring_ulonglong(
        std::map<std::wstring, uint64_t>&& _var_map_wstring_ulonglong)
{
    m_var_map_wstring_ulonglong = std::move(_var_map_wstring_ulonglong);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_ulonglong
 * @return Constant reference to member var_map_wstring_ulonglong
 */
const std::map<std::wstring, uint64_t>& MapWStringULongLong::var_map_wstring_ulonglong() const
{
    return m_var_map_wstring_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_ulonglong
 * @return Reference to member var_map_wstring_ulonglong
 */
std::map<std::wstring, uint64_t>& MapWStringULongLong::var_map_wstring_ulonglong()
{
    return m_var_map_wstring_ulonglong;
}


size_t MapWStringULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringULongLong_max_key_cdr_typesize;
}

bool MapWStringULongLong::isKeyDefined()
{
    return false;
}

void MapWStringULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringFloat::MapWStringFloat()
{
    // map<wstring, float> m_var_map_wstring_float


    // Just to register all known types
    registermapsTypes();
}

MapWStringFloat::~MapWStringFloat()
{
}

MapWStringFloat::MapWStringFloat(
        const MapWStringFloat& x)
{
    m_var_map_wstring_float = x.m_var_map_wstring_float;
}

MapWStringFloat::MapWStringFloat(
        MapWStringFloat&& x) noexcept 
{
    m_var_map_wstring_float = std::move(x.m_var_map_wstring_float);
}

MapWStringFloat& MapWStringFloat::operator =(
        const MapWStringFloat& x)
{

    m_var_map_wstring_float = x.m_var_map_wstring_float;

    return *this;
}

MapWStringFloat& MapWStringFloat::operator =(
        MapWStringFloat&& x) noexcept
{

    m_var_map_wstring_float = std::move(x.m_var_map_wstring_float);

    return *this;
}

bool MapWStringFloat::operator ==(
        const MapWStringFloat& x) const
{

    return (m_var_map_wstring_float == x.m_var_map_wstring_float);
}

bool MapWStringFloat::operator !=(
        const MapWStringFloat& x) const
{
    return !(*this == x);
}

size_t MapWStringFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringFloat_max_cdr_typesize;
}

size_t MapWStringFloat::getCdrSerializedSize(
        const MapWStringFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_float())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapWStringFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_float.size());
    for (const auto& pair : m_var_map_wstring_float)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_float.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            float value;
            dcdr >> value;
            m_var_map_wstring_float[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_float
 * @param _var_map_wstring_float New value to be copied in member var_map_wstring_float
 */
void MapWStringFloat::var_map_wstring_float(
        const std::map<std::wstring, float>& _var_map_wstring_float)
{
    m_var_map_wstring_float = _var_map_wstring_float;
}

/*!
 * @brief This function moves the value in member var_map_wstring_float
 * @param _var_map_wstring_float New value to be moved in member var_map_wstring_float
 */
void MapWStringFloat::var_map_wstring_float(
        std::map<std::wstring, float>&& _var_map_wstring_float)
{
    m_var_map_wstring_float = std::move(_var_map_wstring_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_float
 * @return Constant reference to member var_map_wstring_float
 */
const std::map<std::wstring, float>& MapWStringFloat::var_map_wstring_float() const
{
    return m_var_map_wstring_float;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_float
 * @return Reference to member var_map_wstring_float
 */
std::map<std::wstring, float>& MapWStringFloat::var_map_wstring_float()
{
    return m_var_map_wstring_float;
}


size_t MapWStringFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringFloat_max_key_cdr_typesize;
}

bool MapWStringFloat::isKeyDefined()
{
    return false;
}

void MapWStringFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringDouble::MapWStringDouble()
{
    // map<wstring, double> m_var_map_wstring_double


    // Just to register all known types
    registermapsTypes();
}

MapWStringDouble::~MapWStringDouble()
{
}

MapWStringDouble::MapWStringDouble(
        const MapWStringDouble& x)
{
    m_var_map_wstring_double = x.m_var_map_wstring_double;
}

MapWStringDouble::MapWStringDouble(
        MapWStringDouble&& x) noexcept 
{
    m_var_map_wstring_double = std::move(x.m_var_map_wstring_double);
}

MapWStringDouble& MapWStringDouble::operator =(
        const MapWStringDouble& x)
{

    m_var_map_wstring_double = x.m_var_map_wstring_double;

    return *this;
}

MapWStringDouble& MapWStringDouble::operator =(
        MapWStringDouble&& x) noexcept
{

    m_var_map_wstring_double = std::move(x.m_var_map_wstring_double);

    return *this;
}

bool MapWStringDouble::operator ==(
        const MapWStringDouble& x) const
{

    return (m_var_map_wstring_double == x.m_var_map_wstring_double);
}

bool MapWStringDouble::operator !=(
        const MapWStringDouble& x) const
{
    return !(*this == x);
}

size_t MapWStringDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringDouble_max_cdr_typesize;
}

size_t MapWStringDouble::getCdrSerializedSize(
        const MapWStringDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_double())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapWStringDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_double.size());
    for (const auto& pair : m_var_map_wstring_double)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_double.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            double value;
            dcdr >> value;
            m_var_map_wstring_double[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_double
 * @param _var_map_wstring_double New value to be copied in member var_map_wstring_double
 */
void MapWStringDouble::var_map_wstring_double(
        const std::map<std::wstring, double>& _var_map_wstring_double)
{
    m_var_map_wstring_double = _var_map_wstring_double;
}

/*!
 * @brief This function moves the value in member var_map_wstring_double
 * @param _var_map_wstring_double New value to be moved in member var_map_wstring_double
 */
void MapWStringDouble::var_map_wstring_double(
        std::map<std::wstring, double>&& _var_map_wstring_double)
{
    m_var_map_wstring_double = std::move(_var_map_wstring_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_double
 * @return Constant reference to member var_map_wstring_double
 */
const std::map<std::wstring, double>& MapWStringDouble::var_map_wstring_double() const
{
    return m_var_map_wstring_double;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_double
 * @return Reference to member var_map_wstring_double
 */
std::map<std::wstring, double>& MapWStringDouble::var_map_wstring_double()
{
    return m_var_map_wstring_double;
}


size_t MapWStringDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringDouble_max_key_cdr_typesize;
}

bool MapWStringDouble::isKeyDefined()
{
    return false;
}

void MapWStringDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringLongDouble::MapWStringLongDouble()
{
    // map<wstring, long double> m_var_map_wstring_longdouble


    // Just to register all known types
    registermapsTypes();
}

MapWStringLongDouble::~MapWStringLongDouble()
{
}

MapWStringLongDouble::MapWStringLongDouble(
        const MapWStringLongDouble& x)
{
    m_var_map_wstring_longdouble = x.m_var_map_wstring_longdouble;
}

MapWStringLongDouble::MapWStringLongDouble(
        MapWStringLongDouble&& x) noexcept 
{
    m_var_map_wstring_longdouble = std::move(x.m_var_map_wstring_longdouble);
}

MapWStringLongDouble& MapWStringLongDouble::operator =(
        const MapWStringLongDouble& x)
{

    m_var_map_wstring_longdouble = x.m_var_map_wstring_longdouble;

    return *this;
}

MapWStringLongDouble& MapWStringLongDouble::operator =(
        MapWStringLongDouble&& x) noexcept
{

    m_var_map_wstring_longdouble = std::move(x.m_var_map_wstring_longdouble);

    return *this;
}

bool MapWStringLongDouble::operator ==(
        const MapWStringLongDouble& x) const
{

    return (m_var_map_wstring_longdouble == x.m_var_map_wstring_longdouble);
}

bool MapWStringLongDouble::operator !=(
        const MapWStringLongDouble& x) const
{
    return !(*this == x);
}

size_t MapWStringLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringLongDouble_max_cdr_typesize;
}

size_t MapWStringLongDouble::getCdrSerializedSize(
        const MapWStringLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_longdouble())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapWStringLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_longdouble.size());
    for (const auto& pair : m_var_map_wstring_longdouble)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_longdouble.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            long double value;
            dcdr >> value;
            m_var_map_wstring_longdouble[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_longdouble
 * @param _var_map_wstring_longdouble New value to be copied in member var_map_wstring_longdouble
 */
void MapWStringLongDouble::var_map_wstring_longdouble(
        const std::map<std::wstring, long double>& _var_map_wstring_longdouble)
{
    m_var_map_wstring_longdouble = _var_map_wstring_longdouble;
}

/*!
 * @brief This function moves the value in member var_map_wstring_longdouble
 * @param _var_map_wstring_longdouble New value to be moved in member var_map_wstring_longdouble
 */
void MapWStringLongDouble::var_map_wstring_longdouble(
        std::map<std::wstring, long double>&& _var_map_wstring_longdouble)
{
    m_var_map_wstring_longdouble = std::move(_var_map_wstring_longdouble);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_longdouble
 * @return Constant reference to member var_map_wstring_longdouble
 */
const std::map<std::wstring, long double>& MapWStringLongDouble::var_map_wstring_longdouble() const
{
    return m_var_map_wstring_longdouble;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_longdouble
 * @return Reference to member var_map_wstring_longdouble
 */
std::map<std::wstring, long double>& MapWStringLongDouble::var_map_wstring_longdouble()
{
    return m_var_map_wstring_longdouble;
}


size_t MapWStringLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringLongDouble_max_key_cdr_typesize;
}

bool MapWStringLongDouble::isKeyDefined()
{
    return false;
}

void MapWStringLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringBoolean::MapWStringBoolean()
{
    // map<wstring, boolean> m_var_map_wstring_boolean


    // Just to register all known types
    registermapsTypes();
}

MapWStringBoolean::~MapWStringBoolean()
{
}

MapWStringBoolean::MapWStringBoolean(
        const MapWStringBoolean& x)
{
    m_var_map_wstring_boolean = x.m_var_map_wstring_boolean;
}

MapWStringBoolean::MapWStringBoolean(
        MapWStringBoolean&& x) noexcept 
{
    m_var_map_wstring_boolean = std::move(x.m_var_map_wstring_boolean);
}

MapWStringBoolean& MapWStringBoolean::operator =(
        const MapWStringBoolean& x)
{

    m_var_map_wstring_boolean = x.m_var_map_wstring_boolean;

    return *this;
}

MapWStringBoolean& MapWStringBoolean::operator =(
        MapWStringBoolean&& x) noexcept
{

    m_var_map_wstring_boolean = std::move(x.m_var_map_wstring_boolean);

    return *this;
}

bool MapWStringBoolean::operator ==(
        const MapWStringBoolean& x) const
{

    return (m_var_map_wstring_boolean == x.m_var_map_wstring_boolean);
}

bool MapWStringBoolean::operator !=(
        const MapWStringBoolean& x) const
{
    return !(*this == x);
}

size_t MapWStringBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringBoolean_max_cdr_typesize;
}

size_t MapWStringBoolean::getCdrSerializedSize(
        const MapWStringBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_boolean())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapWStringBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_boolean.size());
    for (const auto& pair : m_var_map_wstring_boolean)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_boolean.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            bool value;
            dcdr >> value;
            m_var_map_wstring_boolean[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_boolean
 * @param _var_map_wstring_boolean New value to be copied in member var_map_wstring_boolean
 */
void MapWStringBoolean::var_map_wstring_boolean(
        const std::map<std::wstring, bool>& _var_map_wstring_boolean)
{
    m_var_map_wstring_boolean = _var_map_wstring_boolean;
}

/*!
 * @brief This function moves the value in member var_map_wstring_boolean
 * @param _var_map_wstring_boolean New value to be moved in member var_map_wstring_boolean
 */
void MapWStringBoolean::var_map_wstring_boolean(
        std::map<std::wstring, bool>&& _var_map_wstring_boolean)
{
    m_var_map_wstring_boolean = std::move(_var_map_wstring_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_boolean
 * @return Constant reference to member var_map_wstring_boolean
 */
const std::map<std::wstring, bool>& MapWStringBoolean::var_map_wstring_boolean() const
{
    return m_var_map_wstring_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_boolean
 * @return Reference to member var_map_wstring_boolean
 */
std::map<std::wstring, bool>& MapWStringBoolean::var_map_wstring_boolean()
{
    return m_var_map_wstring_boolean;
}


size_t MapWStringBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringBoolean_max_key_cdr_typesize;
}

bool MapWStringBoolean::isKeyDefined()
{
    return false;
}

void MapWStringBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringOctet::MapWStringOctet()
{
    // map<wstring, octet> m_var_map_wstring_octet


    // Just to register all known types
    registermapsTypes();
}

MapWStringOctet::~MapWStringOctet()
{
}

MapWStringOctet::MapWStringOctet(
        const MapWStringOctet& x)
{
    m_var_map_wstring_octet = x.m_var_map_wstring_octet;
}

MapWStringOctet::MapWStringOctet(
        MapWStringOctet&& x) noexcept 
{
    m_var_map_wstring_octet = std::move(x.m_var_map_wstring_octet);
}

MapWStringOctet& MapWStringOctet::operator =(
        const MapWStringOctet& x)
{

    m_var_map_wstring_octet = x.m_var_map_wstring_octet;

    return *this;
}

MapWStringOctet& MapWStringOctet::operator =(
        MapWStringOctet&& x) noexcept
{

    m_var_map_wstring_octet = std::move(x.m_var_map_wstring_octet);

    return *this;
}

bool MapWStringOctet::operator ==(
        const MapWStringOctet& x) const
{

    return (m_var_map_wstring_octet == x.m_var_map_wstring_octet);
}

bool MapWStringOctet::operator !=(
        const MapWStringOctet& x) const
{
    return !(*this == x);
}

size_t MapWStringOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringOctet_max_cdr_typesize;
}

size_t MapWStringOctet::getCdrSerializedSize(
        const MapWStringOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_octet())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapWStringOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_octet.size());
    for (const auto& pair : m_var_map_wstring_octet)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_octet.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            uint8_t value;
            dcdr >> value;
            m_var_map_wstring_octet[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_octet
 * @param _var_map_wstring_octet New value to be copied in member var_map_wstring_octet
 */
void MapWStringOctet::var_map_wstring_octet(
        const std::map<std::wstring, uint8_t>& _var_map_wstring_octet)
{
    m_var_map_wstring_octet = _var_map_wstring_octet;
}

/*!
 * @brief This function moves the value in member var_map_wstring_octet
 * @param _var_map_wstring_octet New value to be moved in member var_map_wstring_octet
 */
void MapWStringOctet::var_map_wstring_octet(
        std::map<std::wstring, uint8_t>&& _var_map_wstring_octet)
{
    m_var_map_wstring_octet = std::move(_var_map_wstring_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_octet
 * @return Constant reference to member var_map_wstring_octet
 */
const std::map<std::wstring, uint8_t>& MapWStringOctet::var_map_wstring_octet() const
{
    return m_var_map_wstring_octet;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_octet
 * @return Reference to member var_map_wstring_octet
 */
std::map<std::wstring, uint8_t>& MapWStringOctet::var_map_wstring_octet()
{
    return m_var_map_wstring_octet;
}


size_t MapWStringOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringOctet_max_key_cdr_typesize;
}

bool MapWStringOctet::isKeyDefined()
{
    return false;
}

void MapWStringOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringChar::MapWStringChar()
{
    // map<wstring, char> m_var_map_wstring_char


    // Just to register all known types
    registermapsTypes();
}

MapWStringChar::~MapWStringChar()
{
}

MapWStringChar::MapWStringChar(
        const MapWStringChar& x)
{
    m_var_map_wstring_char = x.m_var_map_wstring_char;
}

MapWStringChar::MapWStringChar(
        MapWStringChar&& x) noexcept 
{
    m_var_map_wstring_char = std::move(x.m_var_map_wstring_char);
}

MapWStringChar& MapWStringChar::operator =(
        const MapWStringChar& x)
{

    m_var_map_wstring_char = x.m_var_map_wstring_char;

    return *this;
}

MapWStringChar& MapWStringChar::operator =(
        MapWStringChar&& x) noexcept
{

    m_var_map_wstring_char = std::move(x.m_var_map_wstring_char);

    return *this;
}

bool MapWStringChar::operator ==(
        const MapWStringChar& x) const
{

    return (m_var_map_wstring_char == x.m_var_map_wstring_char);
}

bool MapWStringChar::operator !=(
        const MapWStringChar& x) const
{
    return !(*this == x);
}

size_t MapWStringChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringChar_max_cdr_typesize;
}

size_t MapWStringChar::getCdrSerializedSize(
        const MapWStringChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_char())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapWStringChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_char.size());
    for (const auto& pair : m_var_map_wstring_char)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_char.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            char value;
            dcdr >> value;
            m_var_map_wstring_char[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_char
 * @param _var_map_wstring_char New value to be copied in member var_map_wstring_char
 */
void MapWStringChar::var_map_wstring_char(
        const std::map<std::wstring, char>& _var_map_wstring_char)
{
    m_var_map_wstring_char = _var_map_wstring_char;
}

/*!
 * @brief This function moves the value in member var_map_wstring_char
 * @param _var_map_wstring_char New value to be moved in member var_map_wstring_char
 */
void MapWStringChar::var_map_wstring_char(
        std::map<std::wstring, char>&& _var_map_wstring_char)
{
    m_var_map_wstring_char = std::move(_var_map_wstring_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_char
 * @return Constant reference to member var_map_wstring_char
 */
const std::map<std::wstring, char>& MapWStringChar::var_map_wstring_char() const
{
    return m_var_map_wstring_char;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_char
 * @return Reference to member var_map_wstring_char
 */
std::map<std::wstring, char>& MapWStringChar::var_map_wstring_char()
{
    return m_var_map_wstring_char;
}


size_t MapWStringChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringChar_max_key_cdr_typesize;
}

bool MapWStringChar::isKeyDefined()
{
    return false;
}

void MapWStringChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringWChar::MapWStringWChar()
{
    // map<wstring, wchar> m_var_map_wstring_wchar


    // Just to register all known types
    registermapsTypes();
}

MapWStringWChar::~MapWStringWChar()
{
}

MapWStringWChar::MapWStringWChar(
        const MapWStringWChar& x)
{
    m_var_map_wstring_wchar = x.m_var_map_wstring_wchar;
}

MapWStringWChar::MapWStringWChar(
        MapWStringWChar&& x) noexcept 
{
    m_var_map_wstring_wchar = std::move(x.m_var_map_wstring_wchar);
}

MapWStringWChar& MapWStringWChar::operator =(
        const MapWStringWChar& x)
{

    m_var_map_wstring_wchar = x.m_var_map_wstring_wchar;

    return *this;
}

MapWStringWChar& MapWStringWChar::operator =(
        MapWStringWChar&& x) noexcept
{

    m_var_map_wstring_wchar = std::move(x.m_var_map_wstring_wchar);

    return *this;
}

bool MapWStringWChar::operator ==(
        const MapWStringWChar& x) const
{

    return (m_var_map_wstring_wchar == x.m_var_map_wstring_wchar);
}

bool MapWStringWChar::operator !=(
        const MapWStringWChar& x) const
{
    return !(*this == x);
}

size_t MapWStringWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringWChar_max_cdr_typesize;
}

size_t MapWStringWChar::getCdrSerializedSize(
        const MapWStringWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_wchar())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapWStringWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_wchar.size());
    for (const auto& pair : m_var_map_wstring_wchar)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_wchar.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            wchar_t value;
            dcdr >> value;
            m_var_map_wstring_wchar[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_wchar
 * @param _var_map_wstring_wchar New value to be copied in member var_map_wstring_wchar
 */
void MapWStringWChar::var_map_wstring_wchar(
        const std::map<std::wstring, wchar_t>& _var_map_wstring_wchar)
{
    m_var_map_wstring_wchar = _var_map_wstring_wchar;
}

/*!
 * @brief This function moves the value in member var_map_wstring_wchar
 * @param _var_map_wstring_wchar New value to be moved in member var_map_wstring_wchar
 */
void MapWStringWChar::var_map_wstring_wchar(
        std::map<std::wstring, wchar_t>&& _var_map_wstring_wchar)
{
    m_var_map_wstring_wchar = std::move(_var_map_wstring_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_wchar
 * @return Constant reference to member var_map_wstring_wchar
 */
const std::map<std::wstring, wchar_t>& MapWStringWChar::var_map_wstring_wchar() const
{
    return m_var_map_wstring_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_wchar
 * @return Reference to member var_map_wstring_wchar
 */
std::map<std::wstring, wchar_t>& MapWStringWChar::var_map_wstring_wchar()
{
    return m_var_map_wstring_wchar;
}


size_t MapWStringWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringWChar_max_key_cdr_typesize;
}

bool MapWStringWChar::isKeyDefined()
{
    return false;
}

void MapWStringWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringString::MapWStringString()
{
    // map<wstring, string> m_var_map_wstring_string


    // Just to register all known types
    registermapsTypes();
}

MapWStringString::~MapWStringString()
{
}

MapWStringString::MapWStringString(
        const MapWStringString& x)
{
    m_var_map_wstring_string = x.m_var_map_wstring_string;
}

MapWStringString::MapWStringString(
        MapWStringString&& x) noexcept 
{
    m_var_map_wstring_string = std::move(x.m_var_map_wstring_string);
}

MapWStringString& MapWStringString::operator =(
        const MapWStringString& x)
{

    m_var_map_wstring_string = x.m_var_map_wstring_string;

    return *this;
}

MapWStringString& MapWStringString::operator =(
        MapWStringString&& x) noexcept
{

    m_var_map_wstring_string = std::move(x.m_var_map_wstring_string);

    return *this;
}

bool MapWStringString::operator ==(
        const MapWStringString& x) const
{

    return (m_var_map_wstring_string == x.m_var_map_wstring_string);
}

bool MapWStringString::operator !=(
        const MapWStringString& x) const
{
    return !(*this == x);
}

size_t MapWStringString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringString_max_cdr_typesize;
}

size_t MapWStringString::getCdrSerializedSize(
        const MapWStringString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_string())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapWStringString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_string.size());
    for (const auto& pair : m_var_map_wstring_string)
    {
        scdr << pair.first;
        scdr << pair.second.c_str();
    }}

void MapWStringString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            std::string value;
            dcdr >> value;
            m_var_map_wstring_string[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_wstring_string
 * @param _var_map_wstring_string New value to be copied in member var_map_wstring_string
 */
void MapWStringString::var_map_wstring_string(
        const std::map<std::wstring, std::string>& _var_map_wstring_string)
{
    m_var_map_wstring_string = _var_map_wstring_string;
}

/*!
 * @brief This function moves the value in member var_map_wstring_string
 * @param _var_map_wstring_string New value to be moved in member var_map_wstring_string
 */
void MapWStringString::var_map_wstring_string(
        std::map<std::wstring, std::string>&& _var_map_wstring_string)
{
    m_var_map_wstring_string = std::move(_var_map_wstring_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_string
 * @return Constant reference to member var_map_wstring_string
 */
const std::map<std::wstring, std::string>& MapWStringString::var_map_wstring_string() const
{
    return m_var_map_wstring_string;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_string
 * @return Reference to member var_map_wstring_string
 */
std::map<std::wstring, std::string>& MapWStringString::var_map_wstring_string()
{
    return m_var_map_wstring_string;
}


size_t MapWStringString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringString_max_key_cdr_typesize;
}

bool MapWStringString::isKeyDefined()
{
    return false;
}

void MapWStringString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringWString::MapWStringWString()
{
    // map<wstring, wstring> m_var_map_wstring_wstring


    // Just to register all known types
    registermapsTypes();
}

MapWStringWString::~MapWStringWString()
{
}

MapWStringWString::MapWStringWString(
        const MapWStringWString& x)
{
    m_var_map_wstring_wstring = x.m_var_map_wstring_wstring;
}

MapWStringWString::MapWStringWString(
        MapWStringWString&& x) noexcept 
{
    m_var_map_wstring_wstring = std::move(x.m_var_map_wstring_wstring);
}

MapWStringWString& MapWStringWString::operator =(
        const MapWStringWString& x)
{

    m_var_map_wstring_wstring = x.m_var_map_wstring_wstring;

    return *this;
}

MapWStringWString& MapWStringWString::operator =(
        MapWStringWString&& x) noexcept
{

    m_var_map_wstring_wstring = std::move(x.m_var_map_wstring_wstring);

    return *this;
}

bool MapWStringWString::operator ==(
        const MapWStringWString& x) const
{

    return (m_var_map_wstring_wstring == x.m_var_map_wstring_wstring);
}

bool MapWStringWString::operator !=(
        const MapWStringWString& x) const
{
    return !(*this == x);
}

size_t MapWStringWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringWString_max_cdr_typesize;
}

size_t MapWStringWString::getCdrSerializedSize(
        const MapWStringWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_wstring())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapWStringWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_wstring.size());
    for (const auto& pair : m_var_map_wstring_wstring)
    {
        scdr << pair.first;
        scdr << pair.second;
    }}

void MapWStringWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            std::wstring value;
            dcdr >> value;
            m_var_map_wstring_wstring[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_wstring_wstring
 * @param _var_map_wstring_wstring New value to be copied in member var_map_wstring_wstring
 */
void MapWStringWString::var_map_wstring_wstring(
        const std::map<std::wstring, std::wstring>& _var_map_wstring_wstring)
{
    m_var_map_wstring_wstring = _var_map_wstring_wstring;
}

/*!
 * @brief This function moves the value in member var_map_wstring_wstring
 * @param _var_map_wstring_wstring New value to be moved in member var_map_wstring_wstring
 */
void MapWStringWString::var_map_wstring_wstring(
        std::map<std::wstring, std::wstring>&& _var_map_wstring_wstring)
{
    m_var_map_wstring_wstring = std::move(_var_map_wstring_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_wstring
 * @return Constant reference to member var_map_wstring_wstring
 */
const std::map<std::wstring, std::wstring>& MapWStringWString::var_map_wstring_wstring() const
{
    return m_var_map_wstring_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_wstring
 * @return Reference to member var_map_wstring_wstring
 */
std::map<std::wstring, std::wstring>& MapWStringWString::var_map_wstring_wstring()
{
    return m_var_map_wstring_wstring;
}


size_t MapWStringWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringWString_max_key_cdr_typesize;
}

bool MapWStringWString::isKeyDefined()
{
    return false;
}

void MapWStringWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerAliasBoundedStringHelper::MapWStringInnerAliasBoundedStringHelper()
{
    // map<wstring, Inner_alias_bounded_string_helper> m_var_map_wstring_inneraliasboundedstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerAliasBoundedStringHelper::~MapWStringInnerAliasBoundedStringHelper()
{
}

MapWStringInnerAliasBoundedStringHelper::MapWStringInnerAliasBoundedStringHelper(
        const MapWStringInnerAliasBoundedStringHelper& x)
{
    m_var_map_wstring_inneraliasboundedstringhelper = x.m_var_map_wstring_inneraliasboundedstringhelper;
}

MapWStringInnerAliasBoundedStringHelper::MapWStringInnerAliasBoundedStringHelper(
        MapWStringInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_wstring_inneraliasboundedstringhelper = std::move(x.m_var_map_wstring_inneraliasboundedstringhelper);
}

MapWStringInnerAliasBoundedStringHelper& MapWStringInnerAliasBoundedStringHelper::operator =(
        const MapWStringInnerAliasBoundedStringHelper& x)
{

    m_var_map_wstring_inneraliasboundedstringhelper = x.m_var_map_wstring_inneraliasboundedstringhelper;

    return *this;
}

MapWStringInnerAliasBoundedStringHelper& MapWStringInnerAliasBoundedStringHelper::operator =(
        MapWStringInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_wstring_inneraliasboundedstringhelper = std::move(x.m_var_map_wstring_inneraliasboundedstringhelper);

    return *this;
}

bool MapWStringInnerAliasBoundedStringHelper::operator ==(
        const MapWStringInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_wstring_inneraliasboundedstringhelper == x.m_var_map_wstring_inneraliasboundedstringhelper);
}

bool MapWStringInnerAliasBoundedStringHelper::operator !=(
        const MapWStringInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapWStringInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapWStringInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_inneraliasboundedstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_inneraliasboundedstringhelper.size());
    for (const auto& pair : m_var_map_wstring_inneraliasboundedstringhelper)
    {
        scdr << pair.first;
        scdr << pair.second.c_str();
    }}

void MapWStringInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_inneraliasboundedstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            std::string value;
            dcdr >> value;
            m_var_map_wstring_inneraliasboundedstringhelper[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_wstring_inneraliasboundedstringhelper
 * @param _var_map_wstring_inneraliasboundedstringhelper New value to be copied in member var_map_wstring_inneraliasboundedstringhelper
 */
void MapWStringInnerAliasBoundedStringHelper::var_map_wstring_inneraliasboundedstringhelper(
        const std::map<std::wstring, Inner_alias_bounded_string_helper>& _var_map_wstring_inneraliasboundedstringhelper)
{
    m_var_map_wstring_inneraliasboundedstringhelper = _var_map_wstring_inneraliasboundedstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_inneraliasboundedstringhelper
 * @param _var_map_wstring_inneraliasboundedstringhelper New value to be moved in member var_map_wstring_inneraliasboundedstringhelper
 */
void MapWStringInnerAliasBoundedStringHelper::var_map_wstring_inneraliasboundedstringhelper(
        std::map<std::wstring, Inner_alias_bounded_string_helper>&& _var_map_wstring_inneraliasboundedstringhelper)
{
    m_var_map_wstring_inneraliasboundedstringhelper = std::move(_var_map_wstring_inneraliasboundedstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_inneraliasboundedstringhelper
 * @return Constant reference to member var_map_wstring_inneraliasboundedstringhelper
 */
const std::map<std::wstring, Inner_alias_bounded_string_helper>& MapWStringInnerAliasBoundedStringHelper::var_map_wstring_inneraliasboundedstringhelper() const
{
    return m_var_map_wstring_inneraliasboundedstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_inneraliasboundedstringhelper
 * @return Reference to member var_map_wstring_inneraliasboundedstringhelper
 */
std::map<std::wstring, Inner_alias_bounded_string_helper>& MapWStringInnerAliasBoundedStringHelper::var_map_wstring_inneraliasboundedstringhelper()
{
    return m_var_map_wstring_inneraliasboundedstringhelper;
}


size_t MapWStringInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapWStringInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerAliasBoundedWStringHelper::MapWStringInnerAliasBoundedWStringHelper()
{
    // map<wstring, Inner_alias_bounded_wstring_helper> m_var_map_wstring_inneraliasboundedwstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerAliasBoundedWStringHelper::~MapWStringInnerAliasBoundedWStringHelper()
{
}

MapWStringInnerAliasBoundedWStringHelper::MapWStringInnerAliasBoundedWStringHelper(
        const MapWStringInnerAliasBoundedWStringHelper& x)
{
    m_var_map_wstring_inneraliasboundedwstringhelper = x.m_var_map_wstring_inneraliasboundedwstringhelper;
}

MapWStringInnerAliasBoundedWStringHelper::MapWStringInnerAliasBoundedWStringHelper(
        MapWStringInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_wstring_inneraliasboundedwstringhelper = std::move(x.m_var_map_wstring_inneraliasboundedwstringhelper);
}

MapWStringInnerAliasBoundedWStringHelper& MapWStringInnerAliasBoundedWStringHelper::operator =(
        const MapWStringInnerAliasBoundedWStringHelper& x)
{

    m_var_map_wstring_inneraliasboundedwstringhelper = x.m_var_map_wstring_inneraliasboundedwstringhelper;

    return *this;
}

MapWStringInnerAliasBoundedWStringHelper& MapWStringInnerAliasBoundedWStringHelper::operator =(
        MapWStringInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_wstring_inneraliasboundedwstringhelper = std::move(x.m_var_map_wstring_inneraliasboundedwstringhelper);

    return *this;
}

bool MapWStringInnerAliasBoundedWStringHelper::operator ==(
        const MapWStringInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_wstring_inneraliasboundedwstringhelper == x.m_var_map_wstring_inneraliasboundedwstringhelper);
}

bool MapWStringInnerAliasBoundedWStringHelper::operator !=(
        const MapWStringInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapWStringInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapWStringInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_inneraliasboundedwstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_inneraliasboundedwstringhelper.size());
    for (const auto& pair : m_var_map_wstring_inneraliasboundedwstringhelper)
    {
        scdr << pair.first;
        scdr << pair.second;
    }}

void MapWStringInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_inneraliasboundedwstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            std::wstring value;
            dcdr >> value;
            m_var_map_wstring_inneraliasboundedwstringhelper[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_wstring_inneraliasboundedwstringhelper
 * @param _var_map_wstring_inneraliasboundedwstringhelper New value to be copied in member var_map_wstring_inneraliasboundedwstringhelper
 */
void MapWStringInnerAliasBoundedWStringHelper::var_map_wstring_inneraliasboundedwstringhelper(
        const std::map<std::wstring, Inner_alias_bounded_wstring_helper>& _var_map_wstring_inneraliasboundedwstringhelper)
{
    m_var_map_wstring_inneraliasboundedwstringhelper = _var_map_wstring_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_inneraliasboundedwstringhelper
 * @param _var_map_wstring_inneraliasboundedwstringhelper New value to be moved in member var_map_wstring_inneraliasboundedwstringhelper
 */
void MapWStringInnerAliasBoundedWStringHelper::var_map_wstring_inneraliasboundedwstringhelper(
        std::map<std::wstring, Inner_alias_bounded_wstring_helper>&& _var_map_wstring_inneraliasboundedwstringhelper)
{
    m_var_map_wstring_inneraliasboundedwstringhelper = std::move(_var_map_wstring_inneraliasboundedwstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_inneraliasboundedwstringhelper
 * @return Constant reference to member var_map_wstring_inneraliasboundedwstringhelper
 */
const std::map<std::wstring, Inner_alias_bounded_wstring_helper>& MapWStringInnerAliasBoundedWStringHelper::var_map_wstring_inneraliasboundedwstringhelper() const
{
    return m_var_map_wstring_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_inneraliasboundedwstringhelper
 * @return Reference to member var_map_wstring_inneraliasboundedwstringhelper
 */
std::map<std::wstring, Inner_alias_bounded_wstring_helper>& MapWStringInnerAliasBoundedWStringHelper::var_map_wstring_inneraliasboundedwstringhelper()
{
    return m_var_map_wstring_inneraliasboundedwstringhelper;
}


size_t MapWStringInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapWStringInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerEnumHelper::MapWStringInnerEnumHelper()
{
    // map<wstring, InnerEnumHelper> m_var_map_wstring_innerenumhelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerEnumHelper::~MapWStringInnerEnumHelper()
{
}

MapWStringInnerEnumHelper::MapWStringInnerEnumHelper(
        const MapWStringInnerEnumHelper& x)
{
    m_var_map_wstring_innerenumhelper = x.m_var_map_wstring_innerenumhelper;
}

MapWStringInnerEnumHelper::MapWStringInnerEnumHelper(
        MapWStringInnerEnumHelper&& x) noexcept 
{
    m_var_map_wstring_innerenumhelper = std::move(x.m_var_map_wstring_innerenumhelper);
}

MapWStringInnerEnumHelper& MapWStringInnerEnumHelper::operator =(
        const MapWStringInnerEnumHelper& x)
{

    m_var_map_wstring_innerenumhelper = x.m_var_map_wstring_innerenumhelper;

    return *this;
}

MapWStringInnerEnumHelper& MapWStringInnerEnumHelper::operator =(
        MapWStringInnerEnumHelper&& x) noexcept
{

    m_var_map_wstring_innerenumhelper = std::move(x.m_var_map_wstring_innerenumhelper);

    return *this;
}

bool MapWStringInnerEnumHelper::operator ==(
        const MapWStringInnerEnumHelper& x) const
{

    return (m_var_map_wstring_innerenumhelper == x.m_var_map_wstring_innerenumhelper);
}

bool MapWStringInnerEnumHelper::operator !=(
        const MapWStringInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerEnumHelper_max_cdr_typesize;
}

size_t MapWStringInnerEnumHelper::getCdrSerializedSize(
        const MapWStringInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_innerenumhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_innerenumhelper.size());
    for (const auto& pair : m_var_map_wstring_innerenumhelper)
    {
        scdr << pair.first;
        scdr << static_cast<uint32_t>(pair.second);
    }}

void MapWStringInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_innerenumhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        std::wstring key;
            dcdr >> key;
        uint32_t value;
        dcdr >> value;
        m_var_map_wstring_innerenumhelper[key] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_wstring_innerenumhelper
 * @param _var_map_wstring_innerenumhelper New value to be copied in member var_map_wstring_innerenumhelper
 */
void MapWStringInnerEnumHelper::var_map_wstring_innerenumhelper(
        const std::map<std::wstring, InnerEnumHelper>& _var_map_wstring_innerenumhelper)
{
    m_var_map_wstring_innerenumhelper = _var_map_wstring_innerenumhelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_innerenumhelper
 * @param _var_map_wstring_innerenumhelper New value to be moved in member var_map_wstring_innerenumhelper
 */
void MapWStringInnerEnumHelper::var_map_wstring_innerenumhelper(
        std::map<std::wstring, InnerEnumHelper>&& _var_map_wstring_innerenumhelper)
{
    m_var_map_wstring_innerenumhelper = std::move(_var_map_wstring_innerenumhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_innerenumhelper
 * @return Constant reference to member var_map_wstring_innerenumhelper
 */
const std::map<std::wstring, InnerEnumHelper>& MapWStringInnerEnumHelper::var_map_wstring_innerenumhelper() const
{
    return m_var_map_wstring_innerenumhelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_innerenumhelper
 * @return Reference to member var_map_wstring_innerenumhelper
 */
std::map<std::wstring, InnerEnumHelper>& MapWStringInnerEnumHelper::var_map_wstring_innerenumhelper()
{
    return m_var_map_wstring_innerenumhelper;
}


size_t MapWStringInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerEnumHelper_max_key_cdr_typesize;
}

bool MapWStringInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerBitMaskHelper::MapWStringInnerBitMaskHelper()
{
    // map<wstring, InnerBitMaskHelper> m_var_map_wstring_innerbitmaskhelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerBitMaskHelper::~MapWStringInnerBitMaskHelper()
{
}

MapWStringInnerBitMaskHelper::MapWStringInnerBitMaskHelper(
        const MapWStringInnerBitMaskHelper& x)
{
    m_var_map_wstring_innerbitmaskhelper = x.m_var_map_wstring_innerbitmaskhelper;
}

MapWStringInnerBitMaskHelper::MapWStringInnerBitMaskHelper(
        MapWStringInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_wstring_innerbitmaskhelper = std::move(x.m_var_map_wstring_innerbitmaskhelper);
}

MapWStringInnerBitMaskHelper& MapWStringInnerBitMaskHelper::operator =(
        const MapWStringInnerBitMaskHelper& x)
{

    m_var_map_wstring_innerbitmaskhelper = x.m_var_map_wstring_innerbitmaskhelper;

    return *this;
}

MapWStringInnerBitMaskHelper& MapWStringInnerBitMaskHelper::operator =(
        MapWStringInnerBitMaskHelper&& x) noexcept
{

    m_var_map_wstring_innerbitmaskhelper = std::move(x.m_var_map_wstring_innerbitmaskhelper);

    return *this;
}

bool MapWStringInnerBitMaskHelper::operator ==(
        const MapWStringInnerBitMaskHelper& x) const
{

    return (m_var_map_wstring_innerbitmaskhelper == x.m_var_map_wstring_innerbitmaskhelper);
}

bool MapWStringInnerBitMaskHelper::operator !=(
        const MapWStringInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapWStringInnerBitMaskHelper::getCdrSerializedSize(
        const MapWStringInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_innerbitmaskhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_innerbitmaskhelper.size());
    for (const auto& pair : m_var_map_wstring_innerbitmaskhelper)
    {
        scdr << pair.first;
        scdr << static_cast<uint32_t>(pair.second);
    }}

void MapWStringInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_innerbitmaskhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        std::wstring key;
            dcdr >> key;
        uint32_t value;        
        dcdr >> value;        
        m_var_map_wstring_innerbitmaskhelper[key] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_wstring_innerbitmaskhelper
 * @param _var_map_wstring_innerbitmaskhelper New value to be copied in member var_map_wstring_innerbitmaskhelper
 */
void MapWStringInnerBitMaskHelper::var_map_wstring_innerbitmaskhelper(
        const std::map<std::wstring, InnerBitMaskHelper>& _var_map_wstring_innerbitmaskhelper)
{
    m_var_map_wstring_innerbitmaskhelper = _var_map_wstring_innerbitmaskhelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_innerbitmaskhelper
 * @param _var_map_wstring_innerbitmaskhelper New value to be moved in member var_map_wstring_innerbitmaskhelper
 */
void MapWStringInnerBitMaskHelper::var_map_wstring_innerbitmaskhelper(
        std::map<std::wstring, InnerBitMaskHelper>&& _var_map_wstring_innerbitmaskhelper)
{
    m_var_map_wstring_innerbitmaskhelper = std::move(_var_map_wstring_innerbitmaskhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_innerbitmaskhelper
 * @return Constant reference to member var_map_wstring_innerbitmaskhelper
 */
const std::map<std::wstring, InnerBitMaskHelper>& MapWStringInnerBitMaskHelper::var_map_wstring_innerbitmaskhelper() const
{
    return m_var_map_wstring_innerbitmaskhelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_innerbitmaskhelper
 * @return Reference to member var_map_wstring_innerbitmaskhelper
 */
std::map<std::wstring, InnerBitMaskHelper>& MapWStringInnerBitMaskHelper::var_map_wstring_innerbitmaskhelper()
{
    return m_var_map_wstring_innerbitmaskhelper;
}


size_t MapWStringInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapWStringInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerAliasHelper::MapWStringInnerAliasHelper()
{
    // map<wstring, InnerAliasHelper> m_var_map_wstring_inneraliashelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerAliasHelper::~MapWStringInnerAliasHelper()
{
}

MapWStringInnerAliasHelper::MapWStringInnerAliasHelper(
        const MapWStringInnerAliasHelper& x)
{
    m_var_map_wstring_inneraliashelper = x.m_var_map_wstring_inneraliashelper;
}

MapWStringInnerAliasHelper::MapWStringInnerAliasHelper(
        MapWStringInnerAliasHelper&& x) noexcept 
{
    m_var_map_wstring_inneraliashelper = std::move(x.m_var_map_wstring_inneraliashelper);
}

MapWStringInnerAliasHelper& MapWStringInnerAliasHelper::operator =(
        const MapWStringInnerAliasHelper& x)
{

    m_var_map_wstring_inneraliashelper = x.m_var_map_wstring_inneraliashelper;

    return *this;
}

MapWStringInnerAliasHelper& MapWStringInnerAliasHelper::operator =(
        MapWStringInnerAliasHelper&& x) noexcept
{

    m_var_map_wstring_inneraliashelper = std::move(x.m_var_map_wstring_inneraliashelper);

    return *this;
}

bool MapWStringInnerAliasHelper::operator ==(
        const MapWStringInnerAliasHelper& x) const
{

    return (m_var_map_wstring_inneraliashelper == x.m_var_map_wstring_inneraliashelper);
}

bool MapWStringInnerAliasHelper::operator !=(
        const MapWStringInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasHelper_max_cdr_typesize;
}

size_t MapWStringInnerAliasHelper::getCdrSerializedSize(
        const MapWStringInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_inneraliashelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_inneraliashelper.size());
    for (const auto& pair : m_var_map_wstring_inneraliashelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_inneraliashelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            InnerAliasHelper value;
            dcdr >> value;
            m_var_map_wstring_inneraliashelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_inneraliashelper
 * @param _var_map_wstring_inneraliashelper New value to be copied in member var_map_wstring_inneraliashelper
 */
void MapWStringInnerAliasHelper::var_map_wstring_inneraliashelper(
        const std::map<std::wstring, InnerAliasHelper>& _var_map_wstring_inneraliashelper)
{
    m_var_map_wstring_inneraliashelper = _var_map_wstring_inneraliashelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_inneraliashelper
 * @param _var_map_wstring_inneraliashelper New value to be moved in member var_map_wstring_inneraliashelper
 */
void MapWStringInnerAliasHelper::var_map_wstring_inneraliashelper(
        std::map<std::wstring, InnerAliasHelper>&& _var_map_wstring_inneraliashelper)
{
    m_var_map_wstring_inneraliashelper = std::move(_var_map_wstring_inneraliashelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_inneraliashelper
 * @return Constant reference to member var_map_wstring_inneraliashelper
 */
const std::map<std::wstring, InnerAliasHelper>& MapWStringInnerAliasHelper::var_map_wstring_inneraliashelper() const
{
    return m_var_map_wstring_inneraliashelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_inneraliashelper
 * @return Reference to member var_map_wstring_inneraliashelper
 */
std::map<std::wstring, InnerAliasHelper>& MapWStringInnerAliasHelper::var_map_wstring_inneraliashelper()
{
    return m_var_map_wstring_inneraliashelper;
}


size_t MapWStringInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasHelper_max_key_cdr_typesize;
}

bool MapWStringInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerAliasArrayHelper::MapWStringInnerAliasArrayHelper()
{
    // map<wstring, Inner_alias_array_helper> m_var_map_wstring_inneraliasarrayhelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerAliasArrayHelper::~MapWStringInnerAliasArrayHelper()
{
}

MapWStringInnerAliasArrayHelper::MapWStringInnerAliasArrayHelper(
        const MapWStringInnerAliasArrayHelper& x)
{
    m_var_map_wstring_inneraliasarrayhelper = x.m_var_map_wstring_inneraliasarrayhelper;
}

MapWStringInnerAliasArrayHelper::MapWStringInnerAliasArrayHelper(
        MapWStringInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_wstring_inneraliasarrayhelper = std::move(x.m_var_map_wstring_inneraliasarrayhelper);
}

MapWStringInnerAliasArrayHelper& MapWStringInnerAliasArrayHelper::operator =(
        const MapWStringInnerAliasArrayHelper& x)
{

    m_var_map_wstring_inneraliasarrayhelper = x.m_var_map_wstring_inneraliasarrayhelper;

    return *this;
}

MapWStringInnerAliasArrayHelper& MapWStringInnerAliasArrayHelper::operator =(
        MapWStringInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_wstring_inneraliasarrayhelper = std::move(x.m_var_map_wstring_inneraliasarrayhelper);

    return *this;
}

bool MapWStringInnerAliasArrayHelper::operator ==(
        const MapWStringInnerAliasArrayHelper& x) const
{

    return (m_var_map_wstring_inneraliasarrayhelper == x.m_var_map_wstring_inneraliasarrayhelper);
}

bool MapWStringInnerAliasArrayHelper::operator !=(
        const MapWStringInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapWStringInnerAliasArrayHelper::getCdrSerializedSize(
        const MapWStringInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_inneraliasarrayhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_inneraliasarrayhelper.size());
    for (const auto& pair : m_var_map_wstring_inneraliasarrayhelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_inneraliasarrayhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            Inner_alias_array_helper value;
            dcdr >> value;
            m_var_map_wstring_inneraliasarrayhelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_inneraliasarrayhelper
 * @param _var_map_wstring_inneraliasarrayhelper New value to be copied in member var_map_wstring_inneraliasarrayhelper
 */
void MapWStringInnerAliasArrayHelper::var_map_wstring_inneraliasarrayhelper(
        const std::map<std::wstring, Inner_alias_array_helper>& _var_map_wstring_inneraliasarrayhelper)
{
    m_var_map_wstring_inneraliasarrayhelper = _var_map_wstring_inneraliasarrayhelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_inneraliasarrayhelper
 * @param _var_map_wstring_inneraliasarrayhelper New value to be moved in member var_map_wstring_inneraliasarrayhelper
 */
void MapWStringInnerAliasArrayHelper::var_map_wstring_inneraliasarrayhelper(
        std::map<std::wstring, Inner_alias_array_helper>&& _var_map_wstring_inneraliasarrayhelper)
{
    m_var_map_wstring_inneraliasarrayhelper = std::move(_var_map_wstring_inneraliasarrayhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_inneraliasarrayhelper
 * @return Constant reference to member var_map_wstring_inneraliasarrayhelper
 */
const std::map<std::wstring, Inner_alias_array_helper>& MapWStringInnerAliasArrayHelper::var_map_wstring_inneraliasarrayhelper() const
{
    return m_var_map_wstring_inneraliasarrayhelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_inneraliasarrayhelper
 * @return Reference to member var_map_wstring_inneraliasarrayhelper
 */
std::map<std::wstring, Inner_alias_array_helper>& MapWStringInnerAliasArrayHelper::var_map_wstring_inneraliasarrayhelper()
{
    return m_var_map_wstring_inneraliasarrayhelper;
}


size_t MapWStringInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapWStringInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerAliasSequenceHelper::MapWStringInnerAliasSequenceHelper()
{
    // map<wstring, Inner_alias_sequence_helper> m_var_map_wstring_inneraliassequencehelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerAliasSequenceHelper::~MapWStringInnerAliasSequenceHelper()
{
}

MapWStringInnerAliasSequenceHelper::MapWStringInnerAliasSequenceHelper(
        const MapWStringInnerAliasSequenceHelper& x)
{
    m_var_map_wstring_inneraliassequencehelper = x.m_var_map_wstring_inneraliassequencehelper;
}

MapWStringInnerAliasSequenceHelper::MapWStringInnerAliasSequenceHelper(
        MapWStringInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_wstring_inneraliassequencehelper = std::move(x.m_var_map_wstring_inneraliassequencehelper);
}

MapWStringInnerAliasSequenceHelper& MapWStringInnerAliasSequenceHelper::operator =(
        const MapWStringInnerAliasSequenceHelper& x)
{

    m_var_map_wstring_inneraliassequencehelper = x.m_var_map_wstring_inneraliassequencehelper;

    return *this;
}

MapWStringInnerAliasSequenceHelper& MapWStringInnerAliasSequenceHelper::operator =(
        MapWStringInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_wstring_inneraliassequencehelper = std::move(x.m_var_map_wstring_inneraliassequencehelper);

    return *this;
}

bool MapWStringInnerAliasSequenceHelper::operator ==(
        const MapWStringInnerAliasSequenceHelper& x) const
{

    return (m_var_map_wstring_inneraliassequencehelper == x.m_var_map_wstring_inneraliassequencehelper);
}

bool MapWStringInnerAliasSequenceHelper::operator !=(
        const MapWStringInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapWStringInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapWStringInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_inneraliassequencehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_inneraliassequencehelper.size());
    for (const auto& pair : m_var_map_wstring_inneraliassequencehelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_inneraliassequencehelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            Inner_alias_sequence_helper value;
            dcdr >> value;
            m_var_map_wstring_inneraliassequencehelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_inneraliassequencehelper
 * @param _var_map_wstring_inneraliassequencehelper New value to be copied in member var_map_wstring_inneraliassequencehelper
 */
void MapWStringInnerAliasSequenceHelper::var_map_wstring_inneraliassequencehelper(
        const std::map<std::wstring, Inner_alias_sequence_helper>& _var_map_wstring_inneraliassequencehelper)
{
    m_var_map_wstring_inneraliassequencehelper = _var_map_wstring_inneraliassequencehelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_inneraliassequencehelper
 * @param _var_map_wstring_inneraliassequencehelper New value to be moved in member var_map_wstring_inneraliassequencehelper
 */
void MapWStringInnerAliasSequenceHelper::var_map_wstring_inneraliassequencehelper(
        std::map<std::wstring, Inner_alias_sequence_helper>&& _var_map_wstring_inneraliassequencehelper)
{
    m_var_map_wstring_inneraliassequencehelper = std::move(_var_map_wstring_inneraliassequencehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_inneraliassequencehelper
 * @return Constant reference to member var_map_wstring_inneraliassequencehelper
 */
const std::map<std::wstring, Inner_alias_sequence_helper>& MapWStringInnerAliasSequenceHelper::var_map_wstring_inneraliassequencehelper() const
{
    return m_var_map_wstring_inneraliassequencehelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_inneraliassequencehelper
 * @return Reference to member var_map_wstring_inneraliassequencehelper
 */
std::map<std::wstring, Inner_alias_sequence_helper>& MapWStringInnerAliasSequenceHelper::var_map_wstring_inneraliassequencehelper()
{
    return m_var_map_wstring_inneraliassequencehelper;
}


size_t MapWStringInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapWStringInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerAliasMapHelper::MapWStringInnerAliasMapHelper()
{
    // map<wstring, Inner_alias_map_helper> m_var_map_wstring_inneraliasmaphelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerAliasMapHelper::~MapWStringInnerAliasMapHelper()
{
}

MapWStringInnerAliasMapHelper::MapWStringInnerAliasMapHelper(
        const MapWStringInnerAliasMapHelper& x)
{
    m_var_map_wstring_inneraliasmaphelper = x.m_var_map_wstring_inneraliasmaphelper;
}

MapWStringInnerAliasMapHelper::MapWStringInnerAliasMapHelper(
        MapWStringInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_wstring_inneraliasmaphelper = std::move(x.m_var_map_wstring_inneraliasmaphelper);
}

MapWStringInnerAliasMapHelper& MapWStringInnerAliasMapHelper::operator =(
        const MapWStringInnerAliasMapHelper& x)
{

    m_var_map_wstring_inneraliasmaphelper = x.m_var_map_wstring_inneraliasmaphelper;

    return *this;
}

MapWStringInnerAliasMapHelper& MapWStringInnerAliasMapHelper::operator =(
        MapWStringInnerAliasMapHelper&& x) noexcept
{

    m_var_map_wstring_inneraliasmaphelper = std::move(x.m_var_map_wstring_inneraliasmaphelper);

    return *this;
}

bool MapWStringInnerAliasMapHelper::operator ==(
        const MapWStringInnerAliasMapHelper& x) const
{

    return (m_var_map_wstring_inneraliasmaphelper == x.m_var_map_wstring_inneraliasmaphelper);
}

bool MapWStringInnerAliasMapHelper::operator !=(
        const MapWStringInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapWStringInnerAliasMapHelper::getCdrSerializedSize(
        const MapWStringInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_inneraliasmaphelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_inneraliasmaphelper.size());
    for (const auto& pair : m_var_map_wstring_inneraliasmaphelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_inneraliasmaphelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            Inner_alias_map_helper value;
            dcdr >> value;
            m_var_map_wstring_inneraliasmaphelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_inneraliasmaphelper
 * @param _var_map_wstring_inneraliasmaphelper New value to be copied in member var_map_wstring_inneraliasmaphelper
 */
void MapWStringInnerAliasMapHelper::var_map_wstring_inneraliasmaphelper(
        const std::map<std::wstring, Inner_alias_map_helper>& _var_map_wstring_inneraliasmaphelper)
{
    m_var_map_wstring_inneraliasmaphelper = _var_map_wstring_inneraliasmaphelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_inneraliasmaphelper
 * @param _var_map_wstring_inneraliasmaphelper New value to be moved in member var_map_wstring_inneraliasmaphelper
 */
void MapWStringInnerAliasMapHelper::var_map_wstring_inneraliasmaphelper(
        std::map<std::wstring, Inner_alias_map_helper>&& _var_map_wstring_inneraliasmaphelper)
{
    m_var_map_wstring_inneraliasmaphelper = std::move(_var_map_wstring_inneraliasmaphelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_inneraliasmaphelper
 * @return Constant reference to member var_map_wstring_inneraliasmaphelper
 */
const std::map<std::wstring, Inner_alias_map_helper>& MapWStringInnerAliasMapHelper::var_map_wstring_inneraliasmaphelper() const
{
    return m_var_map_wstring_inneraliasmaphelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_inneraliasmaphelper
 * @return Reference to member var_map_wstring_inneraliasmaphelper
 */
std::map<std::wstring, Inner_alias_map_helper>& MapWStringInnerAliasMapHelper::var_map_wstring_inneraliasmaphelper()
{
    return m_var_map_wstring_inneraliasmaphelper;
}


size_t MapWStringInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapWStringInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerUnionHelper::MapWStringInnerUnionHelper()
{
    // map<wstring, InnerUnionHelper> m_var_map_wstring_innerunionhelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerUnionHelper::~MapWStringInnerUnionHelper()
{
}

MapWStringInnerUnionHelper::MapWStringInnerUnionHelper(
        const MapWStringInnerUnionHelper& x)
{
    m_var_map_wstring_innerunionhelper = x.m_var_map_wstring_innerunionhelper;
}

MapWStringInnerUnionHelper::MapWStringInnerUnionHelper(
        MapWStringInnerUnionHelper&& x) noexcept 
{
    m_var_map_wstring_innerunionhelper = std::move(x.m_var_map_wstring_innerunionhelper);
}

MapWStringInnerUnionHelper& MapWStringInnerUnionHelper::operator =(
        const MapWStringInnerUnionHelper& x)
{

    m_var_map_wstring_innerunionhelper = x.m_var_map_wstring_innerunionhelper;

    return *this;
}

MapWStringInnerUnionHelper& MapWStringInnerUnionHelper::operator =(
        MapWStringInnerUnionHelper&& x) noexcept
{

    m_var_map_wstring_innerunionhelper = std::move(x.m_var_map_wstring_innerunionhelper);

    return *this;
}

bool MapWStringInnerUnionHelper::operator ==(
        const MapWStringInnerUnionHelper& x) const
{

    return (m_var_map_wstring_innerunionhelper == x.m_var_map_wstring_innerunionhelper);
}

bool MapWStringInnerUnionHelper::operator !=(
        const MapWStringInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerUnionHelper_max_cdr_typesize;
}

size_t MapWStringInnerUnionHelper::getCdrSerializedSize(
        const MapWStringInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_innerunionhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_innerunionhelper.size());
    for (const auto& pair : m_var_map_wstring_innerunionhelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_innerunionhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            InnerUnionHelper value;
            dcdr >> value;
            m_var_map_wstring_innerunionhelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_innerunionhelper
 * @param _var_map_wstring_innerunionhelper New value to be copied in member var_map_wstring_innerunionhelper
 */
void MapWStringInnerUnionHelper::var_map_wstring_innerunionhelper(
        const std::map<std::wstring, InnerUnionHelper>& _var_map_wstring_innerunionhelper)
{
    m_var_map_wstring_innerunionhelper = _var_map_wstring_innerunionhelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_innerunionhelper
 * @param _var_map_wstring_innerunionhelper New value to be moved in member var_map_wstring_innerunionhelper
 */
void MapWStringInnerUnionHelper::var_map_wstring_innerunionhelper(
        std::map<std::wstring, InnerUnionHelper>&& _var_map_wstring_innerunionhelper)
{
    m_var_map_wstring_innerunionhelper = std::move(_var_map_wstring_innerunionhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_innerunionhelper
 * @return Constant reference to member var_map_wstring_innerunionhelper
 */
const std::map<std::wstring, InnerUnionHelper>& MapWStringInnerUnionHelper::var_map_wstring_innerunionhelper() const
{
    return m_var_map_wstring_innerunionhelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_innerunionhelper
 * @return Reference to member var_map_wstring_innerunionhelper
 */
std::map<std::wstring, InnerUnionHelper>& MapWStringInnerUnionHelper::var_map_wstring_innerunionhelper()
{
    return m_var_map_wstring_innerunionhelper;
}


size_t MapWStringInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerUnionHelper_max_key_cdr_typesize;
}

bool MapWStringInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerStructureHelper::MapWStringInnerStructureHelper()
{
    // map<wstring, InnerStructureHelper> m_var_map_wstring_innerstructurehelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerStructureHelper::~MapWStringInnerStructureHelper()
{
}

MapWStringInnerStructureHelper::MapWStringInnerStructureHelper(
        const MapWStringInnerStructureHelper& x)
{
    m_var_map_wstring_innerstructurehelper = x.m_var_map_wstring_innerstructurehelper;
}

MapWStringInnerStructureHelper::MapWStringInnerStructureHelper(
        MapWStringInnerStructureHelper&& x) noexcept 
{
    m_var_map_wstring_innerstructurehelper = std::move(x.m_var_map_wstring_innerstructurehelper);
}

MapWStringInnerStructureHelper& MapWStringInnerStructureHelper::operator =(
        const MapWStringInnerStructureHelper& x)
{

    m_var_map_wstring_innerstructurehelper = x.m_var_map_wstring_innerstructurehelper;

    return *this;
}

MapWStringInnerStructureHelper& MapWStringInnerStructureHelper::operator =(
        MapWStringInnerStructureHelper&& x) noexcept
{

    m_var_map_wstring_innerstructurehelper = std::move(x.m_var_map_wstring_innerstructurehelper);

    return *this;
}

bool MapWStringInnerStructureHelper::operator ==(
        const MapWStringInnerStructureHelper& x) const
{

    return (m_var_map_wstring_innerstructurehelper == x.m_var_map_wstring_innerstructurehelper);
}

bool MapWStringInnerStructureHelper::operator !=(
        const MapWStringInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerStructureHelper_max_cdr_typesize;
}

size_t MapWStringInnerStructureHelper::getCdrSerializedSize(
        const MapWStringInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_innerstructurehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_innerstructurehelper.size());
    for (const auto& pair : m_var_map_wstring_innerstructurehelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_innerstructurehelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            InnerStructureHelper value;
            dcdr >> value;
            m_var_map_wstring_innerstructurehelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_innerstructurehelper
 * @param _var_map_wstring_innerstructurehelper New value to be copied in member var_map_wstring_innerstructurehelper
 */
void MapWStringInnerStructureHelper::var_map_wstring_innerstructurehelper(
        const std::map<std::wstring, InnerStructureHelper>& _var_map_wstring_innerstructurehelper)
{
    m_var_map_wstring_innerstructurehelper = _var_map_wstring_innerstructurehelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_innerstructurehelper
 * @param _var_map_wstring_innerstructurehelper New value to be moved in member var_map_wstring_innerstructurehelper
 */
void MapWStringInnerStructureHelper::var_map_wstring_innerstructurehelper(
        std::map<std::wstring, InnerStructureHelper>&& _var_map_wstring_innerstructurehelper)
{
    m_var_map_wstring_innerstructurehelper = std::move(_var_map_wstring_innerstructurehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_innerstructurehelper
 * @return Constant reference to member var_map_wstring_innerstructurehelper
 */
const std::map<std::wstring, InnerStructureHelper>& MapWStringInnerStructureHelper::var_map_wstring_innerstructurehelper() const
{
    return m_var_map_wstring_innerstructurehelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_innerstructurehelper
 * @return Reference to member var_map_wstring_innerstructurehelper
 */
std::map<std::wstring, InnerStructureHelper>& MapWStringInnerStructureHelper::var_map_wstring_innerstructurehelper()
{
    return m_var_map_wstring_innerstructurehelper;
}


size_t MapWStringInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerStructureHelper_max_key_cdr_typesize;
}

bool MapWStringInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapWStringInnerBitsetHelper::MapWStringInnerBitsetHelper()
{
    // map<wstring, InnerBitsetHelper> m_var_map_wstring_innerbitsethelper


    // Just to register all known types
    registermapsTypes();
}

MapWStringInnerBitsetHelper::~MapWStringInnerBitsetHelper()
{
}

MapWStringInnerBitsetHelper::MapWStringInnerBitsetHelper(
        const MapWStringInnerBitsetHelper& x)
{
    m_var_map_wstring_innerbitsethelper = x.m_var_map_wstring_innerbitsethelper;
}

MapWStringInnerBitsetHelper::MapWStringInnerBitsetHelper(
        MapWStringInnerBitsetHelper&& x) noexcept 
{
    m_var_map_wstring_innerbitsethelper = std::move(x.m_var_map_wstring_innerbitsethelper);
}

MapWStringInnerBitsetHelper& MapWStringInnerBitsetHelper::operator =(
        const MapWStringInnerBitsetHelper& x)
{

    m_var_map_wstring_innerbitsethelper = x.m_var_map_wstring_innerbitsethelper;

    return *this;
}

MapWStringInnerBitsetHelper& MapWStringInnerBitsetHelper::operator =(
        MapWStringInnerBitsetHelper&& x) noexcept
{

    m_var_map_wstring_innerbitsethelper = std::move(x.m_var_map_wstring_innerbitsethelper);

    return *this;
}

bool MapWStringInnerBitsetHelper::operator ==(
        const MapWStringInnerBitsetHelper& x) const
{

    return (m_var_map_wstring_innerbitsethelper == x.m_var_map_wstring_innerbitsethelper);
}

bool MapWStringInnerBitsetHelper::operator !=(
        const MapWStringInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapWStringInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerBitsetHelper_max_cdr_typesize;
}

size_t MapWStringInnerBitsetHelper::getCdrSerializedSize(
        const MapWStringInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_wstring_innerbitsethelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapWStringInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_wstring_innerbitsethelper.size());
    for (const auto& pair : m_var_map_wstring_innerbitsethelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapWStringInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_wstring_innerbitsethelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                dcdr >> key;
            InnerBitsetHelper value;
            dcdr >> value;
            m_var_map_wstring_innerbitsethelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_wstring_innerbitsethelper
 * @param _var_map_wstring_innerbitsethelper New value to be copied in member var_map_wstring_innerbitsethelper
 */
void MapWStringInnerBitsetHelper::var_map_wstring_innerbitsethelper(
        const std::map<std::wstring, InnerBitsetHelper>& _var_map_wstring_innerbitsethelper)
{
    m_var_map_wstring_innerbitsethelper = _var_map_wstring_innerbitsethelper;
}

/*!
 * @brief This function moves the value in member var_map_wstring_innerbitsethelper
 * @param _var_map_wstring_innerbitsethelper New value to be moved in member var_map_wstring_innerbitsethelper
 */
void MapWStringInnerBitsetHelper::var_map_wstring_innerbitsethelper(
        std::map<std::wstring, InnerBitsetHelper>&& _var_map_wstring_innerbitsethelper)
{
    m_var_map_wstring_innerbitsethelper = std::move(_var_map_wstring_innerbitsethelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_wstring_innerbitsethelper
 * @return Constant reference to member var_map_wstring_innerbitsethelper
 */
const std::map<std::wstring, InnerBitsetHelper>& MapWStringInnerBitsetHelper::var_map_wstring_innerbitsethelper() const
{
    return m_var_map_wstring_innerbitsethelper;
}

/*!
 * @brief This function returns a reference to member var_map_wstring_innerbitsethelper
 * @return Reference to member var_map_wstring_innerbitsethelper
 */
std::map<std::wstring, InnerBitsetHelper>& MapWStringInnerBitsetHelper::var_map_wstring_innerbitsethelper()
{
    return m_var_map_wstring_innerbitsethelper;
}


size_t MapWStringInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapWStringInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapWStringInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapWStringInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperShort::MapInnerAliasBoundedStringHelperShort()
{
    // map<Inner_alias_bounded_string_helper, short> m_var_map_inneraliasboundedstringhelper_short


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperShort::~MapInnerAliasBoundedStringHelperShort()
{
}

MapInnerAliasBoundedStringHelperShort::MapInnerAliasBoundedStringHelperShort(
        const MapInnerAliasBoundedStringHelperShort& x)
{
    m_var_map_inneraliasboundedstringhelper_short = x.m_var_map_inneraliasboundedstringhelper_short;
}

MapInnerAliasBoundedStringHelperShort::MapInnerAliasBoundedStringHelperShort(
        MapInnerAliasBoundedStringHelperShort&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_short = std::move(x.m_var_map_inneraliasboundedstringhelper_short);
}

MapInnerAliasBoundedStringHelperShort& MapInnerAliasBoundedStringHelperShort::operator =(
        const MapInnerAliasBoundedStringHelperShort& x)
{

    m_var_map_inneraliasboundedstringhelper_short = x.m_var_map_inneraliasboundedstringhelper_short;

    return *this;
}

MapInnerAliasBoundedStringHelperShort& MapInnerAliasBoundedStringHelperShort::operator =(
        MapInnerAliasBoundedStringHelperShort&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_short = std::move(x.m_var_map_inneraliasboundedstringhelper_short);

    return *this;
}

bool MapInnerAliasBoundedStringHelperShort::operator ==(
        const MapInnerAliasBoundedStringHelperShort& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_short == x.m_var_map_inneraliasboundedstringhelper_short);
}

bool MapInnerAliasBoundedStringHelperShort::operator !=(
        const MapInnerAliasBoundedStringHelperShort& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperShort_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperShort::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_short())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_short.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_short)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_short.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            int16_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_short[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_short
 * @param _var_map_inneraliasboundedstringhelper_short New value to be copied in member var_map_inneraliasboundedstringhelper_short
 */
void MapInnerAliasBoundedStringHelperShort::var_map_inneraliasboundedstringhelper_short(
        const std::map<Inner_alias_bounded_string_helper, int16_t>& _var_map_inneraliasboundedstringhelper_short)
{
    m_var_map_inneraliasboundedstringhelper_short = _var_map_inneraliasboundedstringhelper_short;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_short
 * @param _var_map_inneraliasboundedstringhelper_short New value to be moved in member var_map_inneraliasboundedstringhelper_short
 */
void MapInnerAliasBoundedStringHelperShort::var_map_inneraliasboundedstringhelper_short(
        std::map<Inner_alias_bounded_string_helper, int16_t>&& _var_map_inneraliasboundedstringhelper_short)
{
    m_var_map_inneraliasboundedstringhelper_short = std::move(_var_map_inneraliasboundedstringhelper_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_short
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_short
 */
const std::map<Inner_alias_bounded_string_helper, int16_t>& MapInnerAliasBoundedStringHelperShort::var_map_inneraliasboundedstringhelper_short() const
{
    return m_var_map_inneraliasboundedstringhelper_short;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_short
 * @return Reference to member var_map_inneraliasboundedstringhelper_short
 */
std::map<Inner_alias_bounded_string_helper, int16_t>& MapInnerAliasBoundedStringHelperShort::var_map_inneraliasboundedstringhelper_short()
{
    return m_var_map_inneraliasboundedstringhelper_short;
}


size_t MapInnerAliasBoundedStringHelperShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperShort_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperShort::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperUShort::MapInnerAliasBoundedStringHelperUShort()
{
    // map<Inner_alias_bounded_string_helper, unsigned short> m_var_map_inneraliasboundedstringhelper_ushort


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperUShort::~MapInnerAliasBoundedStringHelperUShort()
{
}

MapInnerAliasBoundedStringHelperUShort::MapInnerAliasBoundedStringHelperUShort(
        const MapInnerAliasBoundedStringHelperUShort& x)
{
    m_var_map_inneraliasboundedstringhelper_ushort = x.m_var_map_inneraliasboundedstringhelper_ushort;
}

MapInnerAliasBoundedStringHelperUShort::MapInnerAliasBoundedStringHelperUShort(
        MapInnerAliasBoundedStringHelperUShort&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_ushort = std::move(x.m_var_map_inneraliasboundedstringhelper_ushort);
}

MapInnerAliasBoundedStringHelperUShort& MapInnerAliasBoundedStringHelperUShort::operator =(
        const MapInnerAliasBoundedStringHelperUShort& x)
{

    m_var_map_inneraliasboundedstringhelper_ushort = x.m_var_map_inneraliasboundedstringhelper_ushort;

    return *this;
}

MapInnerAliasBoundedStringHelperUShort& MapInnerAliasBoundedStringHelperUShort::operator =(
        MapInnerAliasBoundedStringHelperUShort&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_ushort = std::move(x.m_var_map_inneraliasboundedstringhelper_ushort);

    return *this;
}

bool MapInnerAliasBoundedStringHelperUShort::operator ==(
        const MapInnerAliasBoundedStringHelperUShort& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_ushort == x.m_var_map_inneraliasboundedstringhelper_ushort);
}

bool MapInnerAliasBoundedStringHelperUShort::operator !=(
        const MapInnerAliasBoundedStringHelperUShort& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperUShort_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperUShort::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_ushort())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_ushort.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_ushort)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_ushort.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            uint16_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_ushort[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_ushort
 * @param _var_map_inneraliasboundedstringhelper_ushort New value to be copied in member var_map_inneraliasboundedstringhelper_ushort
 */
void MapInnerAliasBoundedStringHelperUShort::var_map_inneraliasboundedstringhelper_ushort(
        const std::map<Inner_alias_bounded_string_helper, uint16_t>& _var_map_inneraliasboundedstringhelper_ushort)
{
    m_var_map_inneraliasboundedstringhelper_ushort = _var_map_inneraliasboundedstringhelper_ushort;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_ushort
 * @param _var_map_inneraliasboundedstringhelper_ushort New value to be moved in member var_map_inneraliasboundedstringhelper_ushort
 */
void MapInnerAliasBoundedStringHelperUShort::var_map_inneraliasboundedstringhelper_ushort(
        std::map<Inner_alias_bounded_string_helper, uint16_t>&& _var_map_inneraliasboundedstringhelper_ushort)
{
    m_var_map_inneraliasboundedstringhelper_ushort = std::move(_var_map_inneraliasboundedstringhelper_ushort);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_ushort
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_ushort
 */
const std::map<Inner_alias_bounded_string_helper, uint16_t>& MapInnerAliasBoundedStringHelperUShort::var_map_inneraliasboundedstringhelper_ushort() const
{
    return m_var_map_inneraliasboundedstringhelper_ushort;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_ushort
 * @return Reference to member var_map_inneraliasboundedstringhelper_ushort
 */
std::map<Inner_alias_bounded_string_helper, uint16_t>& MapInnerAliasBoundedStringHelperUShort::var_map_inneraliasboundedstringhelper_ushort()
{
    return m_var_map_inneraliasboundedstringhelper_ushort;
}


size_t MapInnerAliasBoundedStringHelperUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperUShort_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperUShort::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperLong::MapInnerAliasBoundedStringHelperLong()
{
    // map<Inner_alias_bounded_string_helper, long> m_var_map_inneraliasboundedstringhelper_long


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperLong::~MapInnerAliasBoundedStringHelperLong()
{
}

MapInnerAliasBoundedStringHelperLong::MapInnerAliasBoundedStringHelperLong(
        const MapInnerAliasBoundedStringHelperLong& x)
{
    m_var_map_inneraliasboundedstringhelper_long = x.m_var_map_inneraliasboundedstringhelper_long;
}

MapInnerAliasBoundedStringHelperLong::MapInnerAliasBoundedStringHelperLong(
        MapInnerAliasBoundedStringHelperLong&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_long = std::move(x.m_var_map_inneraliasboundedstringhelper_long);
}

MapInnerAliasBoundedStringHelperLong& MapInnerAliasBoundedStringHelperLong::operator =(
        const MapInnerAliasBoundedStringHelperLong& x)
{

    m_var_map_inneraliasboundedstringhelper_long = x.m_var_map_inneraliasboundedstringhelper_long;

    return *this;
}

MapInnerAliasBoundedStringHelperLong& MapInnerAliasBoundedStringHelperLong::operator =(
        MapInnerAliasBoundedStringHelperLong&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_long = std::move(x.m_var_map_inneraliasboundedstringhelper_long);

    return *this;
}

bool MapInnerAliasBoundedStringHelperLong::operator ==(
        const MapInnerAliasBoundedStringHelperLong& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_long == x.m_var_map_inneraliasboundedstringhelper_long);
}

bool MapInnerAliasBoundedStringHelperLong::operator !=(
        const MapInnerAliasBoundedStringHelperLong& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperLong_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperLong::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_long())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_long.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_long)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_long.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            int32_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_long[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_long
 * @param _var_map_inneraliasboundedstringhelper_long New value to be copied in member var_map_inneraliasboundedstringhelper_long
 */
void MapInnerAliasBoundedStringHelperLong::var_map_inneraliasboundedstringhelper_long(
        const std::map<Inner_alias_bounded_string_helper, int32_t>& _var_map_inneraliasboundedstringhelper_long)
{
    m_var_map_inneraliasboundedstringhelper_long = _var_map_inneraliasboundedstringhelper_long;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_long
 * @param _var_map_inneraliasboundedstringhelper_long New value to be moved in member var_map_inneraliasboundedstringhelper_long
 */
void MapInnerAliasBoundedStringHelperLong::var_map_inneraliasboundedstringhelper_long(
        std::map<Inner_alias_bounded_string_helper, int32_t>&& _var_map_inneraliasboundedstringhelper_long)
{
    m_var_map_inneraliasboundedstringhelper_long = std::move(_var_map_inneraliasboundedstringhelper_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_long
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_long
 */
const std::map<Inner_alias_bounded_string_helper, int32_t>& MapInnerAliasBoundedStringHelperLong::var_map_inneraliasboundedstringhelper_long() const
{
    return m_var_map_inneraliasboundedstringhelper_long;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_long
 * @return Reference to member var_map_inneraliasboundedstringhelper_long
 */
std::map<Inner_alias_bounded_string_helper, int32_t>& MapInnerAliasBoundedStringHelperLong::var_map_inneraliasboundedstringhelper_long()
{
    return m_var_map_inneraliasboundedstringhelper_long;
}


size_t MapInnerAliasBoundedStringHelperLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperLong_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperLong::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperULong::MapInnerAliasBoundedStringHelperULong()
{
    // map<Inner_alias_bounded_string_helper, unsigned long> m_var_map_inneraliasboundedstringhelper_ulong


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperULong::~MapInnerAliasBoundedStringHelperULong()
{
}

MapInnerAliasBoundedStringHelperULong::MapInnerAliasBoundedStringHelperULong(
        const MapInnerAliasBoundedStringHelperULong& x)
{
    m_var_map_inneraliasboundedstringhelper_ulong = x.m_var_map_inneraliasboundedstringhelper_ulong;
}

MapInnerAliasBoundedStringHelperULong::MapInnerAliasBoundedStringHelperULong(
        MapInnerAliasBoundedStringHelperULong&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_ulong = std::move(x.m_var_map_inneraliasboundedstringhelper_ulong);
}

MapInnerAliasBoundedStringHelperULong& MapInnerAliasBoundedStringHelperULong::operator =(
        const MapInnerAliasBoundedStringHelperULong& x)
{

    m_var_map_inneraliasboundedstringhelper_ulong = x.m_var_map_inneraliasboundedstringhelper_ulong;

    return *this;
}

MapInnerAliasBoundedStringHelperULong& MapInnerAliasBoundedStringHelperULong::operator =(
        MapInnerAliasBoundedStringHelperULong&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_ulong = std::move(x.m_var_map_inneraliasboundedstringhelper_ulong);

    return *this;
}

bool MapInnerAliasBoundedStringHelperULong::operator ==(
        const MapInnerAliasBoundedStringHelperULong& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_ulong == x.m_var_map_inneraliasboundedstringhelper_ulong);
}

bool MapInnerAliasBoundedStringHelperULong::operator !=(
        const MapInnerAliasBoundedStringHelperULong& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperULong_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperULong::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_ulong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_ulong.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_ulong)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_ulong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            uint32_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_ulong[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_ulong
 * @param _var_map_inneraliasboundedstringhelper_ulong New value to be copied in member var_map_inneraliasboundedstringhelper_ulong
 */
void MapInnerAliasBoundedStringHelperULong::var_map_inneraliasboundedstringhelper_ulong(
        const std::map<Inner_alias_bounded_string_helper, uint32_t>& _var_map_inneraliasboundedstringhelper_ulong)
{
    m_var_map_inneraliasboundedstringhelper_ulong = _var_map_inneraliasboundedstringhelper_ulong;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_ulong
 * @param _var_map_inneraliasboundedstringhelper_ulong New value to be moved in member var_map_inneraliasboundedstringhelper_ulong
 */
void MapInnerAliasBoundedStringHelperULong::var_map_inneraliasboundedstringhelper_ulong(
        std::map<Inner_alias_bounded_string_helper, uint32_t>&& _var_map_inneraliasboundedstringhelper_ulong)
{
    m_var_map_inneraliasboundedstringhelper_ulong = std::move(_var_map_inneraliasboundedstringhelper_ulong);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_ulong
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_ulong
 */
const std::map<Inner_alias_bounded_string_helper, uint32_t>& MapInnerAliasBoundedStringHelperULong::var_map_inneraliasboundedstringhelper_ulong() const
{
    return m_var_map_inneraliasboundedstringhelper_ulong;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_ulong
 * @return Reference to member var_map_inneraliasboundedstringhelper_ulong
 */
std::map<Inner_alias_bounded_string_helper, uint32_t>& MapInnerAliasBoundedStringHelperULong::var_map_inneraliasboundedstringhelper_ulong()
{
    return m_var_map_inneraliasboundedstringhelper_ulong;
}


size_t MapInnerAliasBoundedStringHelperULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperULong_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperULong::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperLongLong::MapInnerAliasBoundedStringHelperLongLong()
{
    // map<Inner_alias_bounded_string_helper, long long> m_var_map_inneraliasboundedstringhelper_longlong


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperLongLong::~MapInnerAliasBoundedStringHelperLongLong()
{
}

MapInnerAliasBoundedStringHelperLongLong::MapInnerAliasBoundedStringHelperLongLong(
        const MapInnerAliasBoundedStringHelperLongLong& x)
{
    m_var_map_inneraliasboundedstringhelper_longlong = x.m_var_map_inneraliasboundedstringhelper_longlong;
}

MapInnerAliasBoundedStringHelperLongLong::MapInnerAliasBoundedStringHelperLongLong(
        MapInnerAliasBoundedStringHelperLongLong&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_longlong = std::move(x.m_var_map_inneraliasboundedstringhelper_longlong);
}

MapInnerAliasBoundedStringHelperLongLong& MapInnerAliasBoundedStringHelperLongLong::operator =(
        const MapInnerAliasBoundedStringHelperLongLong& x)
{

    m_var_map_inneraliasboundedstringhelper_longlong = x.m_var_map_inneraliasboundedstringhelper_longlong;

    return *this;
}

MapInnerAliasBoundedStringHelperLongLong& MapInnerAliasBoundedStringHelperLongLong::operator =(
        MapInnerAliasBoundedStringHelperLongLong&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_longlong = std::move(x.m_var_map_inneraliasboundedstringhelper_longlong);

    return *this;
}

bool MapInnerAliasBoundedStringHelperLongLong::operator ==(
        const MapInnerAliasBoundedStringHelperLongLong& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_longlong == x.m_var_map_inneraliasboundedstringhelper_longlong);
}

bool MapInnerAliasBoundedStringHelperLongLong::operator !=(
        const MapInnerAliasBoundedStringHelperLongLong& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperLongLong_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperLongLong::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_longlong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_longlong.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_longlong)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_longlong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            int64_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_longlong[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_longlong
 * @param _var_map_inneraliasboundedstringhelper_longlong New value to be copied in member var_map_inneraliasboundedstringhelper_longlong
 */
void MapInnerAliasBoundedStringHelperLongLong::var_map_inneraliasboundedstringhelper_longlong(
        const std::map<Inner_alias_bounded_string_helper, int64_t>& _var_map_inneraliasboundedstringhelper_longlong)
{
    m_var_map_inneraliasboundedstringhelper_longlong = _var_map_inneraliasboundedstringhelper_longlong;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_longlong
 * @param _var_map_inneraliasboundedstringhelper_longlong New value to be moved in member var_map_inneraliasboundedstringhelper_longlong
 */
void MapInnerAliasBoundedStringHelperLongLong::var_map_inneraliasboundedstringhelper_longlong(
        std::map<Inner_alias_bounded_string_helper, int64_t>&& _var_map_inneraliasboundedstringhelper_longlong)
{
    m_var_map_inneraliasboundedstringhelper_longlong = std::move(_var_map_inneraliasboundedstringhelper_longlong);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_longlong
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_longlong
 */
const std::map<Inner_alias_bounded_string_helper, int64_t>& MapInnerAliasBoundedStringHelperLongLong::var_map_inneraliasboundedstringhelper_longlong() const
{
    return m_var_map_inneraliasboundedstringhelper_longlong;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_longlong
 * @return Reference to member var_map_inneraliasboundedstringhelper_longlong
 */
std::map<Inner_alias_bounded_string_helper, int64_t>& MapInnerAliasBoundedStringHelperLongLong::var_map_inneraliasboundedstringhelper_longlong()
{
    return m_var_map_inneraliasboundedstringhelper_longlong;
}


size_t MapInnerAliasBoundedStringHelperLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperLongLong_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperLongLong::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperULongLong::MapInnerAliasBoundedStringHelperULongLong()
{
    // map<Inner_alias_bounded_string_helper, unsigned long long> m_var_map_inneraliasboundedstringhelper_ulonglong


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperULongLong::~MapInnerAliasBoundedStringHelperULongLong()
{
}

MapInnerAliasBoundedStringHelperULongLong::MapInnerAliasBoundedStringHelperULongLong(
        const MapInnerAliasBoundedStringHelperULongLong& x)
{
    m_var_map_inneraliasboundedstringhelper_ulonglong = x.m_var_map_inneraliasboundedstringhelper_ulonglong;
}

MapInnerAliasBoundedStringHelperULongLong::MapInnerAliasBoundedStringHelperULongLong(
        MapInnerAliasBoundedStringHelperULongLong&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_ulonglong = std::move(x.m_var_map_inneraliasboundedstringhelper_ulonglong);
}

MapInnerAliasBoundedStringHelperULongLong& MapInnerAliasBoundedStringHelperULongLong::operator =(
        const MapInnerAliasBoundedStringHelperULongLong& x)
{

    m_var_map_inneraliasboundedstringhelper_ulonglong = x.m_var_map_inneraliasboundedstringhelper_ulonglong;

    return *this;
}

MapInnerAliasBoundedStringHelperULongLong& MapInnerAliasBoundedStringHelperULongLong::operator =(
        MapInnerAliasBoundedStringHelperULongLong&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_ulonglong = std::move(x.m_var_map_inneraliasboundedstringhelper_ulonglong);

    return *this;
}

bool MapInnerAliasBoundedStringHelperULongLong::operator ==(
        const MapInnerAliasBoundedStringHelperULongLong& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_ulonglong == x.m_var_map_inneraliasboundedstringhelper_ulonglong);
}

bool MapInnerAliasBoundedStringHelperULongLong::operator !=(
        const MapInnerAliasBoundedStringHelperULongLong& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperULongLong_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperULongLong::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_ulonglong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_ulonglong.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_ulonglong)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_ulonglong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            uint64_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_ulonglong[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_ulonglong
 * @param _var_map_inneraliasboundedstringhelper_ulonglong New value to be copied in member var_map_inneraliasboundedstringhelper_ulonglong
 */
void MapInnerAliasBoundedStringHelperULongLong::var_map_inneraliasboundedstringhelper_ulonglong(
        const std::map<Inner_alias_bounded_string_helper, uint64_t>& _var_map_inneraliasboundedstringhelper_ulonglong)
{
    m_var_map_inneraliasboundedstringhelper_ulonglong = _var_map_inneraliasboundedstringhelper_ulonglong;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_ulonglong
 * @param _var_map_inneraliasboundedstringhelper_ulonglong New value to be moved in member var_map_inneraliasboundedstringhelper_ulonglong
 */
void MapInnerAliasBoundedStringHelperULongLong::var_map_inneraliasboundedstringhelper_ulonglong(
        std::map<Inner_alias_bounded_string_helper, uint64_t>&& _var_map_inneraliasboundedstringhelper_ulonglong)
{
    m_var_map_inneraliasboundedstringhelper_ulonglong = std::move(_var_map_inneraliasboundedstringhelper_ulonglong);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_ulonglong
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_ulonglong
 */
const std::map<Inner_alias_bounded_string_helper, uint64_t>& MapInnerAliasBoundedStringHelperULongLong::var_map_inneraliasboundedstringhelper_ulonglong() const
{
    return m_var_map_inneraliasboundedstringhelper_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_ulonglong
 * @return Reference to member var_map_inneraliasboundedstringhelper_ulonglong
 */
std::map<Inner_alias_bounded_string_helper, uint64_t>& MapInnerAliasBoundedStringHelperULongLong::var_map_inneraliasboundedstringhelper_ulonglong()
{
    return m_var_map_inneraliasboundedstringhelper_ulonglong;
}


size_t MapInnerAliasBoundedStringHelperULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperULongLong_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperULongLong::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperFloat::MapInnerAliasBoundedStringHelperFloat()
{
    // map<Inner_alias_bounded_string_helper, float> m_var_map_inneraliasboundedstringhelper_float


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperFloat::~MapInnerAliasBoundedStringHelperFloat()
{
}

MapInnerAliasBoundedStringHelperFloat::MapInnerAliasBoundedStringHelperFloat(
        const MapInnerAliasBoundedStringHelperFloat& x)
{
    m_var_map_inneraliasboundedstringhelper_float = x.m_var_map_inneraliasboundedstringhelper_float;
}

MapInnerAliasBoundedStringHelperFloat::MapInnerAliasBoundedStringHelperFloat(
        MapInnerAliasBoundedStringHelperFloat&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_float = std::move(x.m_var_map_inneraliasboundedstringhelper_float);
}

MapInnerAliasBoundedStringHelperFloat& MapInnerAliasBoundedStringHelperFloat::operator =(
        const MapInnerAliasBoundedStringHelperFloat& x)
{

    m_var_map_inneraliasboundedstringhelper_float = x.m_var_map_inneraliasboundedstringhelper_float;

    return *this;
}

MapInnerAliasBoundedStringHelperFloat& MapInnerAliasBoundedStringHelperFloat::operator =(
        MapInnerAliasBoundedStringHelperFloat&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_float = std::move(x.m_var_map_inneraliasboundedstringhelper_float);

    return *this;
}

bool MapInnerAliasBoundedStringHelperFloat::operator ==(
        const MapInnerAliasBoundedStringHelperFloat& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_float == x.m_var_map_inneraliasboundedstringhelper_float);
}

bool MapInnerAliasBoundedStringHelperFloat::operator !=(
        const MapInnerAliasBoundedStringHelperFloat& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperFloat_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperFloat::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_float())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_float.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_float)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_float.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            float value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_float[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_float
 * @param _var_map_inneraliasboundedstringhelper_float New value to be copied in member var_map_inneraliasboundedstringhelper_float
 */
void MapInnerAliasBoundedStringHelperFloat::var_map_inneraliasboundedstringhelper_float(
        const std::map<Inner_alias_bounded_string_helper, float>& _var_map_inneraliasboundedstringhelper_float)
{
    m_var_map_inneraliasboundedstringhelper_float = _var_map_inneraliasboundedstringhelper_float;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_float
 * @param _var_map_inneraliasboundedstringhelper_float New value to be moved in member var_map_inneraliasboundedstringhelper_float
 */
void MapInnerAliasBoundedStringHelperFloat::var_map_inneraliasboundedstringhelper_float(
        std::map<Inner_alias_bounded_string_helper, float>&& _var_map_inneraliasboundedstringhelper_float)
{
    m_var_map_inneraliasboundedstringhelper_float = std::move(_var_map_inneraliasboundedstringhelper_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_float
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_float
 */
const std::map<Inner_alias_bounded_string_helper, float>& MapInnerAliasBoundedStringHelperFloat::var_map_inneraliasboundedstringhelper_float() const
{
    return m_var_map_inneraliasboundedstringhelper_float;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_float
 * @return Reference to member var_map_inneraliasboundedstringhelper_float
 */
std::map<Inner_alias_bounded_string_helper, float>& MapInnerAliasBoundedStringHelperFloat::var_map_inneraliasboundedstringhelper_float()
{
    return m_var_map_inneraliasboundedstringhelper_float;
}


size_t MapInnerAliasBoundedStringHelperFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperFloat_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperFloat::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperDouble::MapInnerAliasBoundedStringHelperDouble()
{
    // map<Inner_alias_bounded_string_helper, double> m_var_map_inneraliasboundedstringhelper_double


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperDouble::~MapInnerAliasBoundedStringHelperDouble()
{
}

MapInnerAliasBoundedStringHelperDouble::MapInnerAliasBoundedStringHelperDouble(
        const MapInnerAliasBoundedStringHelperDouble& x)
{
    m_var_map_inneraliasboundedstringhelper_double = x.m_var_map_inneraliasboundedstringhelper_double;
}

MapInnerAliasBoundedStringHelperDouble::MapInnerAliasBoundedStringHelperDouble(
        MapInnerAliasBoundedStringHelperDouble&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_double = std::move(x.m_var_map_inneraliasboundedstringhelper_double);
}

MapInnerAliasBoundedStringHelperDouble& MapInnerAliasBoundedStringHelperDouble::operator =(
        const MapInnerAliasBoundedStringHelperDouble& x)
{

    m_var_map_inneraliasboundedstringhelper_double = x.m_var_map_inneraliasboundedstringhelper_double;

    return *this;
}

MapInnerAliasBoundedStringHelperDouble& MapInnerAliasBoundedStringHelperDouble::operator =(
        MapInnerAliasBoundedStringHelperDouble&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_double = std::move(x.m_var_map_inneraliasboundedstringhelper_double);

    return *this;
}

bool MapInnerAliasBoundedStringHelperDouble::operator ==(
        const MapInnerAliasBoundedStringHelperDouble& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_double == x.m_var_map_inneraliasboundedstringhelper_double);
}

bool MapInnerAliasBoundedStringHelperDouble::operator !=(
        const MapInnerAliasBoundedStringHelperDouble& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperDouble_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperDouble::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_double())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_double.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_double)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_double.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            double value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_double[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_double
 * @param _var_map_inneraliasboundedstringhelper_double New value to be copied in member var_map_inneraliasboundedstringhelper_double
 */
void MapInnerAliasBoundedStringHelperDouble::var_map_inneraliasboundedstringhelper_double(
        const std::map<Inner_alias_bounded_string_helper, double>& _var_map_inneraliasboundedstringhelper_double)
{
    m_var_map_inneraliasboundedstringhelper_double = _var_map_inneraliasboundedstringhelper_double;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_double
 * @param _var_map_inneraliasboundedstringhelper_double New value to be moved in member var_map_inneraliasboundedstringhelper_double
 */
void MapInnerAliasBoundedStringHelperDouble::var_map_inneraliasboundedstringhelper_double(
        std::map<Inner_alias_bounded_string_helper, double>&& _var_map_inneraliasboundedstringhelper_double)
{
    m_var_map_inneraliasboundedstringhelper_double = std::move(_var_map_inneraliasboundedstringhelper_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_double
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_double
 */
const std::map<Inner_alias_bounded_string_helper, double>& MapInnerAliasBoundedStringHelperDouble::var_map_inneraliasboundedstringhelper_double() const
{
    return m_var_map_inneraliasboundedstringhelper_double;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_double
 * @return Reference to member var_map_inneraliasboundedstringhelper_double
 */
std::map<Inner_alias_bounded_string_helper, double>& MapInnerAliasBoundedStringHelperDouble::var_map_inneraliasboundedstringhelper_double()
{
    return m_var_map_inneraliasboundedstringhelper_double;
}


size_t MapInnerAliasBoundedStringHelperDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperDouble_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperDouble::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperLongDouble::MapInnerAliasBoundedStringHelperLongDouble()
{
    // map<Inner_alias_bounded_string_helper, long double> m_var_map_inneraliasboundedstringhelper_longdouble


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperLongDouble::~MapInnerAliasBoundedStringHelperLongDouble()
{
}

MapInnerAliasBoundedStringHelperLongDouble::MapInnerAliasBoundedStringHelperLongDouble(
        const MapInnerAliasBoundedStringHelperLongDouble& x)
{
    m_var_map_inneraliasboundedstringhelper_longdouble = x.m_var_map_inneraliasboundedstringhelper_longdouble;
}

MapInnerAliasBoundedStringHelperLongDouble::MapInnerAliasBoundedStringHelperLongDouble(
        MapInnerAliasBoundedStringHelperLongDouble&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_longdouble = std::move(x.m_var_map_inneraliasboundedstringhelper_longdouble);
}

MapInnerAliasBoundedStringHelperLongDouble& MapInnerAliasBoundedStringHelperLongDouble::operator =(
        const MapInnerAliasBoundedStringHelperLongDouble& x)
{

    m_var_map_inneraliasboundedstringhelper_longdouble = x.m_var_map_inneraliasboundedstringhelper_longdouble;

    return *this;
}

MapInnerAliasBoundedStringHelperLongDouble& MapInnerAliasBoundedStringHelperLongDouble::operator =(
        MapInnerAliasBoundedStringHelperLongDouble&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_longdouble = std::move(x.m_var_map_inneraliasboundedstringhelper_longdouble);

    return *this;
}

bool MapInnerAliasBoundedStringHelperLongDouble::operator ==(
        const MapInnerAliasBoundedStringHelperLongDouble& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_longdouble == x.m_var_map_inneraliasboundedstringhelper_longdouble);
}

bool MapInnerAliasBoundedStringHelperLongDouble::operator !=(
        const MapInnerAliasBoundedStringHelperLongDouble& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperLongDouble_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperLongDouble::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_longdouble())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_longdouble.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_longdouble)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_longdouble.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            long double value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_longdouble[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_longdouble
 * @param _var_map_inneraliasboundedstringhelper_longdouble New value to be copied in member var_map_inneraliasboundedstringhelper_longdouble
 */
void MapInnerAliasBoundedStringHelperLongDouble::var_map_inneraliasboundedstringhelper_longdouble(
        const std::map<Inner_alias_bounded_string_helper, long double>& _var_map_inneraliasboundedstringhelper_longdouble)
{
    m_var_map_inneraliasboundedstringhelper_longdouble = _var_map_inneraliasboundedstringhelper_longdouble;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_longdouble
 * @param _var_map_inneraliasboundedstringhelper_longdouble New value to be moved in member var_map_inneraliasboundedstringhelper_longdouble
 */
void MapInnerAliasBoundedStringHelperLongDouble::var_map_inneraliasboundedstringhelper_longdouble(
        std::map<Inner_alias_bounded_string_helper, long double>&& _var_map_inneraliasboundedstringhelper_longdouble)
{
    m_var_map_inneraliasboundedstringhelper_longdouble = std::move(_var_map_inneraliasboundedstringhelper_longdouble);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_longdouble
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_longdouble
 */
const std::map<Inner_alias_bounded_string_helper, long double>& MapInnerAliasBoundedStringHelperLongDouble::var_map_inneraliasboundedstringhelper_longdouble() const
{
    return m_var_map_inneraliasboundedstringhelper_longdouble;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_longdouble
 * @return Reference to member var_map_inneraliasboundedstringhelper_longdouble
 */
std::map<Inner_alias_bounded_string_helper, long double>& MapInnerAliasBoundedStringHelperLongDouble::var_map_inneraliasboundedstringhelper_longdouble()
{
    return m_var_map_inneraliasboundedstringhelper_longdouble;
}


size_t MapInnerAliasBoundedStringHelperLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperLongDouble_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperLongDouble::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperBoolean::MapInnerAliasBoundedStringHelperBoolean()
{
    // map<Inner_alias_bounded_string_helper, boolean> m_var_map_inneraliasboundedstringhelper_boolean


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperBoolean::~MapInnerAliasBoundedStringHelperBoolean()
{
}

MapInnerAliasBoundedStringHelperBoolean::MapInnerAliasBoundedStringHelperBoolean(
        const MapInnerAliasBoundedStringHelperBoolean& x)
{
    m_var_map_inneraliasboundedstringhelper_boolean = x.m_var_map_inneraliasboundedstringhelper_boolean;
}

MapInnerAliasBoundedStringHelperBoolean::MapInnerAliasBoundedStringHelperBoolean(
        MapInnerAliasBoundedStringHelperBoolean&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_boolean = std::move(x.m_var_map_inneraliasboundedstringhelper_boolean);
}

MapInnerAliasBoundedStringHelperBoolean& MapInnerAliasBoundedStringHelperBoolean::operator =(
        const MapInnerAliasBoundedStringHelperBoolean& x)
{

    m_var_map_inneraliasboundedstringhelper_boolean = x.m_var_map_inneraliasboundedstringhelper_boolean;

    return *this;
}

MapInnerAliasBoundedStringHelperBoolean& MapInnerAliasBoundedStringHelperBoolean::operator =(
        MapInnerAliasBoundedStringHelperBoolean&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_boolean = std::move(x.m_var_map_inneraliasboundedstringhelper_boolean);

    return *this;
}

bool MapInnerAliasBoundedStringHelperBoolean::operator ==(
        const MapInnerAliasBoundedStringHelperBoolean& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_boolean == x.m_var_map_inneraliasboundedstringhelper_boolean);
}

bool MapInnerAliasBoundedStringHelperBoolean::operator !=(
        const MapInnerAliasBoundedStringHelperBoolean& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperBoolean_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperBoolean::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_boolean())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_boolean.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_boolean)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_boolean.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            bool value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_boolean[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_boolean
 * @param _var_map_inneraliasboundedstringhelper_boolean New value to be copied in member var_map_inneraliasboundedstringhelper_boolean
 */
void MapInnerAliasBoundedStringHelperBoolean::var_map_inneraliasboundedstringhelper_boolean(
        const std::map<Inner_alias_bounded_string_helper, bool>& _var_map_inneraliasboundedstringhelper_boolean)
{
    m_var_map_inneraliasboundedstringhelper_boolean = _var_map_inneraliasboundedstringhelper_boolean;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_boolean
 * @param _var_map_inneraliasboundedstringhelper_boolean New value to be moved in member var_map_inneraliasboundedstringhelper_boolean
 */
void MapInnerAliasBoundedStringHelperBoolean::var_map_inneraliasboundedstringhelper_boolean(
        std::map<Inner_alias_bounded_string_helper, bool>&& _var_map_inneraliasboundedstringhelper_boolean)
{
    m_var_map_inneraliasboundedstringhelper_boolean = std::move(_var_map_inneraliasboundedstringhelper_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_boolean
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_boolean
 */
const std::map<Inner_alias_bounded_string_helper, bool>& MapInnerAliasBoundedStringHelperBoolean::var_map_inneraliasboundedstringhelper_boolean() const
{
    return m_var_map_inneraliasboundedstringhelper_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_boolean
 * @return Reference to member var_map_inneraliasboundedstringhelper_boolean
 */
std::map<Inner_alias_bounded_string_helper, bool>& MapInnerAliasBoundedStringHelperBoolean::var_map_inneraliasboundedstringhelper_boolean()
{
    return m_var_map_inneraliasboundedstringhelper_boolean;
}


size_t MapInnerAliasBoundedStringHelperBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperBoolean_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperBoolean::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperOctet::MapInnerAliasBoundedStringHelperOctet()
{
    // map<Inner_alias_bounded_string_helper, octet> m_var_map_inneraliasboundedstringhelper_octet


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperOctet::~MapInnerAliasBoundedStringHelperOctet()
{
}

MapInnerAliasBoundedStringHelperOctet::MapInnerAliasBoundedStringHelperOctet(
        const MapInnerAliasBoundedStringHelperOctet& x)
{
    m_var_map_inneraliasboundedstringhelper_octet = x.m_var_map_inneraliasboundedstringhelper_octet;
}

MapInnerAliasBoundedStringHelperOctet::MapInnerAliasBoundedStringHelperOctet(
        MapInnerAliasBoundedStringHelperOctet&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_octet = std::move(x.m_var_map_inneraliasboundedstringhelper_octet);
}

MapInnerAliasBoundedStringHelperOctet& MapInnerAliasBoundedStringHelperOctet::operator =(
        const MapInnerAliasBoundedStringHelperOctet& x)
{

    m_var_map_inneraliasboundedstringhelper_octet = x.m_var_map_inneraliasboundedstringhelper_octet;

    return *this;
}

MapInnerAliasBoundedStringHelperOctet& MapInnerAliasBoundedStringHelperOctet::operator =(
        MapInnerAliasBoundedStringHelperOctet&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_octet = std::move(x.m_var_map_inneraliasboundedstringhelper_octet);

    return *this;
}

bool MapInnerAliasBoundedStringHelperOctet::operator ==(
        const MapInnerAliasBoundedStringHelperOctet& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_octet == x.m_var_map_inneraliasboundedstringhelper_octet);
}

bool MapInnerAliasBoundedStringHelperOctet::operator !=(
        const MapInnerAliasBoundedStringHelperOctet& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperOctet_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperOctet::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_octet())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_octet.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_octet)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_octet.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            uint8_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_octet[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_octet
 * @param _var_map_inneraliasboundedstringhelper_octet New value to be copied in member var_map_inneraliasboundedstringhelper_octet
 */
void MapInnerAliasBoundedStringHelperOctet::var_map_inneraliasboundedstringhelper_octet(
        const std::map<Inner_alias_bounded_string_helper, uint8_t>& _var_map_inneraliasboundedstringhelper_octet)
{
    m_var_map_inneraliasboundedstringhelper_octet = _var_map_inneraliasboundedstringhelper_octet;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_octet
 * @param _var_map_inneraliasboundedstringhelper_octet New value to be moved in member var_map_inneraliasboundedstringhelper_octet
 */
void MapInnerAliasBoundedStringHelperOctet::var_map_inneraliasboundedstringhelper_octet(
        std::map<Inner_alias_bounded_string_helper, uint8_t>&& _var_map_inneraliasboundedstringhelper_octet)
{
    m_var_map_inneraliasboundedstringhelper_octet = std::move(_var_map_inneraliasboundedstringhelper_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_octet
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_octet
 */
const std::map<Inner_alias_bounded_string_helper, uint8_t>& MapInnerAliasBoundedStringHelperOctet::var_map_inneraliasboundedstringhelper_octet() const
{
    return m_var_map_inneraliasboundedstringhelper_octet;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_octet
 * @return Reference to member var_map_inneraliasboundedstringhelper_octet
 */
std::map<Inner_alias_bounded_string_helper, uint8_t>& MapInnerAliasBoundedStringHelperOctet::var_map_inneraliasboundedstringhelper_octet()
{
    return m_var_map_inneraliasboundedstringhelper_octet;
}


size_t MapInnerAliasBoundedStringHelperOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperOctet_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperOctet::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperChar::MapInnerAliasBoundedStringHelperChar()
{
    // map<Inner_alias_bounded_string_helper, char> m_var_map_inneraliasboundedstringhelper_char


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperChar::~MapInnerAliasBoundedStringHelperChar()
{
}

MapInnerAliasBoundedStringHelperChar::MapInnerAliasBoundedStringHelperChar(
        const MapInnerAliasBoundedStringHelperChar& x)
{
    m_var_map_inneraliasboundedstringhelper_char = x.m_var_map_inneraliasboundedstringhelper_char;
}

MapInnerAliasBoundedStringHelperChar::MapInnerAliasBoundedStringHelperChar(
        MapInnerAliasBoundedStringHelperChar&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_char = std::move(x.m_var_map_inneraliasboundedstringhelper_char);
}

MapInnerAliasBoundedStringHelperChar& MapInnerAliasBoundedStringHelperChar::operator =(
        const MapInnerAliasBoundedStringHelperChar& x)
{

    m_var_map_inneraliasboundedstringhelper_char = x.m_var_map_inneraliasboundedstringhelper_char;

    return *this;
}

MapInnerAliasBoundedStringHelperChar& MapInnerAliasBoundedStringHelperChar::operator =(
        MapInnerAliasBoundedStringHelperChar&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_char = std::move(x.m_var_map_inneraliasboundedstringhelper_char);

    return *this;
}

bool MapInnerAliasBoundedStringHelperChar::operator ==(
        const MapInnerAliasBoundedStringHelperChar& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_char == x.m_var_map_inneraliasboundedstringhelper_char);
}

bool MapInnerAliasBoundedStringHelperChar::operator !=(
        const MapInnerAliasBoundedStringHelperChar& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperChar_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperChar::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_char())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_char.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_char)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_char.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            char value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_char[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_char
 * @param _var_map_inneraliasboundedstringhelper_char New value to be copied in member var_map_inneraliasboundedstringhelper_char
 */
void MapInnerAliasBoundedStringHelperChar::var_map_inneraliasboundedstringhelper_char(
        const std::map<Inner_alias_bounded_string_helper, char>& _var_map_inneraliasboundedstringhelper_char)
{
    m_var_map_inneraliasboundedstringhelper_char = _var_map_inneraliasboundedstringhelper_char;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_char
 * @param _var_map_inneraliasboundedstringhelper_char New value to be moved in member var_map_inneraliasboundedstringhelper_char
 */
void MapInnerAliasBoundedStringHelperChar::var_map_inneraliasboundedstringhelper_char(
        std::map<Inner_alias_bounded_string_helper, char>&& _var_map_inneraliasboundedstringhelper_char)
{
    m_var_map_inneraliasboundedstringhelper_char = std::move(_var_map_inneraliasboundedstringhelper_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_char
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_char
 */
const std::map<Inner_alias_bounded_string_helper, char>& MapInnerAliasBoundedStringHelperChar::var_map_inneraliasboundedstringhelper_char() const
{
    return m_var_map_inneraliasboundedstringhelper_char;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_char
 * @return Reference to member var_map_inneraliasboundedstringhelper_char
 */
std::map<Inner_alias_bounded_string_helper, char>& MapInnerAliasBoundedStringHelperChar::var_map_inneraliasboundedstringhelper_char()
{
    return m_var_map_inneraliasboundedstringhelper_char;
}


size_t MapInnerAliasBoundedStringHelperChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperChar_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperChar::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperWChar::MapInnerAliasBoundedStringHelperWChar()
{
    // map<Inner_alias_bounded_string_helper, wchar> m_var_map_inneraliasboundedstringhelper_wchar


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperWChar::~MapInnerAliasBoundedStringHelperWChar()
{
}

MapInnerAliasBoundedStringHelperWChar::MapInnerAliasBoundedStringHelperWChar(
        const MapInnerAliasBoundedStringHelperWChar& x)
{
    m_var_map_inneraliasboundedstringhelper_wchar = x.m_var_map_inneraliasboundedstringhelper_wchar;
}

MapInnerAliasBoundedStringHelperWChar::MapInnerAliasBoundedStringHelperWChar(
        MapInnerAliasBoundedStringHelperWChar&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_wchar = std::move(x.m_var_map_inneraliasboundedstringhelper_wchar);
}

MapInnerAliasBoundedStringHelperWChar& MapInnerAliasBoundedStringHelperWChar::operator =(
        const MapInnerAliasBoundedStringHelperWChar& x)
{

    m_var_map_inneraliasboundedstringhelper_wchar = x.m_var_map_inneraliasboundedstringhelper_wchar;

    return *this;
}

MapInnerAliasBoundedStringHelperWChar& MapInnerAliasBoundedStringHelperWChar::operator =(
        MapInnerAliasBoundedStringHelperWChar&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_wchar = std::move(x.m_var_map_inneraliasboundedstringhelper_wchar);

    return *this;
}

bool MapInnerAliasBoundedStringHelperWChar::operator ==(
        const MapInnerAliasBoundedStringHelperWChar& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_wchar == x.m_var_map_inneraliasboundedstringhelper_wchar);
}

bool MapInnerAliasBoundedStringHelperWChar::operator !=(
        const MapInnerAliasBoundedStringHelperWChar& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperWChar_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperWChar::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_wchar())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_wchar.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_wchar)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_wchar.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            wchar_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_wchar[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_wchar
 * @param _var_map_inneraliasboundedstringhelper_wchar New value to be copied in member var_map_inneraliasboundedstringhelper_wchar
 */
void MapInnerAliasBoundedStringHelperWChar::var_map_inneraliasboundedstringhelper_wchar(
        const std::map<Inner_alias_bounded_string_helper, wchar_t>& _var_map_inneraliasboundedstringhelper_wchar)
{
    m_var_map_inneraliasboundedstringhelper_wchar = _var_map_inneraliasboundedstringhelper_wchar;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_wchar
 * @param _var_map_inneraliasboundedstringhelper_wchar New value to be moved in member var_map_inneraliasboundedstringhelper_wchar
 */
void MapInnerAliasBoundedStringHelperWChar::var_map_inneraliasboundedstringhelper_wchar(
        std::map<Inner_alias_bounded_string_helper, wchar_t>&& _var_map_inneraliasboundedstringhelper_wchar)
{
    m_var_map_inneraliasboundedstringhelper_wchar = std::move(_var_map_inneraliasboundedstringhelper_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_wchar
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_wchar
 */
const std::map<Inner_alias_bounded_string_helper, wchar_t>& MapInnerAliasBoundedStringHelperWChar::var_map_inneraliasboundedstringhelper_wchar() const
{
    return m_var_map_inneraliasboundedstringhelper_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_wchar
 * @return Reference to member var_map_inneraliasboundedstringhelper_wchar
 */
std::map<Inner_alias_bounded_string_helper, wchar_t>& MapInnerAliasBoundedStringHelperWChar::var_map_inneraliasboundedstringhelper_wchar()
{
    return m_var_map_inneraliasboundedstringhelper_wchar;
}


size_t MapInnerAliasBoundedStringHelperWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperWChar_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperWChar::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperString::MapInnerAliasBoundedStringHelperString()
{
    // map<Inner_alias_bounded_string_helper, string> m_var_map_inneraliasboundedstringhelper_string


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperString::~MapInnerAliasBoundedStringHelperString()
{
}

MapInnerAliasBoundedStringHelperString::MapInnerAliasBoundedStringHelperString(
        const MapInnerAliasBoundedStringHelperString& x)
{
    m_var_map_inneraliasboundedstringhelper_string = x.m_var_map_inneraliasboundedstringhelper_string;
}

MapInnerAliasBoundedStringHelperString::MapInnerAliasBoundedStringHelperString(
        MapInnerAliasBoundedStringHelperString&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_string = std::move(x.m_var_map_inneraliasboundedstringhelper_string);
}

MapInnerAliasBoundedStringHelperString& MapInnerAliasBoundedStringHelperString::operator =(
        const MapInnerAliasBoundedStringHelperString& x)
{

    m_var_map_inneraliasboundedstringhelper_string = x.m_var_map_inneraliasboundedstringhelper_string;

    return *this;
}

MapInnerAliasBoundedStringHelperString& MapInnerAliasBoundedStringHelperString::operator =(
        MapInnerAliasBoundedStringHelperString&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_string = std::move(x.m_var_map_inneraliasboundedstringhelper_string);

    return *this;
}

bool MapInnerAliasBoundedStringHelperString::operator ==(
        const MapInnerAliasBoundedStringHelperString& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_string == x.m_var_map_inneraliasboundedstringhelper_string);
}

bool MapInnerAliasBoundedStringHelperString::operator !=(
        const MapInnerAliasBoundedStringHelperString& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperString_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperString::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_string())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_string.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_string)
    {
        scdr << pair.first.c_str();
        scdr << pair.second.c_str();
    }}

void MapInnerAliasBoundedStringHelperString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            std::string value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_string[key.c_str()] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_string
 * @param _var_map_inneraliasboundedstringhelper_string New value to be copied in member var_map_inneraliasboundedstringhelper_string
 */
void MapInnerAliasBoundedStringHelperString::var_map_inneraliasboundedstringhelper_string(
        const std::map<Inner_alias_bounded_string_helper, std::string>& _var_map_inneraliasboundedstringhelper_string)
{
    m_var_map_inneraliasboundedstringhelper_string = _var_map_inneraliasboundedstringhelper_string;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_string
 * @param _var_map_inneraliasboundedstringhelper_string New value to be moved in member var_map_inneraliasboundedstringhelper_string
 */
void MapInnerAliasBoundedStringHelperString::var_map_inneraliasboundedstringhelper_string(
        std::map<Inner_alias_bounded_string_helper, std::string>&& _var_map_inneraliasboundedstringhelper_string)
{
    m_var_map_inneraliasboundedstringhelper_string = std::move(_var_map_inneraliasboundedstringhelper_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_string
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_string
 */
const std::map<Inner_alias_bounded_string_helper, std::string>& MapInnerAliasBoundedStringHelperString::var_map_inneraliasboundedstringhelper_string() const
{
    return m_var_map_inneraliasboundedstringhelper_string;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_string
 * @return Reference to member var_map_inneraliasboundedstringhelper_string
 */
std::map<Inner_alias_bounded_string_helper, std::string>& MapInnerAliasBoundedStringHelperString::var_map_inneraliasboundedstringhelper_string()
{
    return m_var_map_inneraliasboundedstringhelper_string;
}


size_t MapInnerAliasBoundedStringHelperString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperString_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperString::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperWString::MapInnerAliasBoundedStringHelperWString()
{
    // map<Inner_alias_bounded_string_helper, wstring> m_var_map_inneraliasboundedstringhelper_wstring


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperWString::~MapInnerAliasBoundedStringHelperWString()
{
}

MapInnerAliasBoundedStringHelperWString::MapInnerAliasBoundedStringHelperWString(
        const MapInnerAliasBoundedStringHelperWString& x)
{
    m_var_map_inneraliasboundedstringhelper_wstring = x.m_var_map_inneraliasboundedstringhelper_wstring;
}

MapInnerAliasBoundedStringHelperWString::MapInnerAliasBoundedStringHelperWString(
        MapInnerAliasBoundedStringHelperWString&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_wstring = std::move(x.m_var_map_inneraliasboundedstringhelper_wstring);
}

MapInnerAliasBoundedStringHelperWString& MapInnerAliasBoundedStringHelperWString::operator =(
        const MapInnerAliasBoundedStringHelperWString& x)
{

    m_var_map_inneraliasboundedstringhelper_wstring = x.m_var_map_inneraliasboundedstringhelper_wstring;

    return *this;
}

MapInnerAliasBoundedStringHelperWString& MapInnerAliasBoundedStringHelperWString::operator =(
        MapInnerAliasBoundedStringHelperWString&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_wstring = std::move(x.m_var_map_inneraliasboundedstringhelper_wstring);

    return *this;
}

bool MapInnerAliasBoundedStringHelperWString::operator ==(
        const MapInnerAliasBoundedStringHelperWString& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_wstring == x.m_var_map_inneraliasboundedstringhelper_wstring);
}

bool MapInnerAliasBoundedStringHelperWString::operator !=(
        const MapInnerAliasBoundedStringHelperWString& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperWString_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperWString::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_wstring())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_wstring.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_wstring)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;
    }}

void MapInnerAliasBoundedStringHelperWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            std::wstring value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_wstring[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_wstring
 * @param _var_map_inneraliasboundedstringhelper_wstring New value to be copied in member var_map_inneraliasboundedstringhelper_wstring
 */
void MapInnerAliasBoundedStringHelperWString::var_map_inneraliasboundedstringhelper_wstring(
        const std::map<Inner_alias_bounded_string_helper, std::wstring>& _var_map_inneraliasboundedstringhelper_wstring)
{
    m_var_map_inneraliasboundedstringhelper_wstring = _var_map_inneraliasboundedstringhelper_wstring;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_wstring
 * @param _var_map_inneraliasboundedstringhelper_wstring New value to be moved in member var_map_inneraliasboundedstringhelper_wstring
 */
void MapInnerAliasBoundedStringHelperWString::var_map_inneraliasboundedstringhelper_wstring(
        std::map<Inner_alias_bounded_string_helper, std::wstring>&& _var_map_inneraliasboundedstringhelper_wstring)
{
    m_var_map_inneraliasboundedstringhelper_wstring = std::move(_var_map_inneraliasboundedstringhelper_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_wstring
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_wstring
 */
const std::map<Inner_alias_bounded_string_helper, std::wstring>& MapInnerAliasBoundedStringHelperWString::var_map_inneraliasboundedstringhelper_wstring() const
{
    return m_var_map_inneraliasboundedstringhelper_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_wstring
 * @return Reference to member var_map_inneraliasboundedstringhelper_wstring
 */
std::map<Inner_alias_bounded_string_helper, std::wstring>& MapInnerAliasBoundedStringHelperWString::var_map_inneraliasboundedstringhelper_wstring()
{
    return m_var_map_inneraliasboundedstringhelper_wstring;
}


size_t MapInnerAliasBoundedStringHelperWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperWString_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperWString::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper()
{
    // map<Inner_alias_bounded_string_helper, Inner_alias_bounded_string_helper> m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::~MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper()
{
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper;
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper(
        MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper& MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper& MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper == x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);
}

bool MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second.c_str();
    }}

void MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            std::string value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper[key.c_str()] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper New value to be copied in member var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper(
        const std::map<Inner_alias_bounded_string_helper, Inner_alias_bounded_string_helper>& _var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = _var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper New value to be moved in member var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper(
        std::map<Inner_alias_bounded_string_helper, Inner_alias_bounded_string_helper>&& _var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper = std::move(_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper
 */
const std::map<Inner_alias_bounded_string_helper, Inner_alias_bounded_string_helper>& MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper() const
{
    return m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper
 */
std::map<Inner_alias_bounded_string_helper, Inner_alias_bounded_string_helper>& MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper()
{
    return m_var_map_inneraliasboundedstringhelper_inneraliasboundedstringhelper;
}


size_t MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper()
{
    // map<Inner_alias_bounded_string_helper, Inner_alias_bounded_wstring_helper> m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::~MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper()
{
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper;
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper(
        MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper& MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper& MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper == x.m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);
}

bool MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;
    }}

void MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            std::wstring value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper New value to be copied in member var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper(
        const std::map<Inner_alias_bounded_string_helper, Inner_alias_bounded_wstring_helper>& _var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = _var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper New value to be moved in member var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper(
        std::map<Inner_alias_bounded_string_helper, Inner_alias_bounded_wstring_helper>&& _var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper = std::move(_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper
 */
const std::map<Inner_alias_bounded_string_helper, Inner_alias_bounded_wstring_helper>& MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper() const
{
    return m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper
 */
std::map<Inner_alias_bounded_string_helper, Inner_alias_bounded_wstring_helper>& MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper()
{
    return m_var_map_inneraliasboundedstringhelper_inneraliasboundedwstringhelper;
}


size_t MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerEnumHelper::MapInnerAliasBoundedStringHelperInnerEnumHelper()
{
    // map<Inner_alias_bounded_string_helper, InnerEnumHelper> m_var_map_inneraliasboundedstringhelper_innerenumhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerEnumHelper::~MapInnerAliasBoundedStringHelperInnerEnumHelper()
{
}

MapInnerAliasBoundedStringHelperInnerEnumHelper::MapInnerAliasBoundedStringHelperInnerEnumHelper(
        const MapInnerAliasBoundedStringHelperInnerEnumHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_innerenumhelper = x.m_var_map_inneraliasboundedstringhelper_innerenumhelper;
}

MapInnerAliasBoundedStringHelperInnerEnumHelper::MapInnerAliasBoundedStringHelperInnerEnumHelper(
        MapInnerAliasBoundedStringHelperInnerEnumHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_innerenumhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerenumhelper);
}

MapInnerAliasBoundedStringHelperInnerEnumHelper& MapInnerAliasBoundedStringHelperInnerEnumHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerEnumHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_innerenumhelper = x.m_var_map_inneraliasboundedstringhelper_innerenumhelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerEnumHelper& MapInnerAliasBoundedStringHelperInnerEnumHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerEnumHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_innerenumhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerenumhelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerEnumHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerEnumHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_innerenumhelper == x.m_var_map_inneraliasboundedstringhelper_innerenumhelper);
}

bool MapInnerAliasBoundedStringHelperInnerEnumHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerEnumHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerEnumHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_innerenumhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_innerenumhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_innerenumhelper)
    {
        scdr << pair.first.c_str();
        scdr << static_cast<uint32_t>(pair.second);
    }}

void MapInnerAliasBoundedStringHelperInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_innerenumhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        std::string key;
            std::string aux;
            dcdr >> aux;
            key = aux.c_str();


        uint32_t value;
        dcdr >> value;
        m_var_map_inneraliasboundedstringhelper_innerenumhelper[key.c_str()] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_innerenumhelper
 * @param _var_map_inneraliasboundedstringhelper_innerenumhelper New value to be copied in member var_map_inneraliasboundedstringhelper_innerenumhelper
 */
void MapInnerAliasBoundedStringHelperInnerEnumHelper::var_map_inneraliasboundedstringhelper_innerenumhelper(
        const std::map<Inner_alias_bounded_string_helper, InnerEnumHelper>& _var_map_inneraliasboundedstringhelper_innerenumhelper)
{
    m_var_map_inneraliasboundedstringhelper_innerenumhelper = _var_map_inneraliasboundedstringhelper_innerenumhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_innerenumhelper
 * @param _var_map_inneraliasboundedstringhelper_innerenumhelper New value to be moved in member var_map_inneraliasboundedstringhelper_innerenumhelper
 */
void MapInnerAliasBoundedStringHelperInnerEnumHelper::var_map_inneraliasboundedstringhelper_innerenumhelper(
        std::map<Inner_alias_bounded_string_helper, InnerEnumHelper>&& _var_map_inneraliasboundedstringhelper_innerenumhelper)
{
    m_var_map_inneraliasboundedstringhelper_innerenumhelper = std::move(_var_map_inneraliasboundedstringhelper_innerenumhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_innerenumhelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_innerenumhelper
 */
const std::map<Inner_alias_bounded_string_helper, InnerEnumHelper>& MapInnerAliasBoundedStringHelperInnerEnumHelper::var_map_inneraliasboundedstringhelper_innerenumhelper() const
{
    return m_var_map_inneraliasboundedstringhelper_innerenumhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_innerenumhelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_innerenumhelper
 */
std::map<Inner_alias_bounded_string_helper, InnerEnumHelper>& MapInnerAliasBoundedStringHelperInnerEnumHelper::var_map_inneraliasboundedstringhelper_innerenumhelper()
{
    return m_var_map_inneraliasboundedstringhelper_innerenumhelper;
}


size_t MapInnerAliasBoundedStringHelperInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerEnumHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerBitMaskHelper::MapInnerAliasBoundedStringHelperInnerBitMaskHelper()
{
    // map<Inner_alias_bounded_string_helper, InnerBitMaskHelper> m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerBitMaskHelper::~MapInnerAliasBoundedStringHelperInnerBitMaskHelper()
{
}

MapInnerAliasBoundedStringHelperInnerBitMaskHelper::MapInnerAliasBoundedStringHelperInnerBitMaskHelper(
        const MapInnerAliasBoundedStringHelperInnerBitMaskHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = x.m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper;
}

MapInnerAliasBoundedStringHelperInnerBitMaskHelper::MapInnerAliasBoundedStringHelperInnerBitMaskHelper(
        MapInnerAliasBoundedStringHelperInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);
}

MapInnerAliasBoundedStringHelperInnerBitMaskHelper& MapInnerAliasBoundedStringHelperInnerBitMaskHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerBitMaskHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = x.m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerBitMaskHelper& MapInnerAliasBoundedStringHelperInnerBitMaskHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerBitMaskHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerBitMaskHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerBitMaskHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper == x.m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);
}

bool MapInnerAliasBoundedStringHelperInnerBitMaskHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerBitMaskHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_innerbitmaskhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper)
    {
        scdr << pair.first.c_str();
        scdr << static_cast<uint32_t>(pair.second);
    }}

void MapInnerAliasBoundedStringHelperInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        std::string key;
            std::string aux;
            dcdr >> aux;
            key = aux.c_str();


        uint32_t value;        
        dcdr >> value;        
        m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper[key.c_str()] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_innerbitmaskhelper
 * @param _var_map_inneraliasboundedstringhelper_innerbitmaskhelper New value to be copied in member var_map_inneraliasboundedstringhelper_innerbitmaskhelper
 */
void MapInnerAliasBoundedStringHelperInnerBitMaskHelper::var_map_inneraliasboundedstringhelper_innerbitmaskhelper(
        const std::map<Inner_alias_bounded_string_helper, InnerBitMaskHelper>& _var_map_inneraliasboundedstringhelper_innerbitmaskhelper)
{
    m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = _var_map_inneraliasboundedstringhelper_innerbitmaskhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_innerbitmaskhelper
 * @param _var_map_inneraliasboundedstringhelper_innerbitmaskhelper New value to be moved in member var_map_inneraliasboundedstringhelper_innerbitmaskhelper
 */
void MapInnerAliasBoundedStringHelperInnerBitMaskHelper::var_map_inneraliasboundedstringhelper_innerbitmaskhelper(
        std::map<Inner_alias_bounded_string_helper, InnerBitMaskHelper>&& _var_map_inneraliasboundedstringhelper_innerbitmaskhelper)
{
    m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper = std::move(_var_map_inneraliasboundedstringhelper_innerbitmaskhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_innerbitmaskhelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_innerbitmaskhelper
 */
const std::map<Inner_alias_bounded_string_helper, InnerBitMaskHelper>& MapInnerAliasBoundedStringHelperInnerBitMaskHelper::var_map_inneraliasboundedstringhelper_innerbitmaskhelper() const
{
    return m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_innerbitmaskhelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_innerbitmaskhelper
 */
std::map<Inner_alias_bounded_string_helper, InnerBitMaskHelper>& MapInnerAliasBoundedStringHelperInnerBitMaskHelper::var_map_inneraliasboundedstringhelper_innerbitmaskhelper()
{
    return m_var_map_inneraliasboundedstringhelper_innerbitmaskhelper;
}


size_t MapInnerAliasBoundedStringHelperInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerAliasHelper::MapInnerAliasBoundedStringHelperInnerAliasHelper()
{
    // map<Inner_alias_bounded_string_helper, InnerAliasHelper> m_var_map_inneraliasboundedstringhelper_inneraliashelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerAliasHelper::~MapInnerAliasBoundedStringHelperInnerAliasHelper()
{
}

MapInnerAliasBoundedStringHelperInnerAliasHelper::MapInnerAliasBoundedStringHelperInnerAliasHelper(
        const MapInnerAliasBoundedStringHelperInnerAliasHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_inneraliashelper = x.m_var_map_inneraliasboundedstringhelper_inneraliashelper;
}

MapInnerAliasBoundedStringHelperInnerAliasHelper::MapInnerAliasBoundedStringHelperInnerAliasHelper(
        MapInnerAliasBoundedStringHelperInnerAliasHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_inneraliashelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliashelper);
}

MapInnerAliasBoundedStringHelperInnerAliasHelper& MapInnerAliasBoundedStringHelperInnerAliasHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerAliasHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_inneraliashelper = x.m_var_map_inneraliasboundedstringhelper_inneraliashelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerAliasHelper& MapInnerAliasBoundedStringHelperInnerAliasHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerAliasHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_inneraliashelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliashelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerAliasHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerAliasHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_inneraliashelper == x.m_var_map_inneraliasboundedstringhelper_inneraliashelper);
}

bool MapInnerAliasBoundedStringHelperInnerAliasHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerAliasHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_inneraliashelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_inneraliashelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_inneraliashelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_inneraliashelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            InnerAliasHelper value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_inneraliashelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_inneraliashelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliashelper New value to be copied in member var_map_inneraliasboundedstringhelper_inneraliashelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasHelper::var_map_inneraliasboundedstringhelper_inneraliashelper(
        const std::map<Inner_alias_bounded_string_helper, InnerAliasHelper>& _var_map_inneraliasboundedstringhelper_inneraliashelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliashelper = _var_map_inneraliasboundedstringhelper_inneraliashelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_inneraliashelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliashelper New value to be moved in member var_map_inneraliasboundedstringhelper_inneraliashelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasHelper::var_map_inneraliasboundedstringhelper_inneraliashelper(
        std::map<Inner_alias_bounded_string_helper, InnerAliasHelper>&& _var_map_inneraliasboundedstringhelper_inneraliashelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliashelper = std::move(_var_map_inneraliasboundedstringhelper_inneraliashelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_inneraliashelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_inneraliashelper
 */
const std::map<Inner_alias_bounded_string_helper, InnerAliasHelper>& MapInnerAliasBoundedStringHelperInnerAliasHelper::var_map_inneraliasboundedstringhelper_inneraliashelper() const
{
    return m_var_map_inneraliasboundedstringhelper_inneraliashelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_inneraliashelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_inneraliashelper
 */
std::map<Inner_alias_bounded_string_helper, InnerAliasHelper>& MapInnerAliasBoundedStringHelperInnerAliasHelper::var_map_inneraliasboundedstringhelper_inneraliashelper()
{
    return m_var_map_inneraliasboundedstringhelper_inneraliashelper;
}


size_t MapInnerAliasBoundedStringHelperInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::MapInnerAliasBoundedStringHelperInnerAliasArrayHelper()
{
    // map<Inner_alias_bounded_string_helper, Inner_alias_array_helper> m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::~MapInnerAliasBoundedStringHelperInnerAliasArrayHelper()
{
}

MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::MapInnerAliasBoundedStringHelperInnerAliasArrayHelper(
        const MapInnerAliasBoundedStringHelperInnerAliasArrayHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = x.m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper;
}

MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::MapInnerAliasBoundedStringHelperInnerAliasArrayHelper(
        MapInnerAliasBoundedStringHelperInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);
}

MapInnerAliasBoundedStringHelperInnerAliasArrayHelper& MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerAliasArrayHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = x.m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerAliasArrayHelper& MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerAliasArrayHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper == x.m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);
}

bool MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_inneraliasarrayhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            Inner_alias_array_helper value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_inneraliasarrayhelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliasarrayhelper New value to be copied in member var_map_inneraliasboundedstringhelper_inneraliasarrayhelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::var_map_inneraliasboundedstringhelper_inneraliasarrayhelper(
        const std::map<Inner_alias_bounded_string_helper, Inner_alias_array_helper>& _var_map_inneraliasboundedstringhelper_inneraliasarrayhelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = _var_map_inneraliasboundedstringhelper_inneraliasarrayhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_inneraliasarrayhelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliasarrayhelper New value to be moved in member var_map_inneraliasboundedstringhelper_inneraliasarrayhelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::var_map_inneraliasboundedstringhelper_inneraliasarrayhelper(
        std::map<Inner_alias_bounded_string_helper, Inner_alias_array_helper>&& _var_map_inneraliasboundedstringhelper_inneraliasarrayhelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper = std::move(_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_inneraliasarrayhelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_inneraliasarrayhelper
 */
const std::map<Inner_alias_bounded_string_helper, Inner_alias_array_helper>& MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::var_map_inneraliasboundedstringhelper_inneraliasarrayhelper() const
{
    return m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_inneraliasarrayhelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_inneraliasarrayhelper
 */
std::map<Inner_alias_bounded_string_helper, Inner_alias_array_helper>& MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::var_map_inneraliasboundedstringhelper_inneraliasarrayhelper()
{
    return m_var_map_inneraliasboundedstringhelper_inneraliasarrayhelper;
}


size_t MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper()
{
    // map<Inner_alias_bounded_string_helper, Inner_alias_sequence_helper> m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::~MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper()
{
}

MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper(
        const MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = x.m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper;
}

MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper(
        MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);
}

MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper& MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = x.m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper& MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper == x.m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);
}

bool MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_inneraliassequencehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            Inner_alias_sequence_helper value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_inneraliassequencehelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliassequencehelper New value to be copied in member var_map_inneraliasboundedstringhelper_inneraliassequencehelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::var_map_inneraliasboundedstringhelper_inneraliassequencehelper(
        const std::map<Inner_alias_bounded_string_helper, Inner_alias_sequence_helper>& _var_map_inneraliasboundedstringhelper_inneraliassequencehelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = _var_map_inneraliasboundedstringhelper_inneraliassequencehelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_inneraliassequencehelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliassequencehelper New value to be moved in member var_map_inneraliasboundedstringhelper_inneraliassequencehelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::var_map_inneraliasboundedstringhelper_inneraliassequencehelper(
        std::map<Inner_alias_bounded_string_helper, Inner_alias_sequence_helper>&& _var_map_inneraliasboundedstringhelper_inneraliassequencehelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper = std::move(_var_map_inneraliasboundedstringhelper_inneraliassequencehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_inneraliassequencehelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_inneraliassequencehelper
 */
const std::map<Inner_alias_bounded_string_helper, Inner_alias_sequence_helper>& MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::var_map_inneraliasboundedstringhelper_inneraliassequencehelper() const
{
    return m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_inneraliassequencehelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_inneraliassequencehelper
 */
std::map<Inner_alias_bounded_string_helper, Inner_alias_sequence_helper>& MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::var_map_inneraliasboundedstringhelper_inneraliassequencehelper()
{
    return m_var_map_inneraliasboundedstringhelper_inneraliassequencehelper;
}


size_t MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerAliasMapHelper::MapInnerAliasBoundedStringHelperInnerAliasMapHelper()
{
    // map<Inner_alias_bounded_string_helper, Inner_alias_map_helper> m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerAliasMapHelper::~MapInnerAliasBoundedStringHelperInnerAliasMapHelper()
{
}

MapInnerAliasBoundedStringHelperInnerAliasMapHelper::MapInnerAliasBoundedStringHelperInnerAliasMapHelper(
        const MapInnerAliasBoundedStringHelperInnerAliasMapHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = x.m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper;
}

MapInnerAliasBoundedStringHelperInnerAliasMapHelper::MapInnerAliasBoundedStringHelperInnerAliasMapHelper(
        MapInnerAliasBoundedStringHelperInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);
}

MapInnerAliasBoundedStringHelperInnerAliasMapHelper& MapInnerAliasBoundedStringHelperInnerAliasMapHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerAliasMapHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = x.m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerAliasMapHelper& MapInnerAliasBoundedStringHelperInnerAliasMapHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerAliasMapHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = std::move(x.m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerAliasMapHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerAliasMapHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper == x.m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);
}

bool MapInnerAliasBoundedStringHelperInnerAliasMapHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerAliasMapHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_inneraliasmaphelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            Inner_alias_map_helper value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_inneraliasmaphelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliasmaphelper New value to be copied in member var_map_inneraliasboundedstringhelper_inneraliasmaphelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasMapHelper::var_map_inneraliasboundedstringhelper_inneraliasmaphelper(
        const std::map<Inner_alias_bounded_string_helper, Inner_alias_map_helper>& _var_map_inneraliasboundedstringhelper_inneraliasmaphelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = _var_map_inneraliasboundedstringhelper_inneraliasmaphelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_inneraliasmaphelper
 * @param _var_map_inneraliasboundedstringhelper_inneraliasmaphelper New value to be moved in member var_map_inneraliasboundedstringhelper_inneraliasmaphelper
 */
void MapInnerAliasBoundedStringHelperInnerAliasMapHelper::var_map_inneraliasboundedstringhelper_inneraliasmaphelper(
        std::map<Inner_alias_bounded_string_helper, Inner_alias_map_helper>&& _var_map_inneraliasboundedstringhelper_inneraliasmaphelper)
{
    m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper = std::move(_var_map_inneraliasboundedstringhelper_inneraliasmaphelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_inneraliasmaphelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_inneraliasmaphelper
 */
const std::map<Inner_alias_bounded_string_helper, Inner_alias_map_helper>& MapInnerAliasBoundedStringHelperInnerAliasMapHelper::var_map_inneraliasboundedstringhelper_inneraliasmaphelper() const
{
    return m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_inneraliasmaphelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_inneraliasmaphelper
 */
std::map<Inner_alias_bounded_string_helper, Inner_alias_map_helper>& MapInnerAliasBoundedStringHelperInnerAliasMapHelper::var_map_inneraliasboundedstringhelper_inneraliasmaphelper()
{
    return m_var_map_inneraliasboundedstringhelper_inneraliasmaphelper;
}


size_t MapInnerAliasBoundedStringHelperInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerUnionHelper::MapInnerAliasBoundedStringHelperInnerUnionHelper()
{
    // map<Inner_alias_bounded_string_helper, InnerUnionHelper> m_var_map_inneraliasboundedstringhelper_innerunionhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerUnionHelper::~MapInnerAliasBoundedStringHelperInnerUnionHelper()
{
}

MapInnerAliasBoundedStringHelperInnerUnionHelper::MapInnerAliasBoundedStringHelperInnerUnionHelper(
        const MapInnerAliasBoundedStringHelperInnerUnionHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_innerunionhelper = x.m_var_map_inneraliasboundedstringhelper_innerunionhelper;
}

MapInnerAliasBoundedStringHelperInnerUnionHelper::MapInnerAliasBoundedStringHelperInnerUnionHelper(
        MapInnerAliasBoundedStringHelperInnerUnionHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_innerunionhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerunionhelper);
}

MapInnerAliasBoundedStringHelperInnerUnionHelper& MapInnerAliasBoundedStringHelperInnerUnionHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerUnionHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_innerunionhelper = x.m_var_map_inneraliasboundedstringhelper_innerunionhelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerUnionHelper& MapInnerAliasBoundedStringHelperInnerUnionHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerUnionHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_innerunionhelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerunionhelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerUnionHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerUnionHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_innerunionhelper == x.m_var_map_inneraliasboundedstringhelper_innerunionhelper);
}

bool MapInnerAliasBoundedStringHelperInnerUnionHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerUnionHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerUnionHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_innerunionhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_innerunionhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_innerunionhelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_innerunionhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            InnerUnionHelper value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_innerunionhelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_innerunionhelper
 * @param _var_map_inneraliasboundedstringhelper_innerunionhelper New value to be copied in member var_map_inneraliasboundedstringhelper_innerunionhelper
 */
void MapInnerAliasBoundedStringHelperInnerUnionHelper::var_map_inneraliasboundedstringhelper_innerunionhelper(
        const std::map<Inner_alias_bounded_string_helper, InnerUnionHelper>& _var_map_inneraliasboundedstringhelper_innerunionhelper)
{
    m_var_map_inneraliasboundedstringhelper_innerunionhelper = _var_map_inneraliasboundedstringhelper_innerunionhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_innerunionhelper
 * @param _var_map_inneraliasboundedstringhelper_innerunionhelper New value to be moved in member var_map_inneraliasboundedstringhelper_innerunionhelper
 */
void MapInnerAliasBoundedStringHelperInnerUnionHelper::var_map_inneraliasboundedstringhelper_innerunionhelper(
        std::map<Inner_alias_bounded_string_helper, InnerUnionHelper>&& _var_map_inneraliasboundedstringhelper_innerunionhelper)
{
    m_var_map_inneraliasboundedstringhelper_innerunionhelper = std::move(_var_map_inneraliasboundedstringhelper_innerunionhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_innerunionhelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_innerunionhelper
 */
const std::map<Inner_alias_bounded_string_helper, InnerUnionHelper>& MapInnerAliasBoundedStringHelperInnerUnionHelper::var_map_inneraliasboundedstringhelper_innerunionhelper() const
{
    return m_var_map_inneraliasboundedstringhelper_innerunionhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_innerunionhelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_innerunionhelper
 */
std::map<Inner_alias_bounded_string_helper, InnerUnionHelper>& MapInnerAliasBoundedStringHelperInnerUnionHelper::var_map_inneraliasboundedstringhelper_innerunionhelper()
{
    return m_var_map_inneraliasboundedstringhelper_innerunionhelper;
}


size_t MapInnerAliasBoundedStringHelperInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerUnionHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerStructureHelper::MapInnerAliasBoundedStringHelperInnerStructureHelper()
{
    // map<Inner_alias_bounded_string_helper, InnerStructureHelper> m_var_map_inneraliasboundedstringhelper_innerstructurehelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerStructureHelper::~MapInnerAliasBoundedStringHelperInnerStructureHelper()
{
}

MapInnerAliasBoundedStringHelperInnerStructureHelper::MapInnerAliasBoundedStringHelperInnerStructureHelper(
        const MapInnerAliasBoundedStringHelperInnerStructureHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_innerstructurehelper = x.m_var_map_inneraliasboundedstringhelper_innerstructurehelper;
}

MapInnerAliasBoundedStringHelperInnerStructureHelper::MapInnerAliasBoundedStringHelperInnerStructureHelper(
        MapInnerAliasBoundedStringHelperInnerStructureHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_innerstructurehelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerstructurehelper);
}

MapInnerAliasBoundedStringHelperInnerStructureHelper& MapInnerAliasBoundedStringHelperInnerStructureHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerStructureHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_innerstructurehelper = x.m_var_map_inneraliasboundedstringhelper_innerstructurehelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerStructureHelper& MapInnerAliasBoundedStringHelperInnerStructureHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerStructureHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_innerstructurehelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerstructurehelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerStructureHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerStructureHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_innerstructurehelper == x.m_var_map_inneraliasboundedstringhelper_innerstructurehelper);
}

bool MapInnerAliasBoundedStringHelperInnerStructureHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerStructureHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerStructureHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_innerstructurehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_innerstructurehelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_innerstructurehelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_innerstructurehelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            InnerStructureHelper value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_innerstructurehelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_innerstructurehelper
 * @param _var_map_inneraliasboundedstringhelper_innerstructurehelper New value to be copied in member var_map_inneraliasboundedstringhelper_innerstructurehelper
 */
void MapInnerAliasBoundedStringHelperInnerStructureHelper::var_map_inneraliasboundedstringhelper_innerstructurehelper(
        const std::map<Inner_alias_bounded_string_helper, InnerStructureHelper>& _var_map_inneraliasboundedstringhelper_innerstructurehelper)
{
    m_var_map_inneraliasboundedstringhelper_innerstructurehelper = _var_map_inneraliasboundedstringhelper_innerstructurehelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_innerstructurehelper
 * @param _var_map_inneraliasboundedstringhelper_innerstructurehelper New value to be moved in member var_map_inneraliasboundedstringhelper_innerstructurehelper
 */
void MapInnerAliasBoundedStringHelperInnerStructureHelper::var_map_inneraliasboundedstringhelper_innerstructurehelper(
        std::map<Inner_alias_bounded_string_helper, InnerStructureHelper>&& _var_map_inneraliasboundedstringhelper_innerstructurehelper)
{
    m_var_map_inneraliasboundedstringhelper_innerstructurehelper = std::move(_var_map_inneraliasboundedstringhelper_innerstructurehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_innerstructurehelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_innerstructurehelper
 */
const std::map<Inner_alias_bounded_string_helper, InnerStructureHelper>& MapInnerAliasBoundedStringHelperInnerStructureHelper::var_map_inneraliasboundedstringhelper_innerstructurehelper() const
{
    return m_var_map_inneraliasboundedstringhelper_innerstructurehelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_innerstructurehelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_innerstructurehelper
 */
std::map<Inner_alias_bounded_string_helper, InnerStructureHelper>& MapInnerAliasBoundedStringHelperInnerStructureHelper::var_map_inneraliasboundedstringhelper_innerstructurehelper()
{
    return m_var_map_inneraliasboundedstringhelper_innerstructurehelper;
}


size_t MapInnerAliasBoundedStringHelperInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerStructureHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedStringHelperInnerBitsetHelper::MapInnerAliasBoundedStringHelperInnerBitsetHelper()
{
    // map<Inner_alias_bounded_string_helper, InnerBitsetHelper> m_var_map_inneraliasboundedstringhelper_innerbitsethelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedStringHelperInnerBitsetHelper::~MapInnerAliasBoundedStringHelperInnerBitsetHelper()
{
}

MapInnerAliasBoundedStringHelperInnerBitsetHelper::MapInnerAliasBoundedStringHelperInnerBitsetHelper(
        const MapInnerAliasBoundedStringHelperInnerBitsetHelper& x)
{
    m_var_map_inneraliasboundedstringhelper_innerbitsethelper = x.m_var_map_inneraliasboundedstringhelper_innerbitsethelper;
}

MapInnerAliasBoundedStringHelperInnerBitsetHelper::MapInnerAliasBoundedStringHelperInnerBitsetHelper(
        MapInnerAliasBoundedStringHelperInnerBitsetHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedstringhelper_innerbitsethelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerbitsethelper);
}

MapInnerAliasBoundedStringHelperInnerBitsetHelper& MapInnerAliasBoundedStringHelperInnerBitsetHelper::operator =(
        const MapInnerAliasBoundedStringHelperInnerBitsetHelper& x)
{

    m_var_map_inneraliasboundedstringhelper_innerbitsethelper = x.m_var_map_inneraliasboundedstringhelper_innerbitsethelper;

    return *this;
}

MapInnerAliasBoundedStringHelperInnerBitsetHelper& MapInnerAliasBoundedStringHelperInnerBitsetHelper::operator =(
        MapInnerAliasBoundedStringHelperInnerBitsetHelper&& x) noexcept
{

    m_var_map_inneraliasboundedstringhelper_innerbitsethelper = std::move(x.m_var_map_inneraliasboundedstringhelper_innerbitsethelper);

    return *this;
}

bool MapInnerAliasBoundedStringHelperInnerBitsetHelper::operator ==(
        const MapInnerAliasBoundedStringHelperInnerBitsetHelper& x) const
{

    return (m_var_map_inneraliasboundedstringhelper_innerbitsethelper == x.m_var_map_inneraliasboundedstringhelper_innerbitsethelper);
}

bool MapInnerAliasBoundedStringHelperInnerBitsetHelper::operator !=(
        const MapInnerAliasBoundedStringHelperInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedStringHelperInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerBitsetHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedStringHelperInnerBitsetHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedStringHelperInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedstringhelper_innerbitsethelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() + 1;
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedStringHelperInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedstringhelper_innerbitsethelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedstringhelper_innerbitsethelper)
    {
        scdr << pair.first.c_str();
        scdr << pair.second;}}

void MapInnerAliasBoundedStringHelperInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedstringhelper_innerbitsethelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::string key;
                std::string aux;
                dcdr >> aux;
                key = aux.c_str();


            InnerBitsetHelper value;
            dcdr >> value;
            m_var_map_inneraliasboundedstringhelper_innerbitsethelper[key.c_str()] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedstringhelper_innerbitsethelper
 * @param _var_map_inneraliasboundedstringhelper_innerbitsethelper New value to be copied in member var_map_inneraliasboundedstringhelper_innerbitsethelper
 */
void MapInnerAliasBoundedStringHelperInnerBitsetHelper::var_map_inneraliasboundedstringhelper_innerbitsethelper(
        const std::map<Inner_alias_bounded_string_helper, InnerBitsetHelper>& _var_map_inneraliasboundedstringhelper_innerbitsethelper)
{
    m_var_map_inneraliasboundedstringhelper_innerbitsethelper = _var_map_inneraliasboundedstringhelper_innerbitsethelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedstringhelper_innerbitsethelper
 * @param _var_map_inneraliasboundedstringhelper_innerbitsethelper New value to be moved in member var_map_inneraliasboundedstringhelper_innerbitsethelper
 */
void MapInnerAliasBoundedStringHelperInnerBitsetHelper::var_map_inneraliasboundedstringhelper_innerbitsethelper(
        std::map<Inner_alias_bounded_string_helper, InnerBitsetHelper>&& _var_map_inneraliasboundedstringhelper_innerbitsethelper)
{
    m_var_map_inneraliasboundedstringhelper_innerbitsethelper = std::move(_var_map_inneraliasboundedstringhelper_innerbitsethelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedstringhelper_innerbitsethelper
 * @return Constant reference to member var_map_inneraliasboundedstringhelper_innerbitsethelper
 */
const std::map<Inner_alias_bounded_string_helper, InnerBitsetHelper>& MapInnerAliasBoundedStringHelperInnerBitsetHelper::var_map_inneraliasboundedstringhelper_innerbitsethelper() const
{
    return m_var_map_inneraliasboundedstringhelper_innerbitsethelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedstringhelper_innerbitsethelper
 * @return Reference to member var_map_inneraliasboundedstringhelper_innerbitsethelper
 */
std::map<Inner_alias_bounded_string_helper, InnerBitsetHelper>& MapInnerAliasBoundedStringHelperInnerBitsetHelper::var_map_inneraliasboundedstringhelper_innerbitsethelper()
{
    return m_var_map_inneraliasboundedstringhelper_innerbitsethelper;
}


size_t MapInnerAliasBoundedStringHelperInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedStringHelperInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedStringHelperInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedStringHelperInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperShort::MapInnerAliasBoundedWStringHelperShort()
{
    // map<Inner_alias_bounded_wstring_helper, short> m_var_map_inneraliasboundedwstringhelper_short


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperShort::~MapInnerAliasBoundedWStringHelperShort()
{
}

MapInnerAliasBoundedWStringHelperShort::MapInnerAliasBoundedWStringHelperShort(
        const MapInnerAliasBoundedWStringHelperShort& x)
{
    m_var_map_inneraliasboundedwstringhelper_short = x.m_var_map_inneraliasboundedwstringhelper_short;
}

MapInnerAliasBoundedWStringHelperShort::MapInnerAliasBoundedWStringHelperShort(
        MapInnerAliasBoundedWStringHelperShort&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_short = std::move(x.m_var_map_inneraliasboundedwstringhelper_short);
}

MapInnerAliasBoundedWStringHelperShort& MapInnerAliasBoundedWStringHelperShort::operator =(
        const MapInnerAliasBoundedWStringHelperShort& x)
{

    m_var_map_inneraliasboundedwstringhelper_short = x.m_var_map_inneraliasboundedwstringhelper_short;

    return *this;
}

MapInnerAliasBoundedWStringHelperShort& MapInnerAliasBoundedWStringHelperShort::operator =(
        MapInnerAliasBoundedWStringHelperShort&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_short = std::move(x.m_var_map_inneraliasboundedwstringhelper_short);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperShort::operator ==(
        const MapInnerAliasBoundedWStringHelperShort& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_short == x.m_var_map_inneraliasboundedwstringhelper_short);
}

bool MapInnerAliasBoundedWStringHelperShort::operator !=(
        const MapInnerAliasBoundedWStringHelperShort& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperShort_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperShort::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_short())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_short.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_short)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_short.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            int16_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_short[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_short
 * @param _var_map_inneraliasboundedwstringhelper_short New value to be copied in member var_map_inneraliasboundedwstringhelper_short
 */
void MapInnerAliasBoundedWStringHelperShort::var_map_inneraliasboundedwstringhelper_short(
        const std::map<Inner_alias_bounded_wstring_helper, int16_t>& _var_map_inneraliasboundedwstringhelper_short)
{
    m_var_map_inneraliasboundedwstringhelper_short = _var_map_inneraliasboundedwstringhelper_short;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_short
 * @param _var_map_inneraliasboundedwstringhelper_short New value to be moved in member var_map_inneraliasboundedwstringhelper_short
 */
void MapInnerAliasBoundedWStringHelperShort::var_map_inneraliasboundedwstringhelper_short(
        std::map<Inner_alias_bounded_wstring_helper, int16_t>&& _var_map_inneraliasboundedwstringhelper_short)
{
    m_var_map_inneraliasboundedwstringhelper_short = std::move(_var_map_inneraliasboundedwstringhelper_short);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_short
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_short
 */
const std::map<Inner_alias_bounded_wstring_helper, int16_t>& MapInnerAliasBoundedWStringHelperShort::var_map_inneraliasboundedwstringhelper_short() const
{
    return m_var_map_inneraliasboundedwstringhelper_short;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_short
 * @return Reference to member var_map_inneraliasboundedwstringhelper_short
 */
std::map<Inner_alias_bounded_wstring_helper, int16_t>& MapInnerAliasBoundedWStringHelperShort::var_map_inneraliasboundedwstringhelper_short()
{
    return m_var_map_inneraliasboundedwstringhelper_short;
}


size_t MapInnerAliasBoundedWStringHelperShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperShort_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperShort::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperUShort::MapInnerAliasBoundedWStringHelperUShort()
{
    // map<Inner_alias_bounded_wstring_helper, unsigned short> m_var_map_inneraliasboundedwstringhelper_ushort


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperUShort::~MapInnerAliasBoundedWStringHelperUShort()
{
}

MapInnerAliasBoundedWStringHelperUShort::MapInnerAliasBoundedWStringHelperUShort(
        const MapInnerAliasBoundedWStringHelperUShort& x)
{
    m_var_map_inneraliasboundedwstringhelper_ushort = x.m_var_map_inneraliasboundedwstringhelper_ushort;
}

MapInnerAliasBoundedWStringHelperUShort::MapInnerAliasBoundedWStringHelperUShort(
        MapInnerAliasBoundedWStringHelperUShort&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_ushort = std::move(x.m_var_map_inneraliasboundedwstringhelper_ushort);
}

MapInnerAliasBoundedWStringHelperUShort& MapInnerAliasBoundedWStringHelperUShort::operator =(
        const MapInnerAliasBoundedWStringHelperUShort& x)
{

    m_var_map_inneraliasboundedwstringhelper_ushort = x.m_var_map_inneraliasboundedwstringhelper_ushort;

    return *this;
}

MapInnerAliasBoundedWStringHelperUShort& MapInnerAliasBoundedWStringHelperUShort::operator =(
        MapInnerAliasBoundedWStringHelperUShort&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_ushort = std::move(x.m_var_map_inneraliasboundedwstringhelper_ushort);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperUShort::operator ==(
        const MapInnerAliasBoundedWStringHelperUShort& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_ushort == x.m_var_map_inneraliasboundedwstringhelper_ushort);
}

bool MapInnerAliasBoundedWStringHelperUShort::operator !=(
        const MapInnerAliasBoundedWStringHelperUShort& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperUShort::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperUShort_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperUShort::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperUShort& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_ushort())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperUShort::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_ushort.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_ushort)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperUShort::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_ushort.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            uint16_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_ushort[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_ushort
 * @param _var_map_inneraliasboundedwstringhelper_ushort New value to be copied in member var_map_inneraliasboundedwstringhelper_ushort
 */
void MapInnerAliasBoundedWStringHelperUShort::var_map_inneraliasboundedwstringhelper_ushort(
        const std::map<Inner_alias_bounded_wstring_helper, uint16_t>& _var_map_inneraliasboundedwstringhelper_ushort)
{
    m_var_map_inneraliasboundedwstringhelper_ushort = _var_map_inneraliasboundedwstringhelper_ushort;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_ushort
 * @param _var_map_inneraliasboundedwstringhelper_ushort New value to be moved in member var_map_inneraliasboundedwstringhelper_ushort
 */
void MapInnerAliasBoundedWStringHelperUShort::var_map_inneraliasboundedwstringhelper_ushort(
        std::map<Inner_alias_bounded_wstring_helper, uint16_t>&& _var_map_inneraliasboundedwstringhelper_ushort)
{
    m_var_map_inneraliasboundedwstringhelper_ushort = std::move(_var_map_inneraliasboundedwstringhelper_ushort);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_ushort
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_ushort
 */
const std::map<Inner_alias_bounded_wstring_helper, uint16_t>& MapInnerAliasBoundedWStringHelperUShort::var_map_inneraliasboundedwstringhelper_ushort() const
{
    return m_var_map_inneraliasboundedwstringhelper_ushort;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_ushort
 * @return Reference to member var_map_inneraliasboundedwstringhelper_ushort
 */
std::map<Inner_alias_bounded_wstring_helper, uint16_t>& MapInnerAliasBoundedWStringHelperUShort::var_map_inneraliasboundedwstringhelper_ushort()
{
    return m_var_map_inneraliasboundedwstringhelper_ushort;
}


size_t MapInnerAliasBoundedWStringHelperUShort::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperUShort_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperUShort::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperUShort::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperLong::MapInnerAliasBoundedWStringHelperLong()
{
    // map<Inner_alias_bounded_wstring_helper, long> m_var_map_inneraliasboundedwstringhelper_long


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperLong::~MapInnerAliasBoundedWStringHelperLong()
{
}

MapInnerAliasBoundedWStringHelperLong::MapInnerAliasBoundedWStringHelperLong(
        const MapInnerAliasBoundedWStringHelperLong& x)
{
    m_var_map_inneraliasboundedwstringhelper_long = x.m_var_map_inneraliasboundedwstringhelper_long;
}

MapInnerAliasBoundedWStringHelperLong::MapInnerAliasBoundedWStringHelperLong(
        MapInnerAliasBoundedWStringHelperLong&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_long = std::move(x.m_var_map_inneraliasboundedwstringhelper_long);
}

MapInnerAliasBoundedWStringHelperLong& MapInnerAliasBoundedWStringHelperLong::operator =(
        const MapInnerAliasBoundedWStringHelperLong& x)
{

    m_var_map_inneraliasboundedwstringhelper_long = x.m_var_map_inneraliasboundedwstringhelper_long;

    return *this;
}

MapInnerAliasBoundedWStringHelperLong& MapInnerAliasBoundedWStringHelperLong::operator =(
        MapInnerAliasBoundedWStringHelperLong&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_long = std::move(x.m_var_map_inneraliasboundedwstringhelper_long);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperLong::operator ==(
        const MapInnerAliasBoundedWStringHelperLong& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_long == x.m_var_map_inneraliasboundedwstringhelper_long);
}

bool MapInnerAliasBoundedWStringHelperLong::operator !=(
        const MapInnerAliasBoundedWStringHelperLong& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperLong_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperLong::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_long())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_long.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_long)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_long.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            int32_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_long[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_long
 * @param _var_map_inneraliasboundedwstringhelper_long New value to be copied in member var_map_inneraliasboundedwstringhelper_long
 */
void MapInnerAliasBoundedWStringHelperLong::var_map_inneraliasboundedwstringhelper_long(
        const std::map<Inner_alias_bounded_wstring_helper, int32_t>& _var_map_inneraliasboundedwstringhelper_long)
{
    m_var_map_inneraliasboundedwstringhelper_long = _var_map_inneraliasboundedwstringhelper_long;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_long
 * @param _var_map_inneraliasboundedwstringhelper_long New value to be moved in member var_map_inneraliasboundedwstringhelper_long
 */
void MapInnerAliasBoundedWStringHelperLong::var_map_inneraliasboundedwstringhelper_long(
        std::map<Inner_alias_bounded_wstring_helper, int32_t>&& _var_map_inneraliasboundedwstringhelper_long)
{
    m_var_map_inneraliasboundedwstringhelper_long = std::move(_var_map_inneraliasboundedwstringhelper_long);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_long
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_long
 */
const std::map<Inner_alias_bounded_wstring_helper, int32_t>& MapInnerAliasBoundedWStringHelperLong::var_map_inneraliasboundedwstringhelper_long() const
{
    return m_var_map_inneraliasboundedwstringhelper_long;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_long
 * @return Reference to member var_map_inneraliasboundedwstringhelper_long
 */
std::map<Inner_alias_bounded_wstring_helper, int32_t>& MapInnerAliasBoundedWStringHelperLong::var_map_inneraliasboundedwstringhelper_long()
{
    return m_var_map_inneraliasboundedwstringhelper_long;
}


size_t MapInnerAliasBoundedWStringHelperLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperLong_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperLong::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperULong::MapInnerAliasBoundedWStringHelperULong()
{
    // map<Inner_alias_bounded_wstring_helper, unsigned long> m_var_map_inneraliasboundedwstringhelper_ulong


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperULong::~MapInnerAliasBoundedWStringHelperULong()
{
}

MapInnerAliasBoundedWStringHelperULong::MapInnerAliasBoundedWStringHelperULong(
        const MapInnerAliasBoundedWStringHelperULong& x)
{
    m_var_map_inneraliasboundedwstringhelper_ulong = x.m_var_map_inneraliasboundedwstringhelper_ulong;
}

MapInnerAliasBoundedWStringHelperULong::MapInnerAliasBoundedWStringHelperULong(
        MapInnerAliasBoundedWStringHelperULong&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_ulong = std::move(x.m_var_map_inneraliasboundedwstringhelper_ulong);
}

MapInnerAliasBoundedWStringHelperULong& MapInnerAliasBoundedWStringHelperULong::operator =(
        const MapInnerAliasBoundedWStringHelperULong& x)
{

    m_var_map_inneraliasboundedwstringhelper_ulong = x.m_var_map_inneraliasboundedwstringhelper_ulong;

    return *this;
}

MapInnerAliasBoundedWStringHelperULong& MapInnerAliasBoundedWStringHelperULong::operator =(
        MapInnerAliasBoundedWStringHelperULong&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_ulong = std::move(x.m_var_map_inneraliasboundedwstringhelper_ulong);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperULong::operator ==(
        const MapInnerAliasBoundedWStringHelperULong& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_ulong == x.m_var_map_inneraliasboundedwstringhelper_ulong);
}

bool MapInnerAliasBoundedWStringHelperULong::operator !=(
        const MapInnerAliasBoundedWStringHelperULong& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperULong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperULong_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperULong::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperULong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_ulong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperULong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_ulong.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_ulong)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperULong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_ulong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            uint32_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_ulong[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_ulong
 * @param _var_map_inneraliasboundedwstringhelper_ulong New value to be copied in member var_map_inneraliasboundedwstringhelper_ulong
 */
void MapInnerAliasBoundedWStringHelperULong::var_map_inneraliasboundedwstringhelper_ulong(
        const std::map<Inner_alias_bounded_wstring_helper, uint32_t>& _var_map_inneraliasboundedwstringhelper_ulong)
{
    m_var_map_inneraliasboundedwstringhelper_ulong = _var_map_inneraliasboundedwstringhelper_ulong;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_ulong
 * @param _var_map_inneraliasboundedwstringhelper_ulong New value to be moved in member var_map_inneraliasboundedwstringhelper_ulong
 */
void MapInnerAliasBoundedWStringHelperULong::var_map_inneraliasboundedwstringhelper_ulong(
        std::map<Inner_alias_bounded_wstring_helper, uint32_t>&& _var_map_inneraliasboundedwstringhelper_ulong)
{
    m_var_map_inneraliasboundedwstringhelper_ulong = std::move(_var_map_inneraliasboundedwstringhelper_ulong);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_ulong
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_ulong
 */
const std::map<Inner_alias_bounded_wstring_helper, uint32_t>& MapInnerAliasBoundedWStringHelperULong::var_map_inneraliasboundedwstringhelper_ulong() const
{
    return m_var_map_inneraliasboundedwstringhelper_ulong;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_ulong
 * @return Reference to member var_map_inneraliasboundedwstringhelper_ulong
 */
std::map<Inner_alias_bounded_wstring_helper, uint32_t>& MapInnerAliasBoundedWStringHelperULong::var_map_inneraliasboundedwstringhelper_ulong()
{
    return m_var_map_inneraliasboundedwstringhelper_ulong;
}


size_t MapInnerAliasBoundedWStringHelperULong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperULong_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperULong::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperULong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperLongLong::MapInnerAliasBoundedWStringHelperLongLong()
{
    // map<Inner_alias_bounded_wstring_helper, long long> m_var_map_inneraliasboundedwstringhelper_longlong


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperLongLong::~MapInnerAliasBoundedWStringHelperLongLong()
{
}

MapInnerAliasBoundedWStringHelperLongLong::MapInnerAliasBoundedWStringHelperLongLong(
        const MapInnerAliasBoundedWStringHelperLongLong& x)
{
    m_var_map_inneraliasboundedwstringhelper_longlong = x.m_var_map_inneraliasboundedwstringhelper_longlong;
}

MapInnerAliasBoundedWStringHelperLongLong::MapInnerAliasBoundedWStringHelperLongLong(
        MapInnerAliasBoundedWStringHelperLongLong&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_longlong = std::move(x.m_var_map_inneraliasboundedwstringhelper_longlong);
}

MapInnerAliasBoundedWStringHelperLongLong& MapInnerAliasBoundedWStringHelperLongLong::operator =(
        const MapInnerAliasBoundedWStringHelperLongLong& x)
{

    m_var_map_inneraliasboundedwstringhelper_longlong = x.m_var_map_inneraliasboundedwstringhelper_longlong;

    return *this;
}

MapInnerAliasBoundedWStringHelperLongLong& MapInnerAliasBoundedWStringHelperLongLong::operator =(
        MapInnerAliasBoundedWStringHelperLongLong&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_longlong = std::move(x.m_var_map_inneraliasboundedwstringhelper_longlong);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperLongLong::operator ==(
        const MapInnerAliasBoundedWStringHelperLongLong& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_longlong == x.m_var_map_inneraliasboundedwstringhelper_longlong);
}

bool MapInnerAliasBoundedWStringHelperLongLong::operator !=(
        const MapInnerAliasBoundedWStringHelperLongLong& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperLongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperLongLong_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperLongLong::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperLongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_longlong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperLongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_longlong.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_longlong)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperLongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_longlong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            int64_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_longlong[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_longlong
 * @param _var_map_inneraliasboundedwstringhelper_longlong New value to be copied in member var_map_inneraliasboundedwstringhelper_longlong
 */
void MapInnerAliasBoundedWStringHelperLongLong::var_map_inneraliasboundedwstringhelper_longlong(
        const std::map<Inner_alias_bounded_wstring_helper, int64_t>& _var_map_inneraliasboundedwstringhelper_longlong)
{
    m_var_map_inneraliasboundedwstringhelper_longlong = _var_map_inneraliasboundedwstringhelper_longlong;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_longlong
 * @param _var_map_inneraliasboundedwstringhelper_longlong New value to be moved in member var_map_inneraliasboundedwstringhelper_longlong
 */
void MapInnerAliasBoundedWStringHelperLongLong::var_map_inneraliasboundedwstringhelper_longlong(
        std::map<Inner_alias_bounded_wstring_helper, int64_t>&& _var_map_inneraliasboundedwstringhelper_longlong)
{
    m_var_map_inneraliasboundedwstringhelper_longlong = std::move(_var_map_inneraliasboundedwstringhelper_longlong);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_longlong
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_longlong
 */
const std::map<Inner_alias_bounded_wstring_helper, int64_t>& MapInnerAliasBoundedWStringHelperLongLong::var_map_inneraliasboundedwstringhelper_longlong() const
{
    return m_var_map_inneraliasboundedwstringhelper_longlong;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_longlong
 * @return Reference to member var_map_inneraliasboundedwstringhelper_longlong
 */
std::map<Inner_alias_bounded_wstring_helper, int64_t>& MapInnerAliasBoundedWStringHelperLongLong::var_map_inneraliasboundedwstringhelper_longlong()
{
    return m_var_map_inneraliasboundedwstringhelper_longlong;
}


size_t MapInnerAliasBoundedWStringHelperLongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperLongLong_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperLongLong::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperLongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperULongLong::MapInnerAliasBoundedWStringHelperULongLong()
{
    // map<Inner_alias_bounded_wstring_helper, unsigned long long> m_var_map_inneraliasboundedwstringhelper_ulonglong


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperULongLong::~MapInnerAliasBoundedWStringHelperULongLong()
{
}

MapInnerAliasBoundedWStringHelperULongLong::MapInnerAliasBoundedWStringHelperULongLong(
        const MapInnerAliasBoundedWStringHelperULongLong& x)
{
    m_var_map_inneraliasboundedwstringhelper_ulonglong = x.m_var_map_inneraliasboundedwstringhelper_ulonglong;
}

MapInnerAliasBoundedWStringHelperULongLong::MapInnerAliasBoundedWStringHelperULongLong(
        MapInnerAliasBoundedWStringHelperULongLong&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_ulonglong = std::move(x.m_var_map_inneraliasboundedwstringhelper_ulonglong);
}

MapInnerAliasBoundedWStringHelperULongLong& MapInnerAliasBoundedWStringHelperULongLong::operator =(
        const MapInnerAliasBoundedWStringHelperULongLong& x)
{

    m_var_map_inneraliasboundedwstringhelper_ulonglong = x.m_var_map_inneraliasboundedwstringhelper_ulonglong;

    return *this;
}

MapInnerAliasBoundedWStringHelperULongLong& MapInnerAliasBoundedWStringHelperULongLong::operator =(
        MapInnerAliasBoundedWStringHelperULongLong&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_ulonglong = std::move(x.m_var_map_inneraliasboundedwstringhelper_ulonglong);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperULongLong::operator ==(
        const MapInnerAliasBoundedWStringHelperULongLong& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_ulonglong == x.m_var_map_inneraliasboundedwstringhelper_ulonglong);
}

bool MapInnerAliasBoundedWStringHelperULongLong::operator !=(
        const MapInnerAliasBoundedWStringHelperULongLong& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperULongLong::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperULongLong_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperULongLong::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperULongLong& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_ulonglong())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperULongLong::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_ulonglong.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_ulonglong)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperULongLong::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_ulonglong.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            uint64_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_ulonglong[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_ulonglong
 * @param _var_map_inneraliasboundedwstringhelper_ulonglong New value to be copied in member var_map_inneraliasboundedwstringhelper_ulonglong
 */
void MapInnerAliasBoundedWStringHelperULongLong::var_map_inneraliasboundedwstringhelper_ulonglong(
        const std::map<Inner_alias_bounded_wstring_helper, uint64_t>& _var_map_inneraliasboundedwstringhelper_ulonglong)
{
    m_var_map_inneraliasboundedwstringhelper_ulonglong = _var_map_inneraliasboundedwstringhelper_ulonglong;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_ulonglong
 * @param _var_map_inneraliasboundedwstringhelper_ulonglong New value to be moved in member var_map_inneraliasboundedwstringhelper_ulonglong
 */
void MapInnerAliasBoundedWStringHelperULongLong::var_map_inneraliasboundedwstringhelper_ulonglong(
        std::map<Inner_alias_bounded_wstring_helper, uint64_t>&& _var_map_inneraliasboundedwstringhelper_ulonglong)
{
    m_var_map_inneraliasboundedwstringhelper_ulonglong = std::move(_var_map_inneraliasboundedwstringhelper_ulonglong);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_ulonglong
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_ulonglong
 */
const std::map<Inner_alias_bounded_wstring_helper, uint64_t>& MapInnerAliasBoundedWStringHelperULongLong::var_map_inneraliasboundedwstringhelper_ulonglong() const
{
    return m_var_map_inneraliasboundedwstringhelper_ulonglong;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_ulonglong
 * @return Reference to member var_map_inneraliasboundedwstringhelper_ulonglong
 */
std::map<Inner_alias_bounded_wstring_helper, uint64_t>& MapInnerAliasBoundedWStringHelperULongLong::var_map_inneraliasboundedwstringhelper_ulonglong()
{
    return m_var_map_inneraliasboundedwstringhelper_ulonglong;
}


size_t MapInnerAliasBoundedWStringHelperULongLong::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperULongLong_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperULongLong::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperULongLong::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperFloat::MapInnerAliasBoundedWStringHelperFloat()
{
    // map<Inner_alias_bounded_wstring_helper, float> m_var_map_inneraliasboundedwstringhelper_float


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperFloat::~MapInnerAliasBoundedWStringHelperFloat()
{
}

MapInnerAliasBoundedWStringHelperFloat::MapInnerAliasBoundedWStringHelperFloat(
        const MapInnerAliasBoundedWStringHelperFloat& x)
{
    m_var_map_inneraliasboundedwstringhelper_float = x.m_var_map_inneraliasboundedwstringhelper_float;
}

MapInnerAliasBoundedWStringHelperFloat::MapInnerAliasBoundedWStringHelperFloat(
        MapInnerAliasBoundedWStringHelperFloat&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_float = std::move(x.m_var_map_inneraliasboundedwstringhelper_float);
}

MapInnerAliasBoundedWStringHelperFloat& MapInnerAliasBoundedWStringHelperFloat::operator =(
        const MapInnerAliasBoundedWStringHelperFloat& x)
{

    m_var_map_inneraliasboundedwstringhelper_float = x.m_var_map_inneraliasboundedwstringhelper_float;

    return *this;
}

MapInnerAliasBoundedWStringHelperFloat& MapInnerAliasBoundedWStringHelperFloat::operator =(
        MapInnerAliasBoundedWStringHelperFloat&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_float = std::move(x.m_var_map_inneraliasboundedwstringhelper_float);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperFloat::operator ==(
        const MapInnerAliasBoundedWStringHelperFloat& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_float == x.m_var_map_inneraliasboundedwstringhelper_float);
}

bool MapInnerAliasBoundedWStringHelperFloat::operator !=(
        const MapInnerAliasBoundedWStringHelperFloat& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperFloat::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperFloat_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperFloat::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperFloat& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_float())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperFloat::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_float.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_float)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperFloat::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_float.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            float value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_float[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_float
 * @param _var_map_inneraliasboundedwstringhelper_float New value to be copied in member var_map_inneraliasboundedwstringhelper_float
 */
void MapInnerAliasBoundedWStringHelperFloat::var_map_inneraliasboundedwstringhelper_float(
        const std::map<Inner_alias_bounded_wstring_helper, float>& _var_map_inneraliasboundedwstringhelper_float)
{
    m_var_map_inneraliasboundedwstringhelper_float = _var_map_inneraliasboundedwstringhelper_float;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_float
 * @param _var_map_inneraliasboundedwstringhelper_float New value to be moved in member var_map_inneraliasboundedwstringhelper_float
 */
void MapInnerAliasBoundedWStringHelperFloat::var_map_inneraliasboundedwstringhelper_float(
        std::map<Inner_alias_bounded_wstring_helper, float>&& _var_map_inneraliasboundedwstringhelper_float)
{
    m_var_map_inneraliasboundedwstringhelper_float = std::move(_var_map_inneraliasboundedwstringhelper_float);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_float
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_float
 */
const std::map<Inner_alias_bounded_wstring_helper, float>& MapInnerAliasBoundedWStringHelperFloat::var_map_inneraliasboundedwstringhelper_float() const
{
    return m_var_map_inneraliasboundedwstringhelper_float;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_float
 * @return Reference to member var_map_inneraliasboundedwstringhelper_float
 */
std::map<Inner_alias_bounded_wstring_helper, float>& MapInnerAliasBoundedWStringHelperFloat::var_map_inneraliasboundedwstringhelper_float()
{
    return m_var_map_inneraliasboundedwstringhelper_float;
}


size_t MapInnerAliasBoundedWStringHelperFloat::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperFloat_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperFloat::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperFloat::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperDouble::MapInnerAliasBoundedWStringHelperDouble()
{
    // map<Inner_alias_bounded_wstring_helper, double> m_var_map_inneraliasboundedwstringhelper_double


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperDouble::~MapInnerAliasBoundedWStringHelperDouble()
{
}

MapInnerAliasBoundedWStringHelperDouble::MapInnerAliasBoundedWStringHelperDouble(
        const MapInnerAliasBoundedWStringHelperDouble& x)
{
    m_var_map_inneraliasboundedwstringhelper_double = x.m_var_map_inneraliasboundedwstringhelper_double;
}

MapInnerAliasBoundedWStringHelperDouble::MapInnerAliasBoundedWStringHelperDouble(
        MapInnerAliasBoundedWStringHelperDouble&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_double = std::move(x.m_var_map_inneraliasboundedwstringhelper_double);
}

MapInnerAliasBoundedWStringHelperDouble& MapInnerAliasBoundedWStringHelperDouble::operator =(
        const MapInnerAliasBoundedWStringHelperDouble& x)
{

    m_var_map_inneraliasboundedwstringhelper_double = x.m_var_map_inneraliasboundedwstringhelper_double;

    return *this;
}

MapInnerAliasBoundedWStringHelperDouble& MapInnerAliasBoundedWStringHelperDouble::operator =(
        MapInnerAliasBoundedWStringHelperDouble&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_double = std::move(x.m_var_map_inneraliasboundedwstringhelper_double);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperDouble::operator ==(
        const MapInnerAliasBoundedWStringHelperDouble& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_double == x.m_var_map_inneraliasboundedwstringhelper_double);
}

bool MapInnerAliasBoundedWStringHelperDouble::operator !=(
        const MapInnerAliasBoundedWStringHelperDouble& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperDouble_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperDouble::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_double())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_double.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_double)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_double.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            double value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_double[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_double
 * @param _var_map_inneraliasboundedwstringhelper_double New value to be copied in member var_map_inneraliasboundedwstringhelper_double
 */
void MapInnerAliasBoundedWStringHelperDouble::var_map_inneraliasboundedwstringhelper_double(
        const std::map<Inner_alias_bounded_wstring_helper, double>& _var_map_inneraliasboundedwstringhelper_double)
{
    m_var_map_inneraliasboundedwstringhelper_double = _var_map_inneraliasboundedwstringhelper_double;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_double
 * @param _var_map_inneraliasboundedwstringhelper_double New value to be moved in member var_map_inneraliasboundedwstringhelper_double
 */
void MapInnerAliasBoundedWStringHelperDouble::var_map_inneraliasboundedwstringhelper_double(
        std::map<Inner_alias_bounded_wstring_helper, double>&& _var_map_inneraliasboundedwstringhelper_double)
{
    m_var_map_inneraliasboundedwstringhelper_double = std::move(_var_map_inneraliasboundedwstringhelper_double);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_double
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_double
 */
const std::map<Inner_alias_bounded_wstring_helper, double>& MapInnerAliasBoundedWStringHelperDouble::var_map_inneraliasboundedwstringhelper_double() const
{
    return m_var_map_inneraliasboundedwstringhelper_double;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_double
 * @return Reference to member var_map_inneraliasboundedwstringhelper_double
 */
std::map<Inner_alias_bounded_wstring_helper, double>& MapInnerAliasBoundedWStringHelperDouble::var_map_inneraliasboundedwstringhelper_double()
{
    return m_var_map_inneraliasboundedwstringhelper_double;
}


size_t MapInnerAliasBoundedWStringHelperDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperDouble_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperDouble::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperLongDouble::MapInnerAliasBoundedWStringHelperLongDouble()
{
    // map<Inner_alias_bounded_wstring_helper, long double> m_var_map_inneraliasboundedwstringhelper_longdouble


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperLongDouble::~MapInnerAliasBoundedWStringHelperLongDouble()
{
}

MapInnerAliasBoundedWStringHelperLongDouble::MapInnerAliasBoundedWStringHelperLongDouble(
        const MapInnerAliasBoundedWStringHelperLongDouble& x)
{
    m_var_map_inneraliasboundedwstringhelper_longdouble = x.m_var_map_inneraliasboundedwstringhelper_longdouble;
}

MapInnerAliasBoundedWStringHelperLongDouble::MapInnerAliasBoundedWStringHelperLongDouble(
        MapInnerAliasBoundedWStringHelperLongDouble&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_longdouble = std::move(x.m_var_map_inneraliasboundedwstringhelper_longdouble);
}

MapInnerAliasBoundedWStringHelperLongDouble& MapInnerAliasBoundedWStringHelperLongDouble::operator =(
        const MapInnerAliasBoundedWStringHelperLongDouble& x)
{

    m_var_map_inneraliasboundedwstringhelper_longdouble = x.m_var_map_inneraliasboundedwstringhelper_longdouble;

    return *this;
}

MapInnerAliasBoundedWStringHelperLongDouble& MapInnerAliasBoundedWStringHelperLongDouble::operator =(
        MapInnerAliasBoundedWStringHelperLongDouble&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_longdouble = std::move(x.m_var_map_inneraliasboundedwstringhelper_longdouble);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperLongDouble::operator ==(
        const MapInnerAliasBoundedWStringHelperLongDouble& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_longdouble == x.m_var_map_inneraliasboundedwstringhelper_longdouble);
}

bool MapInnerAliasBoundedWStringHelperLongDouble::operator !=(
        const MapInnerAliasBoundedWStringHelperLongDouble& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperLongDouble::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperLongDouble_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperLongDouble::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperLongDouble& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_longdouble())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 16 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8); // 128 bits, but aligned as 64

    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperLongDouble::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_longdouble.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_longdouble)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperLongDouble::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_longdouble.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            long double value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_longdouble[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_longdouble
 * @param _var_map_inneraliasboundedwstringhelper_longdouble New value to be copied in member var_map_inneraliasboundedwstringhelper_longdouble
 */
void MapInnerAliasBoundedWStringHelperLongDouble::var_map_inneraliasboundedwstringhelper_longdouble(
        const std::map<Inner_alias_bounded_wstring_helper, long double>& _var_map_inneraliasboundedwstringhelper_longdouble)
{
    m_var_map_inneraliasboundedwstringhelper_longdouble = _var_map_inneraliasboundedwstringhelper_longdouble;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_longdouble
 * @param _var_map_inneraliasboundedwstringhelper_longdouble New value to be moved in member var_map_inneraliasboundedwstringhelper_longdouble
 */
void MapInnerAliasBoundedWStringHelperLongDouble::var_map_inneraliasboundedwstringhelper_longdouble(
        std::map<Inner_alias_bounded_wstring_helper, long double>&& _var_map_inneraliasboundedwstringhelper_longdouble)
{
    m_var_map_inneraliasboundedwstringhelper_longdouble = std::move(_var_map_inneraliasboundedwstringhelper_longdouble);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_longdouble
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_longdouble
 */
const std::map<Inner_alias_bounded_wstring_helper, long double>& MapInnerAliasBoundedWStringHelperLongDouble::var_map_inneraliasboundedwstringhelper_longdouble() const
{
    return m_var_map_inneraliasboundedwstringhelper_longdouble;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_longdouble
 * @return Reference to member var_map_inneraliasboundedwstringhelper_longdouble
 */
std::map<Inner_alias_bounded_wstring_helper, long double>& MapInnerAliasBoundedWStringHelperLongDouble::var_map_inneraliasboundedwstringhelper_longdouble()
{
    return m_var_map_inneraliasboundedwstringhelper_longdouble;
}


size_t MapInnerAliasBoundedWStringHelperLongDouble::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperLongDouble_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperLongDouble::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperLongDouble::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperBoolean::MapInnerAliasBoundedWStringHelperBoolean()
{
    // map<Inner_alias_bounded_wstring_helper, boolean> m_var_map_inneraliasboundedwstringhelper_boolean


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperBoolean::~MapInnerAliasBoundedWStringHelperBoolean()
{
}

MapInnerAliasBoundedWStringHelperBoolean::MapInnerAliasBoundedWStringHelperBoolean(
        const MapInnerAliasBoundedWStringHelperBoolean& x)
{
    m_var_map_inneraliasboundedwstringhelper_boolean = x.m_var_map_inneraliasboundedwstringhelper_boolean;
}

MapInnerAliasBoundedWStringHelperBoolean::MapInnerAliasBoundedWStringHelperBoolean(
        MapInnerAliasBoundedWStringHelperBoolean&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_boolean = std::move(x.m_var_map_inneraliasboundedwstringhelper_boolean);
}

MapInnerAliasBoundedWStringHelperBoolean& MapInnerAliasBoundedWStringHelperBoolean::operator =(
        const MapInnerAliasBoundedWStringHelperBoolean& x)
{

    m_var_map_inneraliasboundedwstringhelper_boolean = x.m_var_map_inneraliasboundedwstringhelper_boolean;

    return *this;
}

MapInnerAliasBoundedWStringHelperBoolean& MapInnerAliasBoundedWStringHelperBoolean::operator =(
        MapInnerAliasBoundedWStringHelperBoolean&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_boolean = std::move(x.m_var_map_inneraliasboundedwstringhelper_boolean);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperBoolean::operator ==(
        const MapInnerAliasBoundedWStringHelperBoolean& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_boolean == x.m_var_map_inneraliasboundedwstringhelper_boolean);
}

bool MapInnerAliasBoundedWStringHelperBoolean::operator !=(
        const MapInnerAliasBoundedWStringHelperBoolean& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperBoolean::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperBoolean_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperBoolean::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperBoolean& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_boolean())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperBoolean::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_boolean.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_boolean)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperBoolean::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_boolean.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            bool value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_boolean[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_boolean
 * @param _var_map_inneraliasboundedwstringhelper_boolean New value to be copied in member var_map_inneraliasboundedwstringhelper_boolean
 */
void MapInnerAliasBoundedWStringHelperBoolean::var_map_inneraliasboundedwstringhelper_boolean(
        const std::map<Inner_alias_bounded_wstring_helper, bool>& _var_map_inneraliasboundedwstringhelper_boolean)
{
    m_var_map_inneraliasboundedwstringhelper_boolean = _var_map_inneraliasboundedwstringhelper_boolean;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_boolean
 * @param _var_map_inneraliasboundedwstringhelper_boolean New value to be moved in member var_map_inneraliasboundedwstringhelper_boolean
 */
void MapInnerAliasBoundedWStringHelperBoolean::var_map_inneraliasboundedwstringhelper_boolean(
        std::map<Inner_alias_bounded_wstring_helper, bool>&& _var_map_inneraliasboundedwstringhelper_boolean)
{
    m_var_map_inneraliasboundedwstringhelper_boolean = std::move(_var_map_inneraliasboundedwstringhelper_boolean);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_boolean
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_boolean
 */
const std::map<Inner_alias_bounded_wstring_helper, bool>& MapInnerAliasBoundedWStringHelperBoolean::var_map_inneraliasboundedwstringhelper_boolean() const
{
    return m_var_map_inneraliasboundedwstringhelper_boolean;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_boolean
 * @return Reference to member var_map_inneraliasboundedwstringhelper_boolean
 */
std::map<Inner_alias_bounded_wstring_helper, bool>& MapInnerAliasBoundedWStringHelperBoolean::var_map_inneraliasboundedwstringhelper_boolean()
{
    return m_var_map_inneraliasboundedwstringhelper_boolean;
}


size_t MapInnerAliasBoundedWStringHelperBoolean::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperBoolean_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperBoolean::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperBoolean::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperOctet::MapInnerAliasBoundedWStringHelperOctet()
{
    // map<Inner_alias_bounded_wstring_helper, octet> m_var_map_inneraliasboundedwstringhelper_octet


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperOctet::~MapInnerAliasBoundedWStringHelperOctet()
{
}

MapInnerAliasBoundedWStringHelperOctet::MapInnerAliasBoundedWStringHelperOctet(
        const MapInnerAliasBoundedWStringHelperOctet& x)
{
    m_var_map_inneraliasboundedwstringhelper_octet = x.m_var_map_inneraliasboundedwstringhelper_octet;
}

MapInnerAliasBoundedWStringHelperOctet::MapInnerAliasBoundedWStringHelperOctet(
        MapInnerAliasBoundedWStringHelperOctet&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_octet = std::move(x.m_var_map_inneraliasboundedwstringhelper_octet);
}

MapInnerAliasBoundedWStringHelperOctet& MapInnerAliasBoundedWStringHelperOctet::operator =(
        const MapInnerAliasBoundedWStringHelperOctet& x)
{

    m_var_map_inneraliasboundedwstringhelper_octet = x.m_var_map_inneraliasboundedwstringhelper_octet;

    return *this;
}

MapInnerAliasBoundedWStringHelperOctet& MapInnerAliasBoundedWStringHelperOctet::operator =(
        MapInnerAliasBoundedWStringHelperOctet&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_octet = std::move(x.m_var_map_inneraliasboundedwstringhelper_octet);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperOctet::operator ==(
        const MapInnerAliasBoundedWStringHelperOctet& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_octet == x.m_var_map_inneraliasboundedwstringhelper_octet);
}

bool MapInnerAliasBoundedWStringHelperOctet::operator !=(
        const MapInnerAliasBoundedWStringHelperOctet& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperOctet::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperOctet_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperOctet::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperOctet& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_octet())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperOctet::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_octet.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_octet)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperOctet::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_octet.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            uint8_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_octet[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_octet
 * @param _var_map_inneraliasboundedwstringhelper_octet New value to be copied in member var_map_inneraliasboundedwstringhelper_octet
 */
void MapInnerAliasBoundedWStringHelperOctet::var_map_inneraliasboundedwstringhelper_octet(
        const std::map<Inner_alias_bounded_wstring_helper, uint8_t>& _var_map_inneraliasboundedwstringhelper_octet)
{
    m_var_map_inneraliasboundedwstringhelper_octet = _var_map_inneraliasboundedwstringhelper_octet;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_octet
 * @param _var_map_inneraliasboundedwstringhelper_octet New value to be moved in member var_map_inneraliasboundedwstringhelper_octet
 */
void MapInnerAliasBoundedWStringHelperOctet::var_map_inneraliasboundedwstringhelper_octet(
        std::map<Inner_alias_bounded_wstring_helper, uint8_t>&& _var_map_inneraliasboundedwstringhelper_octet)
{
    m_var_map_inneraliasboundedwstringhelper_octet = std::move(_var_map_inneraliasboundedwstringhelper_octet);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_octet
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_octet
 */
const std::map<Inner_alias_bounded_wstring_helper, uint8_t>& MapInnerAliasBoundedWStringHelperOctet::var_map_inneraliasboundedwstringhelper_octet() const
{
    return m_var_map_inneraliasboundedwstringhelper_octet;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_octet
 * @return Reference to member var_map_inneraliasboundedwstringhelper_octet
 */
std::map<Inner_alias_bounded_wstring_helper, uint8_t>& MapInnerAliasBoundedWStringHelperOctet::var_map_inneraliasboundedwstringhelper_octet()
{
    return m_var_map_inneraliasboundedwstringhelper_octet;
}


size_t MapInnerAliasBoundedWStringHelperOctet::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperOctet_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperOctet::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperOctet::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperChar::MapInnerAliasBoundedWStringHelperChar()
{
    // map<Inner_alias_bounded_wstring_helper, char> m_var_map_inneraliasboundedwstringhelper_char


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperChar::~MapInnerAliasBoundedWStringHelperChar()
{
}

MapInnerAliasBoundedWStringHelperChar::MapInnerAliasBoundedWStringHelperChar(
        const MapInnerAliasBoundedWStringHelperChar& x)
{
    m_var_map_inneraliasboundedwstringhelper_char = x.m_var_map_inneraliasboundedwstringhelper_char;
}

MapInnerAliasBoundedWStringHelperChar::MapInnerAliasBoundedWStringHelperChar(
        MapInnerAliasBoundedWStringHelperChar&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_char = std::move(x.m_var_map_inneraliasboundedwstringhelper_char);
}

MapInnerAliasBoundedWStringHelperChar& MapInnerAliasBoundedWStringHelperChar::operator =(
        const MapInnerAliasBoundedWStringHelperChar& x)
{

    m_var_map_inneraliasboundedwstringhelper_char = x.m_var_map_inneraliasboundedwstringhelper_char;

    return *this;
}

MapInnerAliasBoundedWStringHelperChar& MapInnerAliasBoundedWStringHelperChar::operator =(
        MapInnerAliasBoundedWStringHelperChar&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_char = std::move(x.m_var_map_inneraliasboundedwstringhelper_char);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperChar::operator ==(
        const MapInnerAliasBoundedWStringHelperChar& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_char == x.m_var_map_inneraliasboundedwstringhelper_char);
}

bool MapInnerAliasBoundedWStringHelperChar::operator !=(
        const MapInnerAliasBoundedWStringHelperChar& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperChar_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperChar::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_char())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_char.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_char)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_char.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            char value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_char[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_char
 * @param _var_map_inneraliasboundedwstringhelper_char New value to be copied in member var_map_inneraliasboundedwstringhelper_char
 */
void MapInnerAliasBoundedWStringHelperChar::var_map_inneraliasboundedwstringhelper_char(
        const std::map<Inner_alias_bounded_wstring_helper, char>& _var_map_inneraliasboundedwstringhelper_char)
{
    m_var_map_inneraliasboundedwstringhelper_char = _var_map_inneraliasboundedwstringhelper_char;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_char
 * @param _var_map_inneraliasboundedwstringhelper_char New value to be moved in member var_map_inneraliasboundedwstringhelper_char
 */
void MapInnerAliasBoundedWStringHelperChar::var_map_inneraliasboundedwstringhelper_char(
        std::map<Inner_alias_bounded_wstring_helper, char>&& _var_map_inneraliasboundedwstringhelper_char)
{
    m_var_map_inneraliasboundedwstringhelper_char = std::move(_var_map_inneraliasboundedwstringhelper_char);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_char
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_char
 */
const std::map<Inner_alias_bounded_wstring_helper, char>& MapInnerAliasBoundedWStringHelperChar::var_map_inneraliasboundedwstringhelper_char() const
{
    return m_var_map_inneraliasboundedwstringhelper_char;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_char
 * @return Reference to member var_map_inneraliasboundedwstringhelper_char
 */
std::map<Inner_alias_bounded_wstring_helper, char>& MapInnerAliasBoundedWStringHelperChar::var_map_inneraliasboundedwstringhelper_char()
{
    return m_var_map_inneraliasboundedwstringhelper_char;
}


size_t MapInnerAliasBoundedWStringHelperChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperChar_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperChar::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperWChar::MapInnerAliasBoundedWStringHelperWChar()
{
    // map<Inner_alias_bounded_wstring_helper, wchar> m_var_map_inneraliasboundedwstringhelper_wchar


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperWChar::~MapInnerAliasBoundedWStringHelperWChar()
{
}

MapInnerAliasBoundedWStringHelperWChar::MapInnerAliasBoundedWStringHelperWChar(
        const MapInnerAliasBoundedWStringHelperWChar& x)
{
    m_var_map_inneraliasboundedwstringhelper_wchar = x.m_var_map_inneraliasboundedwstringhelper_wchar;
}

MapInnerAliasBoundedWStringHelperWChar::MapInnerAliasBoundedWStringHelperWChar(
        MapInnerAliasBoundedWStringHelperWChar&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_wchar = std::move(x.m_var_map_inneraliasboundedwstringhelper_wchar);
}

MapInnerAliasBoundedWStringHelperWChar& MapInnerAliasBoundedWStringHelperWChar::operator =(
        const MapInnerAliasBoundedWStringHelperWChar& x)
{

    m_var_map_inneraliasboundedwstringhelper_wchar = x.m_var_map_inneraliasboundedwstringhelper_wchar;

    return *this;
}

MapInnerAliasBoundedWStringHelperWChar& MapInnerAliasBoundedWStringHelperWChar::operator =(
        MapInnerAliasBoundedWStringHelperWChar&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_wchar = std::move(x.m_var_map_inneraliasboundedwstringhelper_wchar);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperWChar::operator ==(
        const MapInnerAliasBoundedWStringHelperWChar& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_wchar == x.m_var_map_inneraliasboundedwstringhelper_wchar);
}

bool MapInnerAliasBoundedWStringHelperWChar::operator !=(
        const MapInnerAliasBoundedWStringHelperWChar& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperWChar::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperWChar_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperWChar::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperWChar& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_wchar())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperWChar::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_wchar.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_wchar)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperWChar::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_wchar.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            wchar_t value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_wchar[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_wchar
 * @param _var_map_inneraliasboundedwstringhelper_wchar New value to be copied in member var_map_inneraliasboundedwstringhelper_wchar
 */
void MapInnerAliasBoundedWStringHelperWChar::var_map_inneraliasboundedwstringhelper_wchar(
        const std::map<Inner_alias_bounded_wstring_helper, wchar_t>& _var_map_inneraliasboundedwstringhelper_wchar)
{
    m_var_map_inneraliasboundedwstringhelper_wchar = _var_map_inneraliasboundedwstringhelper_wchar;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_wchar
 * @param _var_map_inneraliasboundedwstringhelper_wchar New value to be moved in member var_map_inneraliasboundedwstringhelper_wchar
 */
void MapInnerAliasBoundedWStringHelperWChar::var_map_inneraliasboundedwstringhelper_wchar(
        std::map<Inner_alias_bounded_wstring_helper, wchar_t>&& _var_map_inneraliasboundedwstringhelper_wchar)
{
    m_var_map_inneraliasboundedwstringhelper_wchar = std::move(_var_map_inneraliasboundedwstringhelper_wchar);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_wchar
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_wchar
 */
const std::map<Inner_alias_bounded_wstring_helper, wchar_t>& MapInnerAliasBoundedWStringHelperWChar::var_map_inneraliasboundedwstringhelper_wchar() const
{
    return m_var_map_inneraliasboundedwstringhelper_wchar;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_wchar
 * @return Reference to member var_map_inneraliasboundedwstringhelper_wchar
 */
std::map<Inner_alias_bounded_wstring_helper, wchar_t>& MapInnerAliasBoundedWStringHelperWChar::var_map_inneraliasboundedwstringhelper_wchar()
{
    return m_var_map_inneraliasboundedwstringhelper_wchar;
}


size_t MapInnerAliasBoundedWStringHelperWChar::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperWChar_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperWChar::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperWChar::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperString::MapInnerAliasBoundedWStringHelperString()
{
    // map<Inner_alias_bounded_wstring_helper, string> m_var_map_inneraliasboundedwstringhelper_string


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperString::~MapInnerAliasBoundedWStringHelperString()
{
}

MapInnerAliasBoundedWStringHelperString::MapInnerAliasBoundedWStringHelperString(
        const MapInnerAliasBoundedWStringHelperString& x)
{
    m_var_map_inneraliasboundedwstringhelper_string = x.m_var_map_inneraliasboundedwstringhelper_string;
}

MapInnerAliasBoundedWStringHelperString::MapInnerAliasBoundedWStringHelperString(
        MapInnerAliasBoundedWStringHelperString&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_string = std::move(x.m_var_map_inneraliasboundedwstringhelper_string);
}

MapInnerAliasBoundedWStringHelperString& MapInnerAliasBoundedWStringHelperString::operator =(
        const MapInnerAliasBoundedWStringHelperString& x)
{

    m_var_map_inneraliasboundedwstringhelper_string = x.m_var_map_inneraliasboundedwstringhelper_string;

    return *this;
}

MapInnerAliasBoundedWStringHelperString& MapInnerAliasBoundedWStringHelperString::operator =(
        MapInnerAliasBoundedWStringHelperString&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_string = std::move(x.m_var_map_inneraliasboundedwstringhelper_string);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperString::operator ==(
        const MapInnerAliasBoundedWStringHelperString& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_string == x.m_var_map_inneraliasboundedwstringhelper_string);
}

bool MapInnerAliasBoundedWStringHelperString::operator !=(
        const MapInnerAliasBoundedWStringHelperString& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperString_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperString::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_string())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_string.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_string)
    {
        scdr << pair.first;
        scdr << pair.second.c_str();
    }}

void MapInnerAliasBoundedWStringHelperString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_string.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            std::string value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_string[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_string
 * @param _var_map_inneraliasboundedwstringhelper_string New value to be copied in member var_map_inneraliasboundedwstringhelper_string
 */
void MapInnerAliasBoundedWStringHelperString::var_map_inneraliasboundedwstringhelper_string(
        const std::map<Inner_alias_bounded_wstring_helper, std::string>& _var_map_inneraliasboundedwstringhelper_string)
{
    m_var_map_inneraliasboundedwstringhelper_string = _var_map_inneraliasboundedwstringhelper_string;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_string
 * @param _var_map_inneraliasboundedwstringhelper_string New value to be moved in member var_map_inneraliasboundedwstringhelper_string
 */
void MapInnerAliasBoundedWStringHelperString::var_map_inneraliasboundedwstringhelper_string(
        std::map<Inner_alias_bounded_wstring_helper, std::string>&& _var_map_inneraliasboundedwstringhelper_string)
{
    m_var_map_inneraliasboundedwstringhelper_string = std::move(_var_map_inneraliasboundedwstringhelper_string);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_string
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_string
 */
const std::map<Inner_alias_bounded_wstring_helper, std::string>& MapInnerAliasBoundedWStringHelperString::var_map_inneraliasboundedwstringhelper_string() const
{
    return m_var_map_inneraliasboundedwstringhelper_string;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_string
 * @return Reference to member var_map_inneraliasboundedwstringhelper_string
 */
std::map<Inner_alias_bounded_wstring_helper, std::string>& MapInnerAliasBoundedWStringHelperString::var_map_inneraliasboundedwstringhelper_string()
{
    return m_var_map_inneraliasboundedwstringhelper_string;
}


size_t MapInnerAliasBoundedWStringHelperString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperString_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperString::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperWString::MapInnerAliasBoundedWStringHelperWString()
{
    // map<Inner_alias_bounded_wstring_helper, wstring> m_var_map_inneraliasboundedwstringhelper_wstring


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperWString::~MapInnerAliasBoundedWStringHelperWString()
{
}

MapInnerAliasBoundedWStringHelperWString::MapInnerAliasBoundedWStringHelperWString(
        const MapInnerAliasBoundedWStringHelperWString& x)
{
    m_var_map_inneraliasboundedwstringhelper_wstring = x.m_var_map_inneraliasboundedwstringhelper_wstring;
}

MapInnerAliasBoundedWStringHelperWString::MapInnerAliasBoundedWStringHelperWString(
        MapInnerAliasBoundedWStringHelperWString&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_wstring = std::move(x.m_var_map_inneraliasboundedwstringhelper_wstring);
}

MapInnerAliasBoundedWStringHelperWString& MapInnerAliasBoundedWStringHelperWString::operator =(
        const MapInnerAliasBoundedWStringHelperWString& x)
{

    m_var_map_inneraliasboundedwstringhelper_wstring = x.m_var_map_inneraliasboundedwstringhelper_wstring;

    return *this;
}

MapInnerAliasBoundedWStringHelperWString& MapInnerAliasBoundedWStringHelperWString::operator =(
        MapInnerAliasBoundedWStringHelperWString&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_wstring = std::move(x.m_var_map_inneraliasboundedwstringhelper_wstring);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperWString::operator ==(
        const MapInnerAliasBoundedWStringHelperWString& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_wstring == x.m_var_map_inneraliasboundedwstringhelper_wstring);
}

bool MapInnerAliasBoundedWStringHelperWString::operator !=(
        const MapInnerAliasBoundedWStringHelperWString& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperWString::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperWString_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperWString::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperWString& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_wstring())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperWString::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_wstring.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_wstring)
    {
        scdr << pair.first;
        scdr << pair.second;
    }}

void MapInnerAliasBoundedWStringHelperWString::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_wstring.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            std::wstring value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_wstring[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_wstring
 * @param _var_map_inneraliasboundedwstringhelper_wstring New value to be copied in member var_map_inneraliasboundedwstringhelper_wstring
 */
void MapInnerAliasBoundedWStringHelperWString::var_map_inneraliasboundedwstringhelper_wstring(
        const std::map<Inner_alias_bounded_wstring_helper, std::wstring>& _var_map_inneraliasboundedwstringhelper_wstring)
{
    m_var_map_inneraliasboundedwstringhelper_wstring = _var_map_inneraliasboundedwstringhelper_wstring;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_wstring
 * @param _var_map_inneraliasboundedwstringhelper_wstring New value to be moved in member var_map_inneraliasboundedwstringhelper_wstring
 */
void MapInnerAliasBoundedWStringHelperWString::var_map_inneraliasboundedwstringhelper_wstring(
        std::map<Inner_alias_bounded_wstring_helper, std::wstring>&& _var_map_inneraliasboundedwstringhelper_wstring)
{
    m_var_map_inneraliasboundedwstringhelper_wstring = std::move(_var_map_inneraliasboundedwstringhelper_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_wstring
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_wstring
 */
const std::map<Inner_alias_bounded_wstring_helper, std::wstring>& MapInnerAliasBoundedWStringHelperWString::var_map_inneraliasboundedwstringhelper_wstring() const
{
    return m_var_map_inneraliasboundedwstringhelper_wstring;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_wstring
 * @return Reference to member var_map_inneraliasboundedwstringhelper_wstring
 */
std::map<Inner_alias_bounded_wstring_helper, std::wstring>& MapInnerAliasBoundedWStringHelperWString::var_map_inneraliasboundedwstringhelper_wstring()
{
    return m_var_map_inneraliasboundedwstringhelper_wstring;
}


size_t MapInnerAliasBoundedWStringHelperWString::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperWString_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperWString::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperWString::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper()
{
    // map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_string_helper> m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::~MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper;
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper(
        MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper& MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper& MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper == x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);
}

bool MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() + 1;
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper)
    {
        scdr << pair.first;
        scdr << pair.second.c_str();
    }}

void MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            std::string value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper[key] = value.c_str();

    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper New value to be copied in member var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper(
        const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_string_helper>& _var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = _var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper New value to be moved in member var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper(
        std::map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_string_helper>&& _var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper = std::move(_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper
 */
const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_string_helper>& MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper
 */
std::map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_string_helper>& MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper()
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliasboundedstringhelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerAliasBoundedStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper()
{
    // map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_wstring_helper> m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::~MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper;
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper(
        MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper& MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper& MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper == x.m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);
}

bool MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.second.size() * 4;
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper)
    {
        scdr << pair.first;
        scdr << pair.second;
    }}

void MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            std::wstring value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper[key] = value;
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper New value to be copied in member var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper(
        const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_wstring_helper>& _var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = _var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper New value to be moved in member var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper(
        std::map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_wstring_helper>&& _var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper = std::move(_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper
 */
const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_wstring_helper>& MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper
 */
std::map<Inner_alias_bounded_wstring_helper, Inner_alias_bounded_wstring_helper>& MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper()
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliasboundedwstringhelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerAliasBoundedWStringHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerEnumHelper::MapInnerAliasBoundedWStringHelperInnerEnumHelper()
{
    // map<Inner_alias_bounded_wstring_helper, InnerEnumHelper> m_var_map_inneraliasboundedwstringhelper_innerenumhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerEnumHelper::~MapInnerAliasBoundedWStringHelperInnerEnumHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerEnumHelper::MapInnerAliasBoundedWStringHelperInnerEnumHelper(
        const MapInnerAliasBoundedWStringHelperInnerEnumHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_innerenumhelper = x.m_var_map_inneraliasboundedwstringhelper_innerenumhelper;
}

MapInnerAliasBoundedWStringHelperInnerEnumHelper::MapInnerAliasBoundedWStringHelperInnerEnumHelper(
        MapInnerAliasBoundedWStringHelperInnerEnumHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_innerenumhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerenumhelper);
}

MapInnerAliasBoundedWStringHelperInnerEnumHelper& MapInnerAliasBoundedWStringHelperInnerEnumHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerEnumHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_innerenumhelper = x.m_var_map_inneraliasboundedwstringhelper_innerenumhelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerEnumHelper& MapInnerAliasBoundedWStringHelperInnerEnumHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerEnumHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_innerenumhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerenumhelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerEnumHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerEnumHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_innerenumhelper == x.m_var_map_inneraliasboundedwstringhelper_innerenumhelper);
}

bool MapInnerAliasBoundedWStringHelperInnerEnumHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerEnumHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerEnumHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerEnumHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerEnumHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerEnumHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_innerenumhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerEnumHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_innerenumhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_innerenumhelper)
    {
        scdr << pair.first;
        scdr << static_cast<uint32_t>(pair.second);
    }}

void MapInnerAliasBoundedWStringHelperInnerEnumHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_innerenumhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        std::wstring key;
            std::wstring aux;
            dcdr >> aux;
            key = aux.c_str();
        uint32_t value;
        dcdr >> value;
        m_var_map_inneraliasboundedwstringhelper_innerenumhelper[key] = static_cast<InnerEnumHelper>(value);
    }

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_innerenumhelper
 * @param _var_map_inneraliasboundedwstringhelper_innerenumhelper New value to be copied in member var_map_inneraliasboundedwstringhelper_innerenumhelper
 */
void MapInnerAliasBoundedWStringHelperInnerEnumHelper::var_map_inneraliasboundedwstringhelper_innerenumhelper(
        const std::map<Inner_alias_bounded_wstring_helper, InnerEnumHelper>& _var_map_inneraliasboundedwstringhelper_innerenumhelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerenumhelper = _var_map_inneraliasboundedwstringhelper_innerenumhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_innerenumhelper
 * @param _var_map_inneraliasboundedwstringhelper_innerenumhelper New value to be moved in member var_map_inneraliasboundedwstringhelper_innerenumhelper
 */
void MapInnerAliasBoundedWStringHelperInnerEnumHelper::var_map_inneraliasboundedwstringhelper_innerenumhelper(
        std::map<Inner_alias_bounded_wstring_helper, InnerEnumHelper>&& _var_map_inneraliasboundedwstringhelper_innerenumhelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerenumhelper = std::move(_var_map_inneraliasboundedwstringhelper_innerenumhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_innerenumhelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_innerenumhelper
 */
const std::map<Inner_alias_bounded_wstring_helper, InnerEnumHelper>& MapInnerAliasBoundedWStringHelperInnerEnumHelper::var_map_inneraliasboundedwstringhelper_innerenumhelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_innerenumhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_innerenumhelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_innerenumhelper
 */
std::map<Inner_alias_bounded_wstring_helper, InnerEnumHelper>& MapInnerAliasBoundedWStringHelperInnerEnumHelper::var_map_inneraliasboundedwstringhelper_innerenumhelper()
{
    return m_var_map_inneraliasboundedwstringhelper_innerenumhelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerEnumHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerEnumHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerEnumHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerEnumHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::MapInnerAliasBoundedWStringHelperInnerBitMaskHelper()
{
    // map<Inner_alias_bounded_wstring_helper, InnerBitMaskHelper> m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::~MapInnerAliasBoundedWStringHelperInnerBitMaskHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::MapInnerAliasBoundedWStringHelperInnerBitMaskHelper(
        const MapInnerAliasBoundedWStringHelperInnerBitMaskHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = x.m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper;
}

MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::MapInnerAliasBoundedWStringHelperInnerBitMaskHelper(
        MapInnerAliasBoundedWStringHelperInnerBitMaskHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);
}

MapInnerAliasBoundedWStringHelperInnerBitMaskHelper& MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerBitMaskHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = x.m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerBitMaskHelper& MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerBitMaskHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerBitMaskHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper == x.m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);
}

bool MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerBitMaskHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerBitMaskHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerBitMaskHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_innerbitmaskhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper)
    {
        scdr << pair.first;
        scdr << static_cast<uint32_t>(pair.second);
    }}

void MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
        std::wstring key;
            std::wstring aux;
            dcdr >> aux;
            key = aux.c_str();
        uint32_t value;        
        dcdr >> value;        
        m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper[key] = static_cast<InnerBitMaskHelper>(value);}

}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_innerbitmaskhelper
 * @param _var_map_inneraliasboundedwstringhelper_innerbitmaskhelper New value to be copied in member var_map_inneraliasboundedwstringhelper_innerbitmaskhelper
 */
void MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::var_map_inneraliasboundedwstringhelper_innerbitmaskhelper(
        const std::map<Inner_alias_bounded_wstring_helper, InnerBitMaskHelper>& _var_map_inneraliasboundedwstringhelper_innerbitmaskhelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = _var_map_inneraliasboundedwstringhelper_innerbitmaskhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_innerbitmaskhelper
 * @param _var_map_inneraliasboundedwstringhelper_innerbitmaskhelper New value to be moved in member var_map_inneraliasboundedwstringhelper_innerbitmaskhelper
 */
void MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::var_map_inneraliasboundedwstringhelper_innerbitmaskhelper(
        std::map<Inner_alias_bounded_wstring_helper, InnerBitMaskHelper>&& _var_map_inneraliasboundedwstringhelper_innerbitmaskhelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper = std::move(_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_innerbitmaskhelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_innerbitmaskhelper
 */
const std::map<Inner_alias_bounded_wstring_helper, InnerBitMaskHelper>& MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::var_map_inneraliasboundedwstringhelper_innerbitmaskhelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_innerbitmaskhelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_innerbitmaskhelper
 */
std::map<Inner_alias_bounded_wstring_helper, InnerBitMaskHelper>& MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::var_map_inneraliasboundedwstringhelper_innerbitmaskhelper()
{
    return m_var_map_inneraliasboundedwstringhelper_innerbitmaskhelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerBitMaskHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerBitMaskHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerAliasHelper::MapInnerAliasBoundedWStringHelperInnerAliasHelper()
{
    // map<Inner_alias_bounded_wstring_helper, InnerAliasHelper> m_var_map_inneraliasboundedwstringhelper_inneraliashelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerAliasHelper::~MapInnerAliasBoundedWStringHelperInnerAliasHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerAliasHelper::MapInnerAliasBoundedWStringHelperInnerAliasHelper(
        const MapInnerAliasBoundedWStringHelperInnerAliasHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliashelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliashelper;
}

MapInnerAliasBoundedWStringHelperInnerAliasHelper::MapInnerAliasBoundedWStringHelperInnerAliasHelper(
        MapInnerAliasBoundedWStringHelperInnerAliasHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_inneraliashelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliashelper);
}

MapInnerAliasBoundedWStringHelperInnerAliasHelper& MapInnerAliasBoundedWStringHelperInnerAliasHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerAliasHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_inneraliashelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliashelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerAliasHelper& MapInnerAliasBoundedWStringHelperInnerAliasHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerAliasHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_inneraliashelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliashelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerAliasHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_inneraliashelper == x.m_var_map_inneraliasboundedwstringhelper_inneraliashelper);
}

bool MapInnerAliasBoundedWStringHelperInnerAliasHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerAliasHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerAliasHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_inneraliashelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerAliasHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_inneraliashelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_inneraliashelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperInnerAliasHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_inneraliashelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            InnerAliasHelper value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_inneraliashelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_inneraliashelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliashelper New value to be copied in member var_map_inneraliasboundedwstringhelper_inneraliashelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasHelper::var_map_inneraliasboundedwstringhelper_inneraliashelper(
        const std::map<Inner_alias_bounded_wstring_helper, InnerAliasHelper>& _var_map_inneraliasboundedwstringhelper_inneraliashelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliashelper = _var_map_inneraliasboundedwstringhelper_inneraliashelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_inneraliashelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliashelper New value to be moved in member var_map_inneraliasboundedwstringhelper_inneraliashelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasHelper::var_map_inneraliasboundedwstringhelper_inneraliashelper(
        std::map<Inner_alias_bounded_wstring_helper, InnerAliasHelper>&& _var_map_inneraliasboundedwstringhelper_inneraliashelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliashelper = std::move(_var_map_inneraliasboundedwstringhelper_inneraliashelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_inneraliashelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_inneraliashelper
 */
const std::map<Inner_alias_bounded_wstring_helper, InnerAliasHelper>& MapInnerAliasBoundedWStringHelperInnerAliasHelper::var_map_inneraliasboundedwstringhelper_inneraliashelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliashelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_inneraliashelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_inneraliashelper
 */
std::map<Inner_alias_bounded_wstring_helper, InnerAliasHelper>& MapInnerAliasBoundedWStringHelperInnerAliasHelper::var_map_inneraliasboundedwstringhelper_inneraliashelper()
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliashelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerAliasHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerAliasHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper()
{
    // map<Inner_alias_bounded_wstring_helper, Inner_alias_array_helper> m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::~MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper(
        const MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper;
}

MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper(
        MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);
}

MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper& MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper& MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper == x.m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);
}

bool MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += ((2) * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            Inner_alias_array_helper value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper New value to be copied in member var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper(
        const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_array_helper>& _var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = _var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper New value to be moved in member var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper(
        std::map<Inner_alias_bounded_wstring_helper, Inner_alias_array_helper>&& _var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper = std::move(_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper
 */
const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_array_helper>& MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper
 */
std::map<Inner_alias_bounded_wstring_helper, Inner_alias_array_helper>& MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper()
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliasarrayhelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerAliasArrayHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper()
{
    // map<Inner_alias_bounded_wstring_helper, Inner_alias_sequence_helper> m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::~MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper(
        const MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper;
}

MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper(
        MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);
}

MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper& MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper& MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper == x.m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);
}

bool MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_inneraliassequencehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            if (a.second.size() > 0)
            {
                current_alignment += (a.second.size() * 2) + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);
            }


    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            Inner_alias_sequence_helper value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_inneraliassequencehelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliassequencehelper New value to be copied in member var_map_inneraliasboundedwstringhelper_inneraliassequencehelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::var_map_inneraliasboundedwstringhelper_inneraliassequencehelper(
        const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_sequence_helper>& _var_map_inneraliasboundedwstringhelper_inneraliassequencehelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = _var_map_inneraliasboundedwstringhelper_inneraliassequencehelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_inneraliassequencehelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliassequencehelper New value to be moved in member var_map_inneraliasboundedwstringhelper_inneraliassequencehelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::var_map_inneraliasboundedwstringhelper_inneraliassequencehelper(
        std::map<Inner_alias_bounded_wstring_helper, Inner_alias_sequence_helper>&& _var_map_inneraliasboundedwstringhelper_inneraliassequencehelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper = std::move(_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_inneraliassequencehelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_inneraliassequencehelper
 */
const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_sequence_helper>& MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::var_map_inneraliasboundedwstringhelper_inneraliassequencehelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_inneraliassequencehelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_inneraliassequencehelper
 */
std::map<Inner_alias_bounded_wstring_helper, Inner_alias_sequence_helper>& MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::var_map_inneraliasboundedwstringhelper_inneraliassequencehelper()
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliassequencehelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerAliasSequenceHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::MapInnerAliasBoundedWStringHelperInnerAliasMapHelper()
{
    // map<Inner_alias_bounded_wstring_helper, Inner_alias_map_helper> m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::~MapInnerAliasBoundedWStringHelperInnerAliasMapHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::MapInnerAliasBoundedWStringHelperInnerAliasMapHelper(
        const MapInnerAliasBoundedWStringHelperInnerAliasMapHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper;
}

MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::MapInnerAliasBoundedWStringHelperInnerAliasMapHelper(
        MapInnerAliasBoundedWStringHelperInnerAliasMapHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);
}

MapInnerAliasBoundedWStringHelperInnerAliasMapHelper& MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerAliasMapHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = x.m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerAliasMapHelper& MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerAliasMapHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerAliasMapHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper == x.m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);
}

bool MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerAliasMapHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasMapHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerAliasMapHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_inneraliasmaphelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

            for(auto b : a.second)
            {
                (void)b;

                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
                    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            }
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            Inner_alias_map_helper value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_inneraliasmaphelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliasmaphelper New value to be copied in member var_map_inneraliasboundedwstringhelper_inneraliasmaphelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::var_map_inneraliasboundedwstringhelper_inneraliasmaphelper(
        const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_map_helper>& _var_map_inneraliasboundedwstringhelper_inneraliasmaphelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = _var_map_inneraliasboundedwstringhelper_inneraliasmaphelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_inneraliasmaphelper
 * @param _var_map_inneraliasboundedwstringhelper_inneraliasmaphelper New value to be moved in member var_map_inneraliasboundedwstringhelper_inneraliasmaphelper
 */
void MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::var_map_inneraliasboundedwstringhelper_inneraliasmaphelper(
        std::map<Inner_alias_bounded_wstring_helper, Inner_alias_map_helper>&& _var_map_inneraliasboundedwstringhelper_inneraliasmaphelper)
{
    m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper = std::move(_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_inneraliasmaphelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_inneraliasmaphelper
 */
const std::map<Inner_alias_bounded_wstring_helper, Inner_alias_map_helper>& MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::var_map_inneraliasboundedwstringhelper_inneraliasmaphelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_inneraliasmaphelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_inneraliasmaphelper
 */
std::map<Inner_alias_bounded_wstring_helper, Inner_alias_map_helper>& MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::var_map_inneraliasboundedwstringhelper_inneraliasmaphelper()
{
    return m_var_map_inneraliasboundedwstringhelper_inneraliasmaphelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerAliasMapHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerAliasMapHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerUnionHelper::MapInnerAliasBoundedWStringHelperInnerUnionHelper()
{
    // map<Inner_alias_bounded_wstring_helper, InnerUnionHelper> m_var_map_inneraliasboundedwstringhelper_innerunionhelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerUnionHelper::~MapInnerAliasBoundedWStringHelperInnerUnionHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerUnionHelper::MapInnerAliasBoundedWStringHelperInnerUnionHelper(
        const MapInnerAliasBoundedWStringHelperInnerUnionHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_innerunionhelper = x.m_var_map_inneraliasboundedwstringhelper_innerunionhelper;
}

MapInnerAliasBoundedWStringHelperInnerUnionHelper::MapInnerAliasBoundedWStringHelperInnerUnionHelper(
        MapInnerAliasBoundedWStringHelperInnerUnionHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_innerunionhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerunionhelper);
}

MapInnerAliasBoundedWStringHelperInnerUnionHelper& MapInnerAliasBoundedWStringHelperInnerUnionHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerUnionHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_innerunionhelper = x.m_var_map_inneraliasboundedwstringhelper_innerunionhelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerUnionHelper& MapInnerAliasBoundedWStringHelperInnerUnionHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerUnionHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_innerunionhelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerunionhelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerUnionHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerUnionHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_innerunionhelper == x.m_var_map_inneraliasboundedwstringhelper_innerunionhelper);
}

bool MapInnerAliasBoundedWStringHelperInnerUnionHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerUnionHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerUnionHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerUnionHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerUnionHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerUnionHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_innerunionhelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += InnerUnionHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerUnionHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_innerunionhelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_innerunionhelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperInnerUnionHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_innerunionhelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            InnerUnionHelper value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_innerunionhelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_innerunionhelper
 * @param _var_map_inneraliasboundedwstringhelper_innerunionhelper New value to be copied in member var_map_inneraliasboundedwstringhelper_innerunionhelper
 */
void MapInnerAliasBoundedWStringHelperInnerUnionHelper::var_map_inneraliasboundedwstringhelper_innerunionhelper(
        const std::map<Inner_alias_bounded_wstring_helper, InnerUnionHelper>& _var_map_inneraliasboundedwstringhelper_innerunionhelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerunionhelper = _var_map_inneraliasboundedwstringhelper_innerunionhelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_innerunionhelper
 * @param _var_map_inneraliasboundedwstringhelper_innerunionhelper New value to be moved in member var_map_inneraliasboundedwstringhelper_innerunionhelper
 */
void MapInnerAliasBoundedWStringHelperInnerUnionHelper::var_map_inneraliasboundedwstringhelper_innerunionhelper(
        std::map<Inner_alias_bounded_wstring_helper, InnerUnionHelper>&& _var_map_inneraliasboundedwstringhelper_innerunionhelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerunionhelper = std::move(_var_map_inneraliasboundedwstringhelper_innerunionhelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_innerunionhelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_innerunionhelper
 */
const std::map<Inner_alias_bounded_wstring_helper, InnerUnionHelper>& MapInnerAliasBoundedWStringHelperInnerUnionHelper::var_map_inneraliasboundedwstringhelper_innerunionhelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_innerunionhelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_innerunionhelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_innerunionhelper
 */
std::map<Inner_alias_bounded_wstring_helper, InnerUnionHelper>& MapInnerAliasBoundedWStringHelperInnerUnionHelper::var_map_inneraliasboundedwstringhelper_innerunionhelper()
{
    return m_var_map_inneraliasboundedwstringhelper_innerunionhelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerUnionHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerUnionHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerUnionHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerUnionHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerStructureHelper::MapInnerAliasBoundedWStringHelperInnerStructureHelper()
{
    // map<Inner_alias_bounded_wstring_helper, InnerStructureHelper> m_var_map_inneraliasboundedwstringhelper_innerstructurehelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerStructureHelper::~MapInnerAliasBoundedWStringHelperInnerStructureHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerStructureHelper::MapInnerAliasBoundedWStringHelperInnerStructureHelper(
        const MapInnerAliasBoundedWStringHelperInnerStructureHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_innerstructurehelper = x.m_var_map_inneraliasboundedwstringhelper_innerstructurehelper;
}

MapInnerAliasBoundedWStringHelperInnerStructureHelper::MapInnerAliasBoundedWStringHelperInnerStructureHelper(
        MapInnerAliasBoundedWStringHelperInnerStructureHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_innerstructurehelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerstructurehelper);
}

MapInnerAliasBoundedWStringHelperInnerStructureHelper& MapInnerAliasBoundedWStringHelperInnerStructureHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerStructureHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_innerstructurehelper = x.m_var_map_inneraliasboundedwstringhelper_innerstructurehelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerStructureHelper& MapInnerAliasBoundedWStringHelperInnerStructureHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerStructureHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_innerstructurehelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerstructurehelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerStructureHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerStructureHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_innerstructurehelper == x.m_var_map_inneraliasboundedwstringhelper_innerstructurehelper);
}

bool MapInnerAliasBoundedWStringHelperInnerStructureHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerStructureHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerStructureHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerStructureHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerStructureHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerStructureHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_innerstructurehelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += InnerStructureHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerStructureHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_innerstructurehelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_innerstructurehelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperInnerStructureHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_innerstructurehelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            InnerStructureHelper value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_innerstructurehelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_innerstructurehelper
 * @param _var_map_inneraliasboundedwstringhelper_innerstructurehelper New value to be copied in member var_map_inneraliasboundedwstringhelper_innerstructurehelper
 */
void MapInnerAliasBoundedWStringHelperInnerStructureHelper::var_map_inneraliasboundedwstringhelper_innerstructurehelper(
        const std::map<Inner_alias_bounded_wstring_helper, InnerStructureHelper>& _var_map_inneraliasboundedwstringhelper_innerstructurehelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerstructurehelper = _var_map_inneraliasboundedwstringhelper_innerstructurehelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_innerstructurehelper
 * @param _var_map_inneraliasboundedwstringhelper_innerstructurehelper New value to be moved in member var_map_inneraliasboundedwstringhelper_innerstructurehelper
 */
void MapInnerAliasBoundedWStringHelperInnerStructureHelper::var_map_inneraliasboundedwstringhelper_innerstructurehelper(
        std::map<Inner_alias_bounded_wstring_helper, InnerStructureHelper>&& _var_map_inneraliasboundedwstringhelper_innerstructurehelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerstructurehelper = std::move(_var_map_inneraliasboundedwstringhelper_innerstructurehelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_innerstructurehelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_innerstructurehelper
 */
const std::map<Inner_alias_bounded_wstring_helper, InnerStructureHelper>& MapInnerAliasBoundedWStringHelperInnerStructureHelper::var_map_inneraliasboundedwstringhelper_innerstructurehelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_innerstructurehelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_innerstructurehelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_innerstructurehelper
 */
std::map<Inner_alias_bounded_wstring_helper, InnerStructureHelper>& MapInnerAliasBoundedWStringHelperInnerStructureHelper::var_map_inneraliasboundedwstringhelper_innerstructurehelper()
{
    return m_var_map_inneraliasboundedwstringhelper_innerstructurehelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerStructureHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerStructureHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerStructureHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerStructureHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


MapInnerAliasBoundedWStringHelperInnerBitsetHelper::MapInnerAliasBoundedWStringHelperInnerBitsetHelper()
{
    // map<Inner_alias_bounded_wstring_helper, InnerBitsetHelper> m_var_map_inneraliasboundedwstringhelper_innerbitsethelper


    // Just to register all known types
    registermapsTypes();
}

MapInnerAliasBoundedWStringHelperInnerBitsetHelper::~MapInnerAliasBoundedWStringHelperInnerBitsetHelper()
{
}

MapInnerAliasBoundedWStringHelperInnerBitsetHelper::MapInnerAliasBoundedWStringHelperInnerBitsetHelper(
        const MapInnerAliasBoundedWStringHelperInnerBitsetHelper& x)
{
    m_var_map_inneraliasboundedwstringhelper_innerbitsethelper = x.m_var_map_inneraliasboundedwstringhelper_innerbitsethelper;
}

MapInnerAliasBoundedWStringHelperInnerBitsetHelper::MapInnerAliasBoundedWStringHelperInnerBitsetHelper(
        MapInnerAliasBoundedWStringHelperInnerBitsetHelper&& x) noexcept 
{
    m_var_map_inneraliasboundedwstringhelper_innerbitsethelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerbitsethelper);
}

MapInnerAliasBoundedWStringHelperInnerBitsetHelper& MapInnerAliasBoundedWStringHelperInnerBitsetHelper::operator =(
        const MapInnerAliasBoundedWStringHelperInnerBitsetHelper& x)
{

    m_var_map_inneraliasboundedwstringhelper_innerbitsethelper = x.m_var_map_inneraliasboundedwstringhelper_innerbitsethelper;

    return *this;
}

MapInnerAliasBoundedWStringHelperInnerBitsetHelper& MapInnerAliasBoundedWStringHelperInnerBitsetHelper::operator =(
        MapInnerAliasBoundedWStringHelperInnerBitsetHelper&& x) noexcept
{

    m_var_map_inneraliasboundedwstringhelper_innerbitsethelper = std::move(x.m_var_map_inneraliasboundedwstringhelper_innerbitsethelper);

    return *this;
}

bool MapInnerAliasBoundedWStringHelperInnerBitsetHelper::operator ==(
        const MapInnerAliasBoundedWStringHelperInnerBitsetHelper& x) const
{

    return (m_var_map_inneraliasboundedwstringhelper_innerbitsethelper == x.m_var_map_inneraliasboundedwstringhelper_innerbitsethelper);
}

bool MapInnerAliasBoundedWStringHelperInnerBitsetHelper::operator !=(
        const MapInnerAliasBoundedWStringHelperInnerBitsetHelper& x) const
{
    return !(*this == x);
}

size_t MapInnerAliasBoundedWStringHelperInnerBitsetHelper::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerBitsetHelper_max_cdr_typesize;
}

size_t MapInnerAliasBoundedWStringHelperInnerBitsetHelper::getCdrSerializedSize(
        const MapInnerAliasBoundedWStringHelperInnerBitsetHelper& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_map_inneraliasboundedwstringhelper_innerbitsethelper())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + a.first.size() * 4;
            current_alignment += InnerBitsetHelper::getCdrSerializedSize(a.second, current_alignment);
    }

    return current_alignment - initial_alignment;
}

void MapInnerAliasBoundedWStringHelperInnerBitsetHelper::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_map_inneraliasboundedwstringhelper_innerbitsethelper.size());
    for (const auto& pair : m_var_map_inneraliasboundedwstringhelper_innerbitsethelper)
    {
        scdr << pair.first;
        scdr << pair.second;}}

void MapInnerAliasBoundedWStringHelperInnerBitsetHelper::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


    uint32_t seq_length = 0;
    dcdr >> seq_length;
    m_var_map_inneraliasboundedwstringhelper_innerbitsethelper.clear();
    for (uint32_t i = 0; i < seq_length; ++i)
    {
            std::wstring key;
                std::wstring aux;
                dcdr >> aux;
                key = aux.c_str();
            InnerBitsetHelper value;
            dcdr >> value;
            m_var_map_inneraliasboundedwstringhelper_innerbitsethelper[key] = value;
    }
}

/*!
 * @brief This function copies the value in member var_map_inneraliasboundedwstringhelper_innerbitsethelper
 * @param _var_map_inneraliasboundedwstringhelper_innerbitsethelper New value to be copied in member var_map_inneraliasboundedwstringhelper_innerbitsethelper
 */
void MapInnerAliasBoundedWStringHelperInnerBitsetHelper::var_map_inneraliasboundedwstringhelper_innerbitsethelper(
        const std::map<Inner_alias_bounded_wstring_helper, InnerBitsetHelper>& _var_map_inneraliasboundedwstringhelper_innerbitsethelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerbitsethelper = _var_map_inneraliasboundedwstringhelper_innerbitsethelper;
}

/*!
 * @brief This function moves the value in member var_map_inneraliasboundedwstringhelper_innerbitsethelper
 * @param _var_map_inneraliasboundedwstringhelper_innerbitsethelper New value to be moved in member var_map_inneraliasboundedwstringhelper_innerbitsethelper
 */
void MapInnerAliasBoundedWStringHelperInnerBitsetHelper::var_map_inneraliasboundedwstringhelper_innerbitsethelper(
        std::map<Inner_alias_bounded_wstring_helper, InnerBitsetHelper>&& _var_map_inneraliasboundedwstringhelper_innerbitsethelper)
{
    m_var_map_inneraliasboundedwstringhelper_innerbitsethelper = std::move(_var_map_inneraliasboundedwstringhelper_innerbitsethelper);
}

/*!
 * @brief This function returns a constant reference to member var_map_inneraliasboundedwstringhelper_innerbitsethelper
 * @return Constant reference to member var_map_inneraliasboundedwstringhelper_innerbitsethelper
 */
const std::map<Inner_alias_bounded_wstring_helper, InnerBitsetHelper>& MapInnerAliasBoundedWStringHelperInnerBitsetHelper::var_map_inneraliasboundedwstringhelper_innerbitsethelper() const
{
    return m_var_map_inneraliasboundedwstringhelper_innerbitsethelper;
}

/*!
 * @brief This function returns a reference to member var_map_inneraliasboundedwstringhelper_innerbitsethelper
 * @return Reference to member var_map_inneraliasboundedwstringhelper_innerbitsethelper
 */
std::map<Inner_alias_bounded_wstring_helper, InnerBitsetHelper>& MapInnerAliasBoundedWStringHelperInnerBitsetHelper::var_map_inneraliasboundedwstringhelper_innerbitsethelper()
{
    return m_var_map_inneraliasboundedwstringhelper_innerbitsethelper;
}


size_t MapInnerAliasBoundedWStringHelperInnerBitsetHelper::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return MapInnerAliasBoundedWStringHelperInnerBitsetHelper_max_key_cdr_typesize;
}

bool MapInnerAliasBoundedWStringHelperInnerBitsetHelper::isKeyDefined()
{
    return false;
}

void MapInnerAliasBoundedWStringHelperInnerBitsetHelper::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


BoundedSmallMap::BoundedSmallMap()
{
    // map<long, long> m_var_small_map


    // Just to register all known types
    registermapsTypes();
}

BoundedSmallMap::~BoundedSmallMap()
{
}

BoundedSmallMap::BoundedSmallMap(
        const BoundedSmallMap& x)
{
    m_var_small_map = x.m_var_small_map;
}

BoundedSmallMap::BoundedSmallMap(
        BoundedSmallMap&& x) noexcept 
{
    m_var_small_map = std::move(x.m_var_small_map);
}

BoundedSmallMap& BoundedSmallMap::operator =(
        const BoundedSmallMap& x)
{

    m_var_small_map = x.m_var_small_map;

    return *this;
}

BoundedSmallMap& BoundedSmallMap::operator =(
        BoundedSmallMap&& x) noexcept
{

    m_var_small_map = std::move(x.m_var_small_map);

    return *this;
}

bool BoundedSmallMap::operator ==(
        const BoundedSmallMap& x) const
{

    return (m_var_small_map == x.m_var_small_map);
}

bool BoundedSmallMap::operator !=(
        const BoundedSmallMap& x) const
{
    return !(*this == x);
}

size_t BoundedSmallMap::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BoundedSmallMap_max_cdr_typesize;
}

size_t BoundedSmallMap::getCdrSerializedSize(
        const BoundedSmallMap& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_small_map())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void BoundedSmallMap::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_small_map.size());
    for (const auto& pair : m_var_small_map)
    {
        scdr << pair.first;    scdr << pair.second;}}

void BoundedSmallMap::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_small_map;
}

/*!
 * @brief This function copies the value in member var_small_map
 * @param _var_small_map New value to be copied in member var_small_map
 */
void BoundedSmallMap::var_small_map(
        const std::map<int32_t, int32_t>& _var_small_map)
{
    m_var_small_map = _var_small_map;
}

/*!
 * @brief This function moves the value in member var_small_map
 * @param _var_small_map New value to be moved in member var_small_map
 */
void BoundedSmallMap::var_small_map(
        std::map<int32_t, int32_t>&& _var_small_map)
{
    m_var_small_map = std::move(_var_small_map);
}

/*!
 * @brief This function returns a constant reference to member var_small_map
 * @return Constant reference to member var_small_map
 */
const std::map<int32_t, int32_t>& BoundedSmallMap::var_small_map() const
{
    return m_var_small_map;
}

/*!
 * @brief This function returns a reference to member var_small_map
 * @return Reference to member var_small_map
 */
std::map<int32_t, int32_t>& BoundedSmallMap::var_small_map()
{
    return m_var_small_map;
}


size_t BoundedSmallMap::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BoundedSmallMap_max_key_cdr_typesize;
}

bool BoundedSmallMap::isKeyDefined()
{
    return false;
}

void BoundedSmallMap::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


BoundedLargeMap::BoundedLargeMap()
{
    // map<long, long> m_var_large_map


    // Just to register all known types
    registermapsTypes();
}

BoundedLargeMap::~BoundedLargeMap()
{
}

BoundedLargeMap::BoundedLargeMap(
        const BoundedLargeMap& x)
{
    m_var_large_map = x.m_var_large_map;
}

BoundedLargeMap::BoundedLargeMap(
        BoundedLargeMap&& x) noexcept 
{
    m_var_large_map = std::move(x.m_var_large_map);
}

BoundedLargeMap& BoundedLargeMap::operator =(
        const BoundedLargeMap& x)
{

    m_var_large_map = x.m_var_large_map;

    return *this;
}

BoundedLargeMap& BoundedLargeMap::operator =(
        BoundedLargeMap&& x) noexcept
{

    m_var_large_map = std::move(x.m_var_large_map);

    return *this;
}

bool BoundedLargeMap::operator ==(
        const BoundedLargeMap& x) const
{

    return (m_var_large_map == x.m_var_large_map);
}

bool BoundedLargeMap::operator !=(
        const BoundedLargeMap& x) const
{
    return !(*this == x);
}

size_t BoundedLargeMap::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BoundedLargeMap_max_cdr_typesize;
}

size_t BoundedLargeMap::getCdrSerializedSize(
        const BoundedLargeMap& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    for(auto a : data.var_large_map())
    {
        (void)a;

            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }

    return current_alignment - initial_alignment;
}

void BoundedLargeMap::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << static_cast<uint32_t>(m_var_large_map.size());
    for (const auto& pair : m_var_large_map)
    {
        scdr << pair.first;    scdr << pair.second;}}

void BoundedLargeMap::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{


        dcdr >> m_var_large_map;
}

/*!
 * @brief This function copies the value in member var_large_map
 * @param _var_large_map New value to be copied in member var_large_map
 */
void BoundedLargeMap::var_large_map(
        const std::map<int32_t, int32_t>& _var_large_map)
{
    m_var_large_map = _var_large_map;
}

/*!
 * @brief This function moves the value in member var_large_map
 * @param _var_large_map New value to be moved in member var_large_map
 */
void BoundedLargeMap::var_large_map(
        std::map<int32_t, int32_t>&& _var_large_map)
{
    m_var_large_map = std::move(_var_large_map);
}

/*!
 * @brief This function returns a constant reference to member var_large_map
 * @return Constant reference to member var_large_map
 */
const std::map<int32_t, int32_t>& BoundedLargeMap::var_large_map() const
{
    return m_var_large_map;
}

/*!
 * @brief This function returns a reference to member var_large_map
 * @return Reference to member var_large_map
 */
std::map<int32_t, int32_t>& BoundedLargeMap::var_large_map()
{
    return m_var_large_map;
}


size_t BoundedLargeMap::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return BoundedLargeMap_max_key_cdr_typesize;
}

bool BoundedLargeMap::isKeyDefined()
{
    return false;
}

void BoundedLargeMap::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

