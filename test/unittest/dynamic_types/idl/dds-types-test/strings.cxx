// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file strings.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "strings.h"
#include "stringsTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define LargeStringStruct_max_cdr_typesize 41930ULL;
#define WStringStruct_max_cdr_typesize 1024ULL;
#define StringStruct_max_cdr_typesize 260ULL;
#define SmallStringStruct_max_cdr_typesize 6ULL;
#define SmallWStringStruct_max_cdr_typesize 8ULL;
#define LargeWStringStruct_max_cdr_typesize 167704ULL;
#define LargeStringStruct_max_key_cdr_typesize 0ULL;
#define WStringStruct_max_key_cdr_typesize 0ULL;
#define StringStruct_max_key_cdr_typesize 0ULL;
#define SmallStringStruct_max_key_cdr_typesize 0ULL;
#define SmallWStringStruct_max_key_cdr_typesize 0ULL;
#define LargeWStringStruct_max_key_cdr_typesize 0ULL;

StringStruct::StringStruct()
{
    // string m_var_string8
    m_var_string8 = "";


    // Just to register all known types
    registerstringsTypes();
}

StringStruct::~StringStruct()
{
}

StringStruct::StringStruct(
        const StringStruct& x)
{
    m_var_string8 = x.m_var_string8;
}

StringStruct::StringStruct(
        StringStruct&& x) noexcept 
{
    m_var_string8 = std::move(x.m_var_string8);
}

StringStruct& StringStruct::operator =(
        const StringStruct& x)
{

    m_var_string8 = x.m_var_string8;

    return *this;
}

StringStruct& StringStruct::operator =(
        StringStruct&& x) noexcept
{

    m_var_string8 = std::move(x.m_var_string8);

    return *this;
}

bool StringStruct::operator ==(
        const StringStruct& x) const
{

    return (m_var_string8 == x.m_var_string8);
}

bool StringStruct::operator !=(
        const StringStruct& x) const
{
    return !(*this == x);
}

size_t StringStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return StringStruct_max_cdr_typesize;
}

size_t StringStruct::getCdrSerializedSize(
        const StringStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.var_string8().size() + 1;

    return current_alignment - initial_alignment;
}

void StringStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_var_string8.c_str();
}

void StringStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_var_string8;}

/*!
 * @brief This function copies the value in member var_string8
 * @param _var_string8 New value to be copied in member var_string8
 */
void StringStruct::var_string8(
        const std::string& _var_string8)
{
    m_var_string8 = _var_string8;
}

/*!
 * @brief This function moves the value in member var_string8
 * @param _var_string8 New value to be moved in member var_string8
 */
void StringStruct::var_string8(
        std::string&& _var_string8)
{
    m_var_string8 = std::move(_var_string8);
}

/*!
 * @brief This function returns a constant reference to member var_string8
 * @return Constant reference to member var_string8
 */
const std::string& StringStruct::var_string8() const
{
    return m_var_string8;
}

/*!
 * @brief This function returns a reference to member var_string8
 * @return Reference to member var_string8
 */
std::string& StringStruct::var_string8()
{
    return m_var_string8;
}


size_t StringStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return StringStruct_max_key_cdr_typesize;
}

bool StringStruct::isKeyDefined()
{
    return false;
}

void StringStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


WStringStruct::WStringStruct()
{
    // wstring m_var_string16
    m_var_string16 = L"";


    // Just to register all known types
    registerstringsTypes();
}

WStringStruct::~WStringStruct()
{
}

WStringStruct::WStringStruct(
        const WStringStruct& x)
{
    m_var_string16 = x.m_var_string16;
}

WStringStruct::WStringStruct(
        WStringStruct&& x) noexcept 
{
    m_var_string16 = std::move(x.m_var_string16);
}

WStringStruct& WStringStruct::operator =(
        const WStringStruct& x)
{

    m_var_string16 = x.m_var_string16;

    return *this;
}

WStringStruct& WStringStruct::operator =(
        WStringStruct&& x) noexcept
{

    m_var_string16 = std::move(x.m_var_string16);

    return *this;
}

bool WStringStruct::operator ==(
        const WStringStruct& x) const
{

    return (m_var_string16 == x.m_var_string16);
}

bool WStringStruct::operator !=(
        const WStringStruct& x) const
{
    return !(*this == x);
}

size_t WStringStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return WStringStruct_max_cdr_typesize;
}

size_t WStringStruct::getCdrSerializedSize(
        const WStringStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + (data.var_string16().size()) * 4; // 32 bits

    return current_alignment - initial_alignment;
}

void WStringStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_var_string16;
}

void WStringStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_var_string16;
}

/*!
 * @brief This function copies the value in member var_string16
 * @param _var_string16 New value to be copied in member var_string16
 */
void WStringStruct::var_string16(
        const std::wstring& _var_string16)
{
    m_var_string16 = _var_string16;
}

/*!
 * @brief This function moves the value in member var_string16
 * @param _var_string16 New value to be moved in member var_string16
 */
void WStringStruct::var_string16(
        std::wstring&& _var_string16)
{
    m_var_string16 = std::move(_var_string16);
}

/*!
 * @brief This function returns a constant reference to member var_string16
 * @return Constant reference to member var_string16
 */
const std::wstring& WStringStruct::var_string16() const
{
    return m_var_string16;
}

/*!
 * @brief This function returns a reference to member var_string16
 * @return Reference to member var_string16
 */
std::wstring& WStringStruct::var_string16()
{
    return m_var_string16;
}


size_t WStringStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return WStringStruct_max_key_cdr_typesize;
}

bool WStringStruct::isKeyDefined()
{
    return false;
}

void WStringStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


SmallStringStruct::SmallStringStruct()
{
    // string m_var_small_string
    m_var_small_string = "";


    // Just to register all known types
    registerstringsTypes();
}

SmallStringStruct::~SmallStringStruct()
{
}

SmallStringStruct::SmallStringStruct(
        const SmallStringStruct& x)
{
    m_var_small_string = x.m_var_small_string;
}

SmallStringStruct::SmallStringStruct(
        SmallStringStruct&& x) noexcept 
{
    m_var_small_string = std::move(x.m_var_small_string);
}

SmallStringStruct& SmallStringStruct::operator =(
        const SmallStringStruct& x)
{

    m_var_small_string = x.m_var_small_string;

    return *this;
}

SmallStringStruct& SmallStringStruct::operator =(
        SmallStringStruct&& x) noexcept
{

    m_var_small_string = std::move(x.m_var_small_string);

    return *this;
}

bool SmallStringStruct::operator ==(
        const SmallStringStruct& x) const
{

    return (m_var_small_string == x.m_var_small_string);
}

bool SmallStringStruct::operator !=(
        const SmallStringStruct& x) const
{
    return !(*this == x);
}

size_t SmallStringStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return SmallStringStruct_max_cdr_typesize;
}

size_t SmallStringStruct::getCdrSerializedSize(
        const SmallStringStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.var_small_string().size() + 1;

    return current_alignment - initial_alignment;
}

void SmallStringStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_var_small_string.c_str();
}

void SmallStringStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        std::string aux;
        dcdr >> aux;
        m_var_small_string = aux.c_str();
    }}

/*!
 * @brief This function copies the value in member var_small_string
 * @param _var_small_string New value to be copied in member var_small_string
 */
void SmallStringStruct::var_small_string(
        const eprosima::fastrtps::fixed_string<1>& _var_small_string)
{
    m_var_small_string = _var_small_string;
}

/*!
 * @brief This function moves the value in member var_small_string
 * @param _var_small_string New value to be moved in member var_small_string
 */
void SmallStringStruct::var_small_string(
        eprosima::fastrtps::fixed_string<1>&& _var_small_string)
{
    m_var_small_string = std::move(_var_small_string);
}

/*!
 * @brief This function returns a constant reference to member var_small_string
 * @return Constant reference to member var_small_string
 */
const eprosima::fastrtps::fixed_string<1>& SmallStringStruct::var_small_string() const
{
    return m_var_small_string;
}

/*!
 * @brief This function returns a reference to member var_small_string
 * @return Reference to member var_small_string
 */
eprosima::fastrtps::fixed_string<1>& SmallStringStruct::var_small_string()
{
    return m_var_small_string;
}


size_t SmallStringStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return SmallStringStruct_max_key_cdr_typesize;
}

bool SmallStringStruct::isKeyDefined()
{
    return false;
}

void SmallStringStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


SmallWStringStruct::SmallWStringStruct()
{
    // wstring m_var_small_wstring
    m_var_small_wstring = L"";


    // Just to register all known types
    registerstringsTypes();
}

SmallWStringStruct::~SmallWStringStruct()
{
}

SmallWStringStruct::SmallWStringStruct(
        const SmallWStringStruct& x)
{
    m_var_small_wstring = x.m_var_small_wstring;
}

SmallWStringStruct::SmallWStringStruct(
        SmallWStringStruct&& x) noexcept 
{
    m_var_small_wstring = std::move(x.m_var_small_wstring);
}

SmallWStringStruct& SmallWStringStruct::operator =(
        const SmallWStringStruct& x)
{

    m_var_small_wstring = x.m_var_small_wstring;

    return *this;
}

SmallWStringStruct& SmallWStringStruct::operator =(
        SmallWStringStruct&& x) noexcept
{

    m_var_small_wstring = std::move(x.m_var_small_wstring);

    return *this;
}

bool SmallWStringStruct::operator ==(
        const SmallWStringStruct& x) const
{

    return (m_var_small_wstring == x.m_var_small_wstring);
}

bool SmallWStringStruct::operator !=(
        const SmallWStringStruct& x) const
{
    return !(*this == x);
}

size_t SmallWStringStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return SmallWStringStruct_max_cdr_typesize;
}

size_t SmallWStringStruct::getCdrSerializedSize(
        const SmallWStringStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + (data.var_small_wstring().size()) * 4; // 32 bits

    return current_alignment - initial_alignment;
}

void SmallWStringStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_var_small_wstring;
}

void SmallWStringStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_var_small_wstring;
}

/*!
 * @brief This function copies the value in member var_small_wstring
 * @param _var_small_wstring New value to be copied in member var_small_wstring
 */
void SmallWStringStruct::var_small_wstring(
        const std::wstring& _var_small_wstring)
{
    m_var_small_wstring = _var_small_wstring;
}

/*!
 * @brief This function moves the value in member var_small_wstring
 * @param _var_small_wstring New value to be moved in member var_small_wstring
 */
void SmallWStringStruct::var_small_wstring(
        std::wstring&& _var_small_wstring)
{
    m_var_small_wstring = std::move(_var_small_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_small_wstring
 * @return Constant reference to member var_small_wstring
 */
const std::wstring& SmallWStringStruct::var_small_wstring() const
{
    return m_var_small_wstring;
}

/*!
 * @brief This function returns a reference to member var_small_wstring
 * @return Reference to member var_small_wstring
 */
std::wstring& SmallWStringStruct::var_small_wstring()
{
    return m_var_small_wstring;
}


size_t SmallWStringStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return SmallWStringStruct_max_key_cdr_typesize;
}

bool SmallWStringStruct::isKeyDefined()
{
    return false;
}

void SmallWStringStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


LargeStringStruct::LargeStringStruct()
{
    // string m_var_large_string
    m_var_large_string = "";


    // Just to register all known types
    registerstringsTypes();
}

LargeStringStruct::~LargeStringStruct()
{
}

LargeStringStruct::LargeStringStruct(
        const LargeStringStruct& x)
{
    m_var_large_string = x.m_var_large_string;
}

LargeStringStruct::LargeStringStruct(
        LargeStringStruct&& x) noexcept 
{
    m_var_large_string = std::move(x.m_var_large_string);
}

LargeStringStruct& LargeStringStruct::operator =(
        const LargeStringStruct& x)
{

    m_var_large_string = x.m_var_large_string;

    return *this;
}

LargeStringStruct& LargeStringStruct::operator =(
        LargeStringStruct&& x) noexcept
{

    m_var_large_string = std::move(x.m_var_large_string);

    return *this;
}

bool LargeStringStruct::operator ==(
        const LargeStringStruct& x) const
{

    return (m_var_large_string == x.m_var_large_string);
}

bool LargeStringStruct::operator !=(
        const LargeStringStruct& x) const
{
    return !(*this == x);
}

size_t LargeStringStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return LargeStringStruct_max_cdr_typesize;
}

size_t LargeStringStruct::getCdrSerializedSize(
        const LargeStringStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.var_large_string().size() + 1;

    return current_alignment - initial_alignment;
}

void LargeStringStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_var_large_string.c_str();
}

void LargeStringStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    {
        std::string aux;
        dcdr >> aux;
        m_var_large_string = aux.c_str();
    }}

/*!
 * @brief This function copies the value in member var_large_string
 * @param _var_large_string New value to be copied in member var_large_string
 */
void LargeStringStruct::var_large_string(
        const eprosima::fastrtps::fixed_string<41925>& _var_large_string)
{
    m_var_large_string = _var_large_string;
}

/*!
 * @brief This function moves the value in member var_large_string
 * @param _var_large_string New value to be moved in member var_large_string
 */
void LargeStringStruct::var_large_string(
        eprosima::fastrtps::fixed_string<41925>&& _var_large_string)
{
    m_var_large_string = std::move(_var_large_string);
}

/*!
 * @brief This function returns a constant reference to member var_large_string
 * @return Constant reference to member var_large_string
 */
const eprosima::fastrtps::fixed_string<41925>& LargeStringStruct::var_large_string() const
{
    return m_var_large_string;
}

/*!
 * @brief This function returns a reference to member var_large_string
 * @return Reference to member var_large_string
 */
eprosima::fastrtps::fixed_string<41925>& LargeStringStruct::var_large_string()
{
    return m_var_large_string;
}


size_t LargeStringStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return LargeStringStruct_max_key_cdr_typesize;
}

bool LargeStringStruct::isKeyDefined()
{
    return false;
}

void LargeStringStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}


LargeWStringStruct::LargeWStringStruct()
{
    // wstring m_var_large_wstring
    m_var_large_wstring = L"";


    // Just to register all known types
    registerstringsTypes();
}

LargeWStringStruct::~LargeWStringStruct()
{
}

LargeWStringStruct::LargeWStringStruct(
        const LargeWStringStruct& x)
{
    m_var_large_wstring = x.m_var_large_wstring;
}

LargeWStringStruct::LargeWStringStruct(
        LargeWStringStruct&& x) noexcept 
{
    m_var_large_wstring = std::move(x.m_var_large_wstring);
}

LargeWStringStruct& LargeWStringStruct::operator =(
        const LargeWStringStruct& x)
{

    m_var_large_wstring = x.m_var_large_wstring;

    return *this;
}

LargeWStringStruct& LargeWStringStruct::operator =(
        LargeWStringStruct&& x) noexcept
{

    m_var_large_wstring = std::move(x.m_var_large_wstring);

    return *this;
}

bool LargeWStringStruct::operator ==(
        const LargeWStringStruct& x) const
{

    return (m_var_large_wstring == x.m_var_large_wstring);
}

bool LargeWStringStruct::operator !=(
        const LargeWStringStruct& x) const
{
    return !(*this == x);
}

size_t LargeWStringStruct::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return LargeWStringStruct_max_cdr_typesize;
}

size_t LargeWStringStruct::getCdrSerializedSize(
        const LargeWStringStruct& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + (data.var_large_wstring().size()) * 4; // 32 bits

    return current_alignment - initial_alignment;
}

void LargeWStringStruct::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_var_large_wstring;
}

void LargeWStringStruct::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_var_large_wstring;
}

/*!
 * @brief This function copies the value in member var_large_wstring
 * @param _var_large_wstring New value to be copied in member var_large_wstring
 */
void LargeWStringStruct::var_large_wstring(
        const std::wstring& _var_large_wstring)
{
    m_var_large_wstring = _var_large_wstring;
}

/*!
 * @brief This function moves the value in member var_large_wstring
 * @param _var_large_wstring New value to be moved in member var_large_wstring
 */
void LargeWStringStruct::var_large_wstring(
        std::wstring&& _var_large_wstring)
{
    m_var_large_wstring = std::move(_var_large_wstring);
}

/*!
 * @brief This function returns a constant reference to member var_large_wstring
 * @return Constant reference to member var_large_wstring
 */
const std::wstring& LargeWStringStruct::var_large_wstring() const
{
    return m_var_large_wstring;
}

/*!
 * @brief This function returns a reference to member var_large_wstring
 * @return Reference to member var_large_wstring
 */
std::wstring& LargeWStringStruct::var_large_wstring()
{
    return m_var_large_wstring;
}


size_t LargeWStringStruct::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return LargeWStringStruct_max_key_cdr_typesize;
}

bool LargeWStringStruct::isKeyDefined()
{
    return false;
}

void LargeWStringStruct::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

