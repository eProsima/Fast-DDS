// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file strings.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_STRINGS_H_
#define _FAST_DDS_GENERATED_STRINGS_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STRINGS_SOURCE)
#define STRINGS_DllAPI __declspec( dllexport )
#else
#define STRINGS_DllAPI __declspec( dllimport )
#endif // STRINGS_SOURCE
#else
#define STRINGS_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STRINGS_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure StringStruct defined by the user in the IDL file.
 * @ingroup strings
 */
class StringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct(
            const StringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct(
            StringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct& operator =(
            const StringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct& operator =(
            StringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_string8
     * @param _var_string8 New value to be copied in member var_string8
     */
    eProsima_user_DllExport void var_string8(
            const std::string& _var_string8);

    /*!
     * @brief This function moves the value in member var_string8
     * @param _var_string8 New value to be moved in member var_string8
     */
    eProsima_user_DllExport void var_string8(
            std::string&& _var_string8);

    /*!
     * @brief This function returns a constant reference to member var_string8
     * @return Constant reference to member var_string8
     */
    eProsima_user_DllExport const std::string& var_string8() const;

    /*!
     * @brief This function returns a reference to member var_string8
     * @return Reference to member var_string8
     */
    eProsima_user_DllExport std::string& var_string8();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_var_string8;

};
/*!
 * @brief This class represents the structure WStringStruct defined by the user in the IDL file.
 * @ingroup strings
 */
class WStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport WStringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~WStringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct(
            const WStringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct(
            WStringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct& operator =(
            const WStringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct& operator =(
            WStringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x WStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const WStringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x WStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const WStringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_string16
     * @param _var_string16 New value to be copied in member var_string16
     */
    eProsima_user_DllExport void var_string16(
            const std::wstring& _var_string16);

    /*!
     * @brief This function moves the value in member var_string16
     * @param _var_string16 New value to be moved in member var_string16
     */
    eProsima_user_DllExport void var_string16(
            std::wstring&& _var_string16);

    /*!
     * @brief This function returns a constant reference to member var_string16
     * @return Constant reference to member var_string16
     */
    eProsima_user_DllExport const std::wstring& var_string16() const;

    /*!
     * @brief This function returns a reference to member var_string16
     * @return Reference to member var_string16
     */
    eProsima_user_DllExport std::wstring& var_string16();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const WStringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::wstring m_var_string16;

};
/*!
 * @brief This class represents the structure SmallStringStruct defined by the user in the IDL file.
 * @ingroup strings
 */
class SmallStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SmallStringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SmallStringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SmallStringStruct that will be copied.
     */
    eProsima_user_DllExport SmallStringStruct(
            const SmallStringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SmallStringStruct that will be copied.
     */
    eProsima_user_DllExport SmallStringStruct(
            SmallStringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SmallStringStruct that will be copied.
     */
    eProsima_user_DllExport SmallStringStruct& operator =(
            const SmallStringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SmallStringStruct that will be copied.
     */
    eProsima_user_DllExport SmallStringStruct& operator =(
            SmallStringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x SmallStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SmallStringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x SmallStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SmallStringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_small_string
     * @param _var_small_string New value to be copied in member var_small_string
     */
    eProsima_user_DllExport void var_small_string(
            const eprosima::fastrtps::fixed_string<1>& _var_small_string);

    /*!
     * @brief This function moves the value in member var_small_string
     * @param _var_small_string New value to be moved in member var_small_string
     */
    eProsima_user_DllExport void var_small_string(
            eprosima::fastrtps::fixed_string<1>&& _var_small_string);

    /*!
     * @brief This function returns a constant reference to member var_small_string
     * @return Constant reference to member var_small_string
     */
    eProsima_user_DllExport const eprosima::fastrtps::fixed_string<1>& var_small_string() const;

    /*!
     * @brief This function returns a reference to member var_small_string
     * @return Reference to member var_small_string
     */
    eProsima_user_DllExport eprosima::fastrtps::fixed_string<1>& var_small_string();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const SmallStringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    eprosima::fastrtps::fixed_string<1> m_var_small_string;

};
/*!
 * @brief This class represents the structure SmallWStringStruct defined by the user in the IDL file.
 * @ingroup strings
 */
class SmallWStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SmallWStringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SmallWStringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SmallWStringStruct that will be copied.
     */
    eProsima_user_DllExport SmallWStringStruct(
            const SmallWStringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SmallWStringStruct that will be copied.
     */
    eProsima_user_DllExport SmallWStringStruct(
            SmallWStringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SmallWStringStruct that will be copied.
     */
    eProsima_user_DllExport SmallWStringStruct& operator =(
            const SmallWStringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SmallWStringStruct that will be copied.
     */
    eProsima_user_DllExport SmallWStringStruct& operator =(
            SmallWStringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x SmallWStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SmallWStringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x SmallWStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SmallWStringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_small_wstring
     * @param _var_small_wstring New value to be copied in member var_small_wstring
     */
    eProsima_user_DllExport void var_small_wstring(
            const std::wstring& _var_small_wstring);

    /*!
     * @brief This function moves the value in member var_small_wstring
     * @param _var_small_wstring New value to be moved in member var_small_wstring
     */
    eProsima_user_DllExport void var_small_wstring(
            std::wstring&& _var_small_wstring);

    /*!
     * @brief This function returns a constant reference to member var_small_wstring
     * @return Constant reference to member var_small_wstring
     */
    eProsima_user_DllExport const std::wstring& var_small_wstring() const;

    /*!
     * @brief This function returns a reference to member var_small_wstring
     * @return Reference to member var_small_wstring
     */
    eProsima_user_DllExport std::wstring& var_small_wstring();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const SmallWStringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::wstring m_var_small_wstring;

};
/*!
 * @brief This class represents the structure LargeStringStruct defined by the user in the IDL file.
 * @ingroup strings
 */
class LargeStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LargeStringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LargeStringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LargeStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeStringStruct(
            const LargeStringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LargeStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeStringStruct(
            LargeStringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LargeStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeStringStruct& operator =(
            const LargeStringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LargeStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeStringStruct& operator =(
            LargeStringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x LargeStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LargeStringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x LargeStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LargeStringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_large_string
     * @param _var_large_string New value to be copied in member var_large_string
     */
    eProsima_user_DllExport void var_large_string(
            const eprosima::fastrtps::fixed_string<41925>& _var_large_string);

    /*!
     * @brief This function moves the value in member var_large_string
     * @param _var_large_string New value to be moved in member var_large_string
     */
    eProsima_user_DllExport void var_large_string(
            eprosima::fastrtps::fixed_string<41925>&& _var_large_string);

    /*!
     * @brief This function returns a constant reference to member var_large_string
     * @return Constant reference to member var_large_string
     */
    eProsima_user_DllExport const eprosima::fastrtps::fixed_string<41925>& var_large_string() const;

    /*!
     * @brief This function returns a reference to member var_large_string
     * @return Reference to member var_large_string
     */
    eProsima_user_DllExport eprosima::fastrtps::fixed_string<41925>& var_large_string();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const LargeStringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    eprosima::fastrtps::fixed_string<41925> m_var_large_string;

};
/*!
 * @brief This class represents the structure LargeWStringStruct defined by the user in the IDL file.
 * @ingroup strings
 */
class LargeWStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LargeWStringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LargeWStringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LargeWStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeWStringStruct(
            const LargeWStringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LargeWStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeWStringStruct(
            LargeWStringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LargeWStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeWStringStruct& operator =(
            const LargeWStringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LargeWStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeWStringStruct& operator =(
            LargeWStringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x LargeWStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LargeWStringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x LargeWStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LargeWStringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_large_wstring
     * @param _var_large_wstring New value to be copied in member var_large_wstring
     */
    eProsima_user_DllExport void var_large_wstring(
            const std::wstring& _var_large_wstring);

    /*!
     * @brief This function moves the value in member var_large_wstring
     * @param _var_large_wstring New value to be moved in member var_large_wstring
     */
    eProsima_user_DllExport void var_large_wstring(
            std::wstring&& _var_large_wstring);

    /*!
     * @brief This function returns a constant reference to member var_large_wstring
     * @return Constant reference to member var_large_wstring
     */
    eProsima_user_DllExport const std::wstring& var_large_wstring() const;

    /*!
     * @brief This function returns a reference to member var_large_wstring
     * @return Reference to member var_large_wstring
     */
    eProsima_user_DllExport std::wstring& var_large_wstring();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const LargeWStringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::wstring m_var_large_wstring;

};

#endif // _FAST_DDS_GENERATED_STRINGS_H_

