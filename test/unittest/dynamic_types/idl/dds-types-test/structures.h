// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file structures.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_STRUCTURES_H_
#define _FAST_DDS_GENERATED_STRUCTURES_H_

#include "helpers/basic_inner_types.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STRUCTURES_SOURCE)
#define STRUCTURES_DllAPI __declspec( dllexport )
#else
#define STRUCTURES_DllAPI __declspec( dllimport )
#endif // STRUCTURES_SOURCE
#else
#define STRUCTURES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STRUCTURES_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


typedef int32_t InnerAliasHelper;
typedef eprosima::fastrtps::fixed_string<10> Inner_alias_bounded_string_helper;
typedef std::wstring Inner_alias_bounded_wstring_helper;
typedef std::array<int16_t, 2> Inner_alias_array_helper;
typedef std::vector<int16_t> Inner_alias_sequence_helper;
typedef std::map<int32_t, int32_t> Inner_alias_map_helper;
/*!
 * @brief This class represents the structure ShortStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class ShortStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ShortStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ShortStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ShortStruct that will be copied.
     */
    eProsima_user_DllExport ShortStruct(
            const ShortStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ShortStruct that will be copied.
     */
    eProsima_user_DllExport ShortStruct(
            ShortStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ShortStruct that will be copied.
     */
    eProsima_user_DllExport ShortStruct& operator =(
            const ShortStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ShortStruct that will be copied.
     */
    eProsima_user_DllExport ShortStruct& operator =(
            ShortStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ShortStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ShortStruct& x) const;

    /*!
     * @brief This function sets a value in member var_short
     * @param _var_short New value for member var_short
     */
    eProsima_user_DllExport void var_short(
            int16_t _var_short);

    /*!
     * @brief This function returns the value of member var_short
     * @return Value of member var_short
     */
    eProsima_user_DllExport int16_t var_short() const;

    /*!
     * @brief This function returns a reference to member var_short
     * @return Reference to member var_short
     */
    eProsima_user_DllExport int16_t& var_short();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ShortStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_var_short;

};
/*!
 * @brief This class represents the structure UnsignedShortStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class UnsignedShortStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UnsignedShortStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UnsignedShortStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UnsignedShortStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedShortStruct(
            const UnsignedShortStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UnsignedShortStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedShortStruct(
            UnsignedShortStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UnsignedShortStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedShortStruct& operator =(
            const UnsignedShortStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UnsignedShortStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedShortStruct& operator =(
            UnsignedShortStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x UnsignedShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const UnsignedShortStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x UnsignedShortStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const UnsignedShortStruct& x) const;

    /*!
     * @brief This function sets a value in member var_ushort
     * @param _var_ushort New value for member var_ushort
     */
    eProsima_user_DllExport void var_ushort(
            uint16_t _var_ushort);

    /*!
     * @brief This function returns the value of member var_ushort
     * @return Value of member var_ushort
     */
    eProsima_user_DllExport uint16_t var_ushort() const;

    /*!
     * @brief This function returns a reference to member var_ushort
     * @return Reference to member var_ushort
     */
    eProsima_user_DllExport uint16_t& var_ushort();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const UnsignedShortStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint16_t m_var_ushort;

};
/*!
 * @brief This class represents the structure LongStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class LongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LongStruct that will be copied.
     */
    eProsima_user_DllExport LongStruct(
            const LongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LongStruct that will be copied.
     */
    eProsima_user_DllExport LongStruct(
            LongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LongStruct that will be copied.
     */
    eProsima_user_DllExport LongStruct& operator =(
            const LongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LongStruct that will be copied.
     */
    eProsima_user_DllExport LongStruct& operator =(
            LongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x LongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x LongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_long
     * @param _var_long New value for member var_long
     */
    eProsima_user_DllExport void var_long(
            int32_t _var_long);

    /*!
     * @brief This function returns the value of member var_long
     * @return Value of member var_long
     */
    eProsima_user_DllExport int32_t var_long() const;

    /*!
     * @brief This function returns a reference to member var_long
     * @return Reference to member var_long
     */
    eProsima_user_DllExport int32_t& var_long();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const LongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_var_long;

};
/*!
 * @brief This class represents the structure UnsignedLongStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class UnsignedLongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UnsignedLongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UnsignedLongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UnsignedLongStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedLongStruct(
            const UnsignedLongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UnsignedLongStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedLongStruct(
            UnsignedLongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UnsignedLongStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedLongStruct& operator =(
            const UnsignedLongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UnsignedLongStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedLongStruct& operator =(
            UnsignedLongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x UnsignedLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const UnsignedLongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x UnsignedLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const UnsignedLongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_ulong
     * @param _var_ulong New value for member var_ulong
     */
    eProsima_user_DllExport void var_ulong(
            uint32_t _var_ulong);

    /*!
     * @brief This function returns the value of member var_ulong
     * @return Value of member var_ulong
     */
    eProsima_user_DllExport uint32_t var_ulong() const;

    /*!
     * @brief This function returns a reference to member var_ulong
     * @return Reference to member var_ulong
     */
    eProsima_user_DllExport uint32_t& var_ulong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const UnsignedLongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_var_ulong;

};
/*!
 * @brief This class represents the structure LongLongStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class LongLongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LongLongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LongLongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LongLongStruct that will be copied.
     */
    eProsima_user_DllExport LongLongStruct(
            const LongLongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LongLongStruct that will be copied.
     */
    eProsima_user_DllExport LongLongStruct(
            LongLongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LongLongStruct that will be copied.
     */
    eProsima_user_DllExport LongLongStruct& operator =(
            const LongLongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LongLongStruct that will be copied.
     */
    eProsima_user_DllExport LongLongStruct& operator =(
            LongLongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x LongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LongLongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x LongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LongLongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_longlong
     * @param _var_longlong New value for member var_longlong
     */
    eProsima_user_DllExport void var_longlong(
            int64_t _var_longlong);

    /*!
     * @brief This function returns the value of member var_longlong
     * @return Value of member var_longlong
     */
    eProsima_user_DllExport int64_t var_longlong() const;

    /*!
     * @brief This function returns a reference to member var_longlong
     * @return Reference to member var_longlong
     */
    eProsima_user_DllExport int64_t& var_longlong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const LongLongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_var_longlong;

};
/*!
 * @brief This class represents the structure UnsignedLongLongStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class UnsignedLongLongStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UnsignedLongLongStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UnsignedLongLongStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UnsignedLongLongStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedLongLongStruct(
            const UnsignedLongLongStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UnsignedLongLongStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedLongLongStruct(
            UnsignedLongLongStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UnsignedLongLongStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedLongLongStruct& operator =(
            const UnsignedLongLongStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UnsignedLongLongStruct that will be copied.
     */
    eProsima_user_DllExport UnsignedLongLongStruct& operator =(
            UnsignedLongLongStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x UnsignedLongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const UnsignedLongLongStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x UnsignedLongLongStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const UnsignedLongLongStruct& x) const;

    /*!
     * @brief This function sets a value in member var_ulonglong
     * @param _var_ulonglong New value for member var_ulonglong
     */
    eProsima_user_DllExport void var_ulonglong(
            uint64_t _var_ulonglong);

    /*!
     * @brief This function returns the value of member var_ulonglong
     * @return Value of member var_ulonglong
     */
    eProsima_user_DllExport uint64_t var_ulonglong() const;

    /*!
     * @brief This function returns a reference to member var_ulonglong
     * @return Reference to member var_ulonglong
     */
    eProsima_user_DllExport uint64_t& var_ulonglong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const UnsignedLongLongStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_var_ulonglong;

};
/*!
 * @brief This class represents the structure FloatStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class FloatStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport FloatStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~FloatStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object FloatStruct that will be copied.
     */
    eProsima_user_DllExport FloatStruct(
            const FloatStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object FloatStruct that will be copied.
     */
    eProsima_user_DllExport FloatStruct(
            FloatStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object FloatStruct that will be copied.
     */
    eProsima_user_DllExport FloatStruct& operator =(
            const FloatStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object FloatStruct that will be copied.
     */
    eProsima_user_DllExport FloatStruct& operator =(
            FloatStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x FloatStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const FloatStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x FloatStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const FloatStruct& x) const;

    /*!
     * @brief This function sets a value in member var_float
     * @param _var_float New value for member var_float
     */
    eProsima_user_DllExport void var_float(
            float _var_float);

    /*!
     * @brief This function returns the value of member var_float
     * @return Value of member var_float
     */
    eProsima_user_DllExport float var_float() const;

    /*!
     * @brief This function returns a reference to member var_float
     * @return Reference to member var_float
     */
    eProsima_user_DllExport float& var_float();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const FloatStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_var_float;

};
/*!
 * @brief This class represents the structure DoubleStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class DoubleStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport DoubleStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~DoubleStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object DoubleStruct that will be copied.
     */
    eProsima_user_DllExport DoubleStruct(
            const DoubleStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object DoubleStruct that will be copied.
     */
    eProsima_user_DllExport DoubleStruct(
            DoubleStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object DoubleStruct that will be copied.
     */
    eProsima_user_DllExport DoubleStruct& operator =(
            const DoubleStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object DoubleStruct that will be copied.
     */
    eProsima_user_DllExport DoubleStruct& operator =(
            DoubleStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x DoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const DoubleStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x DoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const DoubleStruct& x) const;

    /*!
     * @brief This function sets a value in member var_double
     * @param _var_double New value for member var_double
     */
    eProsima_user_DllExport void var_double(
            double _var_double);

    /*!
     * @brief This function returns the value of member var_double
     * @return Value of member var_double
     */
    eProsima_user_DllExport double var_double() const;

    /*!
     * @brief This function returns a reference to member var_double
     * @return Reference to member var_double
     */
    eProsima_user_DllExport double& var_double();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const DoubleStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_var_double;

};
/*!
 * @brief This class represents the structure LongDoubleStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class LongDoubleStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LongDoubleStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LongDoubleStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport LongDoubleStruct(
            const LongDoubleStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport LongDoubleStruct(
            LongDoubleStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport LongDoubleStruct& operator =(
            const LongDoubleStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LongDoubleStruct that will be copied.
     */
    eProsima_user_DllExport LongDoubleStruct& operator =(
            LongDoubleStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x LongDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LongDoubleStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x LongDoubleStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LongDoubleStruct& x) const;

    /*!
     * @brief This function sets a value in member var_longdouble
     * @param _var_longdouble New value for member var_longdouble
     */
    eProsima_user_DllExport void var_longdouble(
            long double _var_longdouble);

    /*!
     * @brief This function returns the value of member var_longdouble
     * @return Value of member var_longdouble
     */
    eProsima_user_DllExport long double var_longdouble() const;

    /*!
     * @brief This function returns a reference to member var_longdouble
     * @return Reference to member var_longdouble
     */
    eProsima_user_DllExport long double& var_longdouble();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const LongDoubleStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    long double m_var_longdouble;

};
/*!
 * @brief This class represents the structure BooleanStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class BooleanStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BooleanStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BooleanStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BooleanStruct that will be copied.
     */
    eProsima_user_DllExport BooleanStruct(
            const BooleanStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BooleanStruct that will be copied.
     */
    eProsima_user_DllExport BooleanStruct(
            BooleanStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BooleanStruct that will be copied.
     */
    eProsima_user_DllExport BooleanStruct& operator =(
            const BooleanStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BooleanStruct that will be copied.
     */
    eProsima_user_DllExport BooleanStruct& operator =(
            BooleanStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x BooleanStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BooleanStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x BooleanStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BooleanStruct& x) const;

    /*!
     * @brief This function sets a value in member var_boolean
     * @param _var_boolean New value for member var_boolean
     */
    eProsima_user_DllExport void var_boolean(
            bool _var_boolean);

    /*!
     * @brief This function returns the value of member var_boolean
     * @return Value of member var_boolean
     */
    eProsima_user_DllExport bool var_boolean() const;

    /*!
     * @brief This function returns a reference to member var_boolean
     * @return Reference to member var_boolean
     */
    eProsima_user_DllExport bool& var_boolean();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const BooleanStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_var_boolean;

};
/*!
 * @brief This class represents the structure OctetStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class OctetStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OctetStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OctetStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OctetStruct that will be copied.
     */
    eProsima_user_DllExport OctetStruct(
            const OctetStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OctetStruct that will be copied.
     */
    eProsima_user_DllExport OctetStruct(
            OctetStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OctetStruct that will be copied.
     */
    eProsima_user_DllExport OctetStruct& operator =(
            const OctetStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OctetStruct that will be copied.
     */
    eProsima_user_DllExport OctetStruct& operator =(
            OctetStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x OctetStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OctetStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x OctetStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OctetStruct& x) const;

    /*!
     * @brief This function sets a value in member var_octet
     * @param _var_octet New value for member var_octet
     */
    eProsima_user_DllExport void var_octet(
            uint8_t _var_octet);

    /*!
     * @brief This function returns the value of member var_octet
     * @return Value of member var_octet
     */
    eProsima_user_DllExport uint8_t var_octet() const;

    /*!
     * @brief This function returns a reference to member var_octet
     * @return Reference to member var_octet
     */
    eProsima_user_DllExport uint8_t& var_octet();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const OctetStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint8_t m_var_octet;

};
/*!
 * @brief This class represents the structure Char8Struct defined by the user in the IDL file.
 * @ingroup structures
 */
class Char8Struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Char8Struct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Char8Struct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Char8Struct that will be copied.
     */
    eProsima_user_DllExport Char8Struct(
            const Char8Struct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Char8Struct that will be copied.
     */
    eProsima_user_DllExport Char8Struct(
            Char8Struct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Char8Struct that will be copied.
     */
    eProsima_user_DllExport Char8Struct& operator =(
            const Char8Struct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Char8Struct that will be copied.
     */
    eProsima_user_DllExport Char8Struct& operator =(
            Char8Struct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Char8Struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Char8Struct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Char8Struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Char8Struct& x) const;

    /*!
     * @brief This function sets a value in member var_char8
     * @param _var_char8 New value for member var_char8
     */
    eProsima_user_DllExport void var_char8(
            char _var_char8);

    /*!
     * @brief This function returns the value of member var_char8
     * @return Value of member var_char8
     */
    eProsima_user_DllExport char var_char8() const;

    /*!
     * @brief This function returns a reference to member var_char8
     * @return Reference to member var_char8
     */
    eProsima_user_DllExport char& var_char8();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Char8Struct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    char m_var_char8;

};
/*!
 * @brief This class represents the structure Char16Struct defined by the user in the IDL file.
 * @ingroup structures
 */
class Char16Struct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Char16Struct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Char16Struct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Char16Struct that will be copied.
     */
    eProsima_user_DllExport Char16Struct(
            const Char16Struct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Char16Struct that will be copied.
     */
    eProsima_user_DllExport Char16Struct(
            Char16Struct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Char16Struct that will be copied.
     */
    eProsima_user_DllExport Char16Struct& operator =(
            const Char16Struct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Char16Struct that will be copied.
     */
    eProsima_user_DllExport Char16Struct& operator =(
            Char16Struct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Char16Struct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Char16Struct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Char16Struct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Char16Struct& x) const;

    /*!
     * @brief This function sets a value in member var_char16
     * @param _var_char16 New value for member var_char16
     */
    eProsima_user_DllExport void var_char16(
            wchar_t _var_char16);

    /*!
     * @brief This function returns the value of member var_char16
     * @return Value of member var_char16
     */
    eProsima_user_DllExport wchar_t var_char16() const;

    /*!
     * @brief This function returns a reference to member var_char16
     * @return Reference to member var_char16
     */
    eProsima_user_DllExport wchar_t& var_char16();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Char16Struct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    wchar_t m_var_char16;

};
/*!
 * @brief This class represents the structure StringStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class StringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct(
            const StringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct(
            StringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct& operator =(
            const StringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct& operator =(
            StringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_string
     * @param _var_string New value to be copied in member var_string
     */
    eProsima_user_DllExport void var_string(
            const std::string& _var_string);

    /*!
     * @brief This function moves the value in member var_string
     * @param _var_string New value to be moved in member var_string
     */
    eProsima_user_DllExport void var_string(
            std::string&& _var_string);

    /*!
     * @brief This function returns a constant reference to member var_string
     * @return Constant reference to member var_string
     */
    eProsima_user_DllExport const std::string& var_string() const;

    /*!
     * @brief This function returns a reference to member var_string
     * @return Reference to member var_string
     */
    eProsima_user_DllExport std::string& var_string();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_var_string;

};
/*!
 * @brief This class represents the structure WStringStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class WStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport WStringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~WStringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct(
            const WStringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct(
            WStringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct& operator =(
            const WStringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct& operator =(
            WStringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x WStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const WStringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x WStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const WStringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_wstring
     * @param _var_wstring New value to be copied in member var_wstring
     */
    eProsima_user_DllExport void var_wstring(
            const std::wstring& _var_wstring);

    /*!
     * @brief This function moves the value in member var_wstring
     * @param _var_wstring New value to be moved in member var_wstring
     */
    eProsima_user_DllExport void var_wstring(
            std::wstring&& _var_wstring);

    /*!
     * @brief This function returns a constant reference to member var_wstring
     * @return Constant reference to member var_wstring
     */
    eProsima_user_DllExport const std::wstring& var_wstring() const;

    /*!
     * @brief This function returns a reference to member var_wstring
     * @return Reference to member var_wstring
     */
    eProsima_user_DllExport std::wstring& var_wstring();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const WStringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::wstring m_var_wstring;

};
/*!
 * @brief This class represents the structure BoundedStringStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class BoundedStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BoundedStringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BoundedStringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BoundedStringStruct that will be copied.
     */
    eProsima_user_DllExport BoundedStringStruct(
            const BoundedStringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BoundedStringStruct that will be copied.
     */
    eProsima_user_DllExport BoundedStringStruct(
            BoundedStringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BoundedStringStruct that will be copied.
     */
    eProsima_user_DllExport BoundedStringStruct& operator =(
            const BoundedStringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BoundedStringStruct that will be copied.
     */
    eProsima_user_DllExport BoundedStringStruct& operator =(
            BoundedStringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x BoundedStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BoundedStringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x BoundedStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BoundedStringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_bounded_string
     * @param _var_bounded_string New value to be copied in member var_bounded_string
     */
    eProsima_user_DllExport void var_bounded_string(
            const Inner_alias_bounded_string_helper& _var_bounded_string);

    /*!
     * @brief This function moves the value in member var_bounded_string
     * @param _var_bounded_string New value to be moved in member var_bounded_string
     */
    eProsima_user_DllExport void var_bounded_string(
            Inner_alias_bounded_string_helper&& _var_bounded_string);

    /*!
     * @brief This function returns a constant reference to member var_bounded_string
     * @return Constant reference to member var_bounded_string
     */
    eProsima_user_DllExport const Inner_alias_bounded_string_helper& var_bounded_string() const;

    /*!
     * @brief This function returns a reference to member var_bounded_string
     * @return Reference to member var_bounded_string
     */
    eProsima_user_DllExport Inner_alias_bounded_string_helper& var_bounded_string();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const BoundedStringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Inner_alias_bounded_string_helper m_var_bounded_string;

};
/*!
 * @brief This class represents the structure BoundedWStringStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class BoundedWStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BoundedWStringStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BoundedWStringStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BoundedWStringStruct that will be copied.
     */
    eProsima_user_DllExport BoundedWStringStruct(
            const BoundedWStringStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BoundedWStringStruct that will be copied.
     */
    eProsima_user_DllExport BoundedWStringStruct(
            BoundedWStringStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BoundedWStringStruct that will be copied.
     */
    eProsima_user_DllExport BoundedWStringStruct& operator =(
            const BoundedWStringStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BoundedWStringStruct that will be copied.
     */
    eProsima_user_DllExport BoundedWStringStruct& operator =(
            BoundedWStringStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x BoundedWStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BoundedWStringStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x BoundedWStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BoundedWStringStruct& x) const;

    /*!
     * @brief This function copies the value in member var_bounded_wstring
     * @param _var_bounded_wstring New value to be copied in member var_bounded_wstring
     */
    eProsima_user_DllExport void var_bounded_wstring(
            const Inner_alias_bounded_wstring_helper& _var_bounded_wstring);

    /*!
     * @brief This function moves the value in member var_bounded_wstring
     * @param _var_bounded_wstring New value to be moved in member var_bounded_wstring
     */
    eProsima_user_DllExport void var_bounded_wstring(
            Inner_alias_bounded_wstring_helper&& _var_bounded_wstring);

    /*!
     * @brief This function returns a constant reference to member var_bounded_wstring
     * @return Constant reference to member var_bounded_wstring
     */
    eProsima_user_DllExport const Inner_alias_bounded_wstring_helper& var_bounded_wstring() const;

    /*!
     * @brief This function returns a reference to member var_bounded_wstring
     * @return Reference to member var_bounded_wstring
     */
    eProsima_user_DllExport Inner_alias_bounded_wstring_helper& var_bounded_wstring();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const BoundedWStringStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Inner_alias_bounded_wstring_helper m_var_bounded_wstring;

};
/*!
 * @brief This class represents the structure EnumStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class EnumStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EnumStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EnumStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EnumStruct that will be copied.
     */
    eProsima_user_DllExport EnumStruct(
            const EnumStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EnumStruct that will be copied.
     */
    eProsima_user_DllExport EnumStruct(
            EnumStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EnumStruct that will be copied.
     */
    eProsima_user_DllExport EnumStruct& operator =(
            const EnumStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EnumStruct that will be copied.
     */
    eProsima_user_DllExport EnumStruct& operator =(
            EnumStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x EnumStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const EnumStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x EnumStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const EnumStruct& x) const;

    /*!
     * @brief This function sets a value in member var_enum
     * @param _var_enum New value for member var_enum
     */
    eProsima_user_DllExport void var_enum(
            InnerEnumHelper _var_enum);

    /*!
     * @brief This function returns the value of member var_enum
     * @return Value of member var_enum
     */
    eProsima_user_DllExport InnerEnumHelper var_enum() const;

    /*!
     * @brief This function returns a reference to member var_enum
     * @return Reference to member var_enum
     */
    eProsima_user_DllExport InnerEnumHelper& var_enum();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const EnumStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerEnumHelper m_var_enum;

};
/*!
 * @brief This class represents the structure BitMaskStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class BitMaskStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BitMaskStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BitMaskStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BitMaskStruct that will be copied.
     */
    eProsima_user_DllExport BitMaskStruct(
            const BitMaskStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BitMaskStruct that will be copied.
     */
    eProsima_user_DllExport BitMaskStruct(
            BitMaskStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BitMaskStruct that will be copied.
     */
    eProsima_user_DllExport BitMaskStruct& operator =(
            const BitMaskStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BitMaskStruct that will be copied.
     */
    eProsima_user_DllExport BitMaskStruct& operator =(
            BitMaskStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x BitMaskStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BitMaskStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x BitMaskStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BitMaskStruct& x) const;

    /*!
     * @brief This function sets a value in member var_bitmask
     * @param _var_bitmask New value for member var_bitmask
     */
    eProsima_user_DllExport void var_bitmask(
            InnerBitMaskHelper _var_bitmask);

    /*!
     * @brief This function returns the value of member var_bitmask
     * @return Value of member var_bitmask
     */
    eProsima_user_DllExport InnerBitMaskHelper var_bitmask() const;

    /*!
     * @brief This function returns a reference to member var_bitmask
     * @return Reference to member var_bitmask
     */
    eProsima_user_DllExport InnerBitMaskHelper& var_bitmask();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const BitMaskStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerBitMaskHelper m_var_bitmask;

};
/*!
 * @brief This class represents the structure AliasStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class AliasStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AliasStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AliasStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AliasStruct that will be copied.
     */
    eProsima_user_DllExport AliasStruct(
            const AliasStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AliasStruct that will be copied.
     */
    eProsima_user_DllExport AliasStruct(
            AliasStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AliasStruct that will be copied.
     */
    eProsima_user_DllExport AliasStruct& operator =(
            const AliasStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AliasStruct that will be copied.
     */
    eProsima_user_DllExport AliasStruct& operator =(
            AliasStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x AliasStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const AliasStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x AliasStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const AliasStruct& x) const;

    /*!
     * @brief This function sets a value in member var_alias
     * @param _var_alias New value for member var_alias
     */
    eProsima_user_DllExport void var_alias(
            InnerAliasHelper _var_alias);

    /*!
     * @brief This function returns the value of member var_alias
     * @return Value of member var_alias
     */
    eProsima_user_DllExport InnerAliasHelper var_alias() const;

    /*!
     * @brief This function returns a reference to member var_alias
     * @return Reference to member var_alias
     */
    eProsima_user_DllExport InnerAliasHelper& var_alias();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AliasStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerAliasHelper m_var_alias;

};
/*!
 * @brief This class represents the structure ShortArrayStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class ShortArrayStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ShortArrayStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ShortArrayStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ShortArrayStruct that will be copied.
     */
    eProsima_user_DllExport ShortArrayStruct(
            const ShortArrayStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ShortArrayStruct that will be copied.
     */
    eProsima_user_DllExport ShortArrayStruct(
            ShortArrayStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ShortArrayStruct that will be copied.
     */
    eProsima_user_DllExport ShortArrayStruct& operator =(
            const ShortArrayStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ShortArrayStruct that will be copied.
     */
    eProsima_user_DllExport ShortArrayStruct& operator =(
            ShortArrayStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ShortArrayStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ShortArrayStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ShortArrayStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ShortArrayStruct& x) const;

    /*!
     * @brief This function copies the value in member var_array_short
     * @param _var_array_short New value to be copied in member var_array_short
     */
    eProsima_user_DllExport void var_array_short(
            const std::array<int16_t, 10>& _var_array_short);

    /*!
     * @brief This function moves the value in member var_array_short
     * @param _var_array_short New value to be moved in member var_array_short
     */
    eProsima_user_DllExport void var_array_short(
            std::array<int16_t, 10>&& _var_array_short);

    /*!
     * @brief This function returns a constant reference to member var_array_short
     * @return Constant reference to member var_array_short
     */
    eProsima_user_DllExport const std::array<int16_t, 10>& var_array_short() const;

    /*!
     * @brief This function returns a reference to member var_array_short
     * @return Reference to member var_array_short
     */
    eProsima_user_DllExport std::array<int16_t, 10>& var_array_short();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ShortArrayStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::array<int16_t, 10> m_var_array_short;

};
/*!
 * @brief This class represents the structure SequenceStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class SequenceStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SequenceStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SequenceStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceStruct(
            const SequenceStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceStruct(
            SequenceStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceStruct& operator =(
            const SequenceStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceStruct& operator =(
            SequenceStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x SequenceStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SequenceStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x SequenceStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SequenceStruct& x) const;

    /*!
     * @brief This function copies the value in member var_sequence
     * @param _var_sequence New value to be copied in member var_sequence
     */
    eProsima_user_DllExport void var_sequence(
            const std::vector<int32_t>& _var_sequence);

    /*!
     * @brief This function moves the value in member var_sequence
     * @param _var_sequence New value to be moved in member var_sequence
     */
    eProsima_user_DllExport void var_sequence(
            std::vector<int32_t>&& _var_sequence);

    /*!
     * @brief This function returns a constant reference to member var_sequence
     * @return Constant reference to member var_sequence
     */
    eProsima_user_DllExport const std::vector<int32_t>& var_sequence() const;

    /*!
     * @brief This function returns a reference to member var_sequence
     * @return Reference to member var_sequence
     */
    eProsima_user_DllExport std::vector<int32_t>& var_sequence();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const SequenceStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<int32_t> m_var_sequence;

};
/*!
 * @brief This class represents the structure MapStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class MapStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapStruct that will be copied.
     */
    eProsima_user_DllExport MapStruct(
            const MapStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapStruct that will be copied.
     */
    eProsima_user_DllExport MapStruct(
            MapStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapStruct that will be copied.
     */
    eProsima_user_DllExport MapStruct& operator =(
            const MapStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapStruct that will be copied.
     */
    eProsima_user_DllExport MapStruct& operator =(
            MapStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x MapStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MapStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x MapStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MapStruct& x) const;

    /*!
     * @brief This function copies the value in member var_map
     * @param _var_map New value to be copied in member var_map
     */
    eProsima_user_DllExport void var_map(
            const std::map<int32_t, int32_t>& _var_map);

    /*!
     * @brief This function moves the value in member var_map
     * @param _var_map New value to be moved in member var_map
     */
    eProsima_user_DllExport void var_map(
            std::map<int32_t, int32_t>&& _var_map);

    /*!
     * @brief This function returns a constant reference to member var_map
     * @return Constant reference to member var_map
     */
    eProsima_user_DllExport const std::map<int32_t, int32_t>& var_map() const;

    /*!
     * @brief This function returns a reference to member var_map
     * @return Reference to member var_map
     */
    eProsima_user_DllExport std::map<int32_t, int32_t>& var_map();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const MapStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::map<int32_t, int32_t> m_var_map;

};
/*!
 * @brief This class represents the structure UnionStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class UnionStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport UnionStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~UnionStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object UnionStruct that will be copied.
     */
    eProsima_user_DllExport UnionStruct(
            const UnionStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object UnionStruct that will be copied.
     */
    eProsima_user_DllExport UnionStruct(
            UnionStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object UnionStruct that will be copied.
     */
    eProsima_user_DllExport UnionStruct& operator =(
            const UnionStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object UnionStruct that will be copied.
     */
    eProsima_user_DllExport UnionStruct& operator =(
            UnionStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x UnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const UnionStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x UnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const UnionStruct& x) const;

    /*!
     * @brief This function copies the value in member var_union
     * @param _var_union New value to be copied in member var_union
     */
    eProsima_user_DllExport void var_union(
            const InnerUnionHelper& _var_union);

    /*!
     * @brief This function moves the value in member var_union
     * @param _var_union New value to be moved in member var_union
     */
    eProsima_user_DllExport void var_union(
            InnerUnionHelper&& _var_union);

    /*!
     * @brief This function returns a constant reference to member var_union
     * @return Constant reference to member var_union
     */
    eProsima_user_DllExport const InnerUnionHelper& var_union() const;

    /*!
     * @brief This function returns a reference to member var_union
     * @return Reference to member var_union
     */
    eProsima_user_DllExport InnerUnionHelper& var_union();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const UnionStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerUnionHelper m_var_union;

};
/*!
 * @brief This class represents the structure StructureStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class StructureStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructureStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructureStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructureStruct that will be copied.
     */
    eProsima_user_DllExport StructureStruct(
            const StructureStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructureStruct that will be copied.
     */
    eProsima_user_DllExport StructureStruct(
            StructureStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructureStruct that will be copied.
     */
    eProsima_user_DllExport StructureStruct& operator =(
            const StructureStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructureStruct that will be copied.
     */
    eProsima_user_DllExport StructureStruct& operator =(
            StructureStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructureStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructureStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructureStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructureStruct& x) const;

    /*!
     * @brief This function copies the value in member var_structure
     * @param _var_structure New value to be copied in member var_structure
     */
    eProsima_user_DllExport void var_structure(
            const InnerStructureHelper& _var_structure);

    /*!
     * @brief This function moves the value in member var_structure
     * @param _var_structure New value to be moved in member var_structure
     */
    eProsima_user_DllExport void var_structure(
            InnerStructureHelper&& _var_structure);

    /*!
     * @brief This function returns a constant reference to member var_structure
     * @return Constant reference to member var_structure
     */
    eProsima_user_DllExport const InnerStructureHelper& var_structure() const;

    /*!
     * @brief This function returns a reference to member var_structure
     * @return Reference to member var_structure
     */
    eProsima_user_DllExport InnerStructureHelper& var_structure();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructureStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerStructureHelper m_var_structure;

};
/*!
 * @brief This class represents the structure BitsetStruct defined by the user in the IDL file.
 * @ingroup structures
 */
class BitsetStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BitsetStruct();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BitsetStruct();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BitsetStruct that will be copied.
     */
    eProsima_user_DllExport BitsetStruct(
            const BitsetStruct& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BitsetStruct that will be copied.
     */
    eProsima_user_DllExport BitsetStruct(
            BitsetStruct&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BitsetStruct that will be copied.
     */
    eProsima_user_DllExport BitsetStruct& operator =(
            const BitsetStruct& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BitsetStruct that will be copied.
     */
    eProsima_user_DllExport BitsetStruct& operator =(
            BitsetStruct&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x BitsetStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BitsetStruct& x) const;

    /*!
     * @brief Comparison operator.
     * @param x BitsetStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BitsetStruct& x) const;

    /*!
     * @brief This function copies the value in member var_bitset
     * @param _var_bitset New value to be copied in member var_bitset
     */
    eProsima_user_DllExport void var_bitset(
            const InnerBitsetHelper& _var_bitset);

    /*!
     * @brief This function moves the value in member var_bitset
     * @param _var_bitset New value to be moved in member var_bitset
     */
    eProsima_user_DllExport void var_bitset(
            InnerBitsetHelper&& _var_bitset);

    /*!
     * @brief This function returns a constant reference to member var_bitset
     * @return Constant reference to member var_bitset
     */
    eProsima_user_DllExport const InnerBitsetHelper& var_bitset() const;

    /*!
     * @brief This function returns a reference to member var_bitset
     * @return Reference to member var_bitset
     */
    eProsima_user_DllExport InnerBitsetHelper& var_bitset();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const BitsetStruct& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerBitsetHelper m_var_bitset;

};
/*!
 * @brief This class represents the structure EmptyStructure defined by the user in the IDL file.
 * @ingroup structures
 */
class EmptyStructure
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EmptyStructure();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EmptyStructure();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EmptyStructure that will be copied.
     */
    eProsima_user_DllExport EmptyStructure(
            const EmptyStructure& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EmptyStructure that will be copied.
     */
    eProsima_user_DllExport EmptyStructure(
            EmptyStructure&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EmptyStructure that will be copied.
     */
    eProsima_user_DllExport EmptyStructure& operator =(
            const EmptyStructure& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EmptyStructure that will be copied.
     */
    eProsima_user_DllExport EmptyStructure& operator =(
            EmptyStructure&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x EmptyStructure object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const EmptyStructure& x) const;

    /*!
     * @brief Comparison operator.
     * @param x EmptyStructure object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const EmptyStructure& x) const;


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const EmptyStructure& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:


};
/*!
 * @brief This class represents the structure Structures defined by the user in the IDL file.
 * @ingroup structures
 */
class Structures
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Structures();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Structures();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Structures that will be copied.
     */
    eProsima_user_DllExport Structures(
            const Structures& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Structures that will be copied.
     */
    eProsima_user_DllExport Structures(
            Structures&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Structures that will be copied.
     */
    eProsima_user_DllExport Structures& operator =(
            const Structures& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Structures that will be copied.
     */
    eProsima_user_DllExport Structures& operator =(
            Structures&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Structures object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Structures& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Structures object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Structures& x) const;

    /*!
     * @brief This function copies the value in member var_ShortStruct
     * @param _var_ShortStruct New value to be copied in member var_ShortStruct
     */
    eProsima_user_DllExport void var_ShortStruct(
            const ShortStruct& _var_ShortStruct);

    /*!
     * @brief This function moves the value in member var_ShortStruct
     * @param _var_ShortStruct New value to be moved in member var_ShortStruct
     */
    eProsima_user_DllExport void var_ShortStruct(
            ShortStruct&& _var_ShortStruct);

    /*!
     * @brief This function returns a constant reference to member var_ShortStruct
     * @return Constant reference to member var_ShortStruct
     */
    eProsima_user_DllExport const ShortStruct& var_ShortStruct() const;

    /*!
     * @brief This function returns a reference to member var_ShortStruct
     * @return Reference to member var_ShortStruct
     */
    eProsima_user_DllExport ShortStruct& var_ShortStruct();
    /*!
     * @brief This function copies the value in member var_UnsignedShortStruct
     * @param _var_UnsignedShortStruct New value to be copied in member var_UnsignedShortStruct
     */
    eProsima_user_DllExport void var_UnsignedShortStruct(
            const UnsignedShortStruct& _var_UnsignedShortStruct);

    /*!
     * @brief This function moves the value in member var_UnsignedShortStruct
     * @param _var_UnsignedShortStruct New value to be moved in member var_UnsignedShortStruct
     */
    eProsima_user_DllExport void var_UnsignedShortStruct(
            UnsignedShortStruct&& _var_UnsignedShortStruct);

    /*!
     * @brief This function returns a constant reference to member var_UnsignedShortStruct
     * @return Constant reference to member var_UnsignedShortStruct
     */
    eProsima_user_DllExport const UnsignedShortStruct& var_UnsignedShortStruct() const;

    /*!
     * @brief This function returns a reference to member var_UnsignedShortStruct
     * @return Reference to member var_UnsignedShortStruct
     */
    eProsima_user_DllExport UnsignedShortStruct& var_UnsignedShortStruct();
    /*!
     * @brief This function copies the value in member var_LongStruct
     * @param _var_LongStruct New value to be copied in member var_LongStruct
     */
    eProsima_user_DllExport void var_LongStruct(
            const LongStruct& _var_LongStruct);

    /*!
     * @brief This function moves the value in member var_LongStruct
     * @param _var_LongStruct New value to be moved in member var_LongStruct
     */
    eProsima_user_DllExport void var_LongStruct(
            LongStruct&& _var_LongStruct);

    /*!
     * @brief This function returns a constant reference to member var_LongStruct
     * @return Constant reference to member var_LongStruct
     */
    eProsima_user_DllExport const LongStruct& var_LongStruct() const;

    /*!
     * @brief This function returns a reference to member var_LongStruct
     * @return Reference to member var_LongStruct
     */
    eProsima_user_DllExport LongStruct& var_LongStruct();
    /*!
     * @brief This function copies the value in member var_UnsignedLongStruct
     * @param _var_UnsignedLongStruct New value to be copied in member var_UnsignedLongStruct
     */
    eProsima_user_DllExport void var_UnsignedLongStruct(
            const UnsignedLongStruct& _var_UnsignedLongStruct);

    /*!
     * @brief This function moves the value in member var_UnsignedLongStruct
     * @param _var_UnsignedLongStruct New value to be moved in member var_UnsignedLongStruct
     */
    eProsima_user_DllExport void var_UnsignedLongStruct(
            UnsignedLongStruct&& _var_UnsignedLongStruct);

    /*!
     * @brief This function returns a constant reference to member var_UnsignedLongStruct
     * @return Constant reference to member var_UnsignedLongStruct
     */
    eProsima_user_DllExport const UnsignedLongStruct& var_UnsignedLongStruct() const;

    /*!
     * @brief This function returns a reference to member var_UnsignedLongStruct
     * @return Reference to member var_UnsignedLongStruct
     */
    eProsima_user_DllExport UnsignedLongStruct& var_UnsignedLongStruct();
    /*!
     * @brief This function copies the value in member var_LongLongStruct
     * @param _var_LongLongStruct New value to be copied in member var_LongLongStruct
     */
    eProsima_user_DllExport void var_LongLongStruct(
            const LongLongStruct& _var_LongLongStruct);

    /*!
     * @brief This function moves the value in member var_LongLongStruct
     * @param _var_LongLongStruct New value to be moved in member var_LongLongStruct
     */
    eProsima_user_DllExport void var_LongLongStruct(
            LongLongStruct&& _var_LongLongStruct);

    /*!
     * @brief This function returns a constant reference to member var_LongLongStruct
     * @return Constant reference to member var_LongLongStruct
     */
    eProsima_user_DllExport const LongLongStruct& var_LongLongStruct() const;

    /*!
     * @brief This function returns a reference to member var_LongLongStruct
     * @return Reference to member var_LongLongStruct
     */
    eProsima_user_DllExport LongLongStruct& var_LongLongStruct();
    /*!
     * @brief This function copies the value in member var_UnsignedLongLongStruct
     * @param _var_UnsignedLongLongStruct New value to be copied in member var_UnsignedLongLongStruct
     */
    eProsima_user_DllExport void var_UnsignedLongLongStruct(
            const UnsignedLongLongStruct& _var_UnsignedLongLongStruct);

    /*!
     * @brief This function moves the value in member var_UnsignedLongLongStruct
     * @param _var_UnsignedLongLongStruct New value to be moved in member var_UnsignedLongLongStruct
     */
    eProsima_user_DllExport void var_UnsignedLongLongStruct(
            UnsignedLongLongStruct&& _var_UnsignedLongLongStruct);

    /*!
     * @brief This function returns a constant reference to member var_UnsignedLongLongStruct
     * @return Constant reference to member var_UnsignedLongLongStruct
     */
    eProsima_user_DllExport const UnsignedLongLongStruct& var_UnsignedLongLongStruct() const;

    /*!
     * @brief This function returns a reference to member var_UnsignedLongLongStruct
     * @return Reference to member var_UnsignedLongLongStruct
     */
    eProsima_user_DllExport UnsignedLongLongStruct& var_UnsignedLongLongStruct();
    /*!
     * @brief This function copies the value in member var_FloatStruct
     * @param _var_FloatStruct New value to be copied in member var_FloatStruct
     */
    eProsima_user_DllExport void var_FloatStruct(
            const FloatStruct& _var_FloatStruct);

    /*!
     * @brief This function moves the value in member var_FloatStruct
     * @param _var_FloatStruct New value to be moved in member var_FloatStruct
     */
    eProsima_user_DllExport void var_FloatStruct(
            FloatStruct&& _var_FloatStruct);

    /*!
     * @brief This function returns a constant reference to member var_FloatStruct
     * @return Constant reference to member var_FloatStruct
     */
    eProsima_user_DllExport const FloatStruct& var_FloatStruct() const;

    /*!
     * @brief This function returns a reference to member var_FloatStruct
     * @return Reference to member var_FloatStruct
     */
    eProsima_user_DllExport FloatStruct& var_FloatStruct();
    /*!
     * @brief This function copies the value in member var_DoubleStruct
     * @param _var_DoubleStruct New value to be copied in member var_DoubleStruct
     */
    eProsima_user_DllExport void var_DoubleStruct(
            const DoubleStruct& _var_DoubleStruct);

    /*!
     * @brief This function moves the value in member var_DoubleStruct
     * @param _var_DoubleStruct New value to be moved in member var_DoubleStruct
     */
    eProsima_user_DllExport void var_DoubleStruct(
            DoubleStruct&& _var_DoubleStruct);

    /*!
     * @brief This function returns a constant reference to member var_DoubleStruct
     * @return Constant reference to member var_DoubleStruct
     */
    eProsima_user_DllExport const DoubleStruct& var_DoubleStruct() const;

    /*!
     * @brief This function returns a reference to member var_DoubleStruct
     * @return Reference to member var_DoubleStruct
     */
    eProsima_user_DllExport DoubleStruct& var_DoubleStruct();
    /*!
     * @brief This function copies the value in member var_LongDoubleStruct
     * @param _var_LongDoubleStruct New value to be copied in member var_LongDoubleStruct
     */
    eProsima_user_DllExport void var_LongDoubleStruct(
            const LongDoubleStruct& _var_LongDoubleStruct);

    /*!
     * @brief This function moves the value in member var_LongDoubleStruct
     * @param _var_LongDoubleStruct New value to be moved in member var_LongDoubleStruct
     */
    eProsima_user_DllExport void var_LongDoubleStruct(
            LongDoubleStruct&& _var_LongDoubleStruct);

    /*!
     * @brief This function returns a constant reference to member var_LongDoubleStruct
     * @return Constant reference to member var_LongDoubleStruct
     */
    eProsima_user_DllExport const LongDoubleStruct& var_LongDoubleStruct() const;

    /*!
     * @brief This function returns a reference to member var_LongDoubleStruct
     * @return Reference to member var_LongDoubleStruct
     */
    eProsima_user_DllExport LongDoubleStruct& var_LongDoubleStruct();
    /*!
     * @brief This function copies the value in member var_BooleanStruct
     * @param _var_BooleanStruct New value to be copied in member var_BooleanStruct
     */
    eProsima_user_DllExport void var_BooleanStruct(
            const BooleanStruct& _var_BooleanStruct);

    /*!
     * @brief This function moves the value in member var_BooleanStruct
     * @param _var_BooleanStruct New value to be moved in member var_BooleanStruct
     */
    eProsima_user_DllExport void var_BooleanStruct(
            BooleanStruct&& _var_BooleanStruct);

    /*!
     * @brief This function returns a constant reference to member var_BooleanStruct
     * @return Constant reference to member var_BooleanStruct
     */
    eProsima_user_DllExport const BooleanStruct& var_BooleanStruct() const;

    /*!
     * @brief This function returns a reference to member var_BooleanStruct
     * @return Reference to member var_BooleanStruct
     */
    eProsima_user_DllExport BooleanStruct& var_BooleanStruct();
    /*!
     * @brief This function copies the value in member var_OctetStruct
     * @param _var_OctetStruct New value to be copied in member var_OctetStruct
     */
    eProsima_user_DllExport void var_OctetStruct(
            const OctetStruct& _var_OctetStruct);

    /*!
     * @brief This function moves the value in member var_OctetStruct
     * @param _var_OctetStruct New value to be moved in member var_OctetStruct
     */
    eProsima_user_DllExport void var_OctetStruct(
            OctetStruct&& _var_OctetStruct);

    /*!
     * @brief This function returns a constant reference to member var_OctetStruct
     * @return Constant reference to member var_OctetStruct
     */
    eProsima_user_DllExport const OctetStruct& var_OctetStruct() const;

    /*!
     * @brief This function returns a reference to member var_OctetStruct
     * @return Reference to member var_OctetStruct
     */
    eProsima_user_DllExport OctetStruct& var_OctetStruct();
    /*!
     * @brief This function copies the value in member var_Char8Struct
     * @param _var_Char8Struct New value to be copied in member var_Char8Struct
     */
    eProsima_user_DllExport void var_Char8Struct(
            const Char8Struct& _var_Char8Struct);

    /*!
     * @brief This function moves the value in member var_Char8Struct
     * @param _var_Char8Struct New value to be moved in member var_Char8Struct
     */
    eProsima_user_DllExport void var_Char8Struct(
            Char8Struct&& _var_Char8Struct);

    /*!
     * @brief This function returns a constant reference to member var_Char8Struct
     * @return Constant reference to member var_Char8Struct
     */
    eProsima_user_DllExport const Char8Struct& var_Char8Struct() const;

    /*!
     * @brief This function returns a reference to member var_Char8Struct
     * @return Reference to member var_Char8Struct
     */
    eProsima_user_DllExport Char8Struct& var_Char8Struct();
    /*!
     * @brief This function copies the value in member var_Char16Struct
     * @param _var_Char16Struct New value to be copied in member var_Char16Struct
     */
    eProsima_user_DllExport void var_Char16Struct(
            const Char16Struct& _var_Char16Struct);

    /*!
     * @brief This function moves the value in member var_Char16Struct
     * @param _var_Char16Struct New value to be moved in member var_Char16Struct
     */
    eProsima_user_DllExport void var_Char16Struct(
            Char16Struct&& _var_Char16Struct);

    /*!
     * @brief This function returns a constant reference to member var_Char16Struct
     * @return Constant reference to member var_Char16Struct
     */
    eProsima_user_DllExport const Char16Struct& var_Char16Struct() const;

    /*!
     * @brief This function returns a reference to member var_Char16Struct
     * @return Reference to member var_Char16Struct
     */
    eProsima_user_DllExport Char16Struct& var_Char16Struct();
    /*!
     * @brief This function copies the value in member var_StringStruct
     * @param _var_StringStruct New value to be copied in member var_StringStruct
     */
    eProsima_user_DllExport void var_StringStruct(
            const StringStruct& _var_StringStruct);

    /*!
     * @brief This function moves the value in member var_StringStruct
     * @param _var_StringStruct New value to be moved in member var_StringStruct
     */
    eProsima_user_DllExport void var_StringStruct(
            StringStruct&& _var_StringStruct);

    /*!
     * @brief This function returns a constant reference to member var_StringStruct
     * @return Constant reference to member var_StringStruct
     */
    eProsima_user_DllExport const StringStruct& var_StringStruct() const;

    /*!
     * @brief This function returns a reference to member var_StringStruct
     * @return Reference to member var_StringStruct
     */
    eProsima_user_DllExport StringStruct& var_StringStruct();
    /*!
     * @brief This function copies the value in member var_WStringStruct
     * @param _var_WStringStruct New value to be copied in member var_WStringStruct
     */
    eProsima_user_DllExport void var_WStringStruct(
            const WStringStruct& _var_WStringStruct);

    /*!
     * @brief This function moves the value in member var_WStringStruct
     * @param _var_WStringStruct New value to be moved in member var_WStringStruct
     */
    eProsima_user_DllExport void var_WStringStruct(
            WStringStruct&& _var_WStringStruct);

    /*!
     * @brief This function returns a constant reference to member var_WStringStruct
     * @return Constant reference to member var_WStringStruct
     */
    eProsima_user_DllExport const WStringStruct& var_WStringStruct() const;

    /*!
     * @brief This function returns a reference to member var_WStringStruct
     * @return Reference to member var_WStringStruct
     */
    eProsima_user_DllExport WStringStruct& var_WStringStruct();
    /*!
     * @brief This function copies the value in member var_EnumStruct
     * @param _var_EnumStruct New value to be copied in member var_EnumStruct
     */
    eProsima_user_DllExport void var_EnumStruct(
            const EnumStruct& _var_EnumStruct);

    /*!
     * @brief This function moves the value in member var_EnumStruct
     * @param _var_EnumStruct New value to be moved in member var_EnumStruct
     */
    eProsima_user_DllExport void var_EnumStruct(
            EnumStruct&& _var_EnumStruct);

    /*!
     * @brief This function returns a constant reference to member var_EnumStruct
     * @return Constant reference to member var_EnumStruct
     */
    eProsima_user_DllExport const EnumStruct& var_EnumStruct() const;

    /*!
     * @brief This function returns a reference to member var_EnumStruct
     * @return Reference to member var_EnumStruct
     */
    eProsima_user_DllExport EnumStruct& var_EnumStruct();
    /*!
     * @brief This function copies the value in member var_BitMaskStruct
     * @param _var_BitMaskStruct New value to be copied in member var_BitMaskStruct
     */
    eProsima_user_DllExport void var_BitMaskStruct(
            const BitMaskStruct& _var_BitMaskStruct);

    /*!
     * @brief This function moves the value in member var_BitMaskStruct
     * @param _var_BitMaskStruct New value to be moved in member var_BitMaskStruct
     */
    eProsima_user_DllExport void var_BitMaskStruct(
            BitMaskStruct&& _var_BitMaskStruct);

    /*!
     * @brief This function returns a constant reference to member var_BitMaskStruct
     * @return Constant reference to member var_BitMaskStruct
     */
    eProsima_user_DllExport const BitMaskStruct& var_BitMaskStruct() const;

    /*!
     * @brief This function returns a reference to member var_BitMaskStruct
     * @return Reference to member var_BitMaskStruct
     */
    eProsima_user_DllExport BitMaskStruct& var_BitMaskStruct();
    /*!
     * @brief This function copies the value in member var_AliasStruct
     * @param _var_AliasStruct New value to be copied in member var_AliasStruct
     */
    eProsima_user_DllExport void var_AliasStruct(
            const AliasStruct& _var_AliasStruct);

    /*!
     * @brief This function moves the value in member var_AliasStruct
     * @param _var_AliasStruct New value to be moved in member var_AliasStruct
     */
    eProsima_user_DllExport void var_AliasStruct(
            AliasStruct&& _var_AliasStruct);

    /*!
     * @brief This function returns a constant reference to member var_AliasStruct
     * @return Constant reference to member var_AliasStruct
     */
    eProsima_user_DllExport const AliasStruct& var_AliasStruct() const;

    /*!
     * @brief This function returns a reference to member var_AliasStruct
     * @return Reference to member var_AliasStruct
     */
    eProsima_user_DllExport AliasStruct& var_AliasStruct();
    /*!
     * @brief This function copies the value in member var_ShortArrayStruct
     * @param _var_ShortArrayStruct New value to be copied in member var_ShortArrayStruct
     */
    eProsima_user_DllExport void var_ShortArrayStruct(
            const ShortArrayStruct& _var_ShortArrayStruct);

    /*!
     * @brief This function moves the value in member var_ShortArrayStruct
     * @param _var_ShortArrayStruct New value to be moved in member var_ShortArrayStruct
     */
    eProsima_user_DllExport void var_ShortArrayStruct(
            ShortArrayStruct&& _var_ShortArrayStruct);

    /*!
     * @brief This function returns a constant reference to member var_ShortArrayStruct
     * @return Constant reference to member var_ShortArrayStruct
     */
    eProsima_user_DllExport const ShortArrayStruct& var_ShortArrayStruct() const;

    /*!
     * @brief This function returns a reference to member var_ShortArrayStruct
     * @return Reference to member var_ShortArrayStruct
     */
    eProsima_user_DllExport ShortArrayStruct& var_ShortArrayStruct();
    /*!
     * @brief This function copies the value in member var_SequenceStruct
     * @param _var_SequenceStruct New value to be copied in member var_SequenceStruct
     */
    eProsima_user_DllExport void var_SequenceStruct(
            const SequenceStruct& _var_SequenceStruct);

    /*!
     * @brief This function moves the value in member var_SequenceStruct
     * @param _var_SequenceStruct New value to be moved in member var_SequenceStruct
     */
    eProsima_user_DllExport void var_SequenceStruct(
            SequenceStruct&& _var_SequenceStruct);

    /*!
     * @brief This function returns a constant reference to member var_SequenceStruct
     * @return Constant reference to member var_SequenceStruct
     */
    eProsima_user_DllExport const SequenceStruct& var_SequenceStruct() const;

    /*!
     * @brief This function returns a reference to member var_SequenceStruct
     * @return Reference to member var_SequenceStruct
     */
    eProsima_user_DllExport SequenceStruct& var_SequenceStruct();
    /*!
     * @brief This function copies the value in member var_MapStruct
     * @param _var_MapStruct New value to be copied in member var_MapStruct
     */
    eProsima_user_DllExport void var_MapStruct(
            const MapStruct& _var_MapStruct);

    /*!
     * @brief This function moves the value in member var_MapStruct
     * @param _var_MapStruct New value to be moved in member var_MapStruct
     */
    eProsima_user_DllExport void var_MapStruct(
            MapStruct&& _var_MapStruct);

    /*!
     * @brief This function returns a constant reference to member var_MapStruct
     * @return Constant reference to member var_MapStruct
     */
    eProsima_user_DllExport const MapStruct& var_MapStruct() const;

    /*!
     * @brief This function returns a reference to member var_MapStruct
     * @return Reference to member var_MapStruct
     */
    eProsima_user_DllExport MapStruct& var_MapStruct();
    /*!
     * @brief This function copies the value in member var_UnionStruct
     * @param _var_UnionStruct New value to be copied in member var_UnionStruct
     */
    eProsima_user_DllExport void var_UnionStruct(
            const UnionStruct& _var_UnionStruct);

    /*!
     * @brief This function moves the value in member var_UnionStruct
     * @param _var_UnionStruct New value to be moved in member var_UnionStruct
     */
    eProsima_user_DllExport void var_UnionStruct(
            UnionStruct&& _var_UnionStruct);

    /*!
     * @brief This function returns a constant reference to member var_UnionStruct
     * @return Constant reference to member var_UnionStruct
     */
    eProsima_user_DllExport const UnionStruct& var_UnionStruct() const;

    /*!
     * @brief This function returns a reference to member var_UnionStruct
     * @return Reference to member var_UnionStruct
     */
    eProsima_user_DllExport UnionStruct& var_UnionStruct();
    /*!
     * @brief This function copies the value in member var_StructureStruct
     * @param _var_StructureStruct New value to be copied in member var_StructureStruct
     */
    eProsima_user_DllExport void var_StructureStruct(
            const StructureStruct& _var_StructureStruct);

    /*!
     * @brief This function moves the value in member var_StructureStruct
     * @param _var_StructureStruct New value to be moved in member var_StructureStruct
     */
    eProsima_user_DllExport void var_StructureStruct(
            StructureStruct&& _var_StructureStruct);

    /*!
     * @brief This function returns a constant reference to member var_StructureStruct
     * @return Constant reference to member var_StructureStruct
     */
    eProsima_user_DllExport const StructureStruct& var_StructureStruct() const;

    /*!
     * @brief This function returns a reference to member var_StructureStruct
     * @return Reference to member var_StructureStruct
     */
    eProsima_user_DllExport StructureStruct& var_StructureStruct();
    /*!
     * @brief This function copies the value in member var_BitsetStruct
     * @param _var_BitsetStruct New value to be copied in member var_BitsetStruct
     */
    eProsima_user_DllExport void var_BitsetStruct(
            const BitsetStruct& _var_BitsetStruct);

    /*!
     * @brief This function moves the value in member var_BitsetStruct
     * @param _var_BitsetStruct New value to be moved in member var_BitsetStruct
     */
    eProsima_user_DllExport void var_BitsetStruct(
            BitsetStruct&& _var_BitsetStruct);

    /*!
     * @brief This function returns a constant reference to member var_BitsetStruct
     * @return Constant reference to member var_BitsetStruct
     */
    eProsima_user_DllExport const BitsetStruct& var_BitsetStruct() const;

    /*!
     * @brief This function returns a reference to member var_BitsetStruct
     * @return Reference to member var_BitsetStruct
     */
    eProsima_user_DllExport BitsetStruct& var_BitsetStruct();
    /*!
     * @brief This function copies the value in member var_EmptyStructure
     * @param _var_EmptyStructure New value to be copied in member var_EmptyStructure
     */
    eProsima_user_DllExport void var_EmptyStructure(
            const EmptyStructure& _var_EmptyStructure);

    /*!
     * @brief This function moves the value in member var_EmptyStructure
     * @param _var_EmptyStructure New value to be moved in member var_EmptyStructure
     */
    eProsima_user_DllExport void var_EmptyStructure(
            EmptyStructure&& _var_EmptyStructure);

    /*!
     * @brief This function returns a constant reference to member var_EmptyStructure
     * @return Constant reference to member var_EmptyStructure
     */
    eProsima_user_DllExport const EmptyStructure& var_EmptyStructure() const;

    /*!
     * @brief This function returns a reference to member var_EmptyStructure
     * @return Reference to member var_EmptyStructure
     */
    eProsima_user_DllExport EmptyStructure& var_EmptyStructure();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Structures& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    ShortStruct m_var_ShortStruct;
    UnsignedShortStruct m_var_UnsignedShortStruct;
    LongStruct m_var_LongStruct;
    UnsignedLongStruct m_var_UnsignedLongStruct;
    LongLongStruct m_var_LongLongStruct;
    UnsignedLongLongStruct m_var_UnsignedLongLongStruct;
    FloatStruct m_var_FloatStruct;
    DoubleStruct m_var_DoubleStruct;
    LongDoubleStruct m_var_LongDoubleStruct;
    BooleanStruct m_var_BooleanStruct;
    OctetStruct m_var_OctetStruct;
    Char8Struct m_var_Char8Struct;
    Char16Struct m_var_Char16Struct;
    StringStruct m_var_StringStruct;
    WStringStruct m_var_WStringStruct;
    EnumStruct m_var_EnumStruct;
    BitMaskStruct m_var_BitMaskStruct;
    AliasStruct m_var_AliasStruct;
    ShortArrayStruct m_var_ShortArrayStruct;
    SequenceStruct m_var_SequenceStruct;
    MapStruct m_var_MapStruct;
    UnionStruct m_var_UnionStruct;
    StructureStruct m_var_StructureStruct;
    BitsetStruct m_var_BitsetStruct;
    EmptyStructure m_var_EmptyStructure;

};

#endif // _FAST_DDS_GENERATED_STRUCTURES_H_

