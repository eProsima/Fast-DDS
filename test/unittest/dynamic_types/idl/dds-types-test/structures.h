// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file structures.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_STRUCTURES_H_
#define _FAST_DDS_GENERATED_STRUCTURES_H_

#include "helpers/basic_inner_types.h"

#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(STRUCTURES_SOURCE)
#define STRUCTURES_DllAPI __declspec( dllexport )
#else
#define STRUCTURES_DllAPI __declspec( dllimport )
#endif // STRUCTURES_SOURCE
#else
#define STRUCTURES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define STRUCTURES_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure StructShort defined by the user in the IDL file.
 * @ingroup structures
 */
class StructShort
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructShort();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructShort();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructShort that will be copied.
     */
    eProsima_user_DllExport StructShort(
            const StructShort& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructShort that will be copied.
     */
    eProsima_user_DllExport StructShort(
            StructShort&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructShort that will be copied.
     */
    eProsima_user_DllExport StructShort& operator =(
            const StructShort& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructShort that will be copied.
     */
    eProsima_user_DllExport StructShort& operator =(
            StructShort&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructShort object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructShort& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructShort object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructShort& x) const;

    /*!
     * @brief This function sets a value in member var_short
     * @param _var_short New value for member var_short
     */
    eProsima_user_DllExport void var_short(
            int16_t _var_short);

    /*!
     * @brief This function returns the value of member var_short
     * @return Value of member var_short
     */
    eProsima_user_DllExport int16_t var_short() const;

    /*!
     * @brief This function returns a reference to member var_short
     * @return Reference to member var_short
     */
    eProsima_user_DllExport int16_t& var_short();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructShort& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int16_t m_var_short;

};
/*!
 * @brief This class represents the structure StructUnsignedShort defined by the user in the IDL file.
 * @ingroup structures
 */
class StructUnsignedShort
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructUnsignedShort();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructUnsignedShort();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructUnsignedShort that will be copied.
     */
    eProsima_user_DllExport StructUnsignedShort(
            const StructUnsignedShort& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructUnsignedShort that will be copied.
     */
    eProsima_user_DllExport StructUnsignedShort(
            StructUnsignedShort&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructUnsignedShort that will be copied.
     */
    eProsima_user_DllExport StructUnsignedShort& operator =(
            const StructUnsignedShort& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructUnsignedShort that will be copied.
     */
    eProsima_user_DllExport StructUnsignedShort& operator =(
            StructUnsignedShort&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructUnsignedShort object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructUnsignedShort& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructUnsignedShort object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructUnsignedShort& x) const;

    /*!
     * @brief This function sets a value in member var_ushort
     * @param _var_ushort New value for member var_ushort
     */
    eProsima_user_DllExport void var_ushort(
            uint16_t _var_ushort);

    /*!
     * @brief This function returns the value of member var_ushort
     * @return Value of member var_ushort
     */
    eProsima_user_DllExport uint16_t var_ushort() const;

    /*!
     * @brief This function returns a reference to member var_ushort
     * @return Reference to member var_ushort
     */
    eProsima_user_DllExport uint16_t& var_ushort();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructUnsignedShort& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint16_t m_var_ushort;

};
/*!
 * @brief This class represents the structure StructLong defined by the user in the IDL file.
 * @ingroup structures
 */
class StructLong
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructLong();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructLong();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructLong that will be copied.
     */
    eProsima_user_DllExport StructLong(
            const StructLong& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructLong that will be copied.
     */
    eProsima_user_DllExport StructLong(
            StructLong&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructLong that will be copied.
     */
    eProsima_user_DllExport StructLong& operator =(
            const StructLong& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructLong that will be copied.
     */
    eProsima_user_DllExport StructLong& operator =(
            StructLong&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructLong object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructLong& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructLong object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructLong& x) const;

    /*!
     * @brief This function sets a value in member var_long
     * @param _var_long New value for member var_long
     */
    eProsima_user_DllExport void var_long(
            int32_t _var_long);

    /*!
     * @brief This function returns the value of member var_long
     * @return Value of member var_long
     */
    eProsima_user_DllExport int32_t var_long() const;

    /*!
     * @brief This function returns a reference to member var_long
     * @return Reference to member var_long
     */
    eProsima_user_DllExport int32_t& var_long();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructLong& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int32_t m_var_long;

};
/*!
 * @brief This class represents the structure StructUnsignedLong defined by the user in the IDL file.
 * @ingroup structures
 */
class StructUnsignedLong
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructUnsignedLong();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructUnsignedLong();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructUnsignedLong that will be copied.
     */
    eProsima_user_DllExport StructUnsignedLong(
            const StructUnsignedLong& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructUnsignedLong that will be copied.
     */
    eProsima_user_DllExport StructUnsignedLong(
            StructUnsignedLong&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructUnsignedLong that will be copied.
     */
    eProsima_user_DllExport StructUnsignedLong& operator =(
            const StructUnsignedLong& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructUnsignedLong that will be copied.
     */
    eProsima_user_DllExport StructUnsignedLong& operator =(
            StructUnsignedLong&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructUnsignedLong object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructUnsignedLong& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructUnsignedLong object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructUnsignedLong& x) const;

    /*!
     * @brief This function sets a value in member var_ulong
     * @param _var_ulong New value for member var_ulong
     */
    eProsima_user_DllExport void var_ulong(
            uint32_t _var_ulong);

    /*!
     * @brief This function returns the value of member var_ulong
     * @return Value of member var_ulong
     */
    eProsima_user_DllExport uint32_t var_ulong() const;

    /*!
     * @brief This function returns a reference to member var_ulong
     * @return Reference to member var_ulong
     */
    eProsima_user_DllExport uint32_t& var_ulong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructUnsignedLong& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint32_t m_var_ulong;

};
/*!
 * @brief This class represents the structure StructLongLong defined by the user in the IDL file.
 * @ingroup structures
 */
class StructLongLong
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructLongLong();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructLongLong();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructLongLong that will be copied.
     */
    eProsima_user_DllExport StructLongLong(
            const StructLongLong& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructLongLong that will be copied.
     */
    eProsima_user_DllExport StructLongLong(
            StructLongLong&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructLongLong that will be copied.
     */
    eProsima_user_DllExport StructLongLong& operator =(
            const StructLongLong& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructLongLong that will be copied.
     */
    eProsima_user_DllExport StructLongLong& operator =(
            StructLongLong&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructLongLong object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructLongLong& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructLongLong object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructLongLong& x) const;

    /*!
     * @brief This function sets a value in member var_longlong
     * @param _var_longlong New value for member var_longlong
     */
    eProsima_user_DllExport void var_longlong(
            int64_t _var_longlong);

    /*!
     * @brief This function returns the value of member var_longlong
     * @return Value of member var_longlong
     */
    eProsima_user_DllExport int64_t var_longlong() const;

    /*!
     * @brief This function returns a reference to member var_longlong
     * @return Reference to member var_longlong
     */
    eProsima_user_DllExport int64_t& var_longlong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructLongLong& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    int64_t m_var_longlong;

};
/*!
 * @brief This class represents the structure StructUnsignedLongLong defined by the user in the IDL file.
 * @ingroup structures
 */
class StructUnsignedLongLong
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructUnsignedLongLong();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructUnsignedLongLong();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructUnsignedLongLong that will be copied.
     */
    eProsima_user_DllExport StructUnsignedLongLong(
            const StructUnsignedLongLong& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructUnsignedLongLong that will be copied.
     */
    eProsima_user_DllExport StructUnsignedLongLong(
            StructUnsignedLongLong&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructUnsignedLongLong that will be copied.
     */
    eProsima_user_DllExport StructUnsignedLongLong& operator =(
            const StructUnsignedLongLong& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructUnsignedLongLong that will be copied.
     */
    eProsima_user_DllExport StructUnsignedLongLong& operator =(
            StructUnsignedLongLong&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructUnsignedLongLong object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructUnsignedLongLong& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructUnsignedLongLong object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructUnsignedLongLong& x) const;

    /*!
     * @brief This function sets a value in member var_ulonglong
     * @param _var_ulonglong New value for member var_ulonglong
     */
    eProsima_user_DllExport void var_ulonglong(
            uint64_t _var_ulonglong);

    /*!
     * @brief This function returns the value of member var_ulonglong
     * @return Value of member var_ulonglong
     */
    eProsima_user_DllExport uint64_t var_ulonglong() const;

    /*!
     * @brief This function returns a reference to member var_ulonglong
     * @return Reference to member var_ulonglong
     */
    eProsima_user_DllExport uint64_t& var_ulonglong();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructUnsignedLongLong& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint64_t m_var_ulonglong;

};
/*!
 * @brief This class represents the structure StructFloat defined by the user in the IDL file.
 * @ingroup structures
 */
class StructFloat
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructFloat();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructFloat();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructFloat that will be copied.
     */
    eProsima_user_DllExport StructFloat(
            const StructFloat& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructFloat that will be copied.
     */
    eProsima_user_DllExport StructFloat(
            StructFloat&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructFloat that will be copied.
     */
    eProsima_user_DllExport StructFloat& operator =(
            const StructFloat& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructFloat that will be copied.
     */
    eProsima_user_DllExport StructFloat& operator =(
            StructFloat&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructFloat object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructFloat& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructFloat object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructFloat& x) const;

    /*!
     * @brief This function sets a value in member var_float
     * @param _var_float New value for member var_float
     */
    eProsima_user_DllExport void var_float(
            float _var_float);

    /*!
     * @brief This function returns the value of member var_float
     * @return Value of member var_float
     */
    eProsima_user_DllExport float var_float() const;

    /*!
     * @brief This function returns a reference to member var_float
     * @return Reference to member var_float
     */
    eProsima_user_DllExport float& var_float();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructFloat& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    float m_var_float;

};
/*!
 * @brief This class represents the structure StructDouble defined by the user in the IDL file.
 * @ingroup structures
 */
class StructDouble
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructDouble();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructDouble();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructDouble that will be copied.
     */
    eProsima_user_DllExport StructDouble(
            const StructDouble& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructDouble that will be copied.
     */
    eProsima_user_DllExport StructDouble(
            StructDouble&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructDouble that will be copied.
     */
    eProsima_user_DllExport StructDouble& operator =(
            const StructDouble& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructDouble that will be copied.
     */
    eProsima_user_DllExport StructDouble& operator =(
            StructDouble&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructDouble object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructDouble& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructDouble object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructDouble& x) const;

    /*!
     * @brief This function sets a value in member var_double
     * @param _var_double New value for member var_double
     */
    eProsima_user_DllExport void var_double(
            double _var_double);

    /*!
     * @brief This function returns the value of member var_double
     * @return Value of member var_double
     */
    eProsima_user_DllExport double var_double() const;

    /*!
     * @brief This function returns a reference to member var_double
     * @return Reference to member var_double
     */
    eProsima_user_DllExport double& var_double();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructDouble& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_var_double;

};
/*!
 * @brief This class represents the structure StructLongDouble defined by the user in the IDL file.
 * @ingroup structures
 */
class StructLongDouble
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructLongDouble();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructLongDouble();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructLongDouble that will be copied.
     */
    eProsima_user_DllExport StructLongDouble(
            const StructLongDouble& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructLongDouble that will be copied.
     */
    eProsima_user_DllExport StructLongDouble(
            StructLongDouble&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructLongDouble that will be copied.
     */
    eProsima_user_DllExport StructLongDouble& operator =(
            const StructLongDouble& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructLongDouble that will be copied.
     */
    eProsima_user_DllExport StructLongDouble& operator =(
            StructLongDouble&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructLongDouble object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructLongDouble& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructLongDouble object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructLongDouble& x) const;

    /*!
     * @brief This function sets a value in member var_longdouble
     * @param _var_longdouble New value for member var_longdouble
     */
    eProsima_user_DllExport void var_longdouble(
            long double _var_longdouble);

    /*!
     * @brief This function returns the value of member var_longdouble
     * @return Value of member var_longdouble
     */
    eProsima_user_DllExport long double var_longdouble() const;

    /*!
     * @brief This function returns a reference to member var_longdouble
     * @return Reference to member var_longdouble
     */
    eProsima_user_DllExport long double& var_longdouble();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructLongDouble& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    long double m_var_longdouble;

};
/*!
 * @brief This class represents the structure StructBoolean defined by the user in the IDL file.
 * @ingroup structures
 */
class StructBoolean
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructBoolean();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructBoolean();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructBoolean that will be copied.
     */
    eProsima_user_DllExport StructBoolean(
            const StructBoolean& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructBoolean that will be copied.
     */
    eProsima_user_DllExport StructBoolean(
            StructBoolean&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructBoolean that will be copied.
     */
    eProsima_user_DllExport StructBoolean& operator =(
            const StructBoolean& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructBoolean that will be copied.
     */
    eProsima_user_DllExport StructBoolean& operator =(
            StructBoolean&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructBoolean object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructBoolean& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructBoolean object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructBoolean& x) const;

    /*!
     * @brief This function sets a value in member var_boolean
     * @param _var_boolean New value for member var_boolean
     */
    eProsima_user_DllExport void var_boolean(
            bool _var_boolean);

    /*!
     * @brief This function returns the value of member var_boolean
     * @return Value of member var_boolean
     */
    eProsima_user_DllExport bool var_boolean() const;

    /*!
     * @brief This function returns a reference to member var_boolean
     * @return Reference to member var_boolean
     */
    eProsima_user_DllExport bool& var_boolean();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructBoolean& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_var_boolean;

};
/*!
 * @brief This class represents the structure StructOctet defined by the user in the IDL file.
 * @ingroup structures
 */
class StructOctet
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructOctet();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructOctet();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructOctet that will be copied.
     */
    eProsima_user_DllExport StructOctet(
            const StructOctet& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructOctet that will be copied.
     */
    eProsima_user_DllExport StructOctet(
            StructOctet&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructOctet that will be copied.
     */
    eProsima_user_DllExport StructOctet& operator =(
            const StructOctet& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructOctet that will be copied.
     */
    eProsima_user_DllExport StructOctet& operator =(
            StructOctet&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructOctet object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructOctet& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructOctet object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructOctet& x) const;

    /*!
     * @brief This function sets a value in member var_octet
     * @param _var_octet New value for member var_octet
     */
    eProsima_user_DllExport void var_octet(
            uint8_t _var_octet);

    /*!
     * @brief This function returns the value of member var_octet
     * @return Value of member var_octet
     */
    eProsima_user_DllExport uint8_t var_octet() const;

    /*!
     * @brief This function returns a reference to member var_octet
     * @return Reference to member var_octet
     */
    eProsima_user_DllExport uint8_t& var_octet();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructOctet& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint8_t m_var_octet;

};
/*!
 * @brief This class represents the structure StructChar8 defined by the user in the IDL file.
 * @ingroup structures
 */
class StructChar8
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructChar8();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructChar8();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructChar8 that will be copied.
     */
    eProsima_user_DllExport StructChar8(
            const StructChar8& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructChar8 that will be copied.
     */
    eProsima_user_DllExport StructChar8(
            StructChar8&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructChar8 that will be copied.
     */
    eProsima_user_DllExport StructChar8& operator =(
            const StructChar8& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructChar8 that will be copied.
     */
    eProsima_user_DllExport StructChar8& operator =(
            StructChar8&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructChar8 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructChar8& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructChar8 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructChar8& x) const;

    /*!
     * @brief This function sets a value in member var_char8
     * @param _var_char8 New value for member var_char8
     */
    eProsima_user_DllExport void var_char8(
            char _var_char8);

    /*!
     * @brief This function returns the value of member var_char8
     * @return Value of member var_char8
     */
    eProsima_user_DllExport char var_char8() const;

    /*!
     * @brief This function returns a reference to member var_char8
     * @return Reference to member var_char8
     */
    eProsima_user_DllExport char& var_char8();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructChar8& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    char m_var_char8;

};
/*!
 * @brief This class represents the structure StructChar16 defined by the user in the IDL file.
 * @ingroup structures
 */
class StructChar16
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructChar16();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructChar16();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructChar16 that will be copied.
     */
    eProsima_user_DllExport StructChar16(
            const StructChar16& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructChar16 that will be copied.
     */
    eProsima_user_DllExport StructChar16(
            StructChar16&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructChar16 that will be copied.
     */
    eProsima_user_DllExport StructChar16& operator =(
            const StructChar16& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructChar16 that will be copied.
     */
    eProsima_user_DllExport StructChar16& operator =(
            StructChar16&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructChar16 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructChar16& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructChar16 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructChar16& x) const;

    /*!
     * @brief This function sets a value in member var_char16
     * @param _var_char16 New value for member var_char16
     */
    eProsima_user_DllExport void var_char16(
            wchar_t _var_char16);

    /*!
     * @brief This function returns the value of member var_char16
     * @return Value of member var_char16
     */
    eProsima_user_DllExport wchar_t var_char16() const;

    /*!
     * @brief This function returns a reference to member var_char16
     * @return Reference to member var_char16
     */
    eProsima_user_DllExport wchar_t& var_char16();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructChar16& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    wchar_t m_var_char16;

};
/*!
 * @brief This class represents the structure StructString defined by the user in the IDL file.
 * @ingroup structures
 */
class StructString
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructString();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructString();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructString that will be copied.
     */
    eProsima_user_DllExport StructString(
            const StructString& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructString that will be copied.
     */
    eProsima_user_DllExport StructString(
            StructString&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructString that will be copied.
     */
    eProsima_user_DllExport StructString& operator =(
            const StructString& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructString that will be copied.
     */
    eProsima_user_DllExport StructString& operator =(
            StructString&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructString object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructString& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructString object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructString& x) const;

    /*!
     * @brief This function copies the value in member var_string
     * @param _var_string New value to be copied in member var_string
     */
    eProsima_user_DllExport void var_string(
            const std::string& _var_string);

    /*!
     * @brief This function moves the value in member var_string
     * @param _var_string New value to be moved in member var_string
     */
    eProsima_user_DllExport void var_string(
            std::string&& _var_string);

    /*!
     * @brief This function returns a constant reference to member var_string
     * @return Constant reference to member var_string
     */
    eProsima_user_DllExport const std::string& var_string() const;

    /*!
     * @brief This function returns a reference to member var_string
     * @return Reference to member var_string
     */
    eProsima_user_DllExport std::string& var_string();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructString& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_var_string;

};
/*!
 * @brief This class represents the structure StructWString defined by the user in the IDL file.
 * @ingroup structures
 */
class StructWString
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructWString();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructWString();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructWString that will be copied.
     */
    eProsima_user_DllExport StructWString(
            const StructWString& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructWString that will be copied.
     */
    eProsima_user_DllExport StructWString(
            StructWString&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructWString that will be copied.
     */
    eProsima_user_DllExport StructWString& operator =(
            const StructWString& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructWString that will be copied.
     */
    eProsima_user_DllExport StructWString& operator =(
            StructWString&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructWString object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructWString& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructWString object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructWString& x) const;

    /*!
     * @brief This function copies the value in member var_wstring
     * @param _var_wstring New value to be copied in member var_wstring
     */
    eProsima_user_DllExport void var_wstring(
            const std::wstring& _var_wstring);

    /*!
     * @brief This function moves the value in member var_wstring
     * @param _var_wstring New value to be moved in member var_wstring
     */
    eProsima_user_DllExport void var_wstring(
            std::wstring&& _var_wstring);

    /*!
     * @brief This function returns a constant reference to member var_wstring
     * @return Constant reference to member var_wstring
     */
    eProsima_user_DllExport const std::wstring& var_wstring() const;

    /*!
     * @brief This function returns a reference to member var_wstring
     * @return Reference to member var_wstring
     */
    eProsima_user_DllExport std::wstring& var_wstring();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructWString& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::wstring m_var_wstring;

};
/*!
 * @brief This class represents the structure StructBoundedString defined by the user in the IDL file.
 * @ingroup structures
 */
class StructBoundedString
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructBoundedString();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructBoundedString();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructBoundedString that will be copied.
     */
    eProsima_user_DllExport StructBoundedString(
            const StructBoundedString& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructBoundedString that will be copied.
     */
    eProsima_user_DllExport StructBoundedString(
            StructBoundedString&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructBoundedString that will be copied.
     */
    eProsima_user_DllExport StructBoundedString& operator =(
            const StructBoundedString& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructBoundedString that will be copied.
     */
    eProsima_user_DllExport StructBoundedString& operator =(
            StructBoundedString&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructBoundedString object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructBoundedString& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructBoundedString object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructBoundedString& x) const;

    /*!
     * @brief This function copies the value in member var_bounded_string
     * @param _var_bounded_string New value to be copied in member var_bounded_string
     */
    eProsima_user_DllExport void var_bounded_string(
            const Inner_alias_bounded_string_helper& _var_bounded_string);

    /*!
     * @brief This function moves the value in member var_bounded_string
     * @param _var_bounded_string New value to be moved in member var_bounded_string
     */
    eProsima_user_DllExport void var_bounded_string(
            Inner_alias_bounded_string_helper&& _var_bounded_string);

    /*!
     * @brief This function returns a constant reference to member var_bounded_string
     * @return Constant reference to member var_bounded_string
     */
    eProsima_user_DllExport const Inner_alias_bounded_string_helper& var_bounded_string() const;

    /*!
     * @brief This function returns a reference to member var_bounded_string
     * @return Reference to member var_bounded_string
     */
    eProsima_user_DllExport Inner_alias_bounded_string_helper& var_bounded_string();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructBoundedString& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Inner_alias_bounded_string_helper m_var_bounded_string;

};
/*!
 * @brief This class represents the structure StructBoundedWString defined by the user in the IDL file.
 * @ingroup structures
 */
class StructBoundedWString
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructBoundedWString();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructBoundedWString();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructBoundedWString that will be copied.
     */
    eProsima_user_DllExport StructBoundedWString(
            const StructBoundedWString& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructBoundedWString that will be copied.
     */
    eProsima_user_DllExport StructBoundedWString(
            StructBoundedWString&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructBoundedWString that will be copied.
     */
    eProsima_user_DllExport StructBoundedWString& operator =(
            const StructBoundedWString& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructBoundedWString that will be copied.
     */
    eProsima_user_DllExport StructBoundedWString& operator =(
            StructBoundedWString&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructBoundedWString object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructBoundedWString& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructBoundedWString object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructBoundedWString& x) const;

    /*!
     * @brief This function copies the value in member var_bounded_wstring
     * @param _var_bounded_wstring New value to be copied in member var_bounded_wstring
     */
    eProsima_user_DllExport void var_bounded_wstring(
            const Inner_alias_bounded_wstring_helper& _var_bounded_wstring);

    /*!
     * @brief This function moves the value in member var_bounded_wstring
     * @param _var_bounded_wstring New value to be moved in member var_bounded_wstring
     */
    eProsima_user_DllExport void var_bounded_wstring(
            Inner_alias_bounded_wstring_helper&& _var_bounded_wstring);

    /*!
     * @brief This function returns a constant reference to member var_bounded_wstring
     * @return Constant reference to member var_bounded_wstring
     */
    eProsima_user_DllExport const Inner_alias_bounded_wstring_helper& var_bounded_wstring() const;

    /*!
     * @brief This function returns a reference to member var_bounded_wstring
     * @return Reference to member var_bounded_wstring
     */
    eProsima_user_DllExport Inner_alias_bounded_wstring_helper& var_bounded_wstring();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructBoundedWString& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Inner_alias_bounded_wstring_helper m_var_bounded_wstring;

};
/*!
 * @brief This class represents the structure StructEnum defined by the user in the IDL file.
 * @ingroup structures
 */
class StructEnum
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructEnum();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructEnum();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructEnum that will be copied.
     */
    eProsima_user_DllExport StructEnum(
            const StructEnum& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructEnum that will be copied.
     */
    eProsima_user_DllExport StructEnum(
            StructEnum&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructEnum that will be copied.
     */
    eProsima_user_DllExport StructEnum& operator =(
            const StructEnum& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructEnum that will be copied.
     */
    eProsima_user_DllExport StructEnum& operator =(
            StructEnum&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructEnum object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructEnum& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructEnum object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructEnum& x) const;

    /*!
     * @brief This function sets a value in member var_enum
     * @param _var_enum New value for member var_enum
     */
    eProsima_user_DllExport void var_enum(
            InnerEnumHelper _var_enum);

    /*!
     * @brief This function returns the value of member var_enum
     * @return Value of member var_enum
     */
    eProsima_user_DllExport InnerEnumHelper var_enum() const;

    /*!
     * @brief This function returns a reference to member var_enum
     * @return Reference to member var_enum
     */
    eProsima_user_DllExport InnerEnumHelper& var_enum();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructEnum& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerEnumHelper m_var_enum;

};
/*!
 * @brief This class represents the structure StructBitMask defined by the user in the IDL file.
 * @ingroup structures
 */
class StructBitMask
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructBitMask();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructBitMask();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructBitMask that will be copied.
     */
    eProsima_user_DllExport StructBitMask(
            const StructBitMask& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructBitMask that will be copied.
     */
    eProsima_user_DllExport StructBitMask(
            StructBitMask&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructBitMask that will be copied.
     */
    eProsima_user_DllExport StructBitMask& operator =(
            const StructBitMask& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructBitMask that will be copied.
     */
    eProsima_user_DllExport StructBitMask& operator =(
            StructBitMask&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructBitMask object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructBitMask& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructBitMask object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructBitMask& x) const;

    /*!
     * @brief This function sets a value in member var_bitmask
     * @param _var_bitmask New value for member var_bitmask
     */
    eProsima_user_DllExport void var_bitmask(
            InnerBitMaskHelper _var_bitmask);

    /*!
     * @brief This function returns the value of member var_bitmask
     * @return Value of member var_bitmask
     */
    eProsima_user_DllExport InnerBitMaskHelper var_bitmask() const;

    /*!
     * @brief This function returns a reference to member var_bitmask
     * @return Reference to member var_bitmask
     */
    eProsima_user_DllExport InnerBitMaskHelper& var_bitmask();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructBitMask& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerBitMaskHelper m_var_bitmask;

};
/*!
 * @brief This class represents the structure StructAlias defined by the user in the IDL file.
 * @ingroup structures
 */
class StructAlias
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructAlias();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructAlias();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructAlias that will be copied.
     */
    eProsima_user_DllExport StructAlias(
            const StructAlias& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructAlias that will be copied.
     */
    eProsima_user_DllExport StructAlias(
            StructAlias&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructAlias that will be copied.
     */
    eProsima_user_DllExport StructAlias& operator =(
            const StructAlias& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructAlias that will be copied.
     */
    eProsima_user_DllExport StructAlias& operator =(
            StructAlias&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructAlias object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructAlias& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructAlias object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructAlias& x) const;

    /*!
     * @brief This function sets a value in member var_alias
     * @param _var_alias New value for member var_alias
     */
    eProsima_user_DllExport void var_alias(
            InnerAliasHelper _var_alias);

    /*!
     * @brief This function returns the value of member var_alias
     * @return Value of member var_alias
     */
    eProsima_user_DllExport InnerAliasHelper var_alias() const;

    /*!
     * @brief This function returns a reference to member var_alias
     * @return Reference to member var_alias
     */
    eProsima_user_DllExport InnerAliasHelper& var_alias();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructAlias& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerAliasHelper m_var_alias;

};
/*!
 * @brief This class represents the structure StructShortArray defined by the user in the IDL file.
 * @ingroup structures
 */
class StructShortArray
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructShortArray();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructShortArray();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructShortArray that will be copied.
     */
    eProsima_user_DllExport StructShortArray(
            const StructShortArray& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructShortArray that will be copied.
     */
    eProsima_user_DllExport StructShortArray(
            StructShortArray&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructShortArray that will be copied.
     */
    eProsima_user_DllExport StructShortArray& operator =(
            const StructShortArray& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructShortArray that will be copied.
     */
    eProsima_user_DllExport StructShortArray& operator =(
            StructShortArray&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructShortArray object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructShortArray& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructShortArray object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructShortArray& x) const;

    /*!
     * @brief This function copies the value in member var_array_short
     * @param _var_array_short New value to be copied in member var_array_short
     */
    eProsima_user_DllExport void var_array_short(
            const std::array<int16_t, 10>& _var_array_short);

    /*!
     * @brief This function moves the value in member var_array_short
     * @param _var_array_short New value to be moved in member var_array_short
     */
    eProsima_user_DllExport void var_array_short(
            std::array<int16_t, 10>&& _var_array_short);

    /*!
     * @brief This function returns a constant reference to member var_array_short
     * @return Constant reference to member var_array_short
     */
    eProsima_user_DllExport const std::array<int16_t, 10>& var_array_short() const;

    /*!
     * @brief This function returns a reference to member var_array_short
     * @return Reference to member var_array_short
     */
    eProsima_user_DllExport std::array<int16_t, 10>& var_array_short();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructShortArray& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::array<int16_t, 10> m_var_array_short;

};
/*!
 * @brief This class represents the structure StructSequence defined by the user in the IDL file.
 * @ingroup structures
 */
class StructSequence
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructSequence();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructSequence();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructSequence that will be copied.
     */
    eProsima_user_DllExport StructSequence(
            const StructSequence& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructSequence that will be copied.
     */
    eProsima_user_DllExport StructSequence(
            StructSequence&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructSequence that will be copied.
     */
    eProsima_user_DllExport StructSequence& operator =(
            const StructSequence& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructSequence that will be copied.
     */
    eProsima_user_DllExport StructSequence& operator =(
            StructSequence&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructSequence object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructSequence& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructSequence object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructSequence& x) const;

    /*!
     * @brief This function copies the value in member var_sequence
     * @param _var_sequence New value to be copied in member var_sequence
     */
    eProsima_user_DllExport void var_sequence(
            const std::vector<int32_t>& _var_sequence);

    /*!
     * @brief This function moves the value in member var_sequence
     * @param _var_sequence New value to be moved in member var_sequence
     */
    eProsima_user_DllExport void var_sequence(
            std::vector<int32_t>&& _var_sequence);

    /*!
     * @brief This function returns a constant reference to member var_sequence
     * @return Constant reference to member var_sequence
     */
    eProsima_user_DllExport const std::vector<int32_t>& var_sequence() const;

    /*!
     * @brief This function returns a reference to member var_sequence
     * @return Reference to member var_sequence
     */
    eProsima_user_DllExport std::vector<int32_t>& var_sequence();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructSequence& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<int32_t> m_var_sequence;

};
/*!
 * @brief This class represents the structure StructMap defined by the user in the IDL file.
 * @ingroup structures
 */
class StructMap
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructMap();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructMap();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructMap that will be copied.
     */
    eProsima_user_DllExport StructMap(
            const StructMap& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructMap that will be copied.
     */
    eProsima_user_DllExport StructMap(
            StructMap&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructMap that will be copied.
     */
    eProsima_user_DllExport StructMap& operator =(
            const StructMap& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructMap that will be copied.
     */
    eProsima_user_DllExport StructMap& operator =(
            StructMap&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructMap object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructMap& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructMap object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructMap& x) const;

    /*!
     * @brief This function copies the value in member var_map
     * @param _var_map New value to be copied in member var_map
     */
    eProsima_user_DllExport void var_map(
            const std::map<int32_t, int32_t>& _var_map);

    /*!
     * @brief This function moves the value in member var_map
     * @param _var_map New value to be moved in member var_map
     */
    eProsima_user_DllExport void var_map(
            std::map<int32_t, int32_t>&& _var_map);

    /*!
     * @brief This function returns a constant reference to member var_map
     * @return Constant reference to member var_map
     */
    eProsima_user_DllExport const std::map<int32_t, int32_t>& var_map() const;

    /*!
     * @brief This function returns a reference to member var_map
     * @return Reference to member var_map
     */
    eProsima_user_DllExport std::map<int32_t, int32_t>& var_map();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructMap& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::map<int32_t, int32_t> m_var_map;

};
/*!
 * @brief This class represents the structure StructUnion defined by the user in the IDL file.
 * @ingroup structures
 */
class StructUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructUnion();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructUnion();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructUnion that will be copied.
     */
    eProsima_user_DllExport StructUnion(
            const StructUnion& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructUnion that will be copied.
     */
    eProsima_user_DllExport StructUnion(
            StructUnion&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructUnion that will be copied.
     */
    eProsima_user_DllExport StructUnion& operator =(
            const StructUnion& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructUnion that will be copied.
     */
    eProsima_user_DllExport StructUnion& operator =(
            StructUnion&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructUnion& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructUnion& x) const;

    /*!
     * @brief This function copies the value in member var_union
     * @param _var_union New value to be copied in member var_union
     */
    eProsima_user_DllExport void var_union(
            const InnerUnionHelper& _var_union);

    /*!
     * @brief This function moves the value in member var_union
     * @param _var_union New value to be moved in member var_union
     */
    eProsima_user_DllExport void var_union(
            InnerUnionHelper&& _var_union);

    /*!
     * @brief This function returns a constant reference to member var_union
     * @return Constant reference to member var_union
     */
    eProsima_user_DllExport const InnerUnionHelper& var_union() const;

    /*!
     * @brief This function returns a reference to member var_union
     * @return Reference to member var_union
     */
    eProsima_user_DllExport InnerUnionHelper& var_union();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructUnion& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerUnionHelper m_var_union;

};
/*!
 * @brief This class represents the structure StructStructure defined by the user in the IDL file.
 * @ingroup structures
 */
class StructStructure
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructStructure();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructStructure();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructStructure that will be copied.
     */
    eProsima_user_DllExport StructStructure(
            const StructStructure& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructStructure that will be copied.
     */
    eProsima_user_DllExport StructStructure(
            StructStructure&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructStructure that will be copied.
     */
    eProsima_user_DllExport StructStructure& operator =(
            const StructStructure& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructStructure that will be copied.
     */
    eProsima_user_DllExport StructStructure& operator =(
            StructStructure&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructStructure object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructStructure& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructStructure object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructStructure& x) const;

    /*!
     * @brief This function copies the value in member var_structure
     * @param _var_structure New value to be copied in member var_structure
     */
    eProsima_user_DllExport void var_structure(
            const InnerStructureHelper& _var_structure);

    /*!
     * @brief This function moves the value in member var_structure
     * @param _var_structure New value to be moved in member var_structure
     */
    eProsima_user_DllExport void var_structure(
            InnerStructureHelper&& _var_structure);

    /*!
     * @brief This function returns a constant reference to member var_structure
     * @return Constant reference to member var_structure
     */
    eProsima_user_DllExport const InnerStructureHelper& var_structure() const;

    /*!
     * @brief This function returns a reference to member var_structure
     * @return Reference to member var_structure
     */
    eProsima_user_DllExport InnerStructureHelper& var_structure();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructStructure& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerStructureHelper m_var_structure;

};
/*!
 * @brief This class represents the structure StructBitset defined by the user in the IDL file.
 * @ingroup structures
 */
class StructBitset
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructBitset();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructBitset();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructBitset that will be copied.
     */
    eProsima_user_DllExport StructBitset(
            const StructBitset& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructBitset that will be copied.
     */
    eProsima_user_DllExport StructBitset(
            StructBitset&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructBitset that will be copied.
     */
    eProsima_user_DllExport StructBitset& operator =(
            const StructBitset& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructBitset that will be copied.
     */
    eProsima_user_DllExport StructBitset& operator =(
            StructBitset&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructBitset object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructBitset& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructBitset object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructBitset& x) const;

    /*!
     * @brief This function copies the value in member var_bitset
     * @param _var_bitset New value to be copied in member var_bitset
     */
    eProsima_user_DllExport void var_bitset(
            const InnerBitsetHelper& _var_bitset);

    /*!
     * @brief This function moves the value in member var_bitset
     * @param _var_bitset New value to be moved in member var_bitset
     */
    eProsima_user_DllExport void var_bitset(
            InnerBitsetHelper&& _var_bitset);

    /*!
     * @brief This function returns a constant reference to member var_bitset
     * @return Constant reference to member var_bitset
     */
    eProsima_user_DllExport const InnerBitsetHelper& var_bitset() const;

    /*!
     * @brief This function returns a reference to member var_bitset
     * @return Reference to member var_bitset
     */
    eProsima_user_DllExport InnerBitsetHelper& var_bitset();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructBitset& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    InnerBitsetHelper m_var_bitset;

};
/*!
 * @brief This class represents the structure StructEmpty defined by the user in the IDL file.
 * @ingroup structures
 */
class StructEmpty
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructEmpty();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructEmpty();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructEmpty that will be copied.
     */
    eProsima_user_DllExport StructEmpty(
            const StructEmpty& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructEmpty that will be copied.
     */
    eProsima_user_DllExport StructEmpty(
            StructEmpty&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructEmpty that will be copied.
     */
    eProsima_user_DllExport StructEmpty& operator =(
            const StructEmpty& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructEmpty that will be copied.
     */
    eProsima_user_DllExport StructEmpty& operator =(
            StructEmpty&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x StructEmpty object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructEmpty& x) const;

    /*!
     * @brief Comparison operator.
     * @param x StructEmpty object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructEmpty& x) const;


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const StructEmpty& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:


};
/*!
 * @brief This class represents the structure Structures defined by the user in the IDL file.
 * @ingroup structures
 */
class Structures
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Structures();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Structures();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Structures that will be copied.
     */
    eProsima_user_DllExport Structures(
            const Structures& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Structures that will be copied.
     */
    eProsima_user_DllExport Structures(
            Structures&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Structures that will be copied.
     */
    eProsima_user_DllExport Structures& operator =(
            const Structures& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Structures that will be copied.
     */
    eProsima_user_DllExport Structures& operator =(
            Structures&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x Structures object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Structures& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Structures object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Structures& x) const;

    /*!
     * @brief This function copies the value in member var_StructShort
     * @param _var_StructShort New value to be copied in member var_StructShort
     */
    eProsima_user_DllExport void var_StructShort(
            const StructShort& _var_StructShort);

    /*!
     * @brief This function moves the value in member var_StructShort
     * @param _var_StructShort New value to be moved in member var_StructShort
     */
    eProsima_user_DllExport void var_StructShort(
            StructShort&& _var_StructShort);

    /*!
     * @brief This function returns a constant reference to member var_StructShort
     * @return Constant reference to member var_StructShort
     */
    eProsima_user_DllExport const StructShort& var_StructShort() const;

    /*!
     * @brief This function returns a reference to member var_StructShort
     * @return Reference to member var_StructShort
     */
    eProsima_user_DllExport StructShort& var_StructShort();
    /*!
     * @brief This function copies the value in member var_StructUnsignedShort
     * @param _var_StructUnsignedShort New value to be copied in member var_StructUnsignedShort
     */
    eProsima_user_DllExport void var_StructUnsignedShort(
            const StructUnsignedShort& _var_StructUnsignedShort);

    /*!
     * @brief This function moves the value in member var_StructUnsignedShort
     * @param _var_StructUnsignedShort New value to be moved in member var_StructUnsignedShort
     */
    eProsima_user_DllExport void var_StructUnsignedShort(
            StructUnsignedShort&& _var_StructUnsignedShort);

    /*!
     * @brief This function returns a constant reference to member var_StructUnsignedShort
     * @return Constant reference to member var_StructUnsignedShort
     */
    eProsima_user_DllExport const StructUnsignedShort& var_StructUnsignedShort() const;

    /*!
     * @brief This function returns a reference to member var_StructUnsignedShort
     * @return Reference to member var_StructUnsignedShort
     */
    eProsima_user_DllExport StructUnsignedShort& var_StructUnsignedShort();
    /*!
     * @brief This function copies the value in member var_StructLong
     * @param _var_StructLong New value to be copied in member var_StructLong
     */
    eProsima_user_DllExport void var_StructLong(
            const StructLong& _var_StructLong);

    /*!
     * @brief This function moves the value in member var_StructLong
     * @param _var_StructLong New value to be moved in member var_StructLong
     */
    eProsima_user_DllExport void var_StructLong(
            StructLong&& _var_StructLong);

    /*!
     * @brief This function returns a constant reference to member var_StructLong
     * @return Constant reference to member var_StructLong
     */
    eProsima_user_DllExport const StructLong& var_StructLong() const;

    /*!
     * @brief This function returns a reference to member var_StructLong
     * @return Reference to member var_StructLong
     */
    eProsima_user_DllExport StructLong& var_StructLong();
    /*!
     * @brief This function copies the value in member var_StructUnsignedLong
     * @param _var_StructUnsignedLong New value to be copied in member var_StructUnsignedLong
     */
    eProsima_user_DllExport void var_StructUnsignedLong(
            const StructUnsignedLong& _var_StructUnsignedLong);

    /*!
     * @brief This function moves the value in member var_StructUnsignedLong
     * @param _var_StructUnsignedLong New value to be moved in member var_StructUnsignedLong
     */
    eProsima_user_DllExport void var_StructUnsignedLong(
            StructUnsignedLong&& _var_StructUnsignedLong);

    /*!
     * @brief This function returns a constant reference to member var_StructUnsignedLong
     * @return Constant reference to member var_StructUnsignedLong
     */
    eProsima_user_DllExport const StructUnsignedLong& var_StructUnsignedLong() const;

    /*!
     * @brief This function returns a reference to member var_StructUnsignedLong
     * @return Reference to member var_StructUnsignedLong
     */
    eProsima_user_DllExport StructUnsignedLong& var_StructUnsignedLong();
    /*!
     * @brief This function copies the value in member var_StructLongLong
     * @param _var_StructLongLong New value to be copied in member var_StructLongLong
     */
    eProsima_user_DllExport void var_StructLongLong(
            const StructLongLong& _var_StructLongLong);

    /*!
     * @brief This function moves the value in member var_StructLongLong
     * @param _var_StructLongLong New value to be moved in member var_StructLongLong
     */
    eProsima_user_DllExport void var_StructLongLong(
            StructLongLong&& _var_StructLongLong);

    /*!
     * @brief This function returns a constant reference to member var_StructLongLong
     * @return Constant reference to member var_StructLongLong
     */
    eProsima_user_DllExport const StructLongLong& var_StructLongLong() const;

    /*!
     * @brief This function returns a reference to member var_StructLongLong
     * @return Reference to member var_StructLongLong
     */
    eProsima_user_DllExport StructLongLong& var_StructLongLong();
    /*!
     * @brief This function copies the value in member var_StructUnsignedLongLong
     * @param _var_StructUnsignedLongLong New value to be copied in member var_StructUnsignedLongLong
     */
    eProsima_user_DllExport void var_StructUnsignedLongLong(
            const StructUnsignedLongLong& _var_StructUnsignedLongLong);

    /*!
     * @brief This function moves the value in member var_StructUnsignedLongLong
     * @param _var_StructUnsignedLongLong New value to be moved in member var_StructUnsignedLongLong
     */
    eProsima_user_DllExport void var_StructUnsignedLongLong(
            StructUnsignedLongLong&& _var_StructUnsignedLongLong);

    /*!
     * @brief This function returns a constant reference to member var_StructUnsignedLongLong
     * @return Constant reference to member var_StructUnsignedLongLong
     */
    eProsima_user_DllExport const StructUnsignedLongLong& var_StructUnsignedLongLong() const;

    /*!
     * @brief This function returns a reference to member var_StructUnsignedLongLong
     * @return Reference to member var_StructUnsignedLongLong
     */
    eProsima_user_DllExport StructUnsignedLongLong& var_StructUnsignedLongLong();
    /*!
     * @brief This function copies the value in member var_StructFloat
     * @param _var_StructFloat New value to be copied in member var_StructFloat
     */
    eProsima_user_DllExport void var_StructFloat(
            const StructFloat& _var_StructFloat);

    /*!
     * @brief This function moves the value in member var_StructFloat
     * @param _var_StructFloat New value to be moved in member var_StructFloat
     */
    eProsima_user_DllExport void var_StructFloat(
            StructFloat&& _var_StructFloat);

    /*!
     * @brief This function returns a constant reference to member var_StructFloat
     * @return Constant reference to member var_StructFloat
     */
    eProsima_user_DllExport const StructFloat& var_StructFloat() const;

    /*!
     * @brief This function returns a reference to member var_StructFloat
     * @return Reference to member var_StructFloat
     */
    eProsima_user_DllExport StructFloat& var_StructFloat();
    /*!
     * @brief This function copies the value in member var_StructDouble
     * @param _var_StructDouble New value to be copied in member var_StructDouble
     */
    eProsima_user_DllExport void var_StructDouble(
            const StructDouble& _var_StructDouble);

    /*!
     * @brief This function moves the value in member var_StructDouble
     * @param _var_StructDouble New value to be moved in member var_StructDouble
     */
    eProsima_user_DllExport void var_StructDouble(
            StructDouble&& _var_StructDouble);

    /*!
     * @brief This function returns a constant reference to member var_StructDouble
     * @return Constant reference to member var_StructDouble
     */
    eProsima_user_DllExport const StructDouble& var_StructDouble() const;

    /*!
     * @brief This function returns a reference to member var_StructDouble
     * @return Reference to member var_StructDouble
     */
    eProsima_user_DllExport StructDouble& var_StructDouble();
    /*!
     * @brief This function copies the value in member var_StructLongDouble
     * @param _var_StructLongDouble New value to be copied in member var_StructLongDouble
     */
    eProsima_user_DllExport void var_StructLongDouble(
            const StructLongDouble& _var_StructLongDouble);

    /*!
     * @brief This function moves the value in member var_StructLongDouble
     * @param _var_StructLongDouble New value to be moved in member var_StructLongDouble
     */
    eProsima_user_DllExport void var_StructLongDouble(
            StructLongDouble&& _var_StructLongDouble);

    /*!
     * @brief This function returns a constant reference to member var_StructLongDouble
     * @return Constant reference to member var_StructLongDouble
     */
    eProsima_user_DllExport const StructLongDouble& var_StructLongDouble() const;

    /*!
     * @brief This function returns a reference to member var_StructLongDouble
     * @return Reference to member var_StructLongDouble
     */
    eProsima_user_DllExport StructLongDouble& var_StructLongDouble();
    /*!
     * @brief This function copies the value in member var_StructBoolean
     * @param _var_StructBoolean New value to be copied in member var_StructBoolean
     */
    eProsima_user_DllExport void var_StructBoolean(
            const StructBoolean& _var_StructBoolean);

    /*!
     * @brief This function moves the value in member var_StructBoolean
     * @param _var_StructBoolean New value to be moved in member var_StructBoolean
     */
    eProsima_user_DllExport void var_StructBoolean(
            StructBoolean&& _var_StructBoolean);

    /*!
     * @brief This function returns a constant reference to member var_StructBoolean
     * @return Constant reference to member var_StructBoolean
     */
    eProsima_user_DllExport const StructBoolean& var_StructBoolean() const;

    /*!
     * @brief This function returns a reference to member var_StructBoolean
     * @return Reference to member var_StructBoolean
     */
    eProsima_user_DllExport StructBoolean& var_StructBoolean();
    /*!
     * @brief This function copies the value in member var_StructOctet
     * @param _var_StructOctet New value to be copied in member var_StructOctet
     */
    eProsima_user_DllExport void var_StructOctet(
            const StructOctet& _var_StructOctet);

    /*!
     * @brief This function moves the value in member var_StructOctet
     * @param _var_StructOctet New value to be moved in member var_StructOctet
     */
    eProsima_user_DllExport void var_StructOctet(
            StructOctet&& _var_StructOctet);

    /*!
     * @brief This function returns a constant reference to member var_StructOctet
     * @return Constant reference to member var_StructOctet
     */
    eProsima_user_DllExport const StructOctet& var_StructOctet() const;

    /*!
     * @brief This function returns a reference to member var_StructOctet
     * @return Reference to member var_StructOctet
     */
    eProsima_user_DllExport StructOctet& var_StructOctet();
    /*!
     * @brief This function copies the value in member var_StructChar8
     * @param _var_StructChar8 New value to be copied in member var_StructChar8
     */
    eProsima_user_DllExport void var_StructChar8(
            const StructChar8& _var_StructChar8);

    /*!
     * @brief This function moves the value in member var_StructChar8
     * @param _var_StructChar8 New value to be moved in member var_StructChar8
     */
    eProsima_user_DllExport void var_StructChar8(
            StructChar8&& _var_StructChar8);

    /*!
     * @brief This function returns a constant reference to member var_StructChar8
     * @return Constant reference to member var_StructChar8
     */
    eProsima_user_DllExport const StructChar8& var_StructChar8() const;

    /*!
     * @brief This function returns a reference to member var_StructChar8
     * @return Reference to member var_StructChar8
     */
    eProsima_user_DllExport StructChar8& var_StructChar8();
    /*!
     * @brief This function copies the value in member var_StructChar16
     * @param _var_StructChar16 New value to be copied in member var_StructChar16
     */
    eProsima_user_DllExport void var_StructChar16(
            const StructChar16& _var_StructChar16);

    /*!
     * @brief This function moves the value in member var_StructChar16
     * @param _var_StructChar16 New value to be moved in member var_StructChar16
     */
    eProsima_user_DllExport void var_StructChar16(
            StructChar16&& _var_StructChar16);

    /*!
     * @brief This function returns a constant reference to member var_StructChar16
     * @return Constant reference to member var_StructChar16
     */
    eProsima_user_DllExport const StructChar16& var_StructChar16() const;

    /*!
     * @brief This function returns a reference to member var_StructChar16
     * @return Reference to member var_StructChar16
     */
    eProsima_user_DllExport StructChar16& var_StructChar16();
    /*!
     * @brief This function copies the value in member var_StructString
     * @param _var_StructString New value to be copied in member var_StructString
     */
    eProsima_user_DllExport void var_StructString(
            const StructString& _var_StructString);

    /*!
     * @brief This function moves the value in member var_StructString
     * @param _var_StructString New value to be moved in member var_StructString
     */
    eProsima_user_DllExport void var_StructString(
            StructString&& _var_StructString);

    /*!
     * @brief This function returns a constant reference to member var_StructString
     * @return Constant reference to member var_StructString
     */
    eProsima_user_DllExport const StructString& var_StructString() const;

    /*!
     * @brief This function returns a reference to member var_StructString
     * @return Reference to member var_StructString
     */
    eProsima_user_DllExport StructString& var_StructString();
    /*!
     * @brief This function copies the value in member var_StructWString
     * @param _var_StructWString New value to be copied in member var_StructWString
     */
    eProsima_user_DllExport void var_StructWString(
            const StructWString& _var_StructWString);

    /*!
     * @brief This function moves the value in member var_StructWString
     * @param _var_StructWString New value to be moved in member var_StructWString
     */
    eProsima_user_DllExport void var_StructWString(
            StructWString&& _var_StructWString);

    /*!
     * @brief This function returns a constant reference to member var_StructWString
     * @return Constant reference to member var_StructWString
     */
    eProsima_user_DllExport const StructWString& var_StructWString() const;

    /*!
     * @brief This function returns a reference to member var_StructWString
     * @return Reference to member var_StructWString
     */
    eProsima_user_DllExport StructWString& var_StructWString();
    /*!
     * @brief This function copies the value in member var_StructEnum
     * @param _var_StructEnum New value to be copied in member var_StructEnum
     */
    eProsima_user_DllExport void var_StructEnum(
            const StructEnum& _var_StructEnum);

    /*!
     * @brief This function moves the value in member var_StructEnum
     * @param _var_StructEnum New value to be moved in member var_StructEnum
     */
    eProsima_user_DllExport void var_StructEnum(
            StructEnum&& _var_StructEnum);

    /*!
     * @brief This function returns a constant reference to member var_StructEnum
     * @return Constant reference to member var_StructEnum
     */
    eProsima_user_DllExport const StructEnum& var_StructEnum() const;

    /*!
     * @brief This function returns a reference to member var_StructEnum
     * @return Reference to member var_StructEnum
     */
    eProsima_user_DllExport StructEnum& var_StructEnum();
    /*!
     * @brief This function copies the value in member var_StructBitMask
     * @param _var_StructBitMask New value to be copied in member var_StructBitMask
     */
    eProsima_user_DllExport void var_StructBitMask(
            const StructBitMask& _var_StructBitMask);

    /*!
     * @brief This function moves the value in member var_StructBitMask
     * @param _var_StructBitMask New value to be moved in member var_StructBitMask
     */
    eProsima_user_DllExport void var_StructBitMask(
            StructBitMask&& _var_StructBitMask);

    /*!
     * @brief This function returns a constant reference to member var_StructBitMask
     * @return Constant reference to member var_StructBitMask
     */
    eProsima_user_DllExport const StructBitMask& var_StructBitMask() const;

    /*!
     * @brief This function returns a reference to member var_StructBitMask
     * @return Reference to member var_StructBitMask
     */
    eProsima_user_DllExport StructBitMask& var_StructBitMask();
    /*!
     * @brief This function copies the value in member var_StructAlias
     * @param _var_StructAlias New value to be copied in member var_StructAlias
     */
    eProsima_user_DllExport void var_StructAlias(
            const StructAlias& _var_StructAlias);

    /*!
     * @brief This function moves the value in member var_StructAlias
     * @param _var_StructAlias New value to be moved in member var_StructAlias
     */
    eProsima_user_DllExport void var_StructAlias(
            StructAlias&& _var_StructAlias);

    /*!
     * @brief This function returns a constant reference to member var_StructAlias
     * @return Constant reference to member var_StructAlias
     */
    eProsima_user_DllExport const StructAlias& var_StructAlias() const;

    /*!
     * @brief This function returns a reference to member var_StructAlias
     * @return Reference to member var_StructAlias
     */
    eProsima_user_DllExport StructAlias& var_StructAlias();
    /*!
     * @brief This function copies the value in member var_StructShortArray
     * @param _var_StructShortArray New value to be copied in member var_StructShortArray
     */
    eProsima_user_DllExport void var_StructShortArray(
            const StructShortArray& _var_StructShortArray);

    /*!
     * @brief This function moves the value in member var_StructShortArray
     * @param _var_StructShortArray New value to be moved in member var_StructShortArray
     */
    eProsima_user_DllExport void var_StructShortArray(
            StructShortArray&& _var_StructShortArray);

    /*!
     * @brief This function returns a constant reference to member var_StructShortArray
     * @return Constant reference to member var_StructShortArray
     */
    eProsima_user_DllExport const StructShortArray& var_StructShortArray() const;

    /*!
     * @brief This function returns a reference to member var_StructShortArray
     * @return Reference to member var_StructShortArray
     */
    eProsima_user_DllExport StructShortArray& var_StructShortArray();
    /*!
     * @brief This function copies the value in member var_StructSequence
     * @param _var_StructSequence New value to be copied in member var_StructSequence
     */
    eProsima_user_DllExport void var_StructSequence(
            const StructSequence& _var_StructSequence);

    /*!
     * @brief This function moves the value in member var_StructSequence
     * @param _var_StructSequence New value to be moved in member var_StructSequence
     */
    eProsima_user_DllExport void var_StructSequence(
            StructSequence&& _var_StructSequence);

    /*!
     * @brief This function returns a constant reference to member var_StructSequence
     * @return Constant reference to member var_StructSequence
     */
    eProsima_user_DllExport const StructSequence& var_StructSequence() const;

    /*!
     * @brief This function returns a reference to member var_StructSequence
     * @return Reference to member var_StructSequence
     */
    eProsima_user_DllExport StructSequence& var_StructSequence();
    /*!
     * @brief This function copies the value in member var_StructMap
     * @param _var_StructMap New value to be copied in member var_StructMap
     */
    eProsima_user_DllExport void var_StructMap(
            const StructMap& _var_StructMap);

    /*!
     * @brief This function moves the value in member var_StructMap
     * @param _var_StructMap New value to be moved in member var_StructMap
     */
    eProsima_user_DllExport void var_StructMap(
            StructMap&& _var_StructMap);

    /*!
     * @brief This function returns a constant reference to member var_StructMap
     * @return Constant reference to member var_StructMap
     */
    eProsima_user_DllExport const StructMap& var_StructMap() const;

    /*!
     * @brief This function returns a reference to member var_StructMap
     * @return Reference to member var_StructMap
     */
    eProsima_user_DllExport StructMap& var_StructMap();
    /*!
     * @brief This function copies the value in member var_StructUnion
     * @param _var_StructUnion New value to be copied in member var_StructUnion
     */
    eProsima_user_DllExport void var_StructUnion(
            const StructUnion& _var_StructUnion);

    /*!
     * @brief This function moves the value in member var_StructUnion
     * @param _var_StructUnion New value to be moved in member var_StructUnion
     */
    eProsima_user_DllExport void var_StructUnion(
            StructUnion&& _var_StructUnion);

    /*!
     * @brief This function returns a constant reference to member var_StructUnion
     * @return Constant reference to member var_StructUnion
     */
    eProsima_user_DllExport const StructUnion& var_StructUnion() const;

    /*!
     * @brief This function returns a reference to member var_StructUnion
     * @return Reference to member var_StructUnion
     */
    eProsima_user_DllExport StructUnion& var_StructUnion();
    /*!
     * @brief This function copies the value in member var_StructStructure
     * @param _var_StructStructure New value to be copied in member var_StructStructure
     */
    eProsima_user_DllExport void var_StructStructure(
            const StructStructure& _var_StructStructure);

    /*!
     * @brief This function moves the value in member var_StructStructure
     * @param _var_StructStructure New value to be moved in member var_StructStructure
     */
    eProsima_user_DllExport void var_StructStructure(
            StructStructure&& _var_StructStructure);

    /*!
     * @brief This function returns a constant reference to member var_StructStructure
     * @return Constant reference to member var_StructStructure
     */
    eProsima_user_DllExport const StructStructure& var_StructStructure() const;

    /*!
     * @brief This function returns a reference to member var_StructStructure
     * @return Reference to member var_StructStructure
     */
    eProsima_user_DllExport StructStructure& var_StructStructure();
    /*!
     * @brief This function copies the value in member var_StructBitset
     * @param _var_StructBitset New value to be copied in member var_StructBitset
     */
    eProsima_user_DllExport void var_StructBitset(
            const StructBitset& _var_StructBitset);

    /*!
     * @brief This function moves the value in member var_StructBitset
     * @param _var_StructBitset New value to be moved in member var_StructBitset
     */
    eProsima_user_DllExport void var_StructBitset(
            StructBitset&& _var_StructBitset);

    /*!
     * @brief This function returns a constant reference to member var_StructBitset
     * @return Constant reference to member var_StructBitset
     */
    eProsima_user_DllExport const StructBitset& var_StructBitset() const;

    /*!
     * @brief This function returns a reference to member var_StructBitset
     * @return Reference to member var_StructBitset
     */
    eProsima_user_DllExport StructBitset& var_StructBitset();
    /*!
     * @brief This function copies the value in member var_StructEmpty
     * @param _var_StructEmpty New value to be copied in member var_StructEmpty
     */
    eProsima_user_DllExport void var_StructEmpty(
            const StructEmpty& _var_StructEmpty);

    /*!
     * @brief This function moves the value in member var_StructEmpty
     * @param _var_StructEmpty New value to be moved in member var_StructEmpty
     */
    eProsima_user_DllExport void var_StructEmpty(
            StructEmpty&& _var_StructEmpty);

    /*!
     * @brief This function returns a constant reference to member var_StructEmpty
     * @return Constant reference to member var_StructEmpty
     */
    eProsima_user_DllExport const StructEmpty& var_StructEmpty() const;

    /*!
     * @brief This function returns a reference to member var_StructEmpty
     * @return Reference to member var_StructEmpty
     */
    eProsima_user_DllExport StructEmpty& var_StructEmpty();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Structures& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    StructShort m_var_StructShort;
    StructUnsignedShort m_var_StructUnsignedShort;
    StructLong m_var_StructLong;
    StructUnsignedLong m_var_StructUnsignedLong;
    StructLongLong m_var_StructLongLong;
    StructUnsignedLongLong m_var_StructUnsignedLongLong;
    StructFloat m_var_StructFloat;
    StructDouble m_var_StructDouble;
    StructLongDouble m_var_StructLongDouble;
    StructBoolean m_var_StructBoolean;
    StructOctet m_var_StructOctet;
    StructChar8 m_var_StructChar8;
    StructChar16 m_var_StructChar16;
    StructString m_var_StructString;
    StructWString m_var_StructWString;
    StructEnum m_var_StructEnum;
    StructBitMask m_var_StructBitMask;
    StructAlias m_var_StructAlias;
    StructShortArray m_var_StructShortArray;
    StructSequence m_var_StructSequence;
    StructMap m_var_StructMap;
    StructUnion m_var_StructUnion;
    StructStructure m_var_StructStructure;
    StructBitset m_var_StructBitset;
    StructEmpty m_var_StructEmpty;

};

#endif // _FAST_DDS_GENERATED_STRUCTURES_H_

