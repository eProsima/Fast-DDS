// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file new_features_4_2.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_NEW_FEATURES_4_2_HPP_
#define _FAST_DDS_GENERATED_NEW_FEATURES_4_2_HPP_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastcdr/exceptions/BadParamException.h>


#include "new_features_4_2TypeObject.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(NEW_FEATURES_4_2_SOURCE)
#define NEW_FEATURES_4_2_DllAPI __declspec( dllexport )
#else
#define NEW_FEATURES_4_2_DllAPI __declspec( dllimport )
#endif // NEW_FEATURES_4_2_SOURCE
#else
#define NEW_FEATURES_4_2_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define NEW_FEATURES_4_2_DllAPI
#endif // _WIN32



/*!
 * @brief This class represents the structure NewAliases defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
class NewAliases
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NewAliases()
    {
        // Just to register all known types
        registernew_features_4_2Types();
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NewAliases()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NewAliases that will be copied.
     */
    eProsima_user_DllExport NewAliases(
            const NewAliases& x)
    {
                    m_int8_ = x.m_int8_;

                    m_uint8_ = x.m_uint8_;

                    m_int16_ = x.m_int16_;

                    m_uint16_ = x.m_uint16_;

                    m_int32_ = x.m_int32_;

                    m_uint32_ = x.m_uint32_;

                    m_int64_ = x.m_int64_;

                    m_uint64_ = x.m_uint64_;

                    m_local_string = x.m_local_string;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NewAliases that will be copied.
     */
    eProsima_user_DllExport NewAliases(
            NewAliases&& x) noexcept
    {
        m_int8_ = x.m_int8_;
        m_uint8_ = x.m_uint8_;
        m_int16_ = x.m_int16_;
        m_uint16_ = x.m_uint16_;
        m_int32_ = x.m_int32_;
        m_uint32_ = x.m_uint32_;
        m_int64_ = x.m_int64_;
        m_uint64_ = x.m_uint64_;
        m_local_string = std::move(x.m_local_string);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NewAliases that will be copied.
     */
    eProsima_user_DllExport NewAliases& operator =(
            const NewAliases& x)
    {

                    m_int8_ = x.m_int8_;

                    m_uint8_ = x.m_uint8_;

                    m_int16_ = x.m_int16_;

                    m_uint16_ = x.m_uint16_;

                    m_int32_ = x.m_int32_;

                    m_uint32_ = x.m_uint32_;

                    m_int64_ = x.m_int64_;

                    m_uint64_ = x.m_uint64_;

                    m_local_string = x.m_local_string;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NewAliases that will be copied.
     */
    eProsima_user_DllExport NewAliases& operator =(
            NewAliases&& x) noexcept
    {

        m_int8_ = x.m_int8_;
        m_uint8_ = x.m_uint8_;
        m_int16_ = x.m_int16_;
        m_uint16_ = x.m_uint16_;
        m_int32_ = x.m_int32_;
        m_uint32_ = x.m_uint32_;
        m_int64_ = x.m_int64_;
        m_uint64_ = x.m_uint64_;
        m_local_string = std::move(x.m_local_string);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x NewAliases object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NewAliases& x) const
    {
        return (m_int8_ == x.m_int8_ &&
           m_uint8_ == x.m_uint8_ &&
           m_int16_ == x.m_int16_ &&
           m_uint16_ == x.m_uint16_ &&
           m_int32_ == x.m_int32_ &&
           m_uint32_ == x.m_uint32_ &&
           m_int64_ == x.m_int64_ &&
           m_uint64_ == x.m_uint64_ &&
           m_local_string == x.m_local_string);
    }

    /*!
     * @brief Comparison operator.
     * @param x NewAliases object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NewAliases& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member int8_
     * @param _int8_ New value for member int8_
     */
    eProsima_user_DllExport void int8_(
            int8_t _int8_)
    {
        m_int8_ = _int8_;
    }

    /*!
     * @brief This function returns the value of member int8_
     * @return Value of member int8_
     */
    eProsima_user_DllExport int8_t int8_() const
    {
        return m_int8_;
    }

    /*!
     * @brief This function returns a reference to member int8_
     * @return Reference to member int8_
     */
    eProsima_user_DllExport int8_t& int8_()
    {
        return m_int8_;
    }


    /*!
     * @brief This function sets a value in member uint8_
     * @param _uint8_ New value for member uint8_
     */
    eProsima_user_DllExport void uint8_(
            uint8_t _uint8_)
    {
        m_uint8_ = _uint8_;
    }

    /*!
     * @brief This function returns the value of member uint8_
     * @return Value of member uint8_
     */
    eProsima_user_DllExport uint8_t uint8_() const
    {
        return m_uint8_;
    }

    /*!
     * @brief This function returns a reference to member uint8_
     * @return Reference to member uint8_
     */
    eProsima_user_DllExport uint8_t& uint8_()
    {
        return m_uint8_;
    }


    /*!
     * @brief This function sets a value in member int16_
     * @param _int16_ New value for member int16_
     */
    eProsima_user_DllExport void int16_(
            int16_t _int16_)
    {
        m_int16_ = _int16_;
    }

    /*!
     * @brief This function returns the value of member int16_
     * @return Value of member int16_
     */
    eProsima_user_DllExport int16_t int16_() const
    {
        return m_int16_;
    }

    /*!
     * @brief This function returns a reference to member int16_
     * @return Reference to member int16_
     */
    eProsima_user_DllExport int16_t& int16_()
    {
        return m_int16_;
    }


    /*!
     * @brief This function sets a value in member uint16_
     * @param _uint16_ New value for member uint16_
     */
    eProsima_user_DllExport void uint16_(
            uint16_t _uint16_)
    {
        m_uint16_ = _uint16_;
    }

    /*!
     * @brief This function returns the value of member uint16_
     * @return Value of member uint16_
     */
    eProsima_user_DllExport uint16_t uint16_() const
    {
        return m_uint16_;
    }

    /*!
     * @brief This function returns a reference to member uint16_
     * @return Reference to member uint16_
     */
    eProsima_user_DllExport uint16_t& uint16_()
    {
        return m_uint16_;
    }


    /*!
     * @brief This function sets a value in member int32_
     * @param _int32_ New value for member int32_
     */
    eProsima_user_DllExport void int32_(
            int32_t _int32_)
    {
        m_int32_ = _int32_;
    }

    /*!
     * @brief This function returns the value of member int32_
     * @return Value of member int32_
     */
    eProsima_user_DllExport int32_t int32_() const
    {
        return m_int32_;
    }

    /*!
     * @brief This function returns a reference to member int32_
     * @return Reference to member int32_
     */
    eProsima_user_DllExport int32_t& int32_()
    {
        return m_int32_;
    }


    /*!
     * @brief This function sets a value in member uint32_
     * @param _uint32_ New value for member uint32_
     */
    eProsima_user_DllExport void uint32_(
            uint32_t _uint32_)
    {
        m_uint32_ = _uint32_;
    }

    /*!
     * @brief This function returns the value of member uint32_
     * @return Value of member uint32_
     */
    eProsima_user_DllExport uint32_t uint32_() const
    {
        return m_uint32_;
    }

    /*!
     * @brief This function returns a reference to member uint32_
     * @return Reference to member uint32_
     */
    eProsima_user_DllExport uint32_t& uint32_()
    {
        return m_uint32_;
    }


    /*!
     * @brief This function sets a value in member int64_
     * @param _int64_ New value for member int64_
     */
    eProsima_user_DllExport void int64_(
            int64_t _int64_)
    {
        m_int64_ = _int64_;
    }

    /*!
     * @brief This function returns the value of member int64_
     * @return Value of member int64_
     */
    eProsima_user_DllExport int64_t int64_() const
    {
        return m_int64_;
    }

    /*!
     * @brief This function returns a reference to member int64_
     * @return Reference to member int64_
     */
    eProsima_user_DllExport int64_t& int64_()
    {
        return m_int64_;
    }


    /*!
     * @brief This function sets a value in member uint64_
     * @param _uint64_ New value for member uint64_
     */
    eProsima_user_DllExport void uint64_(
            uint64_t _uint64_)
    {
        m_uint64_ = _uint64_;
    }

    /*!
     * @brief This function returns the value of member uint64_
     * @return Value of member uint64_
     */
    eProsima_user_DllExport uint64_t uint64_() const
    {
        return m_uint64_;
    }

    /*!
     * @brief This function returns a reference to member uint64_
     * @return Reference to member uint64_
     */
    eProsima_user_DllExport uint64_t& uint64_()
    {
        return m_uint64_;
    }


    /*!
     * @brief This function copies the value in member local_string
     * @param _local_string New value to be copied in member local_string
     */
    eProsima_user_DllExport void local_string(
            const std::string& _local_string)
    {
        m_local_string = _local_string;
    }

    /*!
     * @brief This function moves the value in member local_string
     * @param _local_string New value to be moved in member local_string
     */
    eProsima_user_DllExport void local_string(
            std::string&& _local_string)
    {
        m_local_string = std::move(_local_string);
    }

    /*!
     * @brief This function returns a constant reference to member local_string
     * @return Constant reference to member local_string
     */
    eProsima_user_DllExport const std::string& local_string() const
    {
        return m_local_string;
    }

    /*!
     * @brief This function returns a reference to member local_string
     * @return Reference to member local_string
     */
    eProsima_user_DllExport std::string& local_string()
    {
        return m_local_string;
    }



private:

    int8_t m_int8_{0};
    uint8_t m_uint8_{0};
    int16_t m_int16_{0};
    uint16_t m_uint16_{0};
    int32_t m_int32_{0};
    uint32_t m_uint32_{0};
    int64_t m_int64_{0};
    uint64_t m_uint64_{555};
    std::string m_local_string;

};


/*!
 * @brief This class represents the union WCharUnion defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
class WCharUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport WCharUnion()
    {
        m__d = 'a';
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~WCharUnion()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object WCharUnion that will be copied.
     */
    eProsima_user_DllExport WCharUnion(
            const WCharUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 'a':
                m_case_zero = x.m_case_zero;
                break;


            case 'b':
                m_case_one = x.m_case_one;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object WCharUnion that will be copied.
     */
    eProsima_user_DllExport WCharUnion(
            WCharUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 'a':
                m_case_zero = x.m_case_zero;
                break;


            case 'b':
                m_case_one = x.m_case_one;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object WCharUnion that will be copied.
     */
    eProsima_user_DllExport WCharUnion& operator =(
            const WCharUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 'a':
                m_case_zero = x.m_case_zero;
                break;


            case 'b':
                m_case_one = x.m_case_one;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object WCharUnion that will be copied.
     */
    eProsima_user_DllExport WCharUnion& operator =(
            WCharUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 'a':
                m_case_zero = x.m_case_zero;
                break;


            case 'b':
                m_case_one = x.m_case_one;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x WCharUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const WCharUnion& x) const
    {
        if (m__d != x.m__d)
        {
            return false;
        }

        switch (m__d)
        {
            case 'a':
                return (m_case_zero == x.m_case_zero);
                break;


            case 'b':
                return (m_case_one == x.m_case_one);
                break;

            default:
                break;
        }
        return false;
    }

    /*!
     * @brief Comparison operator.
     * @param x WCharUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const WCharUnion& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            wchar_t __d)
    {
        bool b = false;

        switch (m__d)
        {
            case 'a':
                switch (__d)
                {
                    case 'a':
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case 'b':
                switch (__d)
                {
                    case 'b':
                        b = true;
                        break;
                    default:
                        break;
                }
                break;

            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport wchar_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport wchar_t& _d()
    {
        return m__d;
    }

    /*!
     * @brief This function sets a value in member case_zero
     * @param _case_zero New value for member case_zero
     */
    eProsima_user_DllExport void case_zero(
            int32_t _case_zero)
    {
        m_case_zero = _case_zero;
        m__d = 'a';

    }

    /*!
     * @brief This function returns the value of member case_zero
     * @return Value of member case_zero
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t case_zero() const
    {
        bool b = false;

        switch (m__d)
        {
            case 'a':
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_zero;
    }

    /*!
     * @brief This function returns a reference to member case_zero
     * @return Reference to member case_zero
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& case_zero()
    {
        bool b = false;

        switch (m__d)
        {
            case 'a':
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_zero;
    }


    /*!
     * @brief This function sets a value in member case_one
     * @param _case_one New value for member case_one
     */
    eProsima_user_DllExport void case_one(
            int32_t _case_one)
    {
        m_case_one = _case_one;
        m__d = 'b';

    }

    /*!
     * @brief This function returns the value of member case_one
     * @return Value of member case_one
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t case_one() const
    {
        bool b = false;

        switch (m__d)
        {
            case 'b':
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_one;
    }

    /*!
     * @brief This function returns a reference to member case_one
     * @return Reference to member case_one
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& case_one()
    {
        bool b = false;

        switch (m__d)
        {
            case 'b':
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_one;
    }



private:

    wchar_t m__d;

    int32_t m_case_zero{0};
    int32_t m_case_one{0};
};


/*!
 * @brief This class represents the union OctetUnion defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
class OctetUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport OctetUnion()
    {
        m__d = 5;
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~OctetUnion()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object OctetUnion that will be copied.
     */
    eProsima_user_DllExport OctetUnion(
            const OctetUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 5:
                m_case_five = x.m_case_five;
                break;


            case 7:
                m_case_seven = x.m_case_seven;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object OctetUnion that will be copied.
     */
    eProsima_user_DllExport OctetUnion(
            OctetUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 5:
                m_case_five = x.m_case_five;
                break;


            case 7:
                m_case_seven = x.m_case_seven;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object OctetUnion that will be copied.
     */
    eProsima_user_DllExport OctetUnion& operator =(
            const OctetUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 5:
                m_case_five = x.m_case_five;
                break;


            case 7:
                m_case_seven = x.m_case_seven;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object OctetUnion that will be copied.
     */
    eProsima_user_DllExport OctetUnion& operator =(
            OctetUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 5:
                m_case_five = x.m_case_five;
                break;


            case 7:
                m_case_seven = x.m_case_seven;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x OctetUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const OctetUnion& x) const
    {
        if (m__d != x.m__d)
        {
            return false;
        }

        switch (m__d)
        {
            case 5:
                return (m_case_five == x.m_case_five);
                break;


            case 7:
                return (m_case_seven == x.m_case_seven);
                break;

            default:
                break;
        }
        return false;
    }

    /*!
     * @brief Comparison operator.
     * @param x OctetUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const OctetUnion& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            uint8_t __d)
    {
        bool b = false;

        switch (m__d)
        {
            case 5:
                switch (__d)
                {
                    case 5:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case 7:
                switch (__d)
                {
                    case 7:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;

            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport uint8_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport uint8_t& _d()
    {
        return m__d;
    }

    /*!
     * @brief This function sets a value in member case_five
     * @param _case_five New value for member case_five
     */
    eProsima_user_DllExport void case_five(
            int32_t _case_five)
    {
        m_case_five = _case_five;
        m__d = 5;

    }

    /*!
     * @brief This function returns the value of member case_five
     * @return Value of member case_five
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t case_five() const
    {
        bool b = false;

        switch (m__d)
        {
            case 5:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_five;
    }

    /*!
     * @brief This function returns a reference to member case_five
     * @return Reference to member case_five
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& case_five()
    {
        bool b = false;

        switch (m__d)
        {
            case 5:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_five;
    }


    /*!
     * @brief This function sets a value in member case_seven
     * @param _case_seven New value for member case_seven
     */
    eProsima_user_DllExport void case_seven(
            int32_t _case_seven)
    {
        m_case_seven = _case_seven;
        m__d = 7;

    }

    /*!
     * @brief This function returns the value of member case_seven
     * @return Value of member case_seven
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t case_seven() const
    {
        bool b = false;

        switch (m__d)
        {
            case 7:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_seven;
    }

    /*!
     * @brief This function returns a reference to member case_seven
     * @return Reference to member case_seven
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& case_seven()
    {
        bool b = false;

        switch (m__d)
        {
            case 7:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_seven;
    }



private:

    uint8_t m__d;

    int32_t m_case_five{0};
    int32_t m_case_seven{0};
};


/*!
 * @brief This class represents the union Int8Union defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
class Int8Union
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Int8Union()
    {
        m__d = 3;
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Int8Union()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Int8Union that will be copied.
     */
    eProsima_user_DllExport Int8Union(
            const Int8Union& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 3:
                m_case_three = x.m_case_three;
                break;


            case 6:
                m_case_six = x.m_case_six;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Int8Union that will be copied.
     */
    eProsima_user_DllExport Int8Union(
            Int8Union&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 3:
                m_case_three = x.m_case_three;
                break;


            case 6:
                m_case_six = x.m_case_six;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Int8Union that will be copied.
     */
    eProsima_user_DllExport Int8Union& operator =(
            const Int8Union& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 3:
                m_case_three = x.m_case_three;
                break;


            case 6:
                m_case_six = x.m_case_six;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Int8Union that will be copied.
     */
    eProsima_user_DllExport Int8Union& operator =(
            Int8Union&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 3:
                m_case_three = x.m_case_three;
                break;


            case 6:
                m_case_six = x.m_case_six;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Union object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Int8Union& x) const
    {
        if (m__d != x.m__d)
        {
            return false;
        }

        switch (m__d)
        {
            case 3:
                return (m_case_three == x.m_case_three);
                break;


            case 6:
                return (m_case_six == x.m_case_six);
                break;

            default:
                break;
        }
        return false;
    }

    /*!
     * @brief Comparison operator.
     * @param x Int8Union object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Int8Union& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int8_t __d)
    {
        bool b = false;

        switch (m__d)
        {
            case 3:
                switch (__d)
                {
                    case 3:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case 6:
                switch (__d)
                {
                    case 6:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;

            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int8_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int8_t& _d()
    {
        return m__d;
    }

    /*!
     * @brief This function sets a value in member case_three
     * @param _case_three New value for member case_three
     */
    eProsima_user_DllExport void case_three(
            int32_t _case_three)
    {
        m_case_three = _case_three;
        m__d = 3;

    }

    /*!
     * @brief This function returns the value of member case_three
     * @return Value of member case_three
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t case_three() const
    {
        bool b = false;

        switch (m__d)
        {
            case 3:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_three;
    }

    /*!
     * @brief This function returns a reference to member case_three
     * @return Reference to member case_three
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& case_three()
    {
        bool b = false;

        switch (m__d)
        {
            case 3:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_three;
    }


    /*!
     * @brief This function sets a value in member case_six
     * @param _case_six New value for member case_six
     */
    eProsima_user_DllExport void case_six(
            int32_t _case_six)
    {
        m_case_six = _case_six;
        m__d = 6;

    }

    /*!
     * @brief This function returns the value of member case_six
     * @return Value of member case_six
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t case_six() const
    {
        bool b = false;

        switch (m__d)
        {
            case 6:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_six;
    }

    /*!
     * @brief This function returns a reference to member case_six
     * @return Reference to member case_six
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& case_six()
    {
        bool b = false;

        switch (m__d)
        {
            case 6:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_case_six;
    }



private:

    int8_t m__d;

    int32_t m_case_three{0};
    int32_t m_case_six{0};
};
namespace bitmodule {

/*!
 * @brief This class represents the structure ParentBitset defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
class ParentBitset
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ParentBitset()
    {
        // Just to register all known types
        registernew_features_4_2Types();
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ParentBitset()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ParentBitset that will be copied.
     */
    eProsima_user_DllExport ParentBitset(
            const ParentBitset& x)
    {
        m_bitset = x.m_bitset;
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ParentBitset that will be copied.
     */
    eProsima_user_DllExport ParentBitset(
            ParentBitset&& x) noexcept
    {
        m_bitset = x.m_bitset;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ParentBitset that will be copied.
     */
    eProsima_user_DllExport ParentBitset& operator =(
            const ParentBitset& x)
    {

        m_bitset = x.m_bitset;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ParentBitset that will be copied.
     */
    eProsima_user_DllExport ParentBitset& operator =(
            ParentBitset&& x) noexcept
    {

        m_bitset = x.m_bitset;

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ParentBitset object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ParentBitset& x) const
    {

        return m_bitset == x.m_bitset;
    }

    /*!
     * @brief Comparison operator.
     * @param x ParentBitset object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ParentBitset& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member parent_bitfield
     * @param _parent_bitfield New value for member parent_bitfield
     */
    eProsima_user_DllExport void parent_bitfield(
            uint32_t _parent_bitfield)
    {
        int base = 0;
        int size = 17;
        for (int i = base; i < base + size; ++i)
        {
            m_bitset.set(i, !!(_parent_bitfield & 0x01));
            _parent_bitfield = _parent_bitfield >> 1;
        }

    }

    /*!
     * @brief This function returns the value of member parent_bitfield
     * @return Value of member parent_bitfield
     */
    eProsima_user_DllExport uint32_t parent_bitfield() const
    {
        int base = 0;
        int size = 17;
        std::bitset<17> aux;
        for (int i = 0; i < size; ++i)
        {
            aux.set(i, m_bitset.test(i + base));
        }
        return static_cast<uint32_t>(aux.to_ullong());

    }


    eProsima_user_DllExport std::bitset<17> bitset() const
    {
        std::string str_value;

        str_value = m_bitset.to_string() + str_value;

        return std::bitset<17>(str_value);
    }

    eProsima_user_DllExport void bitset(
            const std::bitset<17>& bitset)
    {
        std::string str_value {bitset.to_string()};
        size_t base_diff {0};
        size_t last_post {std::string::npos};

        base_diff += 17;
        m_bitset = std::bitset<17>(str_value.substr(str_value.length() - base_diff, last_post));
    }


private:

    std::bitset<17> m_bitset;
};
/*!
 * @brief This class represents the structure MyBitset defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
class MyBitset : public ParentBitset
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MyBitset()
    : ParentBitset()
    {
        // Just to register all known types
        registernew_features_4_2Types();
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MyBitset()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MyBitset that will be copied.
     */
    eProsima_user_DllExport MyBitset(
            const MyBitset& x)
    : ParentBitset(x)
    {
        m_bitset = x.m_bitset;
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MyBitset that will be copied.
     */
    eProsima_user_DllExport MyBitset(
            MyBitset&& x) noexcept
    : ParentBitset(std::move(x))
    {
        m_bitset = x.m_bitset;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MyBitset that will be copied.
     */
    eProsima_user_DllExport MyBitset& operator =(
            const MyBitset& x)
    {
            ParentBitset::operator =(x);

        m_bitset = x.m_bitset;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MyBitset that will be copied.
     */
    eProsima_user_DllExport MyBitset& operator =(
            MyBitset&& x) noexcept
    {
            ParentBitset::operator =(std::move(x));

        m_bitset = x.m_bitset;

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MyBitset object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MyBitset& x) const
    {
            if (ParentBitset::operator !=(x)) return false;

        return m_bitset == x.m_bitset;
    }

    /*!
     * @brief Comparison operator.
     * @param x MyBitset object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MyBitset& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member a
     * @param _a New value for member a
     */
    eProsima_user_DllExport void a(
            char _a)
    {
        int base = 0;
        int size = 3;
        for (int i = base; i < base + size; ++i)
        {
            m_bitset.set(i, !!(_a & 0x01));
            _a = _a >> 1;
        }

    }

    /*!
     * @brief This function returns the value of member a
     * @return Value of member a
     */
    eProsima_user_DllExport char a() const
    {
        int base = 0;
        int size = 3;
        std::bitset<3> aux;
        for (int i = 0; i < size; ++i)
        {
            aux.set(i, m_bitset.test(i + base));
        }
        return static_cast<char>(aux.to_ullong());

    }


    /*!
     * @brief This function sets a value in member b
     * @param _b New value for member b
     */
    eProsima_user_DllExport void b(
            bool _b)
    {
        int base = 3;
        m_bitset.set(base, _b);
    }

    /*!
     * @brief This function returns the value of member b
     * @return Value of member b
     */
    eProsima_user_DllExport bool b() const
    {
        int base = 3;
        return m_bitset.test(base);
    }



    /*!
     * @brief This function sets a value in member c
     * @param _c New value for member c
     */
    eProsima_user_DllExport void c(
            uint16_t _c)
    {
        int base = 8;
        int size = 10;
        for (int i = base; i < base + size; ++i)
        {
            m_bitset.set(i, !!(_c & 0x01));
            _c = _c >> 1;
        }

    }

    /*!
     * @brief This function returns the value of member c
     * @return Value of member c
     */
    eProsima_user_DllExport uint16_t c() const
    {
        int base = 8;
        int size = 10;
        std::bitset<10> aux;
        for (int i = 0; i < size; ++i)
        {
            aux.set(i, m_bitset.test(i + base));
        }
        return static_cast<uint16_t>(aux.to_ullong());

    }


    /*!
     * @brief This function sets a value in member d
     * @param _d New value for member d
     */
    eProsima_user_DllExport void d(
            int16_t _d)
    {
        int base = 18;
        int size = 5;
        for (int i = base; i < base + size; ++i)
        {
            m_bitset.set(i, !!(_d & 0x01));
            _d = _d >> 1;
        }

    }

    /*!
     * @brief This function returns the value of member d
     * @return Value of member d
     */
    eProsima_user_DllExport int16_t d() const
    {
        int base = 18;
        int size = 5;
        std::bitset<5> aux;
        for (int i = 0; i < size; ++i)
        {
            aux.set(i, m_bitset.test(i + base));
        }
        return static_cast<int16_t>(aux.to_ullong());

    }


    /*!
     * @brief This function sets a value in member e
     * @param _e New value for member e
     */
    eProsima_user_DllExport void e(
            int16_t _e)
    {
        int base = 23;
        int size = 5;
        for (int i = base; i < base + size; ++i)
        {
            m_bitset.set(i, !!(_e & 0x01));
            _e = _e >> 1;
        }

    }

    /*!
     * @brief This function returns the value of member e
     * @return Value of member e
     */
    eProsima_user_DllExport int16_t e() const
    {
        int base = 23;
        int size = 5;
        std::bitset<5> aux;
        for (int i = 0; i < size; ++i)
        {
            aux.set(i, m_bitset.test(i + base));
        }
        return static_cast<int16_t>(aux.to_ullong());

    }


    /*!
     * @brief This function sets a value in member f
     * @param _f New value for member f
     */
    eProsima_user_DllExport void f(
            int16_t _f)
    {
        int base = 28;
        int size = 5;
        for (int i = base; i < base + size; ++i)
        {
            m_bitset.set(i, !!(_f & 0x01));
            _f = _f >> 1;
        }

    }

    /*!
     * @brief This function returns the value of member f
     * @return Value of member f
     */
    eProsima_user_DllExport int16_t f() const
    {
        int base = 28;
        int size = 5;
        std::bitset<5> aux;
        for (int i = 0; i < size; ++i)
        {
            aux.set(i, m_bitset.test(i + base));
        }
        return static_cast<int16_t>(aux.to_ullong());

    }


    eProsima_user_DllExport std::bitset<50> bitset() const
    {
        std::string str_value;

        str_value = static_cast<const ParentBitset*>(this)->bitset().to_string() + str_value;

        str_value = m_bitset.to_string() + str_value;

        return std::bitset<50>(str_value);
    }

    eProsima_user_DllExport void bitset(
            const std::bitset<50>& bitset)
    {
        std::string str_value {bitset.to_string()};
        size_t base_diff {0};
        size_t last_post {std::string::npos};

        {
            base_diff += 17;
            std::bitset<17> internal_bitset(str_value.substr(str_value.length() - base_diff, last_post));
            static_cast<ParentBitset*>(this)->bitset(internal_bitset);
            last_post = base_diff;
        }

        base_diff += 33;
        m_bitset = std::bitset<33>(str_value.substr(str_value.length() - base_diff, last_post));
    }


private:

    std::bitset<33> m_bitset;
};
/*!
 * @brief This enumeration represents the MyBitMask bitflags defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
enum MyBitMaskBits : uint8_t
{
    flag0 = 0x01ull << 0,
    flag1 = 0x01ull << 1,
    flag4 = 0x01ull << 4,
    flag6 = 0x01ull << 6,
    flag7 = 0x01ull << 7
};
typedef uint8_t MyBitMask;


/*!
 * @brief This class represents the structure BitsetBitmask defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
class BitsetBitmask
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BitsetBitmask()
    {
        // Just to register all known types
        registernew_features_4_2Types();
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BitsetBitmask()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BitsetBitmask that will be copied.
     */
    eProsima_user_DllExport BitsetBitmask(
            const BitsetBitmask& x)
    {
                    m_mybitset = x.m_mybitset;

                    m_mybitmask = x.m_mybitmask;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BitsetBitmask that will be copied.
     */
    eProsima_user_DllExport BitsetBitmask(
            BitsetBitmask&& x) noexcept
    {
        m_mybitset = std::move(x.m_mybitset);
        m_mybitmask = std::move(x.m_mybitmask);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BitsetBitmask that will be copied.
     */
    eProsima_user_DllExport BitsetBitmask& operator =(
            const BitsetBitmask& x)
    {

                    m_mybitset = x.m_mybitset;

                    m_mybitmask = x.m_mybitmask;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BitsetBitmask that will be copied.
     */
    eProsima_user_DllExport BitsetBitmask& operator =(
            BitsetBitmask&& x) noexcept
    {

        m_mybitset = std::move(x.m_mybitset);
        m_mybitmask = std::move(x.m_mybitmask);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x BitsetBitmask object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BitsetBitmask& x) const
    {
        return (m_mybitset == x.m_mybitset &&
           m_mybitmask == x.m_mybitmask);
    }

    /*!
     * @brief Comparison operator.
     * @param x BitsetBitmask object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BitsetBitmask& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member mybitset
     * @param _mybitset New value to be copied in member mybitset
     */
    eProsima_user_DllExport void mybitset(
            const MyBitset& _mybitset)
    {
        m_mybitset = _mybitset;
    }

    /*!
     * @brief This function moves the value in member mybitset
     * @param _mybitset New value to be moved in member mybitset
     */
    eProsima_user_DllExport void mybitset(
            MyBitset&& _mybitset)
    {
        m_mybitset = std::move(_mybitset);
    }

    /*!
     * @brief This function returns a constant reference to member mybitset
     * @return Constant reference to member mybitset
     */
    eProsima_user_DllExport const MyBitset& mybitset() const
    {
        return m_mybitset;
    }

    /*!
     * @brief This function returns a reference to member mybitset
     * @return Reference to member mybitset
     */
    eProsima_user_DllExport MyBitset& mybitset()
    {
        return m_mybitset;
    }


    /*!
     * @brief This function copies the value in member mybitmask
     * @param _mybitmask New value to be copied in member mybitmask
     */
    eProsima_user_DllExport void mybitmask(
            const MyBitMask& _mybitmask)
    {
        m_mybitmask = _mybitmask;
    }

    /*!
     * @brief This function moves the value in member mybitmask
     * @param _mybitmask New value to be moved in member mybitmask
     */
    eProsima_user_DllExport void mybitmask(
            MyBitMask&& _mybitmask)
    {
        m_mybitmask = std::move(_mybitmask);
    }

    /*!
     * @brief This function returns a constant reference to member mybitmask
     * @return Constant reference to member mybitmask
     */
    eProsima_user_DllExport const MyBitMask& mybitmask() const
    {
        return m_mybitmask;
    }

    /*!
     * @brief This function returns a reference to member mybitmask
     * @return Reference to member mybitmask
     */
    eProsima_user_DllExport MyBitMask& mybitmask()
    {
        return m_mybitmask;
    }



private:

    MyBitset m_mybitset;
    MyBitMask m_mybitmask{0};

};


/*!
 * @brief This class represents the structure BM2 defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
class BM2 : public BitsetBitmask
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BM2()
        : BitsetBitmask()
    {
        // Just to register all known types
        registernew_features_4_2Types();
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BM2()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BM2 that will be copied.
     */
    eProsima_user_DllExport BM2(
            const BM2& x)
        : BitsetBitmask(x)
    {
                    m_two = x.m_two;

                    m_mylong = x.m_mylong;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BM2 that will be copied.
     */
    eProsima_user_DllExport BM2(
            BM2&& x) noexcept
        : BitsetBitmask(std::move(x))

    {
        m_two = std::move(x.m_two);
        m_mylong = x.m_mylong;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BM2 that will be copied.
     */
    eProsima_user_DllExport BM2& operator =(
            const BM2& x)
    {
        BitsetBitmask::operator =(x);

                    m_two = x.m_two;

                    m_mylong = x.m_mylong;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BM2 that will be copied.
     */
    eProsima_user_DllExport BM2& operator =(
            BM2&& x) noexcept
    {
        BitsetBitmask::operator =(std::move(x));

        m_two = std::move(x.m_two);
        m_mylong = x.m_mylong;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x BM2 object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BM2& x) const
    {
        if (BitsetBitmask::operator !=(x))
                {
                    return false;
                }
        return (m_two == x.m_two &&
           m_mylong == x.m_mylong);
    }

    /*!
     * @brief Comparison operator.
     * @param x BM2 object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BM2& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member two
     * @param _two New value to be copied in member two
     */
    eProsima_user_DllExport void two(
            const MyBitMask& _two)
    {
        m_two = _two;
    }

    /*!
     * @brief This function moves the value in member two
     * @param _two New value to be moved in member two
     */
    eProsima_user_DllExport void two(
            MyBitMask&& _two)
    {
        m_two = std::move(_two);
    }

    /*!
     * @brief This function returns a constant reference to member two
     * @return Constant reference to member two
     */
    eProsima_user_DllExport const MyBitMask& two() const
    {
        return m_two;
    }

    /*!
     * @brief This function returns a reference to member two
     * @return Reference to member two
     */
    eProsima_user_DllExport MyBitMask& two()
    {
        return m_two;
    }


    /*!
     * @brief This function sets a value in member mylong
     * @param _mylong New value for member mylong
     */
    eProsima_user_DllExport void mylong(
            int32_t _mylong)
    {
        m_mylong = _mylong;
    }

    /*!
     * @brief This function returns the value of member mylong
     * @return Value of member mylong
     */
    eProsima_user_DllExport int32_t mylong() const
    {
        return m_mylong;
    }

    /*!
     * @brief This function returns a reference to member mylong
     * @return Reference to member mylong
     */
    eProsima_user_DllExport int32_t& mylong()
    {
        return m_mylong;
    }



private:

    MyBitMask m_two{0};
    int32_t m_mylong{0};

};

} // namespace bitmodule


/*!
 * @brief This class represents the structure StructTest defined by the user in the IDL file.
 * @ingroup new_features_4_2
 */
class StructTest : public NewAliases
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StructTest()
        : NewAliases()
    {
        // Just to register all known types
        registernew_features_4_2Types();
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StructTest()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StructTest that will be copied.
     */
    eProsima_user_DllExport StructTest(
            const StructTest& x)
        : NewAliases(x)
    {
                    m_octetUnion = x.m_octetUnion;

                    m_int8Union = x.m_int8Union;

                    m_myStructBits = x.m_myStructBits;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StructTest that will be copied.
     */
    eProsima_user_DllExport StructTest(
            StructTest&& x) noexcept
        : NewAliases(std::move(x))

    {
        m_octetUnion = std::move(x.m_octetUnion);
        m_int8Union = std::move(x.m_int8Union);
        m_myStructBits = std::move(x.m_myStructBits);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StructTest that will be copied.
     */
    eProsima_user_DllExport StructTest& operator =(
            const StructTest& x)
    {
        NewAliases::operator =(x);

                    m_octetUnion = x.m_octetUnion;

                    m_int8Union = x.m_int8Union;

                    m_myStructBits = x.m_myStructBits;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StructTest that will be copied.
     */
    eProsima_user_DllExport StructTest& operator =(
            StructTest&& x) noexcept
    {
        NewAliases::operator =(std::move(x));

        m_octetUnion = std::move(x.m_octetUnion);
        m_int8Union = std::move(x.m_int8Union);
        m_myStructBits = std::move(x.m_myStructBits);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x StructTest object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StructTest& x) const
    {
        if (NewAliases::operator !=(x))
                {
                    return false;
                }
        return (m_octetUnion == x.m_octetUnion &&
           m_int8Union == x.m_int8Union &&
           m_myStructBits == x.m_myStructBits);
    }

    /*!
     * @brief Comparison operator.
     * @param x StructTest object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StructTest& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member octetUnion
     * @param _octetUnion New value to be copied in member octetUnion
     */
    eProsima_user_DllExport void octetUnion(
            const OctetUnion& _octetUnion)
    {
        m_octetUnion = _octetUnion;
    }

    /*!
     * @brief This function moves the value in member octetUnion
     * @param _octetUnion New value to be moved in member octetUnion
     */
    eProsima_user_DllExport void octetUnion(
            OctetUnion&& _octetUnion)
    {
        m_octetUnion = std::move(_octetUnion);
    }

    /*!
     * @brief This function returns a constant reference to member octetUnion
     * @return Constant reference to member octetUnion
     */
    eProsima_user_DllExport const OctetUnion& octetUnion() const
    {
        return m_octetUnion;
    }

    /*!
     * @brief This function returns a reference to member octetUnion
     * @return Reference to member octetUnion
     */
    eProsima_user_DllExport OctetUnion& octetUnion()
    {
        return m_octetUnion;
    }


    /*!
     * @brief This function copies the value in member int8Union
     * @param _int8Union New value to be copied in member int8Union
     */
    eProsima_user_DllExport void int8Union(
            const Int8Union& _int8Union)
    {
        m_int8Union = _int8Union;
    }

    /*!
     * @brief This function moves the value in member int8Union
     * @param _int8Union New value to be moved in member int8Union
     */
    eProsima_user_DllExport void int8Union(
            Int8Union&& _int8Union)
    {
        m_int8Union = std::move(_int8Union);
    }

    /*!
     * @brief This function returns a constant reference to member int8Union
     * @return Constant reference to member int8Union
     */
    eProsima_user_DllExport const Int8Union& int8Union() const
    {
        return m_int8Union;
    }

    /*!
     * @brief This function returns a reference to member int8Union
     * @return Reference to member int8Union
     */
    eProsima_user_DllExport Int8Union& int8Union()
    {
        return m_int8Union;
    }


    /*!
     * @brief This function copies the value in member myStructBits
     * @param _myStructBits New value to be copied in member myStructBits
     */
    eProsima_user_DllExport void myStructBits(
            const bitmodule::BM2& _myStructBits)
    {
        m_myStructBits = _myStructBits;
    }

    /*!
     * @brief This function moves the value in member myStructBits
     * @param _myStructBits New value to be moved in member myStructBits
     */
    eProsima_user_DllExport void myStructBits(
            bitmodule::BM2&& _myStructBits)
    {
        m_myStructBits = std::move(_myStructBits);
    }

    /*!
     * @brief This function returns a constant reference to member myStructBits
     * @return Constant reference to member myStructBits
     */
    eProsima_user_DllExport const bitmodule::BM2& myStructBits() const
    {
        return m_myStructBits;
    }

    /*!
     * @brief This function returns a reference to member myStructBits
     * @return Reference to member myStructBits
     */
    eProsima_user_DllExport bitmodule::BM2& myStructBits()
    {
        return m_myStructBits;
    }



private:

    OctetUnion m_octetUnion;
    Int8Union m_int8Union;
    bitmodule::BM2 m_myStructBits;

};

#endif // _FAST_DDS_GENERATED_NEW_FEATURES_4_2_HPP_


