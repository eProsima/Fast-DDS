// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file new_features_4_2TypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "new_features_4_2TypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "new_features_4_2.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_new_features_4_2_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_NewAliases_type_identifier();

                register_WCharUnion_type_identifier();

                register_OctetUnion_type_identifier();

                register_Int8Union_type_identifier();

                bitmodule::register_bitmodule_BitsetBitmask_type_identifier();

                bitmodule::register_bitmodule_BM2_type_identifier();

                register_StructTest_type_identifier();

            });
}

void register_NewAliases_type_identifier()
{
    {
        StructTypeFlag struct_flags_NewAliases = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_NewAliases;
        TypeIdentifierPair type_ids_NewAliases;
        QualifiedTypeName type_name_NewAliases = "NewAliases";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_NewAliases;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_NewAliases;
        CompleteTypeDetail detail_NewAliases = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_NewAliases, ann_custom_NewAliases, type_name_NewAliases.to_string());
        CompleteStructHeader header_NewAliases;
        header_NewAliases = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_NewAliases);
        CompleteStructMemberSeq member_seq_NewAliases;
        {
            return_code_NewAliases =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int8_t", type_ids_NewAliases);

            if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "int8_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_int8_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_int8_;
            MemberId member_id_int8_ = 0x00000000;
            if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_int8_ = TypeObjectUtils::build_common_struct_member(member_id_int8_, member_flags_int8_, type_ids_NewAliases.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_int8_ = TypeObjectUtils::build_common_struct_member(member_id_int8_, member_flags_int8_, type_ids_NewAliases.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int8_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_int8_ = "int8_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int8_;
            ann_custom_NewAliases.reset();
            CompleteMemberDetail detail_int8_ = TypeObjectUtils::build_complete_member_detail(name_int8_, member_ann_builtin_int8_, ann_custom_NewAliases);
            CompleteStructMember member_int8_ = TypeObjectUtils::build_complete_struct_member(common_int8_, detail_int8_);
            TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_int8_);
        }
        {
            return_code_NewAliases =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint8_t", type_ids_NewAliases);

            if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "uint8_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_uint8_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_uint8_;
            MemberId member_id_uint8_ = 0x00000001;
            if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_uint8_ = TypeObjectUtils::build_common_struct_member(member_id_uint8_, member_flags_uint8_, type_ids_NewAliases.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_uint8_ = TypeObjectUtils::build_common_struct_member(member_id_uint8_, member_flags_uint8_, type_ids_NewAliases.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure uint8_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_uint8_ = "uint8_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_uint8_;
            ann_custom_NewAliases.reset();
            CompleteMemberDetail detail_uint8_ = TypeObjectUtils::build_complete_member_detail(name_uint8_, member_ann_builtin_uint8_, ann_custom_NewAliases);
            CompleteStructMember member_uint8_ = TypeObjectUtils::build_complete_struct_member(common_uint8_, detail_uint8_);
            TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_uint8_);
        }
        {
            return_code_NewAliases =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids_NewAliases);

            if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "int16_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_int16_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_int16_;
            MemberId member_id_int16_ = 0x00000002;
            if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_int16_ = TypeObjectUtils::build_common_struct_member(member_id_int16_, member_flags_int16_, type_ids_NewAliases.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_int16_ = TypeObjectUtils::build_common_struct_member(member_id_int16_, member_flags_int16_, type_ids_NewAliases.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int16_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_int16_ = "int16_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int16_;
            ann_custom_NewAliases.reset();
            CompleteMemberDetail detail_int16_ = TypeObjectUtils::build_complete_member_detail(name_int16_, member_ann_builtin_int16_, ann_custom_NewAliases);
            CompleteStructMember member_int16_ = TypeObjectUtils::build_complete_struct_member(common_int16_, detail_int16_);
            TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_int16_);
        }
        {
            return_code_NewAliases =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids_NewAliases);

            if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "uint16_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_uint16_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_uint16_;
            MemberId member_id_uint16_ = 0x00000003;
            if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_uint16_ = TypeObjectUtils::build_common_struct_member(member_id_uint16_, member_flags_uint16_, type_ids_NewAliases.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_uint16_ = TypeObjectUtils::build_common_struct_member(member_id_uint16_, member_flags_uint16_, type_ids_NewAliases.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure uint16_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_uint16_ = "uint16_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_uint16_;
            ann_custom_NewAliases.reset();
            CompleteMemberDetail detail_uint16_ = TypeObjectUtils::build_complete_member_detail(name_uint16_, member_ann_builtin_uint16_, ann_custom_NewAliases);
            CompleteStructMember member_uint16_ = TypeObjectUtils::build_complete_struct_member(common_uint16_, detail_uint16_);
            TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_uint16_);
        }
        {
            return_code_NewAliases =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_NewAliases);

            if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "int32_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_int32_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_int32_;
            MemberId member_id_int32_ = 0x00000004;
            if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_int32_ = TypeObjectUtils::build_common_struct_member(member_id_int32_, member_flags_int32_, type_ids_NewAliases.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_int32_ = TypeObjectUtils::build_common_struct_member(member_id_int32_, member_flags_int32_, type_ids_NewAliases.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int32_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_int32_ = "int32_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int32_;
            ann_custom_NewAliases.reset();
            CompleteMemberDetail detail_int32_ = TypeObjectUtils::build_complete_member_detail(name_int32_, member_ann_builtin_int32_, ann_custom_NewAliases);
            CompleteStructMember member_int32_ = TypeObjectUtils::build_complete_struct_member(common_int32_, detail_int32_);
            TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_int32_);
        }
        {
            return_code_NewAliases =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_NewAliases);

            if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "uint32_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_uint32_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_uint32_;
            MemberId member_id_uint32_ = 0x00000005;
            if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_uint32_ = TypeObjectUtils::build_common_struct_member(member_id_uint32_, member_flags_uint32_, type_ids_NewAliases.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_uint32_ = TypeObjectUtils::build_common_struct_member(member_id_uint32_, member_flags_uint32_, type_ids_NewAliases.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure uint32_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_uint32_ = "uint32_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_uint32_;
            ann_custom_NewAliases.reset();
            CompleteMemberDetail detail_uint32_ = TypeObjectUtils::build_complete_member_detail(name_uint32_, member_ann_builtin_uint32_, ann_custom_NewAliases);
            CompleteStructMember member_uint32_ = TypeObjectUtils::build_complete_struct_member(common_uint32_, detail_uint32_);
            TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_uint32_);
        }
        {
            return_code_NewAliases =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_NewAliases);

            if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "int64_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_int64_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_int64_;
            MemberId member_id_int64_ = 0x00000006;
            if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_int64_ = TypeObjectUtils::build_common_struct_member(member_id_int64_, member_flags_int64_, type_ids_NewAliases.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_int64_ = TypeObjectUtils::build_common_struct_member(member_id_int64_, member_flags_int64_, type_ids_NewAliases.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int64_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_int64_ = "int64_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int64_;
            ann_custom_NewAliases.reset();
            CompleteMemberDetail detail_int64_ = TypeObjectUtils::build_complete_member_detail(name_int64_, member_ann_builtin_int64_, ann_custom_NewAliases);
            CompleteStructMember member_int64_ = TypeObjectUtils::build_complete_struct_member(common_int64_, detail_int64_);
            TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_int64_);
        }
        {
            return_code_NewAliases =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_NewAliases);

            if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "uint64_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_uint64_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_uint64_;
            MemberId member_id_uint64_ = 0x00000007;
            if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_uint64_ = TypeObjectUtils::build_common_struct_member(member_id_uint64_, member_flags_uint64_, type_ids_NewAliases.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_uint64_ = TypeObjectUtils::build_common_struct_member(member_id_uint64_, member_flags_uint64_, type_ids_NewAliases.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure uint64_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_uint64_ = "uint64_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_uint64_;
            ann_custom_NewAliases.reset();
            AppliedAnnotationSeq tmp_ann_custom_uint64_;
            eprosima::fastcdr::optional<std::string> unit_uint64_;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_uint64_;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_uint64_;
            eprosima::fastcdr::optional<std::string> hash_id_uint64_;
            if (unit_uint64_.has_value() || min_uint64_.has_value() || max_uint64_.has_value() || hash_id_uint64_.has_value())
            {
                member_ann_builtin_uint64_ = TypeObjectUtils::build_applied_builtin_member_annotations(unit_uint64_, min_uint64_, max_uint64_, hash_id_uint64_);
            }
            if (!tmp_ann_custom_uint64_.empty())
            {
                ann_custom_NewAliases = tmp_ann_custom_uint64_;
            }
            CompleteMemberDetail detail_uint64_ = TypeObjectUtils::build_complete_member_detail(name_uint64_, member_ann_builtin_uint64_, ann_custom_NewAliases);
            CompleteStructMember member_uint64_ = TypeObjectUtils::build_complete_struct_member(common_uint64_, detail_uint64_);
            TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_uint64_);
        }
        {
            return_code_NewAliases =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_NewAliases);

            if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_NewAliases =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_NewAliases);
                if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_local_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_local_string;
            MemberId member_id_local_string = 0x00000008;
            if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_local_string = TypeObjectUtils::build_common_struct_member(member_id_local_string, member_flags_local_string, type_ids_NewAliases.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_local_string = TypeObjectUtils::build_common_struct_member(member_id_local_string, member_flags_local_string, type_ids_NewAliases.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure local_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_local_string = "local_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_local_string;
            ann_custom_NewAliases.reset();
            AppliedAnnotationSeq tmp_ann_custom_local_string;
            eprosima::fastcdr::optional<std::string> unit_local_string;
            eprosima::fastcdr::optional<AnnotationParameterValue> min_local_string;
            eprosima::fastcdr::optional<AnnotationParameterValue> max_local_string;
            eprosima::fastcdr::optional<std::string> hash_id_local_string;
            if (unit_local_string.has_value() || min_local_string.has_value() || max_local_string.has_value() || hash_id_local_string.has_value())
            {
                member_ann_builtin_local_string = TypeObjectUtils::build_applied_builtin_member_annotations(unit_local_string, min_local_string, max_local_string, hash_id_local_string);
            }
            if (!tmp_ann_custom_local_string.empty())
            {
                ann_custom_NewAliases = tmp_ann_custom_local_string;
            }
            CompleteMemberDetail detail_local_string = TypeObjectUtils::build_complete_member_detail(name_local_string, member_ann_builtin_local_string, ann_custom_NewAliases);
            CompleteStructMember member_local_string = TypeObjectUtils::build_complete_struct_member(common_local_string, detail_local_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_local_string);
        }
        CompleteStructType struct_type_NewAliases = TypeObjectUtils::build_complete_struct_type(struct_flags_NewAliases, header_NewAliases, member_seq_NewAliases);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_NewAliases, type_name_NewAliases.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "NewAliases already registered in TypeObjectRegistry for a different type.");
        }
        return_code_NewAliases =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "NewAliases", type_ids_NewAliases);
        if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "NewAliases: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_WCharUnion_type_identifier()
{
    {
        ReturnCode_t return_code_WCharUnion;
        TypeIdentifierPair type_ids_WCharUnion;
        UnionTypeFlag union_flags_WCharUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_WCharUnion = "WCharUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_WCharUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_WCharUnion;
        CompleteTypeDetail detail_WCharUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_WCharUnion, ann_custom_WCharUnion, type_name_WCharUnion.to_string());
        CompleteUnionHeader header_WCharUnion = TypeObjectUtils::build_complete_union_header(detail_WCharUnion);
        UnionDiscriminatorFlag member_flags_WCharUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_WCharUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_wchar_t", type_ids_WCharUnion);

        if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_WCharUnion;
        if (EK_COMPLETE == type_ids_WCharUnion.type_identifier1()._d() || TK_NONE == type_ids_WCharUnion.type_identifier2()._d())
        {
            common_WCharUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_WCharUnion, type_ids_WCharUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_WCharUnion.type_identifier2()._d())
        {
            common_WCharUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_WCharUnion, type_ids_WCharUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WCharUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_WCharUnion.reset();
        ann_custom_WCharUnion.reset();
        CompleteDiscriminatorMember discriminator_WCharUnion = TypeObjectUtils::build_complete_discriminator_member(common_WCharUnion,
                type_ann_builtin_WCharUnion, ann_custom_WCharUnion);
        CompleteUnionMemberSeq member_seq_WCharUnion;
        {
            return_code_WCharUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_WCharUnion);

            if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_zero Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_zero = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_case_zero;
            TypeObjectUtils::add_union_case_label(label_seq_case_zero, static_cast<int32_t>('a'));
            CommonUnionMember common_case_zero;
            MemberId member_id_case_zero = 0x00000000;
            if (EK_COMPLETE == type_ids_WCharUnion.type_identifier1()._d() || TK_NONE == type_ids_WCharUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_case_zero = TypeObjectUtils::build_common_union_member(member_id_case_zero, member_flags_case_zero, type_ids_WCharUnion.type_identifier1(),
                        label_seq_case_zero);
            }
            else if (EK_COMPLETE == type_ids_WCharUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_case_zero = TypeObjectUtils::build_common_union_member(member_id_case_zero, member_flags_case_zero, type_ids_WCharUnion.type_identifier2(),
                        label_seq_case_zero);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_zero member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_zero = "case_zero";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_zero;
            ann_custom_WCharUnion.reset();
            CompleteMemberDetail detail_case_zero = TypeObjectUtils::build_complete_member_detail(name_case_zero, member_ann_builtin_case_zero, ann_custom_WCharUnion);
            CompleteUnionMember member_case_zero = TypeObjectUtils::build_complete_union_member(common_case_zero, detail_case_zero);
            TypeObjectUtils::add_complete_union_member(member_seq_WCharUnion, member_case_zero);
        }
        {
            return_code_WCharUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_WCharUnion);

            if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_one Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_one = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_case_one;
            TypeObjectUtils::add_union_case_label(label_seq_case_one, static_cast<int32_t>('b'));
            CommonUnionMember common_case_one;
            MemberId member_id_case_one = 0x00000001;
            if (EK_COMPLETE == type_ids_WCharUnion.type_identifier1()._d() || TK_NONE == type_ids_WCharUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_case_one = TypeObjectUtils::build_common_union_member(member_id_case_one, member_flags_case_one, type_ids_WCharUnion.type_identifier1(),
                        label_seq_case_one);
            }
            else if (EK_COMPLETE == type_ids_WCharUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WCharUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WCharUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WCharUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_case_one = TypeObjectUtils::build_common_union_member(member_id_case_one, member_flags_case_one, type_ids_WCharUnion.type_identifier2(),
                        label_seq_case_one);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_one member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_one = "case_one";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_one;
            ann_custom_WCharUnion.reset();
            CompleteMemberDetail detail_case_one = TypeObjectUtils::build_complete_member_detail(name_case_one, member_ann_builtin_case_one, ann_custom_WCharUnion);
            CompleteUnionMember member_case_one = TypeObjectUtils::build_complete_union_member(common_case_one, detail_case_one);
            TypeObjectUtils::add_complete_union_member(member_seq_WCharUnion, member_case_one);
        }
        CompleteUnionType union_type_WCharUnion = TypeObjectUtils::build_complete_union_type(union_flags_WCharUnion, header_WCharUnion, discriminator_WCharUnion,
                member_seq_WCharUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_WCharUnion, type_name_WCharUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WCharUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_WCharUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "WCharUnion", type_ids_WCharUnion);
        if (return_code_WCharUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "WCharUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_OctetUnion_type_identifier()
{
    {
        ReturnCode_t return_code_OctetUnion;
        TypeIdentifierPair type_ids_OctetUnion;
        UnionTypeFlag union_flags_OctetUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_OctetUnion = "OctetUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OctetUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OctetUnion;
        CompleteTypeDetail detail_OctetUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OctetUnion, ann_custom_OctetUnion, type_name_OctetUnion.to_string());
        CompleteUnionHeader header_OctetUnion = TypeObjectUtils::build_complete_union_header(detail_OctetUnion);
        UnionDiscriminatorFlag member_flags_OctetUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_OctetUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_byte", type_ids_OctetUnion);

        if (return_code_OctetUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_OctetUnion;
        if (EK_COMPLETE == type_ids_OctetUnion.type_identifier1()._d() || TK_NONE == type_ids_OctetUnion.type_identifier2()._d())
        {
            common_OctetUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_OctetUnion, type_ids_OctetUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_OctetUnion.type_identifier2()._d())
        {
            common_OctetUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_OctetUnion, type_ids_OctetUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OctetUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_OctetUnion.reset();
        ann_custom_OctetUnion.reset();
        CompleteDiscriminatorMember discriminator_OctetUnion = TypeObjectUtils::build_complete_discriminator_member(common_OctetUnion,
                type_ann_builtin_OctetUnion, ann_custom_OctetUnion);
        CompleteUnionMemberSeq member_seq_OctetUnion;
        {
            return_code_OctetUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_OctetUnion);

            if (return_code_OctetUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_five Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_five = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_case_five;
            TypeObjectUtils::add_union_case_label(label_seq_case_five, static_cast<int32_t>(5));
            CommonUnionMember common_case_five;
            MemberId member_id_case_five = 0x00000000;
            if (EK_COMPLETE == type_ids_OctetUnion.type_identifier1()._d() || TK_NONE == type_ids_OctetUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_case_five = TypeObjectUtils::build_common_union_member(member_id_case_five, member_flags_case_five, type_ids_OctetUnion.type_identifier1(),
                        label_seq_case_five);
            }
            else if (EK_COMPLETE == type_ids_OctetUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_case_five = TypeObjectUtils::build_common_union_member(member_id_case_five, member_flags_case_five, type_ids_OctetUnion.type_identifier2(),
                        label_seq_case_five);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_five member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_five = "case_five";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_five;
            ann_custom_OctetUnion.reset();
            CompleteMemberDetail detail_case_five = TypeObjectUtils::build_complete_member_detail(name_case_five, member_ann_builtin_case_five, ann_custom_OctetUnion);
            CompleteUnionMember member_case_five = TypeObjectUtils::build_complete_union_member(common_case_five, detail_case_five);
            TypeObjectUtils::add_complete_union_member(member_seq_OctetUnion, member_case_five);
        }
        {
            return_code_OctetUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_OctetUnion);

            if (return_code_OctetUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_seven Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_seven = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_case_seven;
            TypeObjectUtils::add_union_case_label(label_seq_case_seven, static_cast<int32_t>(7));
            CommonUnionMember common_case_seven;
            MemberId member_id_case_seven = 0x00000001;
            if (EK_COMPLETE == type_ids_OctetUnion.type_identifier1()._d() || TK_NONE == type_ids_OctetUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_case_seven = TypeObjectUtils::build_common_union_member(member_id_case_seven, member_flags_case_seven, type_ids_OctetUnion.type_identifier1(),
                        label_seq_case_seven);
            }
            else if (EK_COMPLETE == type_ids_OctetUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_case_seven = TypeObjectUtils::build_common_union_member(member_id_case_seven, member_flags_case_seven, type_ids_OctetUnion.type_identifier2(),
                        label_seq_case_seven);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_seven member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_seven = "case_seven";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_seven;
            ann_custom_OctetUnion.reset();
            CompleteMemberDetail detail_case_seven = TypeObjectUtils::build_complete_member_detail(name_case_seven, member_ann_builtin_case_seven, ann_custom_OctetUnion);
            CompleteUnionMember member_case_seven = TypeObjectUtils::build_complete_union_member(common_case_seven, detail_case_seven);
            TypeObjectUtils::add_complete_union_member(member_seq_OctetUnion, member_case_seven);
        }
        CompleteUnionType union_type_OctetUnion = TypeObjectUtils::build_complete_union_type(union_flags_OctetUnion, header_OctetUnion, discriminator_OctetUnion,
                member_seq_OctetUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_OctetUnion, type_name_OctetUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OctetUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_OctetUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "OctetUnion", type_ids_OctetUnion);
        if (return_code_OctetUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "OctetUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_Int8Union_type_identifier()
{
    {
        ReturnCode_t return_code_Int8Union;
        TypeIdentifierPair type_ids_Int8Union;
        UnionTypeFlag union_flags_Int8Union = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_Int8Union = "Int8Union";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Int8Union;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Int8Union;
        CompleteTypeDetail detail_Int8Union = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Int8Union, ann_custom_Int8Union, type_name_Int8Union.to_string());
        CompleteUnionHeader header_Int8Union = TypeObjectUtils::build_complete_union_header(detail_Int8Union);
        UnionDiscriminatorFlag member_flags_Int8Union = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_Int8Union =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int8_t", type_ids_Int8Union);

        if (return_code_Int8Union != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_Int8Union;
        if (EK_COMPLETE == type_ids_Int8Union.type_identifier1()._d() || TK_NONE == type_ids_Int8Union.type_identifier2()._d())
        {
            common_Int8Union = TypeObjectUtils::build_common_discriminator_member(member_flags_Int8Union, type_ids_Int8Union.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_Int8Union.type_identifier2()._d())
        {
            common_Int8Union = TypeObjectUtils::build_common_discriminator_member(member_flags_Int8Union, type_ids_Int8Union.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Int8Union discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_Int8Union.reset();
        ann_custom_Int8Union.reset();
        CompleteDiscriminatorMember discriminator_Int8Union = TypeObjectUtils::build_complete_discriminator_member(common_Int8Union,
                type_ann_builtin_Int8Union, ann_custom_Int8Union);
        CompleteUnionMemberSeq member_seq_Int8Union;
        {
            return_code_Int8Union =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_Int8Union);

            if (return_code_Int8Union != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_three Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_three = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_case_three;
            TypeObjectUtils::add_union_case_label(label_seq_case_three, static_cast<int32_t>(3));
            CommonUnionMember common_case_three;
            MemberId member_id_case_three = 0x00000000;
            if (EK_COMPLETE == type_ids_Int8Union.type_identifier1()._d() || TK_NONE == type_ids_Int8Union.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_case_three = TypeObjectUtils::build_common_union_member(member_id_case_three, member_flags_case_three, type_ids_Int8Union.type_identifier1(),
                        label_seq_case_three);
            }
            else if (EK_COMPLETE == type_ids_Int8Union.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_case_three = TypeObjectUtils::build_common_union_member(member_id_case_three, member_flags_case_three, type_ids_Int8Union.type_identifier2(),
                        label_seq_case_three);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_three member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_three = "case_three";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_three;
            ann_custom_Int8Union.reset();
            CompleteMemberDetail detail_case_three = TypeObjectUtils::build_complete_member_detail(name_case_three, member_ann_builtin_case_three, ann_custom_Int8Union);
            CompleteUnionMember member_case_three = TypeObjectUtils::build_complete_union_member(common_case_three, detail_case_three);
            TypeObjectUtils::add_complete_union_member(member_seq_Int8Union, member_case_three);
        }
        {
            return_code_Int8Union =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_Int8Union);

            if (return_code_Int8Union != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_six Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_case_six = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_case_six;
            TypeObjectUtils::add_union_case_label(label_seq_case_six, static_cast<int32_t>(6));
            CommonUnionMember common_case_six;
            MemberId member_id_case_six = 0x00000001;
            if (EK_COMPLETE == type_ids_Int8Union.type_identifier1()._d() || TK_NONE == type_ids_Int8Union.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_case_six = TypeObjectUtils::build_common_union_member(member_id_case_six, member_flags_case_six, type_ids_Int8Union.type_identifier1(),
                        label_seq_case_six);
            }
            else if (EK_COMPLETE == type_ids_Int8Union.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_case_six = TypeObjectUtils::build_common_union_member(member_id_case_six, member_flags_case_six, type_ids_Int8Union.type_identifier2(),
                        label_seq_case_six);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_six member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_case_six = "case_six";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_six;
            ann_custom_Int8Union.reset();
            CompleteMemberDetail detail_case_six = TypeObjectUtils::build_complete_member_detail(name_case_six, member_ann_builtin_case_six, ann_custom_Int8Union);
            CompleteUnionMember member_case_six = TypeObjectUtils::build_complete_union_member(common_case_six, detail_case_six);
            TypeObjectUtils::add_complete_union_member(member_seq_Int8Union, member_case_six);
        }
        CompleteUnionType union_type_Int8Union = TypeObjectUtils::build_complete_union_type(union_flags_Int8Union, header_Int8Union, discriminator_Int8Union,
                member_seq_Int8Union);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_Int8Union, type_name_Int8Union.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Int8Union already registered in TypeObjectRegistry for a different type.");
        }
        return_code_Int8Union =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "Int8Union", type_ids_Int8Union);
        if (return_code_Int8Union != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Int8Union: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
namespace bitmodule {
void register_bitmodule_BitsetBitmask_type_identifier()
{
    {
        StructTypeFlag struct_flags_BitsetBitmask = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BitsetBitmask;
        TypeIdentifierPair type_ids_BitsetBitmask;
        QualifiedTypeName type_name_BitsetBitmask = "bitmodule::BitsetBitmask";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BitsetBitmask;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BitsetBitmask;
        CompleteTypeDetail detail_BitsetBitmask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BitsetBitmask, ann_custom_BitsetBitmask, type_name_BitsetBitmask.to_string());
        CompleteStructHeader header_BitsetBitmask;
        header_BitsetBitmask = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BitsetBitmask);
        CompleteStructMemberSeq member_seq_BitsetBitmask;
        {
            return_code_BitsetBitmask =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "bitmodule::MyBitset", type_ids_BitsetBitmask);

            if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
            {
                BitsetTypeFlag bitset_flags_MyBitset = 0;
                QualifiedTypeName type_name_MyBitset = "bitmodule::MyBitset";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBitset;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBitset;
                CompleteTypeDetail detail_MyBitset = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBitset, ann_custom_MyBitset, type_name_MyBitset.to_string());
                CompleteBitsetHeader header_MyBitset = TypeObjectUtils::build_complete_bitset_header(detail_MyBitset);
                CompleteBitfieldSeq field_seq_MyBitset;
                {
                    uint16_t position_a = 0;
                    BitsetMemberFlag flags_a = 0;
                    uint8_t bitcount_a = 3;
                    TypeKind holder_type_a = TK_BYTE;
                    CommonBitfield common_a = TypeObjectUtils::build_common_bitfield(position_a, flags_a, bitcount_a, holder_type_a);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                    ann_custom_MyBitset.reset();
                    MemberName name_a = "a";
                    CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_MyBitset);
                    CompleteBitfield bitfield_a = TypeObjectUtils::build_complete_bitfield(common_a, detail_a);
                    TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_a);
                }
                {
                    uint16_t position_b = 3;
                    BitsetMemberFlag flags_b = 0;
                    uint8_t bitcount_b = 1;
                    TypeKind holder_type_b = TK_BOOLEAN;
                    CommonBitfield common_b = TypeObjectUtils::build_common_bitfield(position_b, flags_b, bitcount_b, holder_type_b);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                    ann_custom_MyBitset.reset();
                    MemberName name_b = "b";
                    CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_MyBitset);
                    CompleteBitfield bitfield_b = TypeObjectUtils::build_complete_bitfield(common_b, detail_b);
                    TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_b);
                }
                {
                    uint16_t position_c = 8;
                    BitsetMemberFlag flags_c = 0;
                    uint8_t bitcount_c = 10;
                    TypeKind holder_type_c = TK_UINT16;
                    CommonBitfield common_c = TypeObjectUtils::build_common_bitfield(position_c, flags_c, bitcount_c, holder_type_c);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
                    ann_custom_MyBitset.reset();
                    MemberName name_c = "c";
                    CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_MyBitset);
                    CompleteBitfield bitfield_c = TypeObjectUtils::build_complete_bitfield(common_c, detail_c);
                    TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_c);
                }
                {
                    uint16_t position_d = 18;
                    BitsetMemberFlag flags_d = 0;
                    uint8_t bitcount_d = 5;
                    TypeKind holder_type_d = TK_INT16;
                    CommonBitfield common_d = TypeObjectUtils::build_common_bitfield(position_d, flags_d, bitcount_d, holder_type_d);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_d;
                    ann_custom_MyBitset.reset();
                    MemberName name_d = "d";
                    CompleteMemberDetail detail_d = TypeObjectUtils::build_complete_member_detail(name_d, member_ann_builtin_d, ann_custom_MyBitset);
                    CompleteBitfield bitfield_d = TypeObjectUtils::build_complete_bitfield(common_d, detail_d);
                    TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_d);
                }
                {
                    uint16_t position_e = 23;
                    BitsetMemberFlag flags_e = 0;
                    uint8_t bitcount_e = 5;
                    TypeKind holder_type_e = TK_INT16;
                    CommonBitfield common_e = TypeObjectUtils::build_common_bitfield(position_e, flags_e, bitcount_e, holder_type_e);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_e;
                    ann_custom_MyBitset.reset();
                    MemberName name_e = "e";
                    CompleteMemberDetail detail_e = TypeObjectUtils::build_complete_member_detail(name_e, member_ann_builtin_e, ann_custom_MyBitset);
                    CompleteBitfield bitfield_e = TypeObjectUtils::build_complete_bitfield(common_e, detail_e);
                    TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_e);
                }
                {
                    uint16_t position_f = 28;
                    BitsetMemberFlag flags_f = 0;
                    uint8_t bitcount_f = 5;
                    TypeKind holder_type_f = TK_INT16;
                    CommonBitfield common_f = TypeObjectUtils::build_common_bitfield(position_f, flags_f, bitcount_f, holder_type_f);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_f;
                    ann_custom_MyBitset.reset();
                    MemberName name_f = "f";
                    CompleteMemberDetail detail_f = TypeObjectUtils::build_complete_member_detail(name_f, member_ann_builtin_f, ann_custom_MyBitset);
                    CompleteBitfield bitfield_f = TypeObjectUtils::build_complete_bitfield(common_f, detail_f);
                    TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_f);
                }
                CompleteBitsetType bitset_type_MyBitset = TypeObjectUtils::build_complete_bitset_type(bitset_flags_MyBitset, header_MyBitset, field_seq_MyBitset);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_bitset_type_object(bitset_type_MyBitset, type_name_MyBitset.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::MyBitset already registered in TypeObjectRegistry for a different type.");
                }
                return_code_BitsetBitmask =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "bitmodule::MyBitset", type_ids_BitsetBitmask);
                if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitset: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_mybitset = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_mybitset;
            MemberId member_id_mybitset = 0x00000000;
            if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1()._d() || TK_NONE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_mybitset = TypeObjectUtils::build_common_struct_member(member_id_mybitset, member_flags_mybitset, type_ids_BitsetBitmask.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_mybitset = TypeObjectUtils::build_common_struct_member(member_id_mybitset, member_flags_mybitset, type_ids_BitsetBitmask.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure mybitset member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_mybitset = "mybitset";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mybitset;
            ann_custom_BitsetBitmask.reset();
            CompleteMemberDetail detail_mybitset = TypeObjectUtils::build_complete_member_detail(name_mybitset, member_ann_builtin_mybitset, ann_custom_BitsetBitmask);
            CompleteStructMember member_mybitset = TypeObjectUtils::build_complete_struct_member(common_mybitset, detail_mybitset);
            TypeObjectUtils::add_complete_struct_member(member_seq_BitsetBitmask, member_mybitset);
        }
        {
            return_code_BitsetBitmask =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "bitmodule::MyBitMask", type_ids_BitsetBitmask);

            if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
            {
                BitmaskTypeFlag bitmask_flags_MyBitMask = 0;
                BitBound bit_bound_MyBitMask = 8;
                CommonEnumeratedHeader common_MyBitMask = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyBitMask, true);
                QualifiedTypeName type_name_MyBitMask = "bitmodule::MyBitMask";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBitMask;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBitMask;
                AppliedAnnotationSeq tmp_ann_custom_MyBitMask;
                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_MyBitMask;
                if (!tmp_ann_custom_MyBitMask.empty())
                {
                    ann_custom_MyBitMask = tmp_ann_custom_MyBitMask;
                }

                CompleteTypeDetail detail_MyBitMask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBitMask, ann_custom_MyBitMask, type_name_MyBitMask.to_string());
                CompleteEnumeratedHeader header_MyBitMask = TypeObjectUtils::build_complete_enumerated_header(common_MyBitMask, detail_MyBitMask, true);
                CompleteBitflagSeq flag_seq_MyBitMask;
                {
                    uint16_t position_flag0 = 0;
                    BitflagFlag flags_flag0 = 0;
                    CommonBitflag common_flag0 = TypeObjectUtils::build_common_bitflag(position_flag0, flags_flag0);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag0;
                    ann_custom_MyBitMask.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag0;
                    if (!tmp_ann_custom_flag0.empty())
                    {
                        ann_custom_MyBitMask = tmp_ann_custom_flag0;
                    }
                    MemberName name_flag0 = "flag0";
                    CompleteMemberDetail detail_flag0 = TypeObjectUtils::build_complete_member_detail(name_flag0, member_ann_builtin_flag0, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag0 = TypeObjectUtils::build_complete_bitflag(common_flag0, detail_flag0);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag0);
                }
                {
                    uint16_t position_flag1 = 1;
                    BitflagFlag flags_flag1 = 0;
                    CommonBitflag common_flag1 = TypeObjectUtils::build_common_bitflag(position_flag1, flags_flag1);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag1;
                    ann_custom_MyBitMask.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag1;
                    if (!tmp_ann_custom_flag1.empty())
                    {
                        ann_custom_MyBitMask = tmp_ann_custom_flag1;
                    }
                    MemberName name_flag1 = "flag1";
                    CompleteMemberDetail detail_flag1 = TypeObjectUtils::build_complete_member_detail(name_flag1, member_ann_builtin_flag1, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag1 = TypeObjectUtils::build_complete_bitflag(common_flag1, detail_flag1);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag1);
                }
                {
                    uint16_t position_flag4 = 4;
                    BitflagFlag flags_flag4 = 0;
                    CommonBitflag common_flag4 = TypeObjectUtils::build_common_bitflag(position_flag4, flags_flag4);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag4;
                    ann_custom_MyBitMask.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag4;
                    if (!tmp_ann_custom_flag4.empty())
                    {
                        ann_custom_MyBitMask = tmp_ann_custom_flag4;
                    }
                    MemberName name_flag4 = "flag4";
                    CompleteMemberDetail detail_flag4 = TypeObjectUtils::build_complete_member_detail(name_flag4, member_ann_builtin_flag4, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag4 = TypeObjectUtils::build_complete_bitflag(common_flag4, detail_flag4);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag4);
                }
                {
                    uint16_t position_flag6 = 6;
                    BitflagFlag flags_flag6 = 0;
                    CommonBitflag common_flag6 = TypeObjectUtils::build_common_bitflag(position_flag6, flags_flag6);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag6;
                    ann_custom_MyBitMask.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag6;
                    if (!tmp_ann_custom_flag6.empty())
                    {
                        ann_custom_MyBitMask = tmp_ann_custom_flag6;
                    }
                    MemberName name_flag6 = "flag6";
                    CompleteMemberDetail detail_flag6 = TypeObjectUtils::build_complete_member_detail(name_flag6, member_ann_builtin_flag6, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag6 = TypeObjectUtils::build_complete_bitflag(common_flag6, detail_flag6);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag6);
                }
                {
                    uint16_t position_flag7 = 7;
                    BitflagFlag flags_flag7 = 0;
                    CommonBitflag common_flag7 = TypeObjectUtils::build_common_bitflag(position_flag7, flags_flag7);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag7;
                    ann_custom_MyBitMask.reset();
                    MemberName name_flag7 = "flag7";
                    CompleteMemberDetail detail_flag7 = TypeObjectUtils::build_complete_member_detail(name_flag7, member_ann_builtin_flag7, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag7 = TypeObjectUtils::build_complete_bitflag(common_flag7, detail_flag7);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag7);
                }
                CompleteBitmaskType bitmask_type_MyBitMask = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags_MyBitMask, header_MyBitMask, flag_seq_MyBitMask);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type_MyBitMask, type_name_MyBitMask.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                }
                return_code_BitsetBitmask =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "bitmodule::MyBitMask", type_ids_BitsetBitmask);
                if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_mybitmask = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_mybitmask;
            MemberId member_id_mybitmask = 0x00000001;
            if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1()._d() || TK_NONE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_mybitmask = TypeObjectUtils::build_common_struct_member(member_id_mybitmask, member_flags_mybitmask, type_ids_BitsetBitmask.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_mybitmask = TypeObjectUtils::build_common_struct_member(member_id_mybitmask, member_flags_mybitmask, type_ids_BitsetBitmask.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure mybitmask member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_mybitmask = "mybitmask";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mybitmask;
            ann_custom_BitsetBitmask.reset();
            CompleteMemberDetail detail_mybitmask = TypeObjectUtils::build_complete_member_detail(name_mybitmask, member_ann_builtin_mybitmask, ann_custom_BitsetBitmask);
            CompleteStructMember member_mybitmask = TypeObjectUtils::build_complete_struct_member(common_mybitmask, detail_mybitmask);
            TypeObjectUtils::add_complete_struct_member(member_seq_BitsetBitmask, member_mybitmask);
        }
        CompleteStructType struct_type_BitsetBitmask = TypeObjectUtils::build_complete_struct_type(struct_flags_BitsetBitmask, header_BitsetBitmask, member_seq_BitsetBitmask);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BitsetBitmask, type_name_BitsetBitmask.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "bitmodule::BitsetBitmask already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BitsetBitmask =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "bitmodule::BitsetBitmask", type_ids_BitsetBitmask);
        if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::BitsetBitmask: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_bitmodule_BM2_type_identifier()
{
    {
        StructTypeFlag struct_flags_BM2 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BM2;
        TypeIdentifierPair type_ids_BM2;
        return_code_BM2 =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "bitmodule::BitsetBitmask", type_ids_BM2);

        if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
        {
            {
                StructTypeFlag struct_flags_BitsetBitmask = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                        false, false);
                ReturnCode_t return_code_BitsetBitmask;
                TypeIdentifierPair type_ids_BitsetBitmask;
                QualifiedTypeName type_name_BitsetBitmask = "bitmodule::BitsetBitmask";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BitsetBitmask;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BitsetBitmask;
                CompleteTypeDetail detail_BitsetBitmask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BitsetBitmask, ann_custom_BitsetBitmask, type_name_BitsetBitmask.to_string());
                CompleteStructHeader header_BitsetBitmask;
                header_BitsetBitmask = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BitsetBitmask);
                CompleteStructMemberSeq member_seq_BitsetBitmask;
                {
                    return_code_BitsetBitmask =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "bitmodule::MyBitset", type_ids_BitsetBitmask);

                    if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        BitsetTypeFlag bitset_flags_MyBitset = 0;
                        QualifiedTypeName type_name_MyBitset = "bitmodule::MyBitset";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBitset;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBitset;
                        CompleteTypeDetail detail_MyBitset = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBitset, ann_custom_MyBitset, type_name_MyBitset.to_string());
                        CompleteBitsetHeader header_MyBitset = TypeObjectUtils::build_complete_bitset_header(detail_MyBitset);
                        CompleteBitfieldSeq field_seq_MyBitset;
                        {
                            uint16_t position_a = 0;
                            BitsetMemberFlag flags_a = 0;
                            uint8_t bitcount_a = 3;
                            TypeKind holder_type_a = TK_BYTE;
                            CommonBitfield common_a = TypeObjectUtils::build_common_bitfield(position_a, flags_a, bitcount_a, holder_type_a);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                            ann_custom_MyBitset.reset();
                            MemberName name_a = "a";
                            CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_MyBitset);
                            CompleteBitfield bitfield_a = TypeObjectUtils::build_complete_bitfield(common_a, detail_a);
                            TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_a);
                        }
                        {
                            uint16_t position_b = 3;
                            BitsetMemberFlag flags_b = 0;
                            uint8_t bitcount_b = 1;
                            TypeKind holder_type_b = TK_BOOLEAN;
                            CommonBitfield common_b = TypeObjectUtils::build_common_bitfield(position_b, flags_b, bitcount_b, holder_type_b);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                            ann_custom_MyBitset.reset();
                            MemberName name_b = "b";
                            CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_MyBitset);
                            CompleteBitfield bitfield_b = TypeObjectUtils::build_complete_bitfield(common_b, detail_b);
                            TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_b);
                        }
                        {
                            uint16_t position_c = 8;
                            BitsetMemberFlag flags_c = 0;
                            uint8_t bitcount_c = 10;
                            TypeKind holder_type_c = TK_UINT16;
                            CommonBitfield common_c = TypeObjectUtils::build_common_bitfield(position_c, flags_c, bitcount_c, holder_type_c);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
                            ann_custom_MyBitset.reset();
                            MemberName name_c = "c";
                            CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_MyBitset);
                            CompleteBitfield bitfield_c = TypeObjectUtils::build_complete_bitfield(common_c, detail_c);
                            TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_c);
                        }
                        {
                            uint16_t position_d = 18;
                            BitsetMemberFlag flags_d = 0;
                            uint8_t bitcount_d = 5;
                            TypeKind holder_type_d = TK_INT16;
                            CommonBitfield common_d = TypeObjectUtils::build_common_bitfield(position_d, flags_d, bitcount_d, holder_type_d);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_d;
                            ann_custom_MyBitset.reset();
                            MemberName name_d = "d";
                            CompleteMemberDetail detail_d = TypeObjectUtils::build_complete_member_detail(name_d, member_ann_builtin_d, ann_custom_MyBitset);
                            CompleteBitfield bitfield_d = TypeObjectUtils::build_complete_bitfield(common_d, detail_d);
                            TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_d);
                        }
                        {
                            uint16_t position_e = 23;
                            BitsetMemberFlag flags_e = 0;
                            uint8_t bitcount_e = 5;
                            TypeKind holder_type_e = TK_INT16;
                            CommonBitfield common_e = TypeObjectUtils::build_common_bitfield(position_e, flags_e, bitcount_e, holder_type_e);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_e;
                            ann_custom_MyBitset.reset();
                            MemberName name_e = "e";
                            CompleteMemberDetail detail_e = TypeObjectUtils::build_complete_member_detail(name_e, member_ann_builtin_e, ann_custom_MyBitset);
                            CompleteBitfield bitfield_e = TypeObjectUtils::build_complete_bitfield(common_e, detail_e);
                            TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_e);
                        }
                        {
                            uint16_t position_f = 28;
                            BitsetMemberFlag flags_f = 0;
                            uint8_t bitcount_f = 5;
                            TypeKind holder_type_f = TK_INT16;
                            CommonBitfield common_f = TypeObjectUtils::build_common_bitfield(position_f, flags_f, bitcount_f, holder_type_f);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_f;
                            ann_custom_MyBitset.reset();
                            MemberName name_f = "f";
                            CompleteMemberDetail detail_f = TypeObjectUtils::build_complete_member_detail(name_f, member_ann_builtin_f, ann_custom_MyBitset);
                            CompleteBitfield bitfield_f = TypeObjectUtils::build_complete_bitfield(common_f, detail_f);
                            TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_f);
                        }
                        CompleteBitsetType bitset_type_MyBitset = TypeObjectUtils::build_complete_bitset_type(bitset_flags_MyBitset, header_MyBitset, field_seq_MyBitset);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_bitset_type_object(bitset_type_MyBitset, type_name_MyBitset.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitset already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_BitsetBitmask =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "bitmodule::MyBitset", type_ids_BitsetBitmask);
                        if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "bitmodule::MyBitset: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    StructMemberFlag member_flags_mybitset = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_mybitset;
                    MemberId member_id_mybitset = 0x00000000;
                    if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1()._d() || TK_NONE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_mybitset = TypeObjectUtils::build_common_struct_member(member_id_mybitset, member_flags_mybitset, type_ids_BitsetBitmask.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_mybitset = TypeObjectUtils::build_common_struct_member(member_id_mybitset, member_flags_mybitset, type_ids_BitsetBitmask.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure mybitset member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_mybitset = "mybitset";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mybitset;
                    ann_custom_BitsetBitmask.reset();
                    CompleteMemberDetail detail_mybitset = TypeObjectUtils::build_complete_member_detail(name_mybitset, member_ann_builtin_mybitset, ann_custom_BitsetBitmask);
                    CompleteStructMember member_mybitset = TypeObjectUtils::build_complete_struct_member(common_mybitset, detail_mybitset);
                    TypeObjectUtils::add_complete_struct_member(member_seq_BitsetBitmask, member_mybitset);
                }
                {
                    return_code_BitsetBitmask =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "bitmodule::MyBitMask", type_ids_BitsetBitmask);

                    if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        BitmaskTypeFlag bitmask_flags_MyBitMask = 0;
                        BitBound bit_bound_MyBitMask = 8;
                        CommonEnumeratedHeader common_MyBitMask = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyBitMask, true);
                        QualifiedTypeName type_name_MyBitMask = "bitmodule::MyBitMask";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBitMask;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBitMask;
                        AppliedAnnotationSeq tmp_ann_custom_MyBitMask;
                        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_MyBitMask;
                        if (!tmp_ann_custom_MyBitMask.empty())
                        {
                            ann_custom_MyBitMask = tmp_ann_custom_MyBitMask;
                        }

                        CompleteTypeDetail detail_MyBitMask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBitMask, ann_custom_MyBitMask, type_name_MyBitMask.to_string());
                        CompleteEnumeratedHeader header_MyBitMask = TypeObjectUtils::build_complete_enumerated_header(common_MyBitMask, detail_MyBitMask, true);
                        CompleteBitflagSeq flag_seq_MyBitMask;
                        {
                            uint16_t position_flag0 = 0;
                            BitflagFlag flags_flag0 = 0;
                            CommonBitflag common_flag0 = TypeObjectUtils::build_common_bitflag(position_flag0, flags_flag0);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag0;
                            ann_custom_MyBitMask.reset();
                            AppliedAnnotationSeq tmp_ann_custom_flag0;
                            if (!tmp_ann_custom_flag0.empty())
                            {
                                ann_custom_MyBitMask = tmp_ann_custom_flag0;
                            }
                            MemberName name_flag0 = "flag0";
                            CompleteMemberDetail detail_flag0 = TypeObjectUtils::build_complete_member_detail(name_flag0, member_ann_builtin_flag0, ann_custom_MyBitMask);
                            CompleteBitflag bitflag_flag0 = TypeObjectUtils::build_complete_bitflag(common_flag0, detail_flag0);
                            TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag0);
                        }
                        {
                            uint16_t position_flag1 = 1;
                            BitflagFlag flags_flag1 = 0;
                            CommonBitflag common_flag1 = TypeObjectUtils::build_common_bitflag(position_flag1, flags_flag1);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag1;
                            ann_custom_MyBitMask.reset();
                            AppliedAnnotationSeq tmp_ann_custom_flag1;
                            if (!tmp_ann_custom_flag1.empty())
                            {
                                ann_custom_MyBitMask = tmp_ann_custom_flag1;
                            }
                            MemberName name_flag1 = "flag1";
                            CompleteMemberDetail detail_flag1 = TypeObjectUtils::build_complete_member_detail(name_flag1, member_ann_builtin_flag1, ann_custom_MyBitMask);
                            CompleteBitflag bitflag_flag1 = TypeObjectUtils::build_complete_bitflag(common_flag1, detail_flag1);
                            TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag1);
                        }
                        {
                            uint16_t position_flag4 = 4;
                            BitflagFlag flags_flag4 = 0;
                            CommonBitflag common_flag4 = TypeObjectUtils::build_common_bitflag(position_flag4, flags_flag4);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag4;
                            ann_custom_MyBitMask.reset();
                            AppliedAnnotationSeq tmp_ann_custom_flag4;
                            if (!tmp_ann_custom_flag4.empty())
                            {
                                ann_custom_MyBitMask = tmp_ann_custom_flag4;
                            }
                            MemberName name_flag4 = "flag4";
                            CompleteMemberDetail detail_flag4 = TypeObjectUtils::build_complete_member_detail(name_flag4, member_ann_builtin_flag4, ann_custom_MyBitMask);
                            CompleteBitflag bitflag_flag4 = TypeObjectUtils::build_complete_bitflag(common_flag4, detail_flag4);
                            TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag4);
                        }
                        {
                            uint16_t position_flag6 = 6;
                            BitflagFlag flags_flag6 = 0;
                            CommonBitflag common_flag6 = TypeObjectUtils::build_common_bitflag(position_flag6, flags_flag6);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag6;
                            ann_custom_MyBitMask.reset();
                            AppliedAnnotationSeq tmp_ann_custom_flag6;
                            if (!tmp_ann_custom_flag6.empty())
                            {
                                ann_custom_MyBitMask = tmp_ann_custom_flag6;
                            }
                            MemberName name_flag6 = "flag6";
                            CompleteMemberDetail detail_flag6 = TypeObjectUtils::build_complete_member_detail(name_flag6, member_ann_builtin_flag6, ann_custom_MyBitMask);
                            CompleteBitflag bitflag_flag6 = TypeObjectUtils::build_complete_bitflag(common_flag6, detail_flag6);
                            TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag6);
                        }
                        {
                            uint16_t position_flag7 = 7;
                            BitflagFlag flags_flag7 = 0;
                            CommonBitflag common_flag7 = TypeObjectUtils::build_common_bitflag(position_flag7, flags_flag7);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag7;
                            ann_custom_MyBitMask.reset();
                            MemberName name_flag7 = "flag7";
                            CompleteMemberDetail detail_flag7 = TypeObjectUtils::build_complete_member_detail(name_flag7, member_ann_builtin_flag7, ann_custom_MyBitMask);
                            CompleteBitflag bitflag_flag7 = TypeObjectUtils::build_complete_bitflag(common_flag7, detail_flag7);
                            TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag7);
                        }
                        CompleteBitmaskType bitmask_type_MyBitMask = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags_MyBitMask, header_MyBitMask, flag_seq_MyBitMask);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type_MyBitMask, type_name_MyBitMask.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code_BitsetBitmask =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "bitmodule::MyBitMask", type_ids_BitsetBitmask);
                        if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    StructMemberFlag member_flags_mybitmask = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_mybitmask;
                    MemberId member_id_mybitmask = 0x00000001;
                    if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1()._d() || TK_NONE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_mybitmask = TypeObjectUtils::build_common_struct_member(member_id_mybitmask, member_flags_mybitmask, type_ids_BitsetBitmask.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_mybitmask = TypeObjectUtils::build_common_struct_member(member_id_mybitmask, member_flags_mybitmask, type_ids_BitsetBitmask.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure mybitmask member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_mybitmask = "mybitmask";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mybitmask;
                    ann_custom_BitsetBitmask.reset();
                    CompleteMemberDetail detail_mybitmask = TypeObjectUtils::build_complete_member_detail(name_mybitmask, member_ann_builtin_mybitmask, ann_custom_BitsetBitmask);
                    CompleteStructMember member_mybitmask = TypeObjectUtils::build_complete_struct_member(common_mybitmask, detail_mybitmask);
                    TypeObjectUtils::add_complete_struct_member(member_seq_BitsetBitmask, member_mybitmask);
                }
                CompleteStructType struct_type_BitsetBitmask = TypeObjectUtils::build_complete_struct_type(struct_flags_BitsetBitmask, header_BitsetBitmask, member_seq_BitsetBitmask);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_BitsetBitmask, type_name_BitsetBitmask.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "bitmodule::BitsetBitmask already registered in TypeObjectRegistry for a different type.");
                }
                return_code_BitsetBitmask =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "bitmodule::BitsetBitmask", type_ids_BitsetBitmask);
                if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::BitsetBitmask: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
        }
        QualifiedTypeName type_name_BM2 = "bitmodule::BM2";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BM2;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BM2;
        CompleteTypeDetail detail_BM2 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BM2, ann_custom_BM2, type_name_BM2.to_string());
        CompleteStructHeader header_BM2;
        if (EK_COMPLETE == type_ids_BM2.type_identifier1()._d() || TK_NONE == type_ids_BM2.type_identifier1()._d())
        {
            header_BM2 = TypeObjectUtils::build_complete_struct_header(type_ids_BM2.type_identifier1(), detail_BM2);
        }
        else if (EK_COMPLETE == type_ids_BM2.type_identifier2()._d())
        {
            header_BM2 = TypeObjectUtils::build_complete_struct_header(type_ids_BM2.type_identifier2(), detail_BM2);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "bitmodule::BM2 Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq_BM2;
        {
            return_code_BM2 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "bitmodule::MyBitMask", type_ids_BM2);

            if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
            {
                BitmaskTypeFlag bitmask_flags_MyBitMask = 0;
                BitBound bit_bound_MyBitMask = 8;
                CommonEnumeratedHeader common_MyBitMask = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyBitMask, true);
                QualifiedTypeName type_name_MyBitMask = "bitmodule::MyBitMask";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBitMask;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBitMask;
                AppliedAnnotationSeq tmp_ann_custom_MyBitMask;
                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_MyBitMask;
                if (!tmp_ann_custom_MyBitMask.empty())
                {
                    ann_custom_MyBitMask = tmp_ann_custom_MyBitMask;
                }

                CompleteTypeDetail detail_MyBitMask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBitMask, ann_custom_MyBitMask, type_name_MyBitMask.to_string());
                CompleteEnumeratedHeader header_MyBitMask = TypeObjectUtils::build_complete_enumerated_header(common_MyBitMask, detail_MyBitMask, true);
                CompleteBitflagSeq flag_seq_MyBitMask;
                {
                    uint16_t position_flag0 = 0;
                    BitflagFlag flags_flag0 = 0;
                    CommonBitflag common_flag0 = TypeObjectUtils::build_common_bitflag(position_flag0, flags_flag0);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag0;
                    ann_custom_MyBitMask.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag0;
                    if (!tmp_ann_custom_flag0.empty())
                    {
                        ann_custom_MyBitMask = tmp_ann_custom_flag0;
                    }
                    MemberName name_flag0 = "flag0";
                    CompleteMemberDetail detail_flag0 = TypeObjectUtils::build_complete_member_detail(name_flag0, member_ann_builtin_flag0, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag0 = TypeObjectUtils::build_complete_bitflag(common_flag0, detail_flag0);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag0);
                }
                {
                    uint16_t position_flag1 = 1;
                    BitflagFlag flags_flag1 = 0;
                    CommonBitflag common_flag1 = TypeObjectUtils::build_common_bitflag(position_flag1, flags_flag1);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag1;
                    ann_custom_MyBitMask.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag1;
                    if (!tmp_ann_custom_flag1.empty())
                    {
                        ann_custom_MyBitMask = tmp_ann_custom_flag1;
                    }
                    MemberName name_flag1 = "flag1";
                    CompleteMemberDetail detail_flag1 = TypeObjectUtils::build_complete_member_detail(name_flag1, member_ann_builtin_flag1, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag1 = TypeObjectUtils::build_complete_bitflag(common_flag1, detail_flag1);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag1);
                }
                {
                    uint16_t position_flag4 = 4;
                    BitflagFlag flags_flag4 = 0;
                    CommonBitflag common_flag4 = TypeObjectUtils::build_common_bitflag(position_flag4, flags_flag4);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag4;
                    ann_custom_MyBitMask.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag4;
                    if (!tmp_ann_custom_flag4.empty())
                    {
                        ann_custom_MyBitMask = tmp_ann_custom_flag4;
                    }
                    MemberName name_flag4 = "flag4";
                    CompleteMemberDetail detail_flag4 = TypeObjectUtils::build_complete_member_detail(name_flag4, member_ann_builtin_flag4, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag4 = TypeObjectUtils::build_complete_bitflag(common_flag4, detail_flag4);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag4);
                }
                {
                    uint16_t position_flag6 = 6;
                    BitflagFlag flags_flag6 = 0;
                    CommonBitflag common_flag6 = TypeObjectUtils::build_common_bitflag(position_flag6, flags_flag6);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag6;
                    ann_custom_MyBitMask.reset();
                    AppliedAnnotationSeq tmp_ann_custom_flag6;
                    if (!tmp_ann_custom_flag6.empty())
                    {
                        ann_custom_MyBitMask = tmp_ann_custom_flag6;
                    }
                    MemberName name_flag6 = "flag6";
                    CompleteMemberDetail detail_flag6 = TypeObjectUtils::build_complete_member_detail(name_flag6, member_ann_builtin_flag6, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag6 = TypeObjectUtils::build_complete_bitflag(common_flag6, detail_flag6);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag6);
                }
                {
                    uint16_t position_flag7 = 7;
                    BitflagFlag flags_flag7 = 0;
                    CommonBitflag common_flag7 = TypeObjectUtils::build_common_bitflag(position_flag7, flags_flag7);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag7;
                    ann_custom_MyBitMask.reset();
                    MemberName name_flag7 = "flag7";
                    CompleteMemberDetail detail_flag7 = TypeObjectUtils::build_complete_member_detail(name_flag7, member_ann_builtin_flag7, ann_custom_MyBitMask);
                    CompleteBitflag bitflag_flag7 = TypeObjectUtils::build_complete_bitflag(common_flag7, detail_flag7);
                    TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag7);
                }
                CompleteBitmaskType bitmask_type_MyBitMask = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags_MyBitMask, header_MyBitMask, flag_seq_MyBitMask);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type_MyBitMask, type_name_MyBitMask.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                }
                return_code_BM2 =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "bitmodule::MyBitMask", type_ids_BM2);
                if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_two = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_two;
            MemberId member_id_two = 0x00000002;
            if (EK_COMPLETE == type_ids_BM2.type_identifier1()._d() || TK_NONE == type_ids_BM2.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BM2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BM2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BM2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BM2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BM2.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BM2.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BM2.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BM2.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BM2.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BM2.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_two = TypeObjectUtils::build_common_struct_member(member_id_two, member_flags_two, type_ids_BM2.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BM2.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BM2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BM2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BM2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BM2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BM2.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BM2.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BM2.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BM2.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BM2.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BM2.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_two = TypeObjectUtils::build_common_struct_member(member_id_two, member_flags_two, type_ids_BM2.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure two member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_two = "two";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_two;
            ann_custom_BM2.reset();
            CompleteMemberDetail detail_two = TypeObjectUtils::build_complete_member_detail(name_two, member_ann_builtin_two, ann_custom_BM2);
            CompleteStructMember member_two = TypeObjectUtils::build_complete_struct_member(common_two, detail_two);
            TypeObjectUtils::add_complete_struct_member(member_seq_BM2, member_two);
        }
        {
            return_code_BM2 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_BM2);

            if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "mylong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_mylong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_mylong;
            MemberId member_id_mylong = 0x00000003;
            if (EK_COMPLETE == type_ids_BM2.type_identifier1()._d() || TK_NONE == type_ids_BM2.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BM2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BM2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BM2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BM2.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BM2.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BM2.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BM2.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BM2.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BM2.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BM2.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_mylong = TypeObjectUtils::build_common_struct_member(member_id_mylong, member_flags_mylong, type_ids_BM2.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BM2.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BM2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BM2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BM2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BM2.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BM2.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BM2.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BM2.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BM2.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BM2.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BM2.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BM2.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_mylong = TypeObjectUtils::build_common_struct_member(member_id_mylong, member_flags_mylong, type_ids_BM2.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure mylong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_mylong = "mylong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mylong;
            ann_custom_BM2.reset();
            CompleteMemberDetail detail_mylong = TypeObjectUtils::build_complete_member_detail(name_mylong, member_ann_builtin_mylong, ann_custom_BM2);
            CompleteStructMember member_mylong = TypeObjectUtils::build_complete_struct_member(common_mylong, detail_mylong);
            TypeObjectUtils::add_complete_struct_member(member_seq_BM2, member_mylong);
        }
        CompleteStructType struct_type_BM2 = TypeObjectUtils::build_complete_struct_type(struct_flags_BM2, header_BM2, member_seq_BM2);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BM2, type_name_BM2.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "bitmodule::BM2 already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BM2 =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "bitmodule::BM2", type_ids_BM2);
        if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::BM2: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

} // namespace bitmodule
void register_StructTest_type_identifier()
{
    {
        StructTypeFlag struct_flags_StructTest = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StructTest;
        TypeIdentifierPair type_ids_StructTest;
        return_code_StructTest =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "NewAliases", type_ids_StructTest);

        if (return_code_StructTest != eprosima::fastdds::dds::RETCODE_OK)
        {
            {
                StructTypeFlag struct_flags_NewAliases = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                        false, false);
                ReturnCode_t return_code_NewAliases;
                TypeIdentifierPair type_ids_NewAliases;
                QualifiedTypeName type_name_NewAliases = "NewAliases";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_NewAliases;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_NewAliases;
                CompleteTypeDetail detail_NewAliases = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_NewAliases, ann_custom_NewAliases, type_name_NewAliases.to_string());
                CompleteStructHeader header_NewAliases;
                header_NewAliases = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_NewAliases);
                CompleteStructMemberSeq member_seq_NewAliases;
                {
                    return_code_NewAliases =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int8_t", type_ids_NewAliases);

                    if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "int8_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_int8_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_int8_;
                    MemberId member_id_int8_ = 0x00000000;
                    if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_int8_ = TypeObjectUtils::build_common_struct_member(member_id_int8_, member_flags_int8_, type_ids_NewAliases.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_int8_ = TypeObjectUtils::build_common_struct_member(member_id_int8_, member_flags_int8_, type_ids_NewAliases.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure int8_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_int8_ = "int8_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int8_;
                    ann_custom_NewAliases.reset();
                    CompleteMemberDetail detail_int8_ = TypeObjectUtils::build_complete_member_detail(name_int8_, member_ann_builtin_int8_, ann_custom_NewAliases);
                    CompleteStructMember member_int8_ = TypeObjectUtils::build_complete_struct_member(common_int8_, detail_int8_);
                    TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_int8_);
                }
                {
                    return_code_NewAliases =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint8_t", type_ids_NewAliases);

                    if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "uint8_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_uint8_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_uint8_;
                    MemberId member_id_uint8_ = 0x00000001;
                    if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_uint8_ = TypeObjectUtils::build_common_struct_member(member_id_uint8_, member_flags_uint8_, type_ids_NewAliases.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_uint8_ = TypeObjectUtils::build_common_struct_member(member_id_uint8_, member_flags_uint8_, type_ids_NewAliases.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure uint8_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_uint8_ = "uint8_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_uint8_;
                    ann_custom_NewAliases.reset();
                    CompleteMemberDetail detail_uint8_ = TypeObjectUtils::build_complete_member_detail(name_uint8_, member_ann_builtin_uint8_, ann_custom_NewAliases);
                    CompleteStructMember member_uint8_ = TypeObjectUtils::build_complete_struct_member(common_uint8_, detail_uint8_);
                    TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_uint8_);
                }
                {
                    return_code_NewAliases =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int16_t", type_ids_NewAliases);

                    if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "int16_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_int16_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_int16_;
                    MemberId member_id_int16_ = 0x00000002;
                    if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_int16_ = TypeObjectUtils::build_common_struct_member(member_id_int16_, member_flags_int16_, type_ids_NewAliases.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_int16_ = TypeObjectUtils::build_common_struct_member(member_id_int16_, member_flags_int16_, type_ids_NewAliases.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure int16_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_int16_ = "int16_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int16_;
                    ann_custom_NewAliases.reset();
                    CompleteMemberDetail detail_int16_ = TypeObjectUtils::build_complete_member_detail(name_int16_, member_ann_builtin_int16_, ann_custom_NewAliases);
                    CompleteStructMember member_int16_ = TypeObjectUtils::build_complete_struct_member(common_int16_, detail_int16_);
                    TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_int16_);
                }
                {
                    return_code_NewAliases =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint16_t", type_ids_NewAliases);

                    if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "uint16_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_uint16_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_uint16_;
                    MemberId member_id_uint16_ = 0x00000003;
                    if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_uint16_ = TypeObjectUtils::build_common_struct_member(member_id_uint16_, member_flags_uint16_, type_ids_NewAliases.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_uint16_ = TypeObjectUtils::build_common_struct_member(member_id_uint16_, member_flags_uint16_, type_ids_NewAliases.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure uint16_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_uint16_ = "uint16_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_uint16_;
                    ann_custom_NewAliases.reset();
                    CompleteMemberDetail detail_uint16_ = TypeObjectUtils::build_complete_member_detail(name_uint16_, member_ann_builtin_uint16_, ann_custom_NewAliases);
                    CompleteStructMember member_uint16_ = TypeObjectUtils::build_complete_struct_member(common_uint16_, detail_uint16_);
                    TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_uint16_);
                }
                {
                    return_code_NewAliases =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_NewAliases);

                    if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "int32_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_int32_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_int32_;
                    MemberId member_id_int32_ = 0x00000004;
                    if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_int32_ = TypeObjectUtils::build_common_struct_member(member_id_int32_, member_flags_int32_, type_ids_NewAliases.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_int32_ = TypeObjectUtils::build_common_struct_member(member_id_int32_, member_flags_int32_, type_ids_NewAliases.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure int32_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_int32_ = "int32_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int32_;
                    ann_custom_NewAliases.reset();
                    CompleteMemberDetail detail_int32_ = TypeObjectUtils::build_complete_member_detail(name_int32_, member_ann_builtin_int32_, ann_custom_NewAliases);
                    CompleteStructMember member_int32_ = TypeObjectUtils::build_complete_struct_member(common_int32_, detail_int32_);
                    TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_int32_);
                }
                {
                    return_code_NewAliases =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint32_t", type_ids_NewAliases);

                    if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "uint32_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_uint32_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_uint32_;
                    MemberId member_id_uint32_ = 0x00000005;
                    if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_uint32_ = TypeObjectUtils::build_common_struct_member(member_id_uint32_, member_flags_uint32_, type_ids_NewAliases.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_uint32_ = TypeObjectUtils::build_common_struct_member(member_id_uint32_, member_flags_uint32_, type_ids_NewAliases.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure uint32_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_uint32_ = "uint32_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_uint32_;
                    ann_custom_NewAliases.reset();
                    CompleteMemberDetail detail_uint32_ = TypeObjectUtils::build_complete_member_detail(name_uint32_, member_ann_builtin_uint32_, ann_custom_NewAliases);
                    CompleteStructMember member_uint32_ = TypeObjectUtils::build_complete_struct_member(common_uint32_, detail_uint32_);
                    TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_uint32_);
                }
                {
                    return_code_NewAliases =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int64_t", type_ids_NewAliases);

                    if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "int64_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_int64_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_int64_;
                    MemberId member_id_int64_ = 0x00000006;
                    if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_int64_ = TypeObjectUtils::build_common_struct_member(member_id_int64_, member_flags_int64_, type_ids_NewAliases.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_int64_ = TypeObjectUtils::build_common_struct_member(member_id_int64_, member_flags_int64_, type_ids_NewAliases.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure int64_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_int64_ = "int64_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int64_;
                    ann_custom_NewAliases.reset();
                    CompleteMemberDetail detail_int64_ = TypeObjectUtils::build_complete_member_detail(name_int64_, member_ann_builtin_int64_, ann_custom_NewAliases);
                    CompleteStructMember member_int64_ = TypeObjectUtils::build_complete_struct_member(common_int64_, detail_int64_);
                    TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_int64_);
                }
                {
                    return_code_NewAliases =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint64_t", type_ids_NewAliases);

                    if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "uint64_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    StructMemberFlag member_flags_uint64_ = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_uint64_;
                    MemberId member_id_uint64_ = 0x00000007;
                    if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_uint64_ = TypeObjectUtils::build_common_struct_member(member_id_uint64_, member_flags_uint64_, type_ids_NewAliases.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_uint64_ = TypeObjectUtils::build_common_struct_member(member_id_uint64_, member_flags_uint64_, type_ids_NewAliases.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure uint64_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_uint64_ = "uint64_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_uint64_;
                    ann_custom_NewAliases.reset();
                    AppliedAnnotationSeq tmp_ann_custom_uint64_;
                    eprosima::fastcdr::optional<std::string> unit_uint64_;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min_uint64_;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max_uint64_;
                    eprosima::fastcdr::optional<std::string> hash_id_uint64_;
                    if (unit_uint64_.has_value() || min_uint64_.has_value() || max_uint64_.has_value() || hash_id_uint64_.has_value())
                    {
                        member_ann_builtin_uint64_ = TypeObjectUtils::build_applied_builtin_member_annotations(unit_uint64_, min_uint64_, max_uint64_, hash_id_uint64_);
                    }
                    if (!tmp_ann_custom_uint64_.empty())
                    {
                        ann_custom_NewAliases = tmp_ann_custom_uint64_;
                    }
                    CompleteMemberDetail detail_uint64_ = TypeObjectUtils::build_complete_member_detail(name_uint64_, member_ann_builtin_uint64_, ann_custom_NewAliases);
                    CompleteStructMember member_uint64_ = TypeObjectUtils::build_complete_struct_member(common_uint64_, detail_uint64_);
                    TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_uint64_);
                }
                {
                    return_code_NewAliases =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_unbounded", type_ids_NewAliases);

                    if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                        if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                        {
                            SBound bound = 0;
                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                    "anonymous_string_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                        {
                            LBound bound = 255;
                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                    "anonymous_string_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded: Unknown String kind.");
                            return;
                        }
                        return_code_NewAliases =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids_NewAliases);
                        if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    StructMemberFlag member_flags_local_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    CommonStructMember common_local_string;
                    MemberId member_id_local_string = 0x00000008;
                    if (EK_COMPLETE == type_ids_NewAliases.type_identifier1()._d() || TK_NONE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        common_local_string = TypeObjectUtils::build_common_struct_member(member_id_local_string, member_flags_local_string, type_ids_NewAliases.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_NewAliases.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_NewAliases.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_NewAliases.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        common_local_string = TypeObjectUtils::build_common_struct_member(member_id_local_string, member_flags_local_string, type_ids_NewAliases.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure local_string member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name_local_string = "local_string";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_local_string;
                    ann_custom_NewAliases.reset();
                    AppliedAnnotationSeq tmp_ann_custom_local_string;
                    eprosima::fastcdr::optional<std::string> unit_local_string;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min_local_string;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max_local_string;
                    eprosima::fastcdr::optional<std::string> hash_id_local_string;
                    if (unit_local_string.has_value() || min_local_string.has_value() || max_local_string.has_value() || hash_id_local_string.has_value())
                    {
                        member_ann_builtin_local_string = TypeObjectUtils::build_applied_builtin_member_annotations(unit_local_string, min_local_string, max_local_string, hash_id_local_string);
                    }
                    if (!tmp_ann_custom_local_string.empty())
                    {
                        ann_custom_NewAliases = tmp_ann_custom_local_string;
                    }
                    CompleteMemberDetail detail_local_string = TypeObjectUtils::build_complete_member_detail(name_local_string, member_ann_builtin_local_string, ann_custom_NewAliases);
                    CompleteStructMember member_local_string = TypeObjectUtils::build_complete_struct_member(common_local_string, detail_local_string);
                    TypeObjectUtils::add_complete_struct_member(member_seq_NewAliases, member_local_string);
                }
                CompleteStructType struct_type_NewAliases = TypeObjectUtils::build_complete_struct_type(struct_flags_NewAliases, header_NewAliases, member_seq_NewAliases);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_struct_type_object(struct_type_NewAliases, type_name_NewAliases.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "NewAliases already registered in TypeObjectRegistry for a different type.");
                }
                return_code_NewAliases =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "NewAliases", type_ids_NewAliases);
                if (return_code_NewAliases != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "NewAliases: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
        }
        QualifiedTypeName type_name_StructTest = "StructTest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StructTest;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StructTest;
        CompleteTypeDetail detail_StructTest = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StructTest, ann_custom_StructTest, type_name_StructTest.to_string());
        CompleteStructHeader header_StructTest;
        if (EK_COMPLETE == type_ids_StructTest.type_identifier1()._d() || TK_NONE == type_ids_StructTest.type_identifier1()._d())
        {
            header_StructTest = TypeObjectUtils::build_complete_struct_header(type_ids_StructTest.type_identifier1(), detail_StructTest);
        }
        else if (EK_COMPLETE == type_ids_StructTest.type_identifier2()._d())
        {
            header_StructTest = TypeObjectUtils::build_complete_struct_header(type_ids_StructTest.type_identifier2(), detail_StructTest);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructTest Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq_StructTest;
        {
            return_code_StructTest =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "OctetUnion", type_ids_StructTest);

            if (return_code_StructTest != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_OctetUnion;
                    TypeIdentifierPair type_ids_OctetUnion;
                    UnionTypeFlag union_flags_OctetUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_OctetUnion = "OctetUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_OctetUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_OctetUnion;
                    CompleteTypeDetail detail_OctetUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_OctetUnion, ann_custom_OctetUnion, type_name_OctetUnion.to_string());
                    CompleteUnionHeader header_OctetUnion = TypeObjectUtils::build_complete_union_header(detail_OctetUnion);
                    UnionDiscriminatorFlag member_flags_OctetUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_OctetUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_byte", type_ids_OctetUnion);

                    if (return_code_OctetUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_OctetUnion;
                    if (EK_COMPLETE == type_ids_OctetUnion.type_identifier1()._d() || TK_NONE == type_ids_OctetUnion.type_identifier2()._d())
                    {
                        common_OctetUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_OctetUnion, type_ids_OctetUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_OctetUnion.type_identifier2()._d())
                    {
                        common_OctetUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_OctetUnion, type_ids_OctetUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "OctetUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_OctetUnion.reset();
                    ann_custom_OctetUnion.reset();
                    CompleteDiscriminatorMember discriminator_OctetUnion = TypeObjectUtils::build_complete_discriminator_member(common_OctetUnion,
                            type_ann_builtin_OctetUnion, ann_custom_OctetUnion);
                    CompleteUnionMemberSeq member_seq_OctetUnion;
                    {
                        return_code_OctetUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_OctetUnion);

                        if (return_code_OctetUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "case_five Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_case_five = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_case_five;
                        TypeObjectUtils::add_union_case_label(label_seq_case_five, static_cast<int32_t>(5));
                        CommonUnionMember common_case_five;
                        MemberId member_id_case_five = 0x00000000;
                        if (EK_COMPLETE == type_ids_OctetUnion.type_identifier1()._d() || TK_NONE == type_ids_OctetUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_case_five = TypeObjectUtils::build_common_union_member(member_id_case_five, member_flags_case_five, type_ids_OctetUnion.type_identifier1(),
                                    label_seq_case_five);
                        }
                        else if (EK_COMPLETE == type_ids_OctetUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_case_five = TypeObjectUtils::build_common_union_member(member_id_case_five, member_flags_case_five, type_ids_OctetUnion.type_identifier2(),
                                    label_seq_case_five);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union case_five member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_case_five = "case_five";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_five;
                        ann_custom_OctetUnion.reset();
                        CompleteMemberDetail detail_case_five = TypeObjectUtils::build_complete_member_detail(name_case_five, member_ann_builtin_case_five, ann_custom_OctetUnion);
                        CompleteUnionMember member_case_five = TypeObjectUtils::build_complete_union_member(common_case_five, detail_case_five);
                        TypeObjectUtils::add_complete_union_member(member_seq_OctetUnion, member_case_five);
                    }
                    {
                        return_code_OctetUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_OctetUnion);

                        if (return_code_OctetUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "case_seven Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_case_seven = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_case_seven;
                        TypeObjectUtils::add_union_case_label(label_seq_case_seven, static_cast<int32_t>(7));
                        CommonUnionMember common_case_seven;
                        MemberId member_id_case_seven = 0x00000001;
                        if (EK_COMPLETE == type_ids_OctetUnion.type_identifier1()._d() || TK_NONE == type_ids_OctetUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_OctetUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_OctetUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_case_seven = TypeObjectUtils::build_common_union_member(member_id_case_seven, member_flags_case_seven, type_ids_OctetUnion.type_identifier1(),
                                    label_seq_case_seven);
                        }
                        else if (EK_COMPLETE == type_ids_OctetUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_OctetUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_OctetUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_OctetUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_case_seven = TypeObjectUtils::build_common_union_member(member_id_case_seven, member_flags_case_seven, type_ids_OctetUnion.type_identifier2(),
                                    label_seq_case_seven);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union case_seven member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_case_seven = "case_seven";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_seven;
                        ann_custom_OctetUnion.reset();
                        CompleteMemberDetail detail_case_seven = TypeObjectUtils::build_complete_member_detail(name_case_seven, member_ann_builtin_case_seven, ann_custom_OctetUnion);
                        CompleteUnionMember member_case_seven = TypeObjectUtils::build_complete_union_member(common_case_seven, detail_case_seven);
                        TypeObjectUtils::add_complete_union_member(member_seq_OctetUnion, member_case_seven);
                    }
                    CompleteUnionType union_type_OctetUnion = TypeObjectUtils::build_complete_union_type(union_flags_OctetUnion, header_OctetUnion, discriminator_OctetUnion,
                            member_seq_OctetUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_OctetUnion, type_name_OctetUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "OctetUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_OctetUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "OctetUnion", type_ids_OctetUnion);
                    if (return_code_OctetUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "OctetUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_octetUnion = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_octetUnion;
            MemberId member_id_octetUnion = 0x00000009;
            if (EK_COMPLETE == type_ids_StructTest.type_identifier1()._d() || TK_NONE == type_ids_StructTest.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructTest.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructTest.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_octetUnion = TypeObjectUtils::build_common_struct_member(member_id_octetUnion, member_flags_octetUnion, type_ids_StructTest.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructTest.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructTest.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructTest.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_octetUnion = TypeObjectUtils::build_common_struct_member(member_id_octetUnion, member_flags_octetUnion, type_ids_StructTest.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure octetUnion member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_octetUnion = "octetUnion";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_octetUnion;
            ann_custom_StructTest.reset();
            CompleteMemberDetail detail_octetUnion = TypeObjectUtils::build_complete_member_detail(name_octetUnion, member_ann_builtin_octetUnion, ann_custom_StructTest);
            CompleteStructMember member_octetUnion = TypeObjectUtils::build_complete_struct_member(common_octetUnion, detail_octetUnion);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructTest, member_octetUnion);
        }
        {
            return_code_StructTest =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Int8Union", type_ids_StructTest);

            if (return_code_StructTest != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_Int8Union;
                    TypeIdentifierPair type_ids_Int8Union;
                    UnionTypeFlag union_flags_Int8Union = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_Int8Union = "Int8Union";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_Int8Union;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_Int8Union;
                    CompleteTypeDetail detail_Int8Union = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_Int8Union, ann_custom_Int8Union, type_name_Int8Union.to_string());
                    CompleteUnionHeader header_Int8Union = TypeObjectUtils::build_complete_union_header(detail_Int8Union);
                    UnionDiscriminatorFlag member_flags_Int8Union = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_Int8Union =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int8_t", type_ids_Int8Union);

                    if (return_code_Int8Union != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_Int8Union;
                    if (EK_COMPLETE == type_ids_Int8Union.type_identifier1()._d() || TK_NONE == type_ids_Int8Union.type_identifier2()._d())
                    {
                        common_Int8Union = TypeObjectUtils::build_common_discriminator_member(member_flags_Int8Union, type_ids_Int8Union.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_Int8Union.type_identifier2()._d())
                    {
                        common_Int8Union = TypeObjectUtils::build_common_discriminator_member(member_flags_Int8Union, type_ids_Int8Union.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Int8Union discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_Int8Union.reset();
                    ann_custom_Int8Union.reset();
                    CompleteDiscriminatorMember discriminator_Int8Union = TypeObjectUtils::build_complete_discriminator_member(common_Int8Union,
                            type_ann_builtin_Int8Union, ann_custom_Int8Union);
                    CompleteUnionMemberSeq member_seq_Int8Union;
                    {
                        return_code_Int8Union =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_Int8Union);

                        if (return_code_Int8Union != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "case_three Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_case_three = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_case_three;
                        TypeObjectUtils::add_union_case_label(label_seq_case_three, static_cast<int32_t>(3));
                        CommonUnionMember common_case_three;
                        MemberId member_id_case_three = 0x00000000;
                        if (EK_COMPLETE == type_ids_Int8Union.type_identifier1()._d() || TK_NONE == type_ids_Int8Union.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_case_three = TypeObjectUtils::build_common_union_member(member_id_case_three, member_flags_case_three, type_ids_Int8Union.type_identifier1(),
                                    label_seq_case_three);
                        }
                        else if (EK_COMPLETE == type_ids_Int8Union.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_case_three = TypeObjectUtils::build_common_union_member(member_id_case_three, member_flags_case_three, type_ids_Int8Union.type_identifier2(),
                                    label_seq_case_three);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union case_three member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_case_three = "case_three";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_three;
                        ann_custom_Int8Union.reset();
                        CompleteMemberDetail detail_case_three = TypeObjectUtils::build_complete_member_detail(name_case_three, member_ann_builtin_case_three, ann_custom_Int8Union);
                        CompleteUnionMember member_case_three = TypeObjectUtils::build_complete_union_member(common_case_three, detail_case_three);
                        TypeObjectUtils::add_complete_union_member(member_seq_Int8Union, member_case_three);
                    }
                    {
                        return_code_Int8Union =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_Int8Union);

                        if (return_code_Int8Union != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "case_six Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_case_six = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_case_six;
                        TypeObjectUtils::add_union_case_label(label_seq_case_six, static_cast<int32_t>(6));
                        CommonUnionMember common_case_six;
                        MemberId member_id_case_six = 0x00000001;
                        if (EK_COMPLETE == type_ids_Int8Union.type_identifier1()._d() || TK_NONE == type_ids_Int8Union.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Int8Union.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Int8Union.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Int8Union.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_case_six = TypeObjectUtils::build_common_union_member(member_id_case_six, member_flags_case_six, type_ids_Int8Union.type_identifier1(),
                                    label_seq_case_six);
                        }
                        else if (EK_COMPLETE == type_ids_Int8Union.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_Int8Union.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_Int8Union.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_Int8Union.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_case_six = TypeObjectUtils::build_common_union_member(member_id_case_six, member_flags_case_six, type_ids_Int8Union.type_identifier2(),
                                    label_seq_case_six);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union case_six member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_case_six = "case_six";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_case_six;
                        ann_custom_Int8Union.reset();
                        CompleteMemberDetail detail_case_six = TypeObjectUtils::build_complete_member_detail(name_case_six, member_ann_builtin_case_six, ann_custom_Int8Union);
                        CompleteUnionMember member_case_six = TypeObjectUtils::build_complete_union_member(common_case_six, detail_case_six);
                        TypeObjectUtils::add_complete_union_member(member_seq_Int8Union, member_case_six);
                    }
                    CompleteUnionType union_type_Int8Union = TypeObjectUtils::build_complete_union_type(union_flags_Int8Union, header_Int8Union, discriminator_Int8Union,
                            member_seq_Int8Union);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_Int8Union, type_name_Int8Union.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Int8Union already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_Int8Union =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "Int8Union", type_ids_Int8Union);
                    if (return_code_Int8Union != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Int8Union: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_int8Union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_int8Union;
            MemberId member_id_int8Union = 0x0000000a;
            if (EK_COMPLETE == type_ids_StructTest.type_identifier1()._d() || TK_NONE == type_ids_StructTest.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructTest.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructTest.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_int8Union = TypeObjectUtils::build_common_struct_member(member_id_int8Union, member_flags_int8Union, type_ids_StructTest.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructTest.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructTest.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructTest.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_int8Union = TypeObjectUtils::build_common_struct_member(member_id_int8Union, member_flags_int8Union, type_ids_StructTest.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int8Union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_int8Union = "int8Union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_int8Union;
            ann_custom_StructTest.reset();
            CompleteMemberDetail detail_int8Union = TypeObjectUtils::build_complete_member_detail(name_int8Union, member_ann_builtin_int8Union, ann_custom_StructTest);
            CompleteStructMember member_int8Union = TypeObjectUtils::build_complete_struct_member(common_int8Union, detail_int8Union);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructTest, member_int8Union);
        }
        {
            return_code_StructTest =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "bitmodule::BM2", type_ids_StructTest);

            if (return_code_StructTest != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags_BM2 = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code_BM2;
                    TypeIdentifierPair type_ids_BM2;
                    return_code_BM2 =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "bitmodule::BitsetBitmask", type_ids_BM2);

                    if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        {
                            StructTypeFlag struct_flags_BitsetBitmask = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                                    false, false);
                            ReturnCode_t return_code_BitsetBitmask;
                            TypeIdentifierPair type_ids_BitsetBitmask;
                            QualifiedTypeName type_name_BitsetBitmask = "bitmodule::BitsetBitmask";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BitsetBitmask;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BitsetBitmask;
                            CompleteTypeDetail detail_BitsetBitmask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BitsetBitmask, ann_custom_BitsetBitmask, type_name_BitsetBitmask.to_string());
                            CompleteStructHeader header_BitsetBitmask;
                            header_BitsetBitmask = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BitsetBitmask);
                            CompleteStructMemberSeq member_seq_BitsetBitmask;
                            {
                                return_code_BitsetBitmask =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "bitmodule::MyBitset", type_ids_BitsetBitmask);

                                if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    BitsetTypeFlag bitset_flags_MyBitset = 0;
                                    QualifiedTypeName type_name_MyBitset = "bitmodule::MyBitset";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBitset;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBitset;
                                    CompleteTypeDetail detail_MyBitset = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBitset, ann_custom_MyBitset, type_name_MyBitset.to_string());
                                    CompleteBitsetHeader header_MyBitset = TypeObjectUtils::build_complete_bitset_header(detail_MyBitset);
                                    CompleteBitfieldSeq field_seq_MyBitset;
                                    {
                                        uint16_t position_a = 0;
                                        BitsetMemberFlag flags_a = 0;
                                        uint8_t bitcount_a = 3;
                                        TypeKind holder_type_a = TK_BYTE;
                                        CommonBitfield common_a = TypeObjectUtils::build_common_bitfield(position_a, flags_a, bitcount_a, holder_type_a);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_a;
                                        ann_custom_MyBitset.reset();
                                        MemberName name_a = "a";
                                        CompleteMemberDetail detail_a = TypeObjectUtils::build_complete_member_detail(name_a, member_ann_builtin_a, ann_custom_MyBitset);
                                        CompleteBitfield bitfield_a = TypeObjectUtils::build_complete_bitfield(common_a, detail_a);
                                        TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_a);
                                    }
                                    {
                                        uint16_t position_b = 3;
                                        BitsetMemberFlag flags_b = 0;
                                        uint8_t bitcount_b = 1;
                                        TypeKind holder_type_b = TK_BOOLEAN;
                                        CommonBitfield common_b = TypeObjectUtils::build_common_bitfield(position_b, flags_b, bitcount_b, holder_type_b);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_b;
                                        ann_custom_MyBitset.reset();
                                        MemberName name_b = "b";
                                        CompleteMemberDetail detail_b = TypeObjectUtils::build_complete_member_detail(name_b, member_ann_builtin_b, ann_custom_MyBitset);
                                        CompleteBitfield bitfield_b = TypeObjectUtils::build_complete_bitfield(common_b, detail_b);
                                        TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_b);
                                    }
                                    {
                                        uint16_t position_c = 8;
                                        BitsetMemberFlag flags_c = 0;
                                        uint8_t bitcount_c = 10;
                                        TypeKind holder_type_c = TK_UINT16;
                                        CommonBitfield common_c = TypeObjectUtils::build_common_bitfield(position_c, flags_c, bitcount_c, holder_type_c);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c;
                                        ann_custom_MyBitset.reset();
                                        MemberName name_c = "c";
                                        CompleteMemberDetail detail_c = TypeObjectUtils::build_complete_member_detail(name_c, member_ann_builtin_c, ann_custom_MyBitset);
                                        CompleteBitfield bitfield_c = TypeObjectUtils::build_complete_bitfield(common_c, detail_c);
                                        TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_c);
                                    }
                                    {
                                        uint16_t position_d = 18;
                                        BitsetMemberFlag flags_d = 0;
                                        uint8_t bitcount_d = 5;
                                        TypeKind holder_type_d = TK_INT16;
                                        CommonBitfield common_d = TypeObjectUtils::build_common_bitfield(position_d, flags_d, bitcount_d, holder_type_d);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_d;
                                        ann_custom_MyBitset.reset();
                                        MemberName name_d = "d";
                                        CompleteMemberDetail detail_d = TypeObjectUtils::build_complete_member_detail(name_d, member_ann_builtin_d, ann_custom_MyBitset);
                                        CompleteBitfield bitfield_d = TypeObjectUtils::build_complete_bitfield(common_d, detail_d);
                                        TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_d);
                                    }
                                    {
                                        uint16_t position_e = 23;
                                        BitsetMemberFlag flags_e = 0;
                                        uint8_t bitcount_e = 5;
                                        TypeKind holder_type_e = TK_INT16;
                                        CommonBitfield common_e = TypeObjectUtils::build_common_bitfield(position_e, flags_e, bitcount_e, holder_type_e);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_e;
                                        ann_custom_MyBitset.reset();
                                        MemberName name_e = "e";
                                        CompleteMemberDetail detail_e = TypeObjectUtils::build_complete_member_detail(name_e, member_ann_builtin_e, ann_custom_MyBitset);
                                        CompleteBitfield bitfield_e = TypeObjectUtils::build_complete_bitfield(common_e, detail_e);
                                        TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_e);
                                    }
                                    {
                                        uint16_t position_f = 28;
                                        BitsetMemberFlag flags_f = 0;
                                        uint8_t bitcount_f = 5;
                                        TypeKind holder_type_f = TK_INT16;
                                        CommonBitfield common_f = TypeObjectUtils::build_common_bitfield(position_f, flags_f, bitcount_f, holder_type_f);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_f;
                                        ann_custom_MyBitset.reset();
                                        MemberName name_f = "f";
                                        CompleteMemberDetail detail_f = TypeObjectUtils::build_complete_member_detail(name_f, member_ann_builtin_f, ann_custom_MyBitset);
                                        CompleteBitfield bitfield_f = TypeObjectUtils::build_complete_bitfield(common_f, detail_f);
                                        TypeObjectUtils::add_complete_bitfield(field_seq_MyBitset, bitfield_f);
                                    }
                                    CompleteBitsetType bitset_type_MyBitset = TypeObjectUtils::build_complete_bitset_type(bitset_flags_MyBitset, header_MyBitset, field_seq_MyBitset);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_bitset_type_object(bitset_type_MyBitset, type_name_MyBitset.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "bitmodule::MyBitset already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_BitsetBitmask =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "bitmodule::MyBitset", type_ids_BitsetBitmask);
                                    if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "bitmodule::MyBitset: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                StructMemberFlag member_flags_mybitset = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_mybitset;
                                MemberId member_id_mybitset = 0x00000000;
                                if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1()._d() || TK_NONE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_mybitset = TypeObjectUtils::build_common_struct_member(member_id_mybitset, member_flags_mybitset, type_ids_BitsetBitmask.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_mybitset = TypeObjectUtils::build_common_struct_member(member_id_mybitset, member_flags_mybitset, type_ids_BitsetBitmask.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure mybitset member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_mybitset = "mybitset";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mybitset;
                                ann_custom_BitsetBitmask.reset();
                                CompleteMemberDetail detail_mybitset = TypeObjectUtils::build_complete_member_detail(name_mybitset, member_ann_builtin_mybitset, ann_custom_BitsetBitmask);
                                CompleteStructMember member_mybitset = TypeObjectUtils::build_complete_struct_member(common_mybitset, detail_mybitset);
                                TypeObjectUtils::add_complete_struct_member(member_seq_BitsetBitmask, member_mybitset);
                            }
                            {
                                return_code_BitsetBitmask =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "bitmodule::MyBitMask", type_ids_BitsetBitmask);

                                if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    BitmaskTypeFlag bitmask_flags_MyBitMask = 0;
                                    BitBound bit_bound_MyBitMask = 8;
                                    CommonEnumeratedHeader common_MyBitMask = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyBitMask, true);
                                    QualifiedTypeName type_name_MyBitMask = "bitmodule::MyBitMask";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBitMask;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBitMask;
                                    AppliedAnnotationSeq tmp_ann_custom_MyBitMask;
                                    eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_MyBitMask;
                                    if (!tmp_ann_custom_MyBitMask.empty())
                                    {
                                        ann_custom_MyBitMask = tmp_ann_custom_MyBitMask;
                                    }

                                    CompleteTypeDetail detail_MyBitMask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBitMask, ann_custom_MyBitMask, type_name_MyBitMask.to_string());
                                    CompleteEnumeratedHeader header_MyBitMask = TypeObjectUtils::build_complete_enumerated_header(common_MyBitMask, detail_MyBitMask, true);
                                    CompleteBitflagSeq flag_seq_MyBitMask;
                                    {
                                        uint16_t position_flag0 = 0;
                                        BitflagFlag flags_flag0 = 0;
                                        CommonBitflag common_flag0 = TypeObjectUtils::build_common_bitflag(position_flag0, flags_flag0);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag0;
                                        ann_custom_MyBitMask.reset();
                                        AppliedAnnotationSeq tmp_ann_custom_flag0;
                                        if (!tmp_ann_custom_flag0.empty())
                                        {
                                            ann_custom_MyBitMask = tmp_ann_custom_flag0;
                                        }
                                        MemberName name_flag0 = "flag0";
                                        CompleteMemberDetail detail_flag0 = TypeObjectUtils::build_complete_member_detail(name_flag0, member_ann_builtin_flag0, ann_custom_MyBitMask);
                                        CompleteBitflag bitflag_flag0 = TypeObjectUtils::build_complete_bitflag(common_flag0, detail_flag0);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag0);
                                    }
                                    {
                                        uint16_t position_flag1 = 1;
                                        BitflagFlag flags_flag1 = 0;
                                        CommonBitflag common_flag1 = TypeObjectUtils::build_common_bitflag(position_flag1, flags_flag1);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag1;
                                        ann_custom_MyBitMask.reset();
                                        AppliedAnnotationSeq tmp_ann_custom_flag1;
                                        if (!tmp_ann_custom_flag1.empty())
                                        {
                                            ann_custom_MyBitMask = tmp_ann_custom_flag1;
                                        }
                                        MemberName name_flag1 = "flag1";
                                        CompleteMemberDetail detail_flag1 = TypeObjectUtils::build_complete_member_detail(name_flag1, member_ann_builtin_flag1, ann_custom_MyBitMask);
                                        CompleteBitflag bitflag_flag1 = TypeObjectUtils::build_complete_bitflag(common_flag1, detail_flag1);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag1);
                                    }
                                    {
                                        uint16_t position_flag4 = 4;
                                        BitflagFlag flags_flag4 = 0;
                                        CommonBitflag common_flag4 = TypeObjectUtils::build_common_bitflag(position_flag4, flags_flag4);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag4;
                                        ann_custom_MyBitMask.reset();
                                        AppliedAnnotationSeq tmp_ann_custom_flag4;
                                        if (!tmp_ann_custom_flag4.empty())
                                        {
                                            ann_custom_MyBitMask = tmp_ann_custom_flag4;
                                        }
                                        MemberName name_flag4 = "flag4";
                                        CompleteMemberDetail detail_flag4 = TypeObjectUtils::build_complete_member_detail(name_flag4, member_ann_builtin_flag4, ann_custom_MyBitMask);
                                        CompleteBitflag bitflag_flag4 = TypeObjectUtils::build_complete_bitflag(common_flag4, detail_flag4);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag4);
                                    }
                                    {
                                        uint16_t position_flag6 = 6;
                                        BitflagFlag flags_flag6 = 0;
                                        CommonBitflag common_flag6 = TypeObjectUtils::build_common_bitflag(position_flag6, flags_flag6);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag6;
                                        ann_custom_MyBitMask.reset();
                                        AppliedAnnotationSeq tmp_ann_custom_flag6;
                                        if (!tmp_ann_custom_flag6.empty())
                                        {
                                            ann_custom_MyBitMask = tmp_ann_custom_flag6;
                                        }
                                        MemberName name_flag6 = "flag6";
                                        CompleteMemberDetail detail_flag6 = TypeObjectUtils::build_complete_member_detail(name_flag6, member_ann_builtin_flag6, ann_custom_MyBitMask);
                                        CompleteBitflag bitflag_flag6 = TypeObjectUtils::build_complete_bitflag(common_flag6, detail_flag6);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag6);
                                    }
                                    {
                                        uint16_t position_flag7 = 7;
                                        BitflagFlag flags_flag7 = 0;
                                        CommonBitflag common_flag7 = TypeObjectUtils::build_common_bitflag(position_flag7, flags_flag7);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag7;
                                        ann_custom_MyBitMask.reset();
                                        MemberName name_flag7 = "flag7";
                                        CompleteMemberDetail detail_flag7 = TypeObjectUtils::build_complete_member_detail(name_flag7, member_ann_builtin_flag7, ann_custom_MyBitMask);
                                        CompleteBitflag bitflag_flag7 = TypeObjectUtils::build_complete_bitflag(common_flag7, detail_flag7);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag7);
                                    }
                                    CompleteBitmaskType bitmask_type_MyBitMask = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags_MyBitMask, header_MyBitMask, flag_seq_MyBitMask);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type_MyBitMask, type_name_MyBitMask.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code_BitsetBitmask =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "bitmodule::MyBitMask", type_ids_BitsetBitmask);
                                    if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                StructMemberFlag member_flags_mybitmask = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                CommonStructMember common_mybitmask;
                                MemberId member_id_mybitmask = 0x00000001;
                                if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1()._d() || TK_NONE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier1()._d() &&
                                        (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier1().map_ldefn().key_identifier()->_d())))
                                {
                                    common_mybitmask = TypeObjectUtils::build_common_struct_member(member_id_mybitmask, member_flags_mybitmask, type_ids_BitsetBitmask.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids_BitsetBitmask.type_identifier2()._d() &&
                                        (EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().header().equiv_kind() ||
                                        EK_COMPLETE == type_ids_BitsetBitmask.type_identifier2().map_ldefn().key_identifier()->_d())))
                                {
                                    common_mybitmask = TypeObjectUtils::build_common_struct_member(member_id_mybitmask, member_flags_mybitmask, type_ids_BitsetBitmask.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure mybitmask member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name_mybitmask = "mybitmask";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mybitmask;
                                ann_custom_BitsetBitmask.reset();
                                CompleteMemberDetail detail_mybitmask = TypeObjectUtils::build_complete_member_detail(name_mybitmask, member_ann_builtin_mybitmask, ann_custom_BitsetBitmask);
                                CompleteStructMember member_mybitmask = TypeObjectUtils::build_complete_struct_member(common_mybitmask, detail_mybitmask);
                                TypeObjectUtils::add_complete_struct_member(member_seq_BitsetBitmask, member_mybitmask);
                            }
                            CompleteStructType struct_type_BitsetBitmask = TypeObjectUtils::build_complete_struct_type(struct_flags_BitsetBitmask, header_BitsetBitmask, member_seq_BitsetBitmask);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type_BitsetBitmask, type_name_BitsetBitmask.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "bitmodule::BitsetBitmask already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_BitsetBitmask =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "bitmodule::BitsetBitmask", type_ids_BitsetBitmask);
                            if (return_code_BitsetBitmask != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "bitmodule::BitsetBitmask: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                    }
                    QualifiedTypeName type_name_BM2 = "bitmodule::BM2";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BM2;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BM2;
                    CompleteTypeDetail detail_BM2 = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BM2, ann_custom_BM2, type_name_BM2.to_string());
                    CompleteStructHeader header_BM2;
                    if (EK_COMPLETE == type_ids_BM2.type_identifier1()._d() || TK_NONE == type_ids_BM2.type_identifier1()._d())
                    {
                        header_BM2 = TypeObjectUtils::build_complete_struct_header(type_ids_BM2.type_identifier1(), detail_BM2);
                    }
                    else if (EK_COMPLETE == type_ids_BM2.type_identifier2()._d())
                    {
                        header_BM2 = TypeObjectUtils::build_complete_struct_header(type_ids_BM2.type_identifier2(), detail_BM2);
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::BM2 Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
                        return;
                    }
                    CompleteStructMemberSeq member_seq_BM2;
                    {
                        return_code_BM2 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "bitmodule::MyBitMask", type_ids_BM2);

                        if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            BitmaskTypeFlag bitmask_flags_MyBitMask = 0;
                            BitBound bit_bound_MyBitMask = 8;
                            CommonEnumeratedHeader common_MyBitMask = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyBitMask, true);
                            QualifiedTypeName type_name_MyBitMask = "bitmodule::MyBitMask";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBitMask;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBitMask;
                            AppliedAnnotationSeq tmp_ann_custom_MyBitMask;
                            eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim_MyBitMask;
                            if (!tmp_ann_custom_MyBitMask.empty())
                            {
                                ann_custom_MyBitMask = tmp_ann_custom_MyBitMask;
                            }

                            CompleteTypeDetail detail_MyBitMask = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBitMask, ann_custom_MyBitMask, type_name_MyBitMask.to_string());
                            CompleteEnumeratedHeader header_MyBitMask = TypeObjectUtils::build_complete_enumerated_header(common_MyBitMask, detail_MyBitMask, true);
                            CompleteBitflagSeq flag_seq_MyBitMask;
                            {
                                uint16_t position_flag0 = 0;
                                BitflagFlag flags_flag0 = 0;
                                CommonBitflag common_flag0 = TypeObjectUtils::build_common_bitflag(position_flag0, flags_flag0);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag0;
                                ann_custom_MyBitMask.reset();
                                AppliedAnnotationSeq tmp_ann_custom_flag0;
                                if (!tmp_ann_custom_flag0.empty())
                                {
                                    ann_custom_MyBitMask = tmp_ann_custom_flag0;
                                }
                                MemberName name_flag0 = "flag0";
                                CompleteMemberDetail detail_flag0 = TypeObjectUtils::build_complete_member_detail(name_flag0, member_ann_builtin_flag0, ann_custom_MyBitMask);
                                CompleteBitflag bitflag_flag0 = TypeObjectUtils::build_complete_bitflag(common_flag0, detail_flag0);
                                TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag0);
                            }
                            {
                                uint16_t position_flag1 = 1;
                                BitflagFlag flags_flag1 = 0;
                                CommonBitflag common_flag1 = TypeObjectUtils::build_common_bitflag(position_flag1, flags_flag1);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag1;
                                ann_custom_MyBitMask.reset();
                                AppliedAnnotationSeq tmp_ann_custom_flag1;
                                if (!tmp_ann_custom_flag1.empty())
                                {
                                    ann_custom_MyBitMask = tmp_ann_custom_flag1;
                                }
                                MemberName name_flag1 = "flag1";
                                CompleteMemberDetail detail_flag1 = TypeObjectUtils::build_complete_member_detail(name_flag1, member_ann_builtin_flag1, ann_custom_MyBitMask);
                                CompleteBitflag bitflag_flag1 = TypeObjectUtils::build_complete_bitflag(common_flag1, detail_flag1);
                                TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag1);
                            }
                            {
                                uint16_t position_flag4 = 4;
                                BitflagFlag flags_flag4 = 0;
                                CommonBitflag common_flag4 = TypeObjectUtils::build_common_bitflag(position_flag4, flags_flag4);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag4;
                                ann_custom_MyBitMask.reset();
                                AppliedAnnotationSeq tmp_ann_custom_flag4;
                                if (!tmp_ann_custom_flag4.empty())
                                {
                                    ann_custom_MyBitMask = tmp_ann_custom_flag4;
                                }
                                MemberName name_flag4 = "flag4";
                                CompleteMemberDetail detail_flag4 = TypeObjectUtils::build_complete_member_detail(name_flag4, member_ann_builtin_flag4, ann_custom_MyBitMask);
                                CompleteBitflag bitflag_flag4 = TypeObjectUtils::build_complete_bitflag(common_flag4, detail_flag4);
                                TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag4);
                            }
                            {
                                uint16_t position_flag6 = 6;
                                BitflagFlag flags_flag6 = 0;
                                CommonBitflag common_flag6 = TypeObjectUtils::build_common_bitflag(position_flag6, flags_flag6);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag6;
                                ann_custom_MyBitMask.reset();
                                AppliedAnnotationSeq tmp_ann_custom_flag6;
                                if (!tmp_ann_custom_flag6.empty())
                                {
                                    ann_custom_MyBitMask = tmp_ann_custom_flag6;
                                }
                                MemberName name_flag6 = "flag6";
                                CompleteMemberDetail detail_flag6 = TypeObjectUtils::build_complete_member_detail(name_flag6, member_ann_builtin_flag6, ann_custom_MyBitMask);
                                CompleteBitflag bitflag_flag6 = TypeObjectUtils::build_complete_bitflag(common_flag6, detail_flag6);
                                TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag6);
                            }
                            {
                                uint16_t position_flag7 = 7;
                                BitflagFlag flags_flag7 = 0;
                                CommonBitflag common_flag7 = TypeObjectUtils::build_common_bitflag(position_flag7, flags_flag7);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_flag7;
                                ann_custom_MyBitMask.reset();
                                MemberName name_flag7 = "flag7";
                                CompleteMemberDetail detail_flag7 = TypeObjectUtils::build_complete_member_detail(name_flag7, member_ann_builtin_flag7, ann_custom_MyBitMask);
                                CompleteBitflag bitflag_flag7 = TypeObjectUtils::build_complete_bitflag(common_flag7, detail_flag7);
                                TypeObjectUtils::add_complete_bitflag(flag_seq_MyBitMask, bitflag_flag7);
                            }
                            CompleteBitmaskType bitmask_type_MyBitMask = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags_MyBitMask, header_MyBitMask, flag_seq_MyBitMask);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type_MyBitMask, type_name_MyBitMask.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code_BM2 =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "bitmodule::MyBitMask", type_ids_BM2);
                            if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        StructMemberFlag member_flags_two = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_two;
                        MemberId member_id_two = 0x00000002;
                        if (EK_COMPLETE == type_ids_BM2.type_identifier1()._d() || TK_NONE == type_ids_BM2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_BM2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_BM2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_BM2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_BM2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_BM2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_BM2.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_BM2.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_BM2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_BM2.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_BM2.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_two = TypeObjectUtils::build_common_struct_member(member_id_two, member_flags_two, type_ids_BM2.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_BM2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_BM2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_BM2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_BM2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_BM2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_BM2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_BM2.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_BM2.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_BM2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_BM2.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_BM2.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_two = TypeObjectUtils::build_common_struct_member(member_id_two, member_flags_two, type_ids_BM2.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure two member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_two = "two";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_two;
                        ann_custom_BM2.reset();
                        CompleteMemberDetail detail_two = TypeObjectUtils::build_complete_member_detail(name_two, member_ann_builtin_two, ann_custom_BM2);
                        CompleteStructMember member_two = TypeObjectUtils::build_complete_struct_member(common_two, detail_two);
                        TypeObjectUtils::add_complete_struct_member(member_seq_BM2, member_two);
                    }
                    {
                        return_code_BM2 =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_BM2);

                        if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "mylong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        StructMemberFlag member_flags_mylong = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        CommonStructMember common_mylong;
                        MemberId member_id_mylong = 0x00000003;
                        if (EK_COMPLETE == type_ids_BM2.type_identifier1()._d() || TK_NONE == type_ids_BM2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_BM2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_BM2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_BM2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_BM2.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_BM2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_BM2.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_BM2.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_BM2.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_BM2.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_BM2.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_mylong = TypeObjectUtils::build_common_struct_member(member_id_mylong, member_flags_mylong, type_ids_BM2.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids_BM2.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_BM2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_BM2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_BM2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_BM2.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_BM2.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_BM2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_BM2.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_BM2.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_BM2.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_BM2.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_BM2.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_mylong = TypeObjectUtils::build_common_struct_member(member_id_mylong, member_flags_mylong, type_ids_BM2.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure mylong member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_mylong = "mylong";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_mylong;
                        ann_custom_BM2.reset();
                        CompleteMemberDetail detail_mylong = TypeObjectUtils::build_complete_member_detail(name_mylong, member_ann_builtin_mylong, ann_custom_BM2);
                        CompleteStructMember member_mylong = TypeObjectUtils::build_complete_struct_member(common_mylong, detail_mylong);
                        TypeObjectUtils::add_complete_struct_member(member_seq_BM2, member_mylong);
                    }
                    CompleteStructType struct_type_BM2 = TypeObjectUtils::build_complete_struct_type(struct_flags_BM2, header_BM2, member_seq_BM2);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type_BM2, type_name_BM2.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::BM2 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_BM2 =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "bitmodule::BM2", type_ids_BM2);
                    if (return_code_BM2 != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "bitmodule::BM2: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_myStructBits = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_myStructBits;
            MemberId member_id_myStructBits = 0x0000000b;
            if (EK_COMPLETE == type_ids_StructTest.type_identifier1()._d() || TK_NONE == type_ids_StructTest.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructTest.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructTest.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructTest.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_myStructBits = TypeObjectUtils::build_common_struct_member(member_id_myStructBits, member_flags_myStructBits, type_ids_StructTest.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StructTest.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StructTest.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StructTest.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StructTest.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StructTest.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StructTest.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_myStructBits = TypeObjectUtils::build_common_struct_member(member_id_myStructBits, member_flags_myStructBits, type_ids_StructTest.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure myStructBits member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_myStructBits = "myStructBits";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_myStructBits;
            ann_custom_StructTest.reset();
            CompleteMemberDetail detail_myStructBits = TypeObjectUtils::build_complete_member_detail(name_myStructBits, member_ann_builtin_myStructBits, ann_custom_StructTest);
            CompleteStructMember member_myStructBits = TypeObjectUtils::build_complete_struct_member(common_myStructBits, detail_myStructBits);
            TypeObjectUtils::add_complete_struct_member(member_seq_StructTest, member_myStructBits);
        }
        CompleteStructType struct_type_StructTest = TypeObjectUtils::build_complete_struct_type(struct_flags_StructTest, header_StructTest, member_seq_StructTest);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StructTest, type_name_StructTest.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructTest already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StructTest =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructTest", type_ids_StructTest);
        if (return_code_StructTest != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructTest: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

