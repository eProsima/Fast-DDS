// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file new_features_4_2TypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "new_features_4_2TypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/dynamic_types/Types.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>


using namespace eprosima::fastdds::dds::xtypes;

void register_new_features_4_2_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_NewAliases_type_identifier();

                register_WCharUnion_type_identifier();

                register_OctetUnion_type_identifier();

                register_Int8Union_type_identifier();

                bitmodule::register_bitmodule_BitsetBitmask_type_identifier();

                bitmodule::register_bitmodule_BM2_type_identifier();

                register_StructTest_type_identifier();

            });
}

void register_NewAliases_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "NewAliases";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int8_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "int8_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int8_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "int8_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint8_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "uint8_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure uint8_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "uint8_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int16_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "int16_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int16_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "int16_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint16_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "uint16_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000003;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure uint16_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "uint16_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "int32_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000004;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int32_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "int32_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "uint32_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000005;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure uint32_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "uint32_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "int64_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000006;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int64_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "int64_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "uint64_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000007;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure uint64_ member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "uint64_";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind("TI_STRING8_SMALL");
                if (type_id_kind == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000008;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure local_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "local_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            AppliedAnnotationSeq tmp_ann_custom;
            eprosima::fastcdr::optional<std::string> unit;
            eprosima::fastcdr::optional<AnnotationParameterValue> min;
            eprosima::fastcdr::optional<AnnotationParameterValue> max;
            eprosima::fastcdr::optional<std::string> hash_id;
            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
            {
                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
            }
            if (!tmp_ann_custom.empty())
            {
                ann_custom = tmp_ann_custom;
            }
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "NewAliases already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "NewAliases", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "NewAliases: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_WCharUnion_type_identifier()
{
    {
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name = "WCharUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
        UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(TryConstructKind::NOT_APPLIED,
                false);
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_wchar_t", type_ids);

        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common;
        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WCharUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin.reset();
        ann_custom.reset();
        CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                type_ann_builtin, ann_custom);
        CompleteUnionMemberSeq member_seq;
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_zero Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>('a'));
            CommonUnionMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_zero member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "case_zero";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_one Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>('b'));
            CommonUnionMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_one member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "case_one";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WCharUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "WCharUnion", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "WCharUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_OctetUnion_type_identifier()
{
    {
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name = "OctetUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
        UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(TryConstructKind::NOT_APPLIED,
                false);
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_byte", type_ids);

        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common;
        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OctetUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin.reset();
        ann_custom.reset();
        CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                type_ann_builtin, ann_custom);
        CompleteUnionMemberSeq member_seq;
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_five Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(5));
            CommonUnionMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_five member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "case_five";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_seven Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(7));
            CommonUnionMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_seven member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "case_seven";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "OctetUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "OctetUnion", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "OctetUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_Int8Union_type_identifier()
{
    {
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name = "Int8Union";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
        UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(TryConstructKind::NOT_APPLIED,
                false);
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int8_t", type_ids);

        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common;
        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Int8Union discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin.reset();
        ann_custom.reset();
        CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                type_ann_builtin, ann_custom);
        CompleteUnionMemberSeq member_seq;
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_three Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(3));
            CommonUnionMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_three member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "case_three";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "case_six Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(6));
            CommonUnionMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union case_six member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "case_six";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Int8Union already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "Int8Union", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Int8Union: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
namespace bitmodule {
void register_bitmodule_BitsetBitmask_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "bitmodule::BitsetBitmask";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "bitmodule::MyBitset", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                BitsetTypeFlag bitset_flags = 0;
                QualifiedTypeName type_name = "bitmodule::MyBitset";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteBitsetHeader header = TypeObjectUtils::build_complete_bitset_header(detail);
                CompleteBitfieldSeq field_seq;
                {
                    uint16_t position = 0;
                    BitsetMemberFlag flags = 0;
                    uint8_t bitcount = 3;
                    TypeKind holder_type = TK_BYTE;
                    CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "a";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                    TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                }
                {
                    uint16_t position = 3;
                    BitsetMemberFlag flags = 0;
                    uint8_t bitcount = 1;
                    TypeKind holder_type = TK_BOOLEAN;
                    CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "b";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                    TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                }
                {
                    uint16_t position = 8;
                    BitsetMemberFlag flags = 0;
                    uint8_t bitcount = 10;
                    TypeKind holder_type = TK_UINT16;
                    CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "c";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                    TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                }
                {
                    uint16_t position = 18;
                    BitsetMemberFlag flags = 0;
                    uint8_t bitcount = 5;
                    TypeKind holder_type = TK_INT16;
                    CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "d";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                    TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                }
                {
                    uint16_t position = 23;
                    BitsetMemberFlag flags = 0;
                    uint8_t bitcount = 5;
                    TypeKind holder_type = TK_INT16;
                    CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "e";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                    TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                }
                {
                    uint16_t position = 28;
                    BitsetMemberFlag flags = 0;
                    uint8_t bitcount = 5;
                    TypeKind holder_type = TK_INT16;
                    CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "f";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                    TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                }
                CompleteBitsetType bitset_type = TypeObjectUtils::build_complete_bitset_type(bitset_flags, header, field_seq);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_bitset_type_object(bitset_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::MyBitset already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "bitmodule::MyBitset", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitset: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure mybitset member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "mybitset";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "bitmodule::MyBitMask", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                BitmaskTypeFlag bitmask_flags = 0;
                BitBound bit_bound = 8;
                CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound, true);
                QualifiedTypeName type_name = "bitmodule::MyBitMask";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                AppliedAnnotationSeq tmp_ann_custom;
                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                if (!tmp_ann_custom.empty())
                {
                    ann_custom = tmp_ann_custom;
                }

                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail, true);
                CompleteBitflagSeq flag_seq;
                {
                    uint16_t position = 0;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    MemberName name = "flag0";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                {
                    uint16_t position = 1;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    MemberName name = "flag1";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                {
                    uint16_t position = 4;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    MemberName name = "flag4";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                {
                    uint16_t position = 6;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    MemberName name = "flag6";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                {
                    uint16_t position = 7;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "flag7";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                CompleteBitmaskType bitmask_type = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags, header, flag_seq);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "bitmodule::MyBitMask", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure mybitmask member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "mybitmask";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "bitmodule::BitsetBitmask already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "bitmodule::BitsetBitmask", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::BitsetBitmask: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_bitmodule_BM2_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "bitmodule::BitsetBitmask", type_ids);

        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            {
                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                        false, false);
                ReturnCode_t return_code;
                TypeIdentifierPair type_ids;
                QualifiedTypeName type_name = "bitmodule::BitsetBitmask";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteStructHeader header;
                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                CompleteStructMemberSeq member_seq;
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "bitmodule::MyBitset", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        BitsetTypeFlag bitset_flags = 0;
                        QualifiedTypeName type_name = "bitmodule::MyBitset";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                        CompleteBitsetHeader header = TypeObjectUtils::build_complete_bitset_header(detail);
                        CompleteBitfieldSeq field_seq;
                        {
                            uint16_t position = 0;
                            BitsetMemberFlag flags = 0;
                            uint8_t bitcount = 3;
                            TypeKind holder_type = TK_BYTE;
                            CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "a";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                            TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                        }
                        {
                            uint16_t position = 3;
                            BitsetMemberFlag flags = 0;
                            uint8_t bitcount = 1;
                            TypeKind holder_type = TK_BOOLEAN;
                            CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "b";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                            TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                        }
                        {
                            uint16_t position = 8;
                            BitsetMemberFlag flags = 0;
                            uint8_t bitcount = 10;
                            TypeKind holder_type = TK_UINT16;
                            CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "c";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                            TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                        }
                        {
                            uint16_t position = 18;
                            BitsetMemberFlag flags = 0;
                            uint8_t bitcount = 5;
                            TypeKind holder_type = TK_INT16;
                            CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "d";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                            TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                        }
                        {
                            uint16_t position = 23;
                            BitsetMemberFlag flags = 0;
                            uint8_t bitcount = 5;
                            TypeKind holder_type = TK_INT16;
                            CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "e";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                            TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                        }
                        {
                            uint16_t position = 28;
                            BitsetMemberFlag flags = 0;
                            uint8_t bitcount = 5;
                            TypeKind holder_type = TK_INT16;
                            CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "f";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                            TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                        }
                        CompleteBitsetType bitset_type = TypeObjectUtils::build_complete_bitset_type(bitset_flags, header, field_seq);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_bitset_type_object(bitset_type, type_name.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitset already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "bitmodule::MyBitset", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "bitmodule::MyBitset: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000000;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure mybitset member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "mybitset";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "bitmodule::MyBitMask", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        BitmaskTypeFlag bitmask_flags = 0;
                        BitBound bit_bound = 8;
                        CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound, true);
                        QualifiedTypeName type_name = "bitmodule::MyBitMask";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                        AppliedAnnotationSeq tmp_ann_custom;
                        eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                        if (!tmp_ann_custom.empty())
                        {
                            ann_custom = tmp_ann_custom;
                        }

                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                        CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail, true);
                        CompleteBitflagSeq flag_seq;
                        {
                            uint16_t position = 0;
                            BitflagFlag flags = 0;
                            CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            AppliedAnnotationSeq tmp_ann_custom;
                            eprosima::fastcdr::optional<std::string> unit;
                            eprosima::fastcdr::optional<AnnotationParameterValue> min;
                            eprosima::fastcdr::optional<AnnotationParameterValue> max;
                            eprosima::fastcdr::optional<std::string> hash_id;
                            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                            {
                                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                            }
                            if (!tmp_ann_custom.empty())
                            {
                                ann_custom = tmp_ann_custom;
                            }
                            MemberName name = "flag0";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                            TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                        }
                        {
                            uint16_t position = 1;
                            BitflagFlag flags = 0;
                            CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            AppliedAnnotationSeq tmp_ann_custom;
                            eprosima::fastcdr::optional<std::string> unit;
                            eprosima::fastcdr::optional<AnnotationParameterValue> min;
                            eprosima::fastcdr::optional<AnnotationParameterValue> max;
                            eprosima::fastcdr::optional<std::string> hash_id;
                            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                            {
                                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                            }
                            if (!tmp_ann_custom.empty())
                            {
                                ann_custom = tmp_ann_custom;
                            }
                            MemberName name = "flag1";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                            TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                        }
                        {
                            uint16_t position = 4;
                            BitflagFlag flags = 0;
                            CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            AppliedAnnotationSeq tmp_ann_custom;
                            eprosima::fastcdr::optional<std::string> unit;
                            eprosima::fastcdr::optional<AnnotationParameterValue> min;
                            eprosima::fastcdr::optional<AnnotationParameterValue> max;
                            eprosima::fastcdr::optional<std::string> hash_id;
                            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                            {
                                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                            }
                            if (!tmp_ann_custom.empty())
                            {
                                ann_custom = tmp_ann_custom;
                            }
                            MemberName name = "flag4";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                            TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                        }
                        {
                            uint16_t position = 6;
                            BitflagFlag flags = 0;
                            CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            AppliedAnnotationSeq tmp_ann_custom;
                            eprosima::fastcdr::optional<std::string> unit;
                            eprosima::fastcdr::optional<AnnotationParameterValue> min;
                            eprosima::fastcdr::optional<AnnotationParameterValue> max;
                            eprosima::fastcdr::optional<std::string> hash_id;
                            if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                            {
                                member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                            }
                            if (!tmp_ann_custom.empty())
                            {
                                ann_custom = tmp_ann_custom;
                            }
                            MemberName name = "flag6";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                            TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                        }
                        {
                            uint16_t position = 7;
                            BitflagFlag flags = 0;
                            CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "flag7";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                            TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                        }
                        CompleteBitmaskType bitmask_type = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags, header, flag_seq);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type, type_name.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "bitmodule::MyBitMask", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000001;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure mybitmask member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "mybitmask";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "bitmodule::BitsetBitmask already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "bitmodule::BitsetBitmask", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::BitsetBitmask: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
        }
        TypeObjectPair type_objects;
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_objects(
            "bitmodule::BitsetBitmask", type_objects);

        QualifiedTypeName type_name = "bitmodule::BM2";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier1()._d())
        {
            header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier1(), detail);
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier2(), detail);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "bitmodule::BM2 Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "bitmodule::MyBitMask", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                BitmaskTypeFlag bitmask_flags = 0;
                BitBound bit_bound = 8;
                CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound, true);
                QualifiedTypeName type_name = "bitmodule::MyBitMask";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                AppliedAnnotationSeq tmp_ann_custom;
                eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                if (!tmp_ann_custom.empty())
                {
                    ann_custom = tmp_ann_custom;
                }

                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail, true);
                CompleteBitflagSeq flag_seq;
                {
                    uint16_t position = 0;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    MemberName name = "flag0";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                {
                    uint16_t position = 1;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    MemberName name = "flag1";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                {
                    uint16_t position = 4;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    MemberName name = "flag4";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                {
                    uint16_t position = 6;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    MemberName name = "flag6";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                {
                    uint16_t position = 7;
                    BitflagFlag flags = 0;
                    CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "flag7";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                    TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                }
                CompleteBitmaskType bitmask_type = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags, header, flag_seq);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "bitmodule::MyBitMask", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure two member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "two";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "mylong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            CommonStructMember common;
            MemberId member_id = 0x00000003;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure mylong member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "mylong";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "bitmodule::BM2 already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "bitmodule::BM2", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "bitmodule::BM2: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

} // namespace bitmodule
void register_StructTest_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "NewAliases", type_ids);

        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            {
                StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                        false, false);
                ReturnCode_t return_code;
                TypeIdentifierPair type_ids;
                QualifiedTypeName type_name = "NewAliases";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteStructHeader header;
                header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                CompleteStructMemberSeq member_seq;
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int8_t", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "int8_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000000;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure int8_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "int8_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint8_t", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "uint8_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000001;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure uint8_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "uint8_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int16_t", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "int16_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000002;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure int16_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "int16_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint16_t", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "uint16_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000003;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure uint16_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "uint16_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "int32_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000004;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure int32_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "int32_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint32_t", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "uint32_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000005;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure uint32_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "uint32_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int64_t", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "int64_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000006;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure int64_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "int64_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_uint64_t", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "uint64_ Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000007;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure uint64_ member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "uint64_";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                {
                    StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                            false, false, false, false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_string_unbounded", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        std::string type_id_kind("TI_STRING8_SMALL");
                        if (type_id_kind == "TI_STRING8_SMALL")
                        {
                            SBound bound = 0;
                            StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                                    "anonymous_string_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else if (type_id_kind == "TI_STRING8_LARGE")
                        {
                            LBound bound = 255;
                            StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                                    "anonymous_string_unbounded"))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                            }
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded: Unknown String kind.");
                            return;
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "anonymous_string_unbounded", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonStructMember common;
                    MemberId member_id = 0x00000008;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                    {
                        common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Structure local_string member TypeIdentifier inconsistent.");
                        return;
                    }
                    MemberName name = "local_string";
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    AppliedAnnotationSeq tmp_ann_custom;
                    eprosima::fastcdr::optional<std::string> unit;
                    eprosima::fastcdr::optional<AnnotationParameterValue> min;
                    eprosima::fastcdr::optional<AnnotationParameterValue> max;
                    eprosima::fastcdr::optional<std::string> hash_id;
                    if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                    {
                        member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                    }
                    if (!tmp_ann_custom.empty())
                    {
                        ann_custom = tmp_ann_custom;
                    }
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                    TypeObjectUtils::add_complete_struct_member(member_seq, member);
                }
                CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "NewAliases already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "NewAliases", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "NewAliases: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
        }
        TypeObjectPair type_objects;
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_objects(
            "NewAliases", type_objects);

        QualifiedTypeName type_name = "StructTest";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier1()._d())
        {
            header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier1(), detail);
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier2(), detail);
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructTest Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
            return;
        }
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "OctetUnion", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name = "OctetUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
                    UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(TryConstructKind::NOT_APPLIED,
                            false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_byte", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "OctetUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin.reset();
                    ann_custom.reset();
                    CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                            type_ann_builtin, ann_custom);
                    CompleteUnionMemberSeq member_seq;
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "case_five Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(5));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union case_five member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "case_five";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "case_seven Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(7));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union case_seven member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "case_seven";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                            member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "OctetUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "OctetUnion", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "OctetUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000009;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure octetUnion member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "octetUnion";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "Int8Union", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name = "Int8Union";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
                    UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(TryConstructKind::NOT_APPLIED,
                            false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int8_t", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Int8Union discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin.reset();
                    ann_custom.reset();
                    CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                            type_ann_builtin, ann_custom);
                    CompleteUnionMemberSeq member_seq;
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "case_three Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(3));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union case_three member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "case_three";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "case_six Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(6));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union case_six member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "case_six";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                            member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Int8Union already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "Int8Union", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Int8Union: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000a;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure int8Union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "int8Union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "bitmodule::BM2", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "bitmodule::BitsetBitmask", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        {
                            StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(ExtensibilityKind::NOT_APPLIED,
                                    false, false);
                            ReturnCode_t return_code;
                            TypeIdentifierPair type_ids;
                            QualifiedTypeName type_name = "bitmodule::BitsetBitmask";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                            CompleteStructHeader header;
                            header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
                            CompleteStructMemberSeq member_seq;
                            {
                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "bitmodule::MyBitset", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    BitsetTypeFlag bitset_flags = 0;
                                    QualifiedTypeName type_name = "bitmodule::MyBitset";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                    CompleteBitsetHeader header = TypeObjectUtils::build_complete_bitset_header(detail);
                                    CompleteBitfieldSeq field_seq;
                                    {
                                        uint16_t position = 0;
                                        BitsetMemberFlag flags = 0;
                                        uint8_t bitcount = 3;
                                        TypeKind holder_type = TK_BYTE;
                                        CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "a";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                                        TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                                    }
                                    {
                                        uint16_t position = 3;
                                        BitsetMemberFlag flags = 0;
                                        uint8_t bitcount = 1;
                                        TypeKind holder_type = TK_BOOLEAN;
                                        CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "b";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                                        TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                                    }
                                    {
                                        uint16_t position = 8;
                                        BitsetMemberFlag flags = 0;
                                        uint8_t bitcount = 10;
                                        TypeKind holder_type = TK_UINT16;
                                        CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "c";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                                        TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                                    }
                                    {
                                        uint16_t position = 18;
                                        BitsetMemberFlag flags = 0;
                                        uint8_t bitcount = 5;
                                        TypeKind holder_type = TK_INT16;
                                        CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "d";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                                        TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                                    }
                                    {
                                        uint16_t position = 23;
                                        BitsetMemberFlag flags = 0;
                                        uint8_t bitcount = 5;
                                        TypeKind holder_type = TK_INT16;
                                        CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "e";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                                        TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                                    }
                                    {
                                        uint16_t position = 28;
                                        BitsetMemberFlag flags = 0;
                                        uint8_t bitcount = 5;
                                        TypeKind holder_type = TK_INT16;
                                        CommonBitfield common = TypeObjectUtils::build_common_bitfield(position, flags, bitcount, holder_type);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "f";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitfield bitfield = TypeObjectUtils::build_complete_bitfield(common, detail);
                                        TypeObjectUtils::add_complete_bitfield(field_seq, bitfield);
                                    }
                                    CompleteBitsetType bitset_type = TypeObjectUtils::build_complete_bitset_type(bitset_flags, header, field_seq);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_bitset_type_object(bitset_type, type_name.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "bitmodule::MyBitset already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "bitmodule::MyBitset", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "bitmodule::MyBitset: Given Bitset TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonStructMember common;
                                MemberId member_id = 0x00000000;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure mybitset member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name = "mybitset";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                            }
                            {
                                StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                        false, false, false, false);
                                return_code =
                                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                    "bitmodule::MyBitMask", type_ids);

                                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                {
                                    BitmaskTypeFlag bitmask_flags = 0;
                                    BitBound bit_bound = 8;
                                    CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound, true);
                                    QualifiedTypeName type_name = "bitmodule::MyBitMask";
                                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                                    AppliedAnnotationSeq tmp_ann_custom;
                                    eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                                    if (!tmp_ann_custom.empty())
                                    {
                                        ann_custom = tmp_ann_custom;
                                    }

                                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                                    CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail, true);
                                    CompleteBitflagSeq flag_seq;
                                    {
                                        uint16_t position = 0;
                                        BitflagFlag flags = 0;
                                        CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        AppliedAnnotationSeq tmp_ann_custom;
                                        eprosima::fastcdr::optional<std::string> unit;
                                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                                        eprosima::fastcdr::optional<std::string> hash_id;
                                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                                        {
                                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                                        }
                                        if (!tmp_ann_custom.empty())
                                        {
                                            ann_custom = tmp_ann_custom;
                                        }
                                        MemberName name = "flag0";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                                    }
                                    {
                                        uint16_t position = 1;
                                        BitflagFlag flags = 0;
                                        CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        AppliedAnnotationSeq tmp_ann_custom;
                                        eprosima::fastcdr::optional<std::string> unit;
                                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                                        eprosima::fastcdr::optional<std::string> hash_id;
                                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                                        {
                                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                                        }
                                        if (!tmp_ann_custom.empty())
                                        {
                                            ann_custom = tmp_ann_custom;
                                        }
                                        MemberName name = "flag1";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                                    }
                                    {
                                        uint16_t position = 4;
                                        BitflagFlag flags = 0;
                                        CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        AppliedAnnotationSeq tmp_ann_custom;
                                        eprosima::fastcdr::optional<std::string> unit;
                                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                                        eprosima::fastcdr::optional<std::string> hash_id;
                                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                                        {
                                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                                        }
                                        if (!tmp_ann_custom.empty())
                                        {
                                            ann_custom = tmp_ann_custom;
                                        }
                                        MemberName name = "flag4";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                                    }
                                    {
                                        uint16_t position = 6;
                                        BitflagFlag flags = 0;
                                        CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        AppliedAnnotationSeq tmp_ann_custom;
                                        eprosima::fastcdr::optional<std::string> unit;
                                        eprosima::fastcdr::optional<AnnotationParameterValue> min;
                                        eprosima::fastcdr::optional<AnnotationParameterValue> max;
                                        eprosima::fastcdr::optional<std::string> hash_id;
                                        if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                                        {
                                            member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                                        }
                                        if (!tmp_ann_custom.empty())
                                        {
                                            ann_custom = tmp_ann_custom;
                                        }
                                        MemberName name = "flag6";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                                    }
                                    {
                                        uint16_t position = 7;
                                        BitflagFlag flags = 0;
                                        CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                        ann_custom.reset();
                                        MemberName name = "flag7";
                                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                        CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                        TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                                    }
                                    CompleteBitmaskType bitmask_type = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags, header, flag_seq);
                                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                            TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type, type_name.to_string()))
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                                    }
                                    return_code =
                                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                        "bitmodule::MyBitMask", type_ids);
                                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                                    {
                                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                                    "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                        return;
                                    }
                                }
                                CommonStructMember common;
                                MemberId member_id = 0x00000001;
                                if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                                }
                                else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                        (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                        (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                        EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                                {
                                    common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                                }
                                else
                                {
                                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "Structure mybitmask member TypeIdentifier inconsistent.");
                                    return;
                                }
                                MemberName name = "mybitmask";
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                                TypeObjectUtils::add_complete_struct_member(member_seq, member);
                            }
                            CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "bitmodule::BitsetBitmask already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "bitmodule::BitsetBitmask", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "bitmodule::BitsetBitmask: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                    }
                    TypeObjectPair type_objects;
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_objects(
                        "bitmodule::BitsetBitmask", type_objects);

                    QualifiedTypeName type_name = "bitmodule::BM2";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteStructHeader header;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier1()._d())
                    {
                        header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier1(), detail);
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
                    {
                        header = TypeObjectUtils::build_complete_struct_header(type_ids.type_identifier2(), detail);
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::BM2 Structure: base_type TypeIdentifier registered in TypeObjectRegistry is inconsistent.");
                        return;
                    }
                    CompleteStructMemberSeq member_seq;
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "bitmodule::MyBitMask", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            BitmaskTypeFlag bitmask_flags = 0;
                            BitBound bit_bound = 8;
                            CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound, true);
                            QualifiedTypeName type_name = "bitmodule::MyBitMask";
                            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                            AppliedAnnotationSeq tmp_ann_custom;
                            eprosima::fastcdr::optional<AppliedVerbatimAnnotation> verbatim;
                            if (!tmp_ann_custom.empty())
                            {
                                ann_custom = tmp_ann_custom;
                            }

                            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                            CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail, true);
                            CompleteBitflagSeq flag_seq;
                            {
                                uint16_t position = 0;
                                BitflagFlag flags = 0;
                                CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                AppliedAnnotationSeq tmp_ann_custom;
                                eprosima::fastcdr::optional<std::string> unit;
                                eprosima::fastcdr::optional<AnnotationParameterValue> min;
                                eprosima::fastcdr::optional<AnnotationParameterValue> max;
                                eprosima::fastcdr::optional<std::string> hash_id;
                                if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                                {
                                    member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                                }
                                if (!tmp_ann_custom.empty())
                                {
                                    ann_custom = tmp_ann_custom;
                                }
                                MemberName name = "flag0";
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                            }
                            {
                                uint16_t position = 1;
                                BitflagFlag flags = 0;
                                CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                AppliedAnnotationSeq tmp_ann_custom;
                                eprosima::fastcdr::optional<std::string> unit;
                                eprosima::fastcdr::optional<AnnotationParameterValue> min;
                                eprosima::fastcdr::optional<AnnotationParameterValue> max;
                                eprosima::fastcdr::optional<std::string> hash_id;
                                if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                                {
                                    member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                                }
                                if (!tmp_ann_custom.empty())
                                {
                                    ann_custom = tmp_ann_custom;
                                }
                                MemberName name = "flag1";
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                            }
                            {
                                uint16_t position = 4;
                                BitflagFlag flags = 0;
                                CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                AppliedAnnotationSeq tmp_ann_custom;
                                eprosima::fastcdr::optional<std::string> unit;
                                eprosima::fastcdr::optional<AnnotationParameterValue> min;
                                eprosima::fastcdr::optional<AnnotationParameterValue> max;
                                eprosima::fastcdr::optional<std::string> hash_id;
                                if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                                {
                                    member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                                }
                                if (!tmp_ann_custom.empty())
                                {
                                    ann_custom = tmp_ann_custom;
                                }
                                MemberName name = "flag4";
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                            }
                            {
                                uint16_t position = 6;
                                BitflagFlag flags = 0;
                                CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                AppliedAnnotationSeq tmp_ann_custom;
                                eprosima::fastcdr::optional<std::string> unit;
                                eprosima::fastcdr::optional<AnnotationParameterValue> min;
                                eprosima::fastcdr::optional<AnnotationParameterValue> max;
                                eprosima::fastcdr::optional<std::string> hash_id;
                                if (unit.has_value() || min.has_value() || max.has_value() || hash_id.has_value())
                                {
                                    member_ann_builtin = TypeObjectUtils::build_applied_builtin_member_annotations(unit, min, max, hash_id);
                                }
                                if (!tmp_ann_custom.empty())
                                {
                                    ann_custom = tmp_ann_custom;
                                }
                                MemberName name = "flag6";
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                            }
                            {
                                uint16_t position = 7;
                                BitflagFlag flags = 0;
                                CommonBitflag common = TypeObjectUtils::build_common_bitflag(position, flags);
                                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                                ann_custom.reset();
                                MemberName name = "flag7";
                                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                                CompleteBitflag bitflag = TypeObjectUtils::build_complete_bitflag(common, detail);
                                TypeObjectUtils::add_complete_bitflag(flag_seq, bitflag);
                            }
                            CompleteBitmaskType bitmask_type = TypeObjectUtils::build_complete_bitmask_type(bitmask_flags, header, flag_seq);
                            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                    TypeObjectUtils::build_and_register_bitmask_type_object(bitmask_type, type_name.to_string()))
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "bitmodule::MyBitMask already registered in TypeObjectRegistry for a different type.");
                            }
                            return_code =
                                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                                "bitmodule::MyBitMask", type_ids);
                            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                            {
                                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                            "bitmodule::MyBitMask: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                                return;
                            }
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure two member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "two";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    {
                        StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(TryConstructKind::NOT_APPLIED,
                                false, false, false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "mylong Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        CommonStructMember common;
                        MemberId member_id = 0x00000003;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
                        {
                            common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Structure mylong member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "mylong";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
                        TypeObjectUtils::add_complete_struct_member(member_seq, member);
                    }
                    CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "bitmodule::BM2 already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "bitmodule::BM2", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "bitmodule::BM2: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x0000000b;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind()))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure myStructBits member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "myStructBits";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StructTest already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StructTest", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StructTest: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

