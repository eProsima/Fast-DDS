# Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if(NOT ((MSVC OR MSVC_IDE) AND EPROSIMA_INSTALLER))
    include(${PROJECT_SOURCE_DIR}/cmake/common/gtest.cmake)
    check_gtest()

    if(GTEST_FOUND)
        if(WIN32)
            add_definitions(
                -D_WIN32_WINNT=0x0601
                -D_CRT_SECURE_NO_WARNINGS
                )
        endif()

        include_directories(${ASIO_INCLUDE_DIR})

        set(UDPV4TESTS_SOURCE
            UDPv4Tests.cpp
            mock/MockReceiverResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPFinder.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/Log.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/StdoutConsumer.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/UDPv4Transport.cpp
			${PROJECT_SOURCE_DIR}/src/cpp/transport/UDPTransportInterface.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/ChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/UDPChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/NetworkFactory.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/SenderResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPFinder.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPLocator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/eClock.cpp
        )

        set(UDPV6TESTS_SOURCE
            UDPv6Tests.cpp
            mock/MockReceiverResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPFinder.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/Log.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/StdoutConsumer.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/UDPv6Transport.cpp
			${PROJECT_SOURCE_DIR}/src/cpp/transport/UDPTransportInterface.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/ChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/UDPChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/NetworkFactory.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/SenderResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPFinder.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPLocator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/eClock.cpp
        )

        set(TCPV4TESTS_SOURCE
            TCPv4Tests.cpp
            mock/MockReceiverResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/messages/RTPSMessageCreator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/messages/CDRMessagePool.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/Log.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/StdoutConsumer.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/qos/ParameterList.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/qos/QosPolicies.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/qos/ParameterTypes.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPFinder.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPLocator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/eClock.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/test_TCPv4Transport.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/TCPv4Transport.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/TCPTransportInterface.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/ChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/TCPChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/tcp/RTCPMessageManager.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/tcp/test_RTCPMessageManager.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/tcp/TCPControlMessage.cxx
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/timedevent/CleanTCPSocketsEvent.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/NetworkFactory.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/SenderResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/messages/RTPSMessageCreator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/resources/TimedEvent.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/resources/TimedEventImpl.cpp
        )

        set(TCPV6TESTS_SOURCE
            TCPv6Tests.cpp
            mock/MockReceiverResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/messages/RTPSMessageCreator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/messages/CDRMessagePool.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/Log.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/StdoutConsumer.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/qos/ParameterList.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/qos/QosPolicies.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/qos/ParameterTypes.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPFinder.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPLocator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/eClock.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/TCPv6Transport.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/TCPTransportInterface.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/ChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/TCPChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/tcp/RTCPMessageManager.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/tcp/TCPControlMessage.cxx
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/timedevent/CleanTCPSocketsEvent.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/NetworkFactory.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/SenderResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/resources/TimedEvent.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/resources/TimedEventImpl.cpp
        )

        set(TEST_UDPV4TESTS_SOURCE
            test_UDPv4Tests.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/messages/RTPSMessageCreator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/messages/CDRMessagePool.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/Log.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/log/StdoutConsumer.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/qos/ParameterList.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/qos/QosPolicies.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/qos/ParameterTypes.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPFinder.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/IPLocator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/eClock.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/test_UDPv4Transport.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/UDPv4Transport.cpp
			${PROJECT_SOURCE_DIR}/src/cpp/transport/UDPTransportInterface.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/ChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/transport/UDPChannelResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/NetworkFactory.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/rtps/network/SenderResource.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/AnnotationDescriptor.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicData.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicDataFactory.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicType.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicPubSubType.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicTypePtr.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicDataPtr.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicTypeBuilder.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicTypeBuilderPtr.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicTypeBuilderFactory.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/DynamicTypeMember.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/TypeDescriptor.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/MemberDescriptor.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/AnnotationParameterValue.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/TypeIdentifier.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/TypeIdentifierTypes.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/TypeObject.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/TypeObjectFactory.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/TypeObjectHashId.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/TypeNamesGenerator.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/types/TypesBase.cpp
            ${PROJECT_SOURCE_DIR}/src/cpp/utils/md5.cpp
        )

        include_directories(mock/)

        add_executable(UDPv4Tests ${UDPV4TESTS_SOURCE})
        target_compile_definitions(UDPv4Tests PRIVATE FASTRTPS_NO_LIB)
        target_include_directories(UDPv4Tests PRIVATE
            ${GTEST_INCLUDE_DIRS} ${GMOCK_INCLUDE_DIRS}
            ${PROJECT_SOURCE_DIR}/test/mock/rtps/MessageReceiver
            ${PROJECT_SOURCE_DIR}/test/mock/rtps/ReceiverResource
            ${PROJECT_SOURCE_DIR}/include ${PROJECT_BINARY_DIR}/include)
        target_link_libraries(UDPv4Tests ${GTEST_LIBRARIES} ${MOCKS})
        if(MSVC OR MSVC_IDE)
            target_link_libraries(UDPv4Tests ${PRIVACY} iphlpapi Shlwapi )
        endif()
        add_gtest(UDPv4Tests SOURCES ${UDPV4TESTS_SOURCE})

        option(DISABLE_UDPV6_TESTS "Disable UDPv6 tests because fails in some systems" OFF)

        if(NOT DISABLE_UDPV6_TESTS)
            add_executable(UDPv6Tests ${UDPV6TESTS_SOURCE})
            target_compile_definitions(UDPv6Tests PRIVATE FASTRTPS_NO_LIB)
            target_include_directories(UDPv6Tests PRIVATE
                ${GTEST_INCLUDE_DIRS} ${GMOCK_INCLUDE_DIRS}
                ${PROJECT_SOURCE_DIR}/test/mock/rtps/MessageReceiver
                ${PROJECT_SOURCE_DIR}/test/mock/rtps/ReceiverResource
                ${PROJECT_SOURCE_DIR}/include ${PROJECT_BINARY_DIR}/include)
            target_link_libraries(UDPv6Tests ${GTEST_LIBRARIES} ${MOCKS})
            if(MSVC OR MSVC_IDE)
                target_link_libraries(UDPv6Tests ${PRIVACY} iphlpapi Shlwapi )
            endif()
            add_gtest(UDPv6Tests SOURCES ${UDPV6TESTS_SOURCE})

            add_executable(TCPv6Tests ${TCPV6TESTS_SOURCE})
            add_gtest(TCPv6Tests ${TCPV6TESTS_SOURCE})
            target_compile_definitions(TCPv6Tests PRIVATE FASTRTPS_NO_LIB)
            target_include_directories(TCPv6Tests PRIVATE
                ${GTEST_INCLUDE_DIRS} ${GMOCK_INCLUDE_DIRS}
                ${PROJECT_SOURCE_DIR}/test/mock/rtps/MessageReceiver
                ${PROJECT_SOURCE_DIR}/test/mock/rtps/ReceiverResource
                ${PROJECT_SOURCE_DIR}/include ${PROJECT_BINARY_DIR}/include)
            target_link_libraries(TCPv6Tests ${GTEST_LIBRARIES} ${MOCKS})
            if(MSVC OR MSVC_IDE)
                target_link_libraries(TCPv6Tests ${PRIVACY} fastcdr iphlpapi Shlwapi)
            else()
                target_link_libraries(TCPv6Tests ${PRIVACY} fastcdr)
            endif()
        endif()

        add_executable(test_UDPv4Tests ${TEST_UDPV4TESTS_SOURCE})
        target_compile_definitions(test_UDPv4Tests PRIVATE FASTRTPS_NO_LIB)
        target_include_directories(test_UDPv4Tests PRIVATE
            ${GTEST_INCLUDE_DIRS} ${GMOCK_INCLUDE_DIRS}
            ${PROJECT_SOURCE_DIR}/test/mock/rtps/MessageReceiver
            ${PROJECT_SOURCE_DIR}/test/mock/rtps/ReceiverResource
            ${PROJECT_SOURCE_DIR}/include ${PROJECT_BINARY_DIR}/include)
        target_link_libraries(test_UDPv4Tests ${GTEST_LIBRARIES} ${MOCKS})
        if(MSVC OR MSVC_IDE)
            target_link_libraries(test_UDPv4Tests ${PRIVACY} fastcdr_static iphlpapi Shlwapi)
        else()
            target_link_libraries(test_UDPv4Tests ${PRIVACY} fastcdr)
        endif()

        add_executable(TCPv4Tests ${TCPV4TESTS_SOURCE})
        add_gtest(TCPv4Tests ${TCPV4TESTS_SOURCE})
        target_compile_definitions(TCPv4Tests PRIVATE FASTRTPS_NO_LIB)
        target_include_directories(TCPv4Tests PRIVATE
            ${GTEST_INCLUDE_DIRS} ${GMOCK_INCLUDE_DIRS}
            ${PROJECT_SOURCE_DIR}/test/mock/rtps/MessageReceiver
            ${PROJECT_SOURCE_DIR}/test/mock/rtps/ReceiverResource
            ${PROJECT_SOURCE_DIR}/include ${PROJECT_BINARY_DIR}/include)
        target_link_libraries(TCPv4Tests ${GTEST_LIBRARIES} ${MOCKS})
        if(MSVC OR MSVC_IDE)
            target_link_libraries(TCPv4Tests ${PRIVACY} fastcdr iphlpapi Shlwapi)
        else()
            target_link_libraries(TCPv4Tests ${PRIVACY} fastcdr)
        endif()

        add_gtest(test_UDPv4Tests SOURCES ${TEST_UDPV4TESTS_SOURCE})
    endif()
endif()
