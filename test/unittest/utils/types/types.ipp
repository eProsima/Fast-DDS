// Copyright 2022 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @file types.hpp
 *
 */

#ifndef _EPROSIMA_FASTDDS_EXAMPLES_CPP_DDS_TYPEINTROSPECTIONEXAMPLE_TYPES_TYPES_IPP_
#define _EPROSIMA_FASTDDS_EXAMPLES_CPP_DDS_TYPEINTROSPECTIONEXAMPLE_TYPES_TYPES_IPP_

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/xtypes/dynamic_types/DynamicPubSubType.hpp>
#include <fastdds/dds/xtypes/dynamic_types/DynamicTypeBuilder.hpp>
#include <fastdds/dds/xtypes/dynamic_types/DynamicTypeBuilderFactory.hpp>
#include <fastdds/dds/xtypes/type_representation/detail/dds_xtypes_typeobject.hpp>

template <DataTypeKind Data>
DataType<Data>::DataType()
{
}

template <DataTypeKind Data>
std::string DataType<Data>::name() const
{
    // This method is generic to avoid implementing the same code for each Generator
    // because C++ does not allow partial specialization of methods.
    switch (Data)
    {
        case DataTypeKind::HELLO_WORLD:
            return HELLO_WORLD_DATA_TYPE_NAME;

        case DataTypeKind::DATA_TEST:
            return DATA_TEST_DATA_TYPE_NAME;

        default:
            throw std::runtime_error("Unsupported data type");
    }
}

template <DataTypeKind Data>
void DataType<Data>::register_type_object_representation() const
{
    register_type_object_representation_gen<Data>();
}

template <DataTypeKind Data>
eprosima::fastdds::dds::DynamicType::_ref_type DataType<Data>::generate_type_support_and_get_dyn_type() const
{
    // Register using method from Fast DDS Gen autogenerated code
    register_type_object_representation_gen<Data>();

    eprosima::fastdds::dds::xtypes::TypeObjectPair type_object_pair;
    if (eprosima::fastdds::dds::RETCODE_OK != eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_objects(
                DATA_TEST_DATA_TYPE_NAME, type_object_pair))

    {
        std::cout << "ERROR" << std::endl;
        return nullptr;
    }

    // Create DynamicType
    auto type_builder = eprosima::fastdds::dds::DynamicTypeBuilderFactory::get_instance()->create_type_w_type_object(type_object_pair.complete_type_object);
    eprosima::fastdds::dds::DynamicType::_ref_type dynamic_type = type_builder->build();

    return dynamic_type;
}

#endif /* _EPROSIMA_FASTDDS_EXAMPLES_CPP_DDS_TYPEINTROSPECTIONEXAMPLE_TYPES_TYPES_IPP_ */
