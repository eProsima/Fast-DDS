// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Types.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_TYPES_HPP_
#define _FAST_DDS_GENERATED_TYPES_HPP_

#include <array>
#include <cstdint>
#include <map>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/exceptions/BadParamException.h>


#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(TYPES_SOURCE)
#define TYPES_DllAPI __declspec( dllexport )
#else
#define TYPES_DllAPI __declspec( dllimport )
#endif // TYPES_SOURCE
#else
#define TYPES_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define TYPES_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the enumeration MyEnum defined by the user in the IDL file.
 * @ingroup Types
 */
enum class MyEnum : uint32_t
{
    A,
    B,
    C
};
/*!
 * @brief This class represents the enumeration MyBadEnum defined by the user in the IDL file.
 * @ingroup Types
 */
enum class MyBadEnum : uint32_t
{
    A1,
    B1,
    C1
};
/*!
 * @brief This class represents the structure MyEnumStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class MyEnumStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MyEnumStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MyEnumStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MyEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyEnumStruct(
            const MyEnumStruct& x)
    {
                    m_my_enum = x.m_my_enum;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MyEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyEnumStruct(
            MyEnumStruct&& x) noexcept
    {
        m_my_enum = x.m_my_enum;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MyEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyEnumStruct& operator =(
            const MyEnumStruct& x)
    {

                    m_my_enum = x.m_my_enum;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MyEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyEnumStruct& operator =(
            MyEnumStruct&& x) noexcept
    {

        m_my_enum = x.m_my_enum;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MyEnumStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MyEnumStruct& x) const
    {
        return (m_my_enum == x.m_my_enum);
    }

    /*!
     * @brief Comparison operator.
     * @param x MyEnumStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MyEnumStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member my_enum
     * @param _my_enum New value for member my_enum
     */
    eProsima_user_DllExport void my_enum(
            MyEnum _my_enum)
    {
        m_my_enum = _my_enum;
    }

    /*!
     * @brief This function returns the value of member my_enum
     * @return Value of member my_enum
     */
    eProsima_user_DllExport MyEnum my_enum() const
    {
        return m_my_enum;
    }

    /*!
     * @brief This function returns a reference to member my_enum
     * @return Reference to member my_enum
     */
    eProsima_user_DllExport MyEnum& my_enum()
    {
        return m_my_enum;
    }



private:

    MyEnum m_my_enum{MyEnum::A};

};
/*!
 * @brief This class represents the structure MyBadEnumStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class MyBadEnumStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MyBadEnumStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MyBadEnumStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MyBadEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyBadEnumStruct(
            const MyBadEnumStruct& x)
    {
                    m_my_enum = x.m_my_enum;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MyBadEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyBadEnumStruct(
            MyBadEnumStruct&& x) noexcept
    {
        m_my_enum = x.m_my_enum;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MyBadEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyBadEnumStruct& operator =(
            const MyBadEnumStruct& x)
    {

                    m_my_enum = x.m_my_enum;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MyBadEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyBadEnumStruct& operator =(
            MyBadEnumStruct&& x) noexcept
    {

        m_my_enum = x.m_my_enum;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MyBadEnumStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MyBadEnumStruct& x) const
    {
        return (m_my_enum == x.m_my_enum);
    }

    /*!
     * @brief Comparison operator.
     * @param x MyBadEnumStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MyBadEnumStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member my_enum
     * @param _my_enum New value for member my_enum
     */
    eProsima_user_DllExport void my_enum(
            MyBadEnum _my_enum)
    {
        m_my_enum = _my_enum;
    }

    /*!
     * @brief This function returns the value of member my_enum
     * @return Value of member my_enum
     */
    eProsima_user_DllExport MyBadEnum my_enum() const
    {
        return m_my_enum;
    }

    /*!
     * @brief This function returns a reference to member my_enum
     * @return Reference to member my_enum
     */
    eProsima_user_DllExport MyBadEnum& my_enum()
    {
        return m_my_enum;
    }



private:

    MyBadEnum m_my_enum{MyBadEnum::A1};

};
typedef MyEnum MyAliasEnum;

/*!
 * @brief This class represents the structure MyAliasEnumStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class MyAliasEnumStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MyAliasEnumStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MyAliasEnumStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MyAliasEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyAliasEnumStruct(
            const MyAliasEnumStruct& x)
    {
                    m_my_enum = x.m_my_enum;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MyAliasEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyAliasEnumStruct(
            MyAliasEnumStruct&& x) noexcept
    {
        m_my_enum = x.m_my_enum;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MyAliasEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyAliasEnumStruct& operator =(
            const MyAliasEnumStruct& x)
    {

                    m_my_enum = x.m_my_enum;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MyAliasEnumStruct that will be copied.
     */
    eProsima_user_DllExport MyAliasEnumStruct& operator =(
            MyAliasEnumStruct&& x) noexcept
    {

        m_my_enum = x.m_my_enum;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MyAliasEnumStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MyAliasEnumStruct& x) const
    {
        return (m_my_enum == x.m_my_enum);
    }

    /*!
     * @brief Comparison operator.
     * @param x MyAliasEnumStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MyAliasEnumStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member my_enum
     * @param _my_enum New value for member my_enum
     */
    eProsima_user_DllExport void my_enum(
            MyAliasEnum _my_enum)
    {
        m_my_enum = _my_enum;
    }

    /*!
     * @brief This function returns the value of member my_enum
     * @return Value of member my_enum
     */
    eProsima_user_DllExport MyAliasEnum my_enum() const
    {
        return m_my_enum;
    }

    /*!
     * @brief This function returns a reference to member my_enum
     * @return Reference to member my_enum
     */
    eProsima_user_DllExport MyAliasEnum& my_enum()
    {
        return m_my_enum;
    }



private:

    MyAliasEnum m_my_enum{MyEnum::A};

};
/*!
 * @brief This class represents the structure BasicStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class BasicStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BasicStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BasicStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BasicStruct that will be copied.
     */
    eProsima_user_DllExport BasicStruct(
            const BasicStruct& x)
    {
                    m_my_bool = x.m_my_bool;

                    m_my_int32 = x.m_my_int32;

                    m_my_string = x.m_my_string;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BasicStruct that will be copied.
     */
    eProsima_user_DllExport BasicStruct(
            BasicStruct&& x) noexcept
    {
        m_my_bool = x.m_my_bool;
        m_my_int32 = x.m_my_int32;
        m_my_string = std::move(x.m_my_string);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BasicStruct that will be copied.
     */
    eProsima_user_DllExport BasicStruct& operator =(
            const BasicStruct& x)
    {

                    m_my_bool = x.m_my_bool;

                    m_my_int32 = x.m_my_int32;

                    m_my_string = x.m_my_string;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BasicStruct that will be copied.
     */
    eProsima_user_DllExport BasicStruct& operator =(
            BasicStruct&& x) noexcept
    {

        m_my_bool = x.m_my_bool;
        m_my_int32 = x.m_my_int32;
        m_my_string = std::move(x.m_my_string);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x BasicStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BasicStruct& x) const
    {
        return (m_my_bool == x.m_my_bool &&
           m_my_int32 == x.m_my_int32 &&
           m_my_string == x.m_my_string);
    }

    /*!
     * @brief Comparison operator.
     * @param x BasicStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BasicStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member my_bool
     * @param _my_bool New value for member my_bool
     */
    eProsima_user_DllExport void my_bool(
            bool _my_bool)
    {
        m_my_bool = _my_bool;
    }

    /*!
     * @brief This function returns the value of member my_bool
     * @return Value of member my_bool
     */
    eProsima_user_DllExport bool my_bool() const
    {
        return m_my_bool;
    }

    /*!
     * @brief This function returns a reference to member my_bool
     * @return Reference to member my_bool
     */
    eProsima_user_DllExport bool& my_bool()
    {
        return m_my_bool;
    }


    /*!
     * @brief This function sets a value in member my_int32
     * @param _my_int32 New value for member my_int32
     */
    eProsima_user_DllExport void my_int32(
            int32_t _my_int32)
    {
        m_my_int32 = _my_int32;
    }

    /*!
     * @brief This function returns the value of member my_int32
     * @return Value of member my_int32
     */
    eProsima_user_DllExport int32_t my_int32() const
    {
        return m_my_int32;
    }

    /*!
     * @brief This function returns a reference to member my_int32
     * @return Reference to member my_int32
     */
    eProsima_user_DllExport int32_t& my_int32()
    {
        return m_my_int32;
    }


    /*!
     * @brief This function copies the value in member my_string
     * @param _my_string New value to be copied in member my_string
     */
    eProsima_user_DllExport void my_string(
            const std::string& _my_string)
    {
        m_my_string = _my_string;
    }

    /*!
     * @brief This function moves the value in member my_string
     * @param _my_string New value to be moved in member my_string
     */
    eProsima_user_DllExport void my_string(
            std::string&& _my_string)
    {
        m_my_string = std::move(_my_string);
    }

    /*!
     * @brief This function returns a constant reference to member my_string
     * @return Constant reference to member my_string
     */
    eProsima_user_DllExport const std::string& my_string() const
    {
        return m_my_string;
    }

    /*!
     * @brief This function returns a reference to member my_string
     * @return Reference to member my_string
     */
    eProsima_user_DllExport std::string& my_string()
    {
        return m_my_string;
    }



private:

    bool m_my_bool{false};
    int32_t m_my_int32{0};
    std::string m_my_string;

};
/*!
 * @brief This class represents the structure BasicNamesStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class BasicNamesStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BasicNamesStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BasicNamesStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BasicNamesStruct that will be copied.
     */
    eProsima_user_DllExport BasicNamesStruct(
            const BasicNamesStruct& x)
    {
                    m_my_bool_name = x.m_my_bool_name;

                    m_my_int32_name = x.m_my_int32_name;

                    m_my_string_name = x.m_my_string_name;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BasicNamesStruct that will be copied.
     */
    eProsima_user_DllExport BasicNamesStruct(
            BasicNamesStruct&& x) noexcept
    {
        m_my_bool_name = x.m_my_bool_name;
        m_my_int32_name = x.m_my_int32_name;
        m_my_string_name = std::move(x.m_my_string_name);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BasicNamesStruct that will be copied.
     */
    eProsima_user_DllExport BasicNamesStruct& operator =(
            const BasicNamesStruct& x)
    {

                    m_my_bool_name = x.m_my_bool_name;

                    m_my_int32_name = x.m_my_int32_name;

                    m_my_string_name = x.m_my_string_name;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BasicNamesStruct that will be copied.
     */
    eProsima_user_DllExport BasicNamesStruct& operator =(
            BasicNamesStruct&& x) noexcept
    {

        m_my_bool_name = x.m_my_bool_name;
        m_my_int32_name = x.m_my_int32_name;
        m_my_string_name = std::move(x.m_my_string_name);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x BasicNamesStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BasicNamesStruct& x) const
    {
        return (m_my_bool_name == x.m_my_bool_name &&
           m_my_int32_name == x.m_my_int32_name &&
           m_my_string_name == x.m_my_string_name);
    }

    /*!
     * @brief Comparison operator.
     * @param x BasicNamesStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BasicNamesStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member my_bool_name
     * @param _my_bool_name New value for member my_bool_name
     */
    eProsima_user_DllExport void my_bool_name(
            bool _my_bool_name)
    {
        m_my_bool_name = _my_bool_name;
    }

    /*!
     * @brief This function returns the value of member my_bool_name
     * @return Value of member my_bool_name
     */
    eProsima_user_DllExport bool my_bool_name() const
    {
        return m_my_bool_name;
    }

    /*!
     * @brief This function returns a reference to member my_bool_name
     * @return Reference to member my_bool_name
     */
    eProsima_user_DllExport bool& my_bool_name()
    {
        return m_my_bool_name;
    }


    /*!
     * @brief This function sets a value in member my_int32_name
     * @param _my_int32_name New value for member my_int32_name
     */
    eProsima_user_DllExport void my_int32_name(
            int32_t _my_int32_name)
    {
        m_my_int32_name = _my_int32_name;
    }

    /*!
     * @brief This function returns the value of member my_int32_name
     * @return Value of member my_int32_name
     */
    eProsima_user_DllExport int32_t my_int32_name() const
    {
        return m_my_int32_name;
    }

    /*!
     * @brief This function returns a reference to member my_int32_name
     * @return Reference to member my_int32_name
     */
    eProsima_user_DllExport int32_t& my_int32_name()
    {
        return m_my_int32_name;
    }


    /*!
     * @brief This function copies the value in member my_string_name
     * @param _my_string_name New value to be copied in member my_string_name
     */
    eProsima_user_DllExport void my_string_name(
            const std::string& _my_string_name)
    {
        m_my_string_name = _my_string_name;
    }

    /*!
     * @brief This function moves the value in member my_string_name
     * @param _my_string_name New value to be moved in member my_string_name
     */
    eProsima_user_DllExport void my_string_name(
            std::string&& _my_string_name)
    {
        m_my_string_name = std::move(_my_string_name);
    }

    /*!
     * @brief This function returns a constant reference to member my_string_name
     * @return Constant reference to member my_string_name
     */
    eProsima_user_DllExport const std::string& my_string_name() const
    {
        return m_my_string_name;
    }

    /*!
     * @brief This function returns a reference to member my_string_name
     * @return Reference to member my_string_name
     */
    eProsima_user_DllExport std::string& my_string_name()
    {
        return m_my_string_name;
    }



private:

    bool m_my_bool_name{false};
    int32_t m_my_int32_name{0};
    std::string m_my_string_name;

};
/*!
 * @brief This class represents the structure BasicBadStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class BasicBadStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BasicBadStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BasicBadStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BasicBadStruct that will be copied.
     */
    eProsima_user_DllExport BasicBadStruct(
            const BasicBadStruct& x)
    {
                    m_my_bool = x.m_my_bool;

                    m_my_int32 = x.m_my_int32;

                    m_my_string = x.m_my_string;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BasicBadStruct that will be copied.
     */
    eProsima_user_DllExport BasicBadStruct(
            BasicBadStruct&& x) noexcept
    {
        m_my_bool = x.m_my_bool;
        m_my_int32 = x.m_my_int32;
        m_my_string = std::move(x.m_my_string);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BasicBadStruct that will be copied.
     */
    eProsima_user_DllExport BasicBadStruct& operator =(
            const BasicBadStruct& x)
    {

                    m_my_bool = x.m_my_bool;

                    m_my_int32 = x.m_my_int32;

                    m_my_string = x.m_my_string;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BasicBadStruct that will be copied.
     */
    eProsima_user_DllExport BasicBadStruct& operator =(
            BasicBadStruct&& x) noexcept
    {

        m_my_bool = x.m_my_bool;
        m_my_int32 = x.m_my_int32;
        m_my_string = std::move(x.m_my_string);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x BasicBadStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BasicBadStruct& x) const
    {
        return (m_my_bool == x.m_my_bool &&
           m_my_int32 == x.m_my_int32 &&
           m_my_string == x.m_my_string);
    }

    /*!
     * @brief Comparison operator.
     * @param x BasicBadStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BasicBadStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member my_bool
     * @param _my_bool New value for member my_bool
     */
    eProsima_user_DllExport void my_bool(
            uint8_t _my_bool)
    {
        m_my_bool = _my_bool;
    }

    /*!
     * @brief This function returns the value of member my_bool
     * @return Value of member my_bool
     */
    eProsima_user_DllExport uint8_t my_bool() const
    {
        return m_my_bool;
    }

    /*!
     * @brief This function returns a reference to member my_bool
     * @return Reference to member my_bool
     */
    eProsima_user_DllExport uint8_t& my_bool()
    {
        return m_my_bool;
    }


    /*!
     * @brief This function sets a value in member my_int32
     * @param _my_int32 New value for member my_int32
     */
    eProsima_user_DllExport void my_int32(
            int32_t _my_int32)
    {
        m_my_int32 = _my_int32;
    }

    /*!
     * @brief This function returns the value of member my_int32
     * @return Value of member my_int32
     */
    eProsima_user_DllExport int32_t my_int32() const
    {
        return m_my_int32;
    }

    /*!
     * @brief This function returns a reference to member my_int32
     * @return Reference to member my_int32
     */
    eProsima_user_DllExport int32_t& my_int32()
    {
        return m_my_int32;
    }


    /*!
     * @brief This function copies the value in member my_string
     * @param _my_string New value to be copied in member my_string
     */
    eProsima_user_DllExport void my_string(
            const std::string& _my_string)
    {
        m_my_string = _my_string;
    }

    /*!
     * @brief This function moves the value in member my_string
     * @param _my_string New value to be moved in member my_string
     */
    eProsima_user_DllExport void my_string(
            std::string&& _my_string)
    {
        m_my_string = std::move(_my_string);
    }

    /*!
     * @brief This function returns a constant reference to member my_string
     * @return Constant reference to member my_string
     */
    eProsima_user_DllExport const std::string& my_string() const
    {
        return m_my_string;
    }

    /*!
     * @brief This function returns a reference to member my_string
     * @return Reference to member my_string
     */
    eProsima_user_DllExport std::string& my_string()
    {
        return m_my_string;
    }



private:

    uint8_t m_my_bool{0};
    int32_t m_my_int32{0};
    std::string m_my_string;

};
/*!
 * @brief This class represents the structure BasicWideStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class BasicWideStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BasicWideStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BasicWideStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BasicWideStruct that will be copied.
     */
    eProsima_user_DllExport BasicWideStruct(
            const BasicWideStruct& x)
    {
                    m_my_bool = x.m_my_bool;

                    m_my_int32 = x.m_my_int32;

                    m_my_string = x.m_my_string;

                    m_new_int32 = x.m_new_int32;

                    m_new_string = x.m_new_string;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BasicWideStruct that will be copied.
     */
    eProsima_user_DllExport BasicWideStruct(
            BasicWideStruct&& x) noexcept
    {
        m_my_bool = x.m_my_bool;
        m_my_int32 = x.m_my_int32;
        m_my_string = std::move(x.m_my_string);
        m_new_int32 = x.m_new_int32;
        m_new_string = std::move(x.m_new_string);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BasicWideStruct that will be copied.
     */
    eProsima_user_DllExport BasicWideStruct& operator =(
            const BasicWideStruct& x)
    {

                    m_my_bool = x.m_my_bool;

                    m_my_int32 = x.m_my_int32;

                    m_my_string = x.m_my_string;

                    m_new_int32 = x.m_new_int32;

                    m_new_string = x.m_new_string;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BasicWideStruct that will be copied.
     */
    eProsima_user_DllExport BasicWideStruct& operator =(
            BasicWideStruct&& x) noexcept
    {

        m_my_bool = x.m_my_bool;
        m_my_int32 = x.m_my_int32;
        m_my_string = std::move(x.m_my_string);
        m_new_int32 = x.m_new_int32;
        m_new_string = std::move(x.m_new_string);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x BasicWideStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BasicWideStruct& x) const
    {
        return (m_my_bool == x.m_my_bool &&
           m_my_int32 == x.m_my_int32 &&
           m_my_string == x.m_my_string &&
           m_new_int32 == x.m_new_int32 &&
           m_new_string == x.m_new_string);
    }

    /*!
     * @brief Comparison operator.
     * @param x BasicWideStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BasicWideStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member my_bool
     * @param _my_bool New value for member my_bool
     */
    eProsima_user_DllExport void my_bool(
            bool _my_bool)
    {
        m_my_bool = _my_bool;
    }

    /*!
     * @brief This function returns the value of member my_bool
     * @return Value of member my_bool
     */
    eProsima_user_DllExport bool my_bool() const
    {
        return m_my_bool;
    }

    /*!
     * @brief This function returns a reference to member my_bool
     * @return Reference to member my_bool
     */
    eProsima_user_DllExport bool& my_bool()
    {
        return m_my_bool;
    }


    /*!
     * @brief This function sets a value in member my_int32
     * @param _my_int32 New value for member my_int32
     */
    eProsima_user_DllExport void my_int32(
            int32_t _my_int32)
    {
        m_my_int32 = _my_int32;
    }

    /*!
     * @brief This function returns the value of member my_int32
     * @return Value of member my_int32
     */
    eProsima_user_DllExport int32_t my_int32() const
    {
        return m_my_int32;
    }

    /*!
     * @brief This function returns a reference to member my_int32
     * @return Reference to member my_int32
     */
    eProsima_user_DllExport int32_t& my_int32()
    {
        return m_my_int32;
    }


    /*!
     * @brief This function copies the value in member my_string
     * @param _my_string New value to be copied in member my_string
     */
    eProsima_user_DllExport void my_string(
            const std::string& _my_string)
    {
        m_my_string = _my_string;
    }

    /*!
     * @brief This function moves the value in member my_string
     * @param _my_string New value to be moved in member my_string
     */
    eProsima_user_DllExport void my_string(
            std::string&& _my_string)
    {
        m_my_string = std::move(_my_string);
    }

    /*!
     * @brief This function returns a constant reference to member my_string
     * @return Constant reference to member my_string
     */
    eProsima_user_DllExport const std::string& my_string() const
    {
        return m_my_string;
    }

    /*!
     * @brief This function returns a reference to member my_string
     * @return Reference to member my_string
     */
    eProsima_user_DllExport std::string& my_string()
    {
        return m_my_string;
    }


    /*!
     * @brief This function sets a value in member new_int32
     * @param _new_int32 New value for member new_int32
     */
    eProsima_user_DllExport void new_int32(
            int32_t _new_int32)
    {
        m_new_int32 = _new_int32;
    }

    /*!
     * @brief This function returns the value of member new_int32
     * @return Value of member new_int32
     */
    eProsima_user_DllExport int32_t new_int32() const
    {
        return m_new_int32;
    }

    /*!
     * @brief This function returns a reference to member new_int32
     * @return Reference to member new_int32
     */
    eProsima_user_DllExport int32_t& new_int32()
    {
        return m_new_int32;
    }


    /*!
     * @brief This function copies the value in member new_string
     * @param _new_string New value to be copied in member new_string
     */
    eProsima_user_DllExport void new_string(
            const std::string& _new_string)
    {
        m_new_string = _new_string;
    }

    /*!
     * @brief This function moves the value in member new_string
     * @param _new_string New value to be moved in member new_string
     */
    eProsima_user_DllExport void new_string(
            std::string&& _new_string)
    {
        m_new_string = std::move(_new_string);
    }

    /*!
     * @brief This function returns a constant reference to member new_string
     * @return Constant reference to member new_string
     */
    eProsima_user_DllExport const std::string& new_string() const
    {
        return m_new_string;
    }

    /*!
     * @brief This function returns a reference to member new_string
     * @return Reference to member new_string
     */
    eProsima_user_DllExport std::string& new_string()
    {
        return m_new_string;
    }



private:

    bool m_my_bool{false};
    int32_t m_my_int32{0};
    std::string m_my_string;
    int32_t m_new_int32{0};
    std::string m_new_string;

};
/*!
 * @brief This class represents the structure BadBasicWideStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class BadBasicWideStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport BadBasicWideStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~BadBasicWideStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object BadBasicWideStruct that will be copied.
     */
    eProsima_user_DllExport BadBasicWideStruct(
            const BadBasicWideStruct& x)
    {
                    m_new_int32 = x.m_new_int32;

                    m_new_string = x.m_new_string;

                    m_my_bool = x.m_my_bool;

                    m_my_int32 = x.m_my_int32;

                    m_my_string = x.m_my_string;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object BadBasicWideStruct that will be copied.
     */
    eProsima_user_DllExport BadBasicWideStruct(
            BadBasicWideStruct&& x) noexcept
    {
        m_new_int32 = x.m_new_int32;
        m_new_string = std::move(x.m_new_string);
        m_my_bool = x.m_my_bool;
        m_my_int32 = x.m_my_int32;
        m_my_string = std::move(x.m_my_string);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object BadBasicWideStruct that will be copied.
     */
    eProsima_user_DllExport BadBasicWideStruct& operator =(
            const BadBasicWideStruct& x)
    {

                    m_new_int32 = x.m_new_int32;

                    m_new_string = x.m_new_string;

                    m_my_bool = x.m_my_bool;

                    m_my_int32 = x.m_my_int32;

                    m_my_string = x.m_my_string;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object BadBasicWideStruct that will be copied.
     */
    eProsima_user_DllExport BadBasicWideStruct& operator =(
            BadBasicWideStruct&& x) noexcept
    {

        m_new_int32 = x.m_new_int32;
        m_new_string = std::move(x.m_new_string);
        m_my_bool = x.m_my_bool;
        m_my_int32 = x.m_my_int32;
        m_my_string = std::move(x.m_my_string);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x BadBasicWideStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const BadBasicWideStruct& x) const
    {
        return (m_new_int32 == x.m_new_int32 &&
           m_new_string == x.m_new_string &&
           m_my_bool == x.m_my_bool &&
           m_my_int32 == x.m_my_int32 &&
           m_my_string == x.m_my_string);
    }

    /*!
     * @brief Comparison operator.
     * @param x BadBasicWideStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const BadBasicWideStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member new_int32
     * @param _new_int32 New value for member new_int32
     */
    eProsima_user_DllExport void new_int32(
            int32_t _new_int32)
    {
        m_new_int32 = _new_int32;
    }

    /*!
     * @brief This function returns the value of member new_int32
     * @return Value of member new_int32
     */
    eProsima_user_DllExport int32_t new_int32() const
    {
        return m_new_int32;
    }

    /*!
     * @brief This function returns a reference to member new_int32
     * @return Reference to member new_int32
     */
    eProsima_user_DllExport int32_t& new_int32()
    {
        return m_new_int32;
    }


    /*!
     * @brief This function copies the value in member new_string
     * @param _new_string New value to be copied in member new_string
     */
    eProsima_user_DllExport void new_string(
            const std::string& _new_string)
    {
        m_new_string = _new_string;
    }

    /*!
     * @brief This function moves the value in member new_string
     * @param _new_string New value to be moved in member new_string
     */
    eProsima_user_DllExport void new_string(
            std::string&& _new_string)
    {
        m_new_string = std::move(_new_string);
    }

    /*!
     * @brief This function returns a constant reference to member new_string
     * @return Constant reference to member new_string
     */
    eProsima_user_DllExport const std::string& new_string() const
    {
        return m_new_string;
    }

    /*!
     * @brief This function returns a reference to member new_string
     * @return Reference to member new_string
     */
    eProsima_user_DllExport std::string& new_string()
    {
        return m_new_string;
    }


    /*!
     * @brief This function sets a value in member my_bool
     * @param _my_bool New value for member my_bool
     */
    eProsima_user_DllExport void my_bool(
            bool _my_bool)
    {
        m_my_bool = _my_bool;
    }

    /*!
     * @brief This function returns the value of member my_bool
     * @return Value of member my_bool
     */
    eProsima_user_DllExport bool my_bool() const
    {
        return m_my_bool;
    }

    /*!
     * @brief This function returns a reference to member my_bool
     * @return Reference to member my_bool
     */
    eProsima_user_DllExport bool& my_bool()
    {
        return m_my_bool;
    }


    /*!
     * @brief This function sets a value in member my_int32
     * @param _my_int32 New value for member my_int32
     */
    eProsima_user_DllExport void my_int32(
            int32_t _my_int32)
    {
        m_my_int32 = _my_int32;
    }

    /*!
     * @brief This function returns the value of member my_int32
     * @return Value of member my_int32
     */
    eProsima_user_DllExport int32_t my_int32() const
    {
        return m_my_int32;
    }

    /*!
     * @brief This function returns a reference to member my_int32
     * @return Reference to member my_int32
     */
    eProsima_user_DllExport int32_t& my_int32()
    {
        return m_my_int32;
    }


    /*!
     * @brief This function copies the value in member my_string
     * @param _my_string New value to be copied in member my_string
     */
    eProsima_user_DllExport void my_string(
            const std::string& _my_string)
    {
        m_my_string = _my_string;
    }

    /*!
     * @brief This function moves the value in member my_string
     * @param _my_string New value to be moved in member my_string
     */
    eProsima_user_DllExport void my_string(
            std::string&& _my_string)
    {
        m_my_string = std::move(_my_string);
    }

    /*!
     * @brief This function returns a constant reference to member my_string
     * @return Constant reference to member my_string
     */
    eProsima_user_DllExport const std::string& my_string() const
    {
        return m_my_string;
    }

    /*!
     * @brief This function returns a reference to member my_string
     * @return Reference to member my_string
     */
    eProsima_user_DllExport std::string& my_string()
    {
        return m_my_string;
    }



private:

    int32_t m_new_int32{0};
    std::string m_new_string;
    bool m_my_bool{false};
    int32_t m_my_int32{0};
    std::string m_my_string;

};
/*!
 * @brief This class represents the structure StringStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class StringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport StringStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~StringStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct(
            const StringStruct& x)
    {
                    m_my_string = x.m_my_string;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct(
            StringStruct&& x) noexcept
    {
        m_my_string = std::move(x.m_my_string);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct& operator =(
            const StringStruct& x)
    {

                    m_my_string = x.m_my_string;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object StringStruct that will be copied.
     */
    eProsima_user_DllExport StringStruct& operator =(
            StringStruct&& x) noexcept
    {

        m_my_string = std::move(x.m_my_string);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x StringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const StringStruct& x) const
    {
        return (m_my_string == x.m_my_string);
    }

    /*!
     * @brief Comparison operator.
     * @param x StringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const StringStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_string
     * @param _my_string New value to be copied in member my_string
     */
    eProsima_user_DllExport void my_string(
            const std::string& _my_string)
    {
        m_my_string = _my_string;
    }

    /*!
     * @brief This function moves the value in member my_string
     * @param _my_string New value to be moved in member my_string
     */
    eProsima_user_DllExport void my_string(
            std::string&& _my_string)
    {
        m_my_string = std::move(_my_string);
    }

    /*!
     * @brief This function returns a constant reference to member my_string
     * @return Constant reference to member my_string
     */
    eProsima_user_DllExport const std::string& my_string() const
    {
        return m_my_string;
    }

    /*!
     * @brief This function returns a reference to member my_string
     * @return Reference to member my_string
     */
    eProsima_user_DllExport std::string& my_string()
    {
        return m_my_string;
    }



private:

    std::string m_my_string;

};
/*!
 * @brief This class represents the structure LargeStringStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class LargeStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LargeStringStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LargeStringStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LargeStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeStringStruct(
            const LargeStringStruct& x)
    {
                    m_my_large_string = x.m_my_large_string;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LargeStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeStringStruct(
            LargeStringStruct&& x) noexcept
    {
        m_my_large_string = std::move(x.m_my_large_string);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LargeStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeStringStruct& operator =(
            const LargeStringStruct& x)
    {

                    m_my_large_string = x.m_my_large_string;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LargeStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeStringStruct& operator =(
            LargeStringStruct&& x) noexcept
    {

        m_my_large_string = std::move(x.m_my_large_string);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x LargeStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LargeStringStruct& x) const
    {
        return (m_my_large_string == x.m_my_large_string);
    }

    /*!
     * @brief Comparison operator.
     * @param x LargeStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LargeStringStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_large_string
     * @param _my_large_string New value to be copied in member my_large_string
     */
    eProsima_user_DllExport void my_large_string(
            const eprosima::fastcdr::fixed_string<41925>& _my_large_string)
    {
        m_my_large_string = _my_large_string;
    }

    /*!
     * @brief This function moves the value in member my_large_string
     * @param _my_large_string New value to be moved in member my_large_string
     */
    eProsima_user_DllExport void my_large_string(
            eprosima::fastcdr::fixed_string<41925>&& _my_large_string)
    {
        m_my_large_string = std::move(_my_large_string);
    }

    /*!
     * @brief This function returns a constant reference to member my_large_string
     * @return Constant reference to member my_large_string
     */
    eProsima_user_DllExport const eprosima::fastcdr::fixed_string<41925>& my_large_string() const
    {
        return m_my_large_string;
    }

    /*!
     * @brief This function returns a reference to member my_large_string
     * @return Reference to member my_large_string
     */
    eProsima_user_DllExport eprosima::fastcdr::fixed_string<41925>& my_large_string()
    {
        return m_my_large_string;
    }



private:

    eprosima::fastcdr::fixed_string<41925> m_my_large_string;

};
/*!
 * @brief This class represents the structure WStringStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class WStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport WStringStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~WStringStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct(
            const WStringStruct& x)
    {
                    m_my_wstring = x.m_my_wstring;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct(
            WStringStruct&& x) noexcept
    {
        m_my_wstring = std::move(x.m_my_wstring);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct& operator =(
            const WStringStruct& x)
    {

                    m_my_wstring = x.m_my_wstring;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object WStringStruct that will be copied.
     */
    eProsima_user_DllExport WStringStruct& operator =(
            WStringStruct&& x) noexcept
    {

        m_my_wstring = std::move(x.m_my_wstring);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x WStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const WStringStruct& x) const
    {
        return (m_my_wstring == x.m_my_wstring);
    }

    /*!
     * @brief Comparison operator.
     * @param x WStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const WStringStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_wstring
     * @param _my_wstring New value to be copied in member my_wstring
     */
    eProsima_user_DllExport void my_wstring(
            const std::wstring& _my_wstring)
    {
        m_my_wstring = _my_wstring;
    }

    /*!
     * @brief This function moves the value in member my_wstring
     * @param _my_wstring New value to be moved in member my_wstring
     */
    eProsima_user_DllExport void my_wstring(
            std::wstring&& _my_wstring)
    {
        m_my_wstring = std::move(_my_wstring);
    }

    /*!
     * @brief This function returns a constant reference to member my_wstring
     * @return Constant reference to member my_wstring
     */
    eProsima_user_DllExport const std::wstring& my_wstring() const
    {
        return m_my_wstring;
    }

    /*!
     * @brief This function returns a reference to member my_wstring
     * @return Reference to member my_wstring
     */
    eProsima_user_DllExport std::wstring& my_wstring()
    {
        return m_my_wstring;
    }



private:

    std::wstring m_my_wstring;

};
/*!
 * @brief This class represents the structure LargeWStringStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class LargeWStringStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport LargeWStringStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~LargeWStringStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object LargeWStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeWStringStruct(
            const LargeWStringStruct& x)
    {
                    m_my_large_wstring = x.m_my_large_wstring;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object LargeWStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeWStringStruct(
            LargeWStringStruct&& x) noexcept
    {
        m_my_large_wstring = std::move(x.m_my_large_wstring);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object LargeWStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeWStringStruct& operator =(
            const LargeWStringStruct& x)
    {

                    m_my_large_wstring = x.m_my_large_wstring;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object LargeWStringStruct that will be copied.
     */
    eProsima_user_DllExport LargeWStringStruct& operator =(
            LargeWStringStruct&& x) noexcept
    {

        m_my_large_wstring = std::move(x.m_my_large_wstring);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x LargeWStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const LargeWStringStruct& x) const
    {
        return (m_my_large_wstring == x.m_my_large_wstring);
    }

    /*!
     * @brief Comparison operator.
     * @param x LargeWStringStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const LargeWStringStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_large_wstring
     * @param _my_large_wstring New value to be copied in member my_large_wstring
     */
    eProsima_user_DllExport void my_large_wstring(
            const std::wstring& _my_large_wstring)
    {
        m_my_large_wstring = _my_large_wstring;
    }

    /*!
     * @brief This function moves the value in member my_large_wstring
     * @param _my_large_wstring New value to be moved in member my_large_wstring
     */
    eProsima_user_DllExport void my_large_wstring(
            std::wstring&& _my_large_wstring)
    {
        m_my_large_wstring = std::move(_my_large_wstring);
    }

    /*!
     * @brief This function returns a constant reference to member my_large_wstring
     * @return Constant reference to member my_large_wstring
     */
    eProsima_user_DllExport const std::wstring& my_large_wstring() const
    {
        return m_my_large_wstring;
    }

    /*!
     * @brief This function returns a reference to member my_large_wstring
     * @return Reference to member my_large_wstring
     */
    eProsima_user_DllExport std::wstring& my_large_wstring()
    {
        return m_my_large_wstring;
    }



private:

    std::wstring m_my_large_wstring;

};
/*!
 * @brief This class represents the structure ArrayStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class ArrayStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ArrayStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ArrayStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ArrayStruct that will be copied.
     */
    eProsima_user_DllExport ArrayStruct(
            const ArrayStruct& x)
    {
                    m_my_array = x.m_my_array;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ArrayStruct that will be copied.
     */
    eProsima_user_DllExport ArrayStruct(
            ArrayStruct&& x) noexcept
    {
        m_my_array = std::move(x.m_my_array);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ArrayStruct that will be copied.
     */
    eProsima_user_DllExport ArrayStruct& operator =(
            const ArrayStruct& x)
    {

                    m_my_array = x.m_my_array;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ArrayStruct that will be copied.
     */
    eProsima_user_DllExport ArrayStruct& operator =(
            ArrayStruct&& x) noexcept
    {

        m_my_array = std::move(x.m_my_array);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ArrayStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ArrayStruct& x) const
    {
        return (m_my_array == x.m_my_array);
    }

    /*!
     * @brief Comparison operator.
     * @param x ArrayStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ArrayStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_array
     * @param _my_array New value to be copied in member my_array
     */
    eProsima_user_DllExport void my_array(
            const std::array<int32_t, 2>& _my_array)
    {
        m_my_array = _my_array;
    }

    /*!
     * @brief This function moves the value in member my_array
     * @param _my_array New value to be moved in member my_array
     */
    eProsima_user_DllExport void my_array(
            std::array<int32_t, 2>&& _my_array)
    {
        m_my_array = std::move(_my_array);
    }

    /*!
     * @brief This function returns a constant reference to member my_array
     * @return Constant reference to member my_array
     */
    eProsima_user_DllExport const std::array<int32_t, 2>& my_array() const
    {
        return m_my_array;
    }

    /*!
     * @brief This function returns a reference to member my_array
     * @return Reference to member my_array
     */
    eProsima_user_DllExport std::array<int32_t, 2>& my_array()
    {
        return m_my_array;
    }



private:

    std::array<int32_t, 2> m_my_array{0};

};
/*!
 * @brief This class represents the structure ArrayStructEqual defined by the user in the IDL file.
 * @ingroup Types
 */
class ArrayStructEqual
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ArrayStructEqual()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ArrayStructEqual()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ArrayStructEqual that will be copied.
     */
    eProsima_user_DllExport ArrayStructEqual(
            const ArrayStructEqual& x)
    {
                    m_my_array_equal = x.m_my_array_equal;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ArrayStructEqual that will be copied.
     */
    eProsima_user_DllExport ArrayStructEqual(
            ArrayStructEqual&& x) noexcept
    {
        m_my_array_equal = std::move(x.m_my_array_equal);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ArrayStructEqual that will be copied.
     */
    eProsima_user_DllExport ArrayStructEqual& operator =(
            const ArrayStructEqual& x)
    {

                    m_my_array_equal = x.m_my_array_equal;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ArrayStructEqual that will be copied.
     */
    eProsima_user_DllExport ArrayStructEqual& operator =(
            ArrayStructEqual&& x) noexcept
    {

        m_my_array_equal = std::move(x.m_my_array_equal);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ArrayStructEqual object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ArrayStructEqual& x) const
    {
        return (m_my_array_equal == x.m_my_array_equal);
    }

    /*!
     * @brief Comparison operator.
     * @param x ArrayStructEqual object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ArrayStructEqual& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_array_equal
     * @param _my_array_equal New value to be copied in member my_array_equal
     */
    eProsima_user_DllExport void my_array_equal(
            const std::array<int32_t, 2>& _my_array_equal)
    {
        m_my_array_equal = _my_array_equal;
    }

    /*!
     * @brief This function moves the value in member my_array_equal
     * @param _my_array_equal New value to be moved in member my_array_equal
     */
    eProsima_user_DllExport void my_array_equal(
            std::array<int32_t, 2>&& _my_array_equal)
    {
        m_my_array_equal = std::move(_my_array_equal);
    }

    /*!
     * @brief This function returns a constant reference to member my_array_equal
     * @return Constant reference to member my_array_equal
     */
    eProsima_user_DllExport const std::array<int32_t, 2>& my_array_equal() const
    {
        return m_my_array_equal;
    }

    /*!
     * @brief This function returns a reference to member my_array_equal
     * @return Reference to member my_array_equal
     */
    eProsima_user_DllExport std::array<int32_t, 2>& my_array_equal()
    {
        return m_my_array_equal;
    }



private:

    std::array<int32_t, 2> m_my_array_equal{0};

};
/*!
 * @brief This class represents the structure ArrayBadStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class ArrayBadStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ArrayBadStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ArrayBadStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ArrayBadStruct that will be copied.
     */
    eProsima_user_DllExport ArrayBadStruct(
            const ArrayBadStruct& x)
    {
                    m_my_array = x.m_my_array;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ArrayBadStruct that will be copied.
     */
    eProsima_user_DllExport ArrayBadStruct(
            ArrayBadStruct&& x) noexcept
    {
        m_my_array = std::move(x.m_my_array);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ArrayBadStruct that will be copied.
     */
    eProsima_user_DllExport ArrayBadStruct& operator =(
            const ArrayBadStruct& x)
    {

                    m_my_array = x.m_my_array;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ArrayBadStruct that will be copied.
     */
    eProsima_user_DllExport ArrayBadStruct& operator =(
            ArrayBadStruct&& x) noexcept
    {

        m_my_array = std::move(x.m_my_array);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ArrayBadStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ArrayBadStruct& x) const
    {
        return (m_my_array == x.m_my_array);
    }

    /*!
     * @brief Comparison operator.
     * @param x ArrayBadStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ArrayBadStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_array
     * @param _my_array New value to be copied in member my_array
     */
    eProsima_user_DllExport void my_array(
            const std::array<uint8_t, 2>& _my_array)
    {
        m_my_array = _my_array;
    }

    /*!
     * @brief This function moves the value in member my_array
     * @param _my_array New value to be moved in member my_array
     */
    eProsima_user_DllExport void my_array(
            std::array<uint8_t, 2>&& _my_array)
    {
        m_my_array = std::move(_my_array);
    }

    /*!
     * @brief This function returns a constant reference to member my_array
     * @return Constant reference to member my_array
     */
    eProsima_user_DllExport const std::array<uint8_t, 2>& my_array() const
    {
        return m_my_array;
    }

    /*!
     * @brief This function returns a reference to member my_array
     * @return Reference to member my_array
     */
    eProsima_user_DllExport std::array<uint8_t, 2>& my_array()
    {
        return m_my_array;
    }



private:

    std::array<uint8_t, 2> m_my_array{0};

};
/*!
 * @brief This class represents the structure ArrayDimensionsStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class ArrayDimensionsStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ArrayDimensionsStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ArrayDimensionsStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ArrayDimensionsStruct that will be copied.
     */
    eProsima_user_DllExport ArrayDimensionsStruct(
            const ArrayDimensionsStruct& x)
    {
                    m_my_array = x.m_my_array;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ArrayDimensionsStruct that will be copied.
     */
    eProsima_user_DllExport ArrayDimensionsStruct(
            ArrayDimensionsStruct&& x) noexcept
    {
        m_my_array = std::move(x.m_my_array);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ArrayDimensionsStruct that will be copied.
     */
    eProsima_user_DllExport ArrayDimensionsStruct& operator =(
            const ArrayDimensionsStruct& x)
    {

                    m_my_array = x.m_my_array;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ArrayDimensionsStruct that will be copied.
     */
    eProsima_user_DllExport ArrayDimensionsStruct& operator =(
            ArrayDimensionsStruct&& x) noexcept
    {

        m_my_array = std::move(x.m_my_array);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ArrayDimensionsStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ArrayDimensionsStruct& x) const
    {
        return (m_my_array == x.m_my_array);
    }

    /*!
     * @brief Comparison operator.
     * @param x ArrayDimensionsStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ArrayDimensionsStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_array
     * @param _my_array New value to be copied in member my_array
     */
    eProsima_user_DllExport void my_array(
            const std::array<std::array<int32_t, 2>, 2>& _my_array)
    {
        m_my_array = _my_array;
    }

    /*!
     * @brief This function moves the value in member my_array
     * @param _my_array New value to be moved in member my_array
     */
    eProsima_user_DllExport void my_array(
            std::array<std::array<int32_t, 2>, 2>&& _my_array)
    {
        m_my_array = std::move(_my_array);
    }

    /*!
     * @brief This function returns a constant reference to member my_array
     * @return Constant reference to member my_array
     */
    eProsima_user_DllExport const std::array<std::array<int32_t, 2>, 2>& my_array() const
    {
        return m_my_array;
    }

    /*!
     * @brief This function returns a reference to member my_array
     * @return Reference to member my_array
     */
    eProsima_user_DllExport std::array<std::array<int32_t, 2>, 2>& my_array()
    {
        return m_my_array;
    }



private:

    std::array<std::array<int32_t, 2>, 2> m_my_array{ {{0}} };

};
/*!
 * @brief This class represents the structure ArraySizeStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class ArraySizeStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ArraySizeStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ArraySizeStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ArraySizeStruct that will be copied.
     */
    eProsima_user_DllExport ArraySizeStruct(
            const ArraySizeStruct& x)
    {
                    m_my_array = x.m_my_array;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ArraySizeStruct that will be copied.
     */
    eProsima_user_DllExport ArraySizeStruct(
            ArraySizeStruct&& x) noexcept
    {
        m_my_array = std::move(x.m_my_array);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ArraySizeStruct that will be copied.
     */
    eProsima_user_DllExport ArraySizeStruct& operator =(
            const ArraySizeStruct& x)
    {

                    m_my_array = x.m_my_array;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ArraySizeStruct that will be copied.
     */
    eProsima_user_DllExport ArraySizeStruct& operator =(
            ArraySizeStruct&& x) noexcept
    {

        m_my_array = std::move(x.m_my_array);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x ArraySizeStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ArraySizeStruct& x) const
    {
        return (m_my_array == x.m_my_array);
    }

    /*!
     * @brief Comparison operator.
     * @param x ArraySizeStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ArraySizeStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_array
     * @param _my_array New value to be copied in member my_array
     */
    eProsima_user_DllExport void my_array(
            const std::array<int32_t, 5>& _my_array)
    {
        m_my_array = _my_array;
    }

    /*!
     * @brief This function moves the value in member my_array
     * @param _my_array New value to be moved in member my_array
     */
    eProsima_user_DllExport void my_array(
            std::array<int32_t, 5>&& _my_array)
    {
        m_my_array = std::move(_my_array);
    }

    /*!
     * @brief This function returns a constant reference to member my_array
     * @return Constant reference to member my_array
     */
    eProsima_user_DllExport const std::array<int32_t, 5>& my_array() const
    {
        return m_my_array;
    }

    /*!
     * @brief This function returns a reference to member my_array
     * @return Reference to member my_array
     */
    eProsima_user_DllExport std::array<int32_t, 5>& my_array()
    {
        return m_my_array;
    }



private:

    std::array<int32_t, 5> m_my_array{0};

};
/*!
 * @brief This class represents the structure SequenceStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SequenceStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SequenceStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SequenceStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceStruct(
            const SequenceStruct& x)
    {
                    m_my_sequence = x.m_my_sequence;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceStruct(
            SequenceStruct&& x) noexcept
    {
        m_my_sequence = std::move(x.m_my_sequence);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceStruct& operator =(
            const SequenceStruct& x)
    {

                    m_my_sequence = x.m_my_sequence;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceStruct& operator =(
            SequenceStruct&& x) noexcept
    {

        m_my_sequence = std::move(x.m_my_sequence);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SequenceStruct& x) const
    {
        return (m_my_sequence == x.m_my_sequence);
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SequenceStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_sequence
     * @param _my_sequence New value to be copied in member my_sequence
     */
    eProsima_user_DllExport void my_sequence(
            const std::vector<int32_t>& _my_sequence)
    {
        m_my_sequence = _my_sequence;
    }

    /*!
     * @brief This function moves the value in member my_sequence
     * @param _my_sequence New value to be moved in member my_sequence
     */
    eProsima_user_DllExport void my_sequence(
            std::vector<int32_t>&& _my_sequence)
    {
        m_my_sequence = std::move(_my_sequence);
    }

    /*!
     * @brief This function returns a constant reference to member my_sequence
     * @return Constant reference to member my_sequence
     */
    eProsima_user_DllExport const std::vector<int32_t>& my_sequence() const
    {
        return m_my_sequence;
    }

    /*!
     * @brief This function returns a reference to member my_sequence
     * @return Reference to member my_sequence
     */
    eProsima_user_DllExport std::vector<int32_t>& my_sequence()
    {
        return m_my_sequence;
    }



private:

    std::vector<int32_t> m_my_sequence;

};
/*!
 * @brief This class represents the structure SequenceStructEqual defined by the user in the IDL file.
 * @ingroup Types
 */
class SequenceStructEqual
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SequenceStructEqual()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SequenceStructEqual()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SequenceStructEqual that will be copied.
     */
    eProsima_user_DllExport SequenceStructEqual(
            const SequenceStructEqual& x)
    {
                    m_my_sequence_equal = x.m_my_sequence_equal;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SequenceStructEqual that will be copied.
     */
    eProsima_user_DllExport SequenceStructEqual(
            SequenceStructEqual&& x) noexcept
    {
        m_my_sequence_equal = std::move(x.m_my_sequence_equal);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SequenceStructEqual that will be copied.
     */
    eProsima_user_DllExport SequenceStructEqual& operator =(
            const SequenceStructEqual& x)
    {

                    m_my_sequence_equal = x.m_my_sequence_equal;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SequenceStructEqual that will be copied.
     */
    eProsima_user_DllExport SequenceStructEqual& operator =(
            SequenceStructEqual&& x) noexcept
    {

        m_my_sequence_equal = std::move(x.m_my_sequence_equal);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceStructEqual object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SequenceStructEqual& x) const
    {
        return (m_my_sequence_equal == x.m_my_sequence_equal);
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceStructEqual object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SequenceStructEqual& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_sequence_equal
     * @param _my_sequence_equal New value to be copied in member my_sequence_equal
     */
    eProsima_user_DllExport void my_sequence_equal(
            const std::vector<int32_t>& _my_sequence_equal)
    {
        m_my_sequence_equal = _my_sequence_equal;
    }

    /*!
     * @brief This function moves the value in member my_sequence_equal
     * @param _my_sequence_equal New value to be moved in member my_sequence_equal
     */
    eProsima_user_DllExport void my_sequence_equal(
            std::vector<int32_t>&& _my_sequence_equal)
    {
        m_my_sequence_equal = std::move(_my_sequence_equal);
    }

    /*!
     * @brief This function returns a constant reference to member my_sequence_equal
     * @return Constant reference to member my_sequence_equal
     */
    eProsima_user_DllExport const std::vector<int32_t>& my_sequence_equal() const
    {
        return m_my_sequence_equal;
    }

    /*!
     * @brief This function returns a reference to member my_sequence_equal
     * @return Reference to member my_sequence_equal
     */
    eProsima_user_DllExport std::vector<int32_t>& my_sequence_equal()
    {
        return m_my_sequence_equal;
    }



private:

    std::vector<int32_t> m_my_sequence_equal;

};
/*!
 * @brief This class represents the structure SequenceBadStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SequenceBadStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SequenceBadStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SequenceBadStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SequenceBadStruct that will be copied.
     */
    eProsima_user_DllExport SequenceBadStruct(
            const SequenceBadStruct& x)
    {
                    m_my_sequence = x.m_my_sequence;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SequenceBadStruct that will be copied.
     */
    eProsima_user_DllExport SequenceBadStruct(
            SequenceBadStruct&& x) noexcept
    {
        m_my_sequence = std::move(x.m_my_sequence);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SequenceBadStruct that will be copied.
     */
    eProsima_user_DllExport SequenceBadStruct& operator =(
            const SequenceBadStruct& x)
    {

                    m_my_sequence = x.m_my_sequence;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SequenceBadStruct that will be copied.
     */
    eProsima_user_DllExport SequenceBadStruct& operator =(
            SequenceBadStruct&& x) noexcept
    {

        m_my_sequence = std::move(x.m_my_sequence);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceBadStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SequenceBadStruct& x) const
    {
        return (m_my_sequence == x.m_my_sequence);
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceBadStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SequenceBadStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_sequence
     * @param _my_sequence New value to be copied in member my_sequence
     */
    eProsima_user_DllExport void my_sequence(
            const std::vector<uint8_t>& _my_sequence)
    {
        m_my_sequence = _my_sequence;
    }

    /*!
     * @brief This function moves the value in member my_sequence
     * @param _my_sequence New value to be moved in member my_sequence
     */
    eProsima_user_DllExport void my_sequence(
            std::vector<uint8_t>&& _my_sequence)
    {
        m_my_sequence = std::move(_my_sequence);
    }

    /*!
     * @brief This function returns a constant reference to member my_sequence
     * @return Constant reference to member my_sequence
     */
    eProsima_user_DllExport const std::vector<uint8_t>& my_sequence() const
    {
        return m_my_sequence;
    }

    /*!
     * @brief This function returns a reference to member my_sequence
     * @return Reference to member my_sequence
     */
    eProsima_user_DllExport std::vector<uint8_t>& my_sequence()
    {
        return m_my_sequence;
    }



private:

    std::vector<uint8_t> m_my_sequence;

};
/*!
 * @brief This class represents the structure SequenceBoundsStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SequenceBoundsStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SequenceBoundsStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SequenceBoundsStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SequenceBoundsStruct that will be copied.
     */
    eProsima_user_DllExport SequenceBoundsStruct(
            const SequenceBoundsStruct& x)
    {
                    m_my_sequence = x.m_my_sequence;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SequenceBoundsStruct that will be copied.
     */
    eProsima_user_DllExport SequenceBoundsStruct(
            SequenceBoundsStruct&& x) noexcept
    {
        m_my_sequence = std::move(x.m_my_sequence);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SequenceBoundsStruct that will be copied.
     */
    eProsima_user_DllExport SequenceBoundsStruct& operator =(
            const SequenceBoundsStruct& x)
    {

                    m_my_sequence = x.m_my_sequence;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SequenceBoundsStruct that will be copied.
     */
    eProsima_user_DllExport SequenceBoundsStruct& operator =(
            SequenceBoundsStruct&& x) noexcept
    {

        m_my_sequence = std::move(x.m_my_sequence);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceBoundsStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SequenceBoundsStruct& x) const
    {
        return (m_my_sequence == x.m_my_sequence);
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceBoundsStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SequenceBoundsStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_sequence
     * @param _my_sequence New value to be copied in member my_sequence
     */
    eProsima_user_DllExport void my_sequence(
            const std::vector<int32_t>& _my_sequence)
    {
        m_my_sequence = _my_sequence;
    }

    /*!
     * @brief This function moves the value in member my_sequence
     * @param _my_sequence New value to be moved in member my_sequence
     */
    eProsima_user_DllExport void my_sequence(
            std::vector<int32_t>&& _my_sequence)
    {
        m_my_sequence = std::move(_my_sequence);
    }

    /*!
     * @brief This function returns a constant reference to member my_sequence
     * @return Constant reference to member my_sequence
     */
    eProsima_user_DllExport const std::vector<int32_t>& my_sequence() const
    {
        return m_my_sequence;
    }

    /*!
     * @brief This function returns a reference to member my_sequence
     * @return Reference to member my_sequence
     */
    eProsima_user_DllExport std::vector<int32_t>& my_sequence()
    {
        return m_my_sequence;
    }



private:

    std::vector<int32_t> m_my_sequence;

};
/*!
 * @brief This class represents the structure SequenceSequenceStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SequenceSequenceStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SequenceSequenceStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SequenceSequenceStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SequenceSequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceSequenceStruct(
            const SequenceSequenceStruct& x)
    {
                    m_my_sequence_sequence = x.m_my_sequence_sequence;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SequenceSequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceSequenceStruct(
            SequenceSequenceStruct&& x) noexcept
    {
        m_my_sequence_sequence = std::move(x.m_my_sequence_sequence);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SequenceSequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceSequenceStruct& operator =(
            const SequenceSequenceStruct& x)
    {

                    m_my_sequence_sequence = x.m_my_sequence_sequence;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SequenceSequenceStruct that will be copied.
     */
    eProsima_user_DllExport SequenceSequenceStruct& operator =(
            SequenceSequenceStruct&& x) noexcept
    {

        m_my_sequence_sequence = std::move(x.m_my_sequence_sequence);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceSequenceStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SequenceSequenceStruct& x) const
    {
        return (m_my_sequence_sequence == x.m_my_sequence_sequence);
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceSequenceStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SequenceSequenceStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_sequence_sequence
     * @param _my_sequence_sequence New value to be copied in member my_sequence_sequence
     */
    eProsima_user_DllExport void my_sequence_sequence(
            const std::vector<std::vector<int32_t>>& _my_sequence_sequence)
    {
        m_my_sequence_sequence = _my_sequence_sequence;
    }

    /*!
     * @brief This function moves the value in member my_sequence_sequence
     * @param _my_sequence_sequence New value to be moved in member my_sequence_sequence
     */
    eProsima_user_DllExport void my_sequence_sequence(
            std::vector<std::vector<int32_t>>&& _my_sequence_sequence)
    {
        m_my_sequence_sequence = std::move(_my_sequence_sequence);
    }

    /*!
     * @brief This function returns a constant reference to member my_sequence_sequence
     * @return Constant reference to member my_sequence_sequence
     */
    eProsima_user_DllExport const std::vector<std::vector<int32_t>>& my_sequence_sequence() const
    {
        return m_my_sequence_sequence;
    }

    /*!
     * @brief This function returns a reference to member my_sequence_sequence
     * @return Reference to member my_sequence_sequence
     */
    eProsima_user_DllExport std::vector<std::vector<int32_t>>& my_sequence_sequence()
    {
        return m_my_sequence_sequence;
    }



private:

    std::vector<std::vector<int32_t>> m_my_sequence_sequence;

};
/*!
 * @brief This class represents the structure SequenceSequenceBoundsStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SequenceSequenceBoundsStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SequenceSequenceBoundsStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SequenceSequenceBoundsStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SequenceSequenceBoundsStruct that will be copied.
     */
    eProsima_user_DllExport SequenceSequenceBoundsStruct(
            const SequenceSequenceBoundsStruct& x)
    {
                    m_my_sequence_sequence = x.m_my_sequence_sequence;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SequenceSequenceBoundsStruct that will be copied.
     */
    eProsima_user_DllExport SequenceSequenceBoundsStruct(
            SequenceSequenceBoundsStruct&& x) noexcept
    {
        m_my_sequence_sequence = std::move(x.m_my_sequence_sequence);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SequenceSequenceBoundsStruct that will be copied.
     */
    eProsima_user_DllExport SequenceSequenceBoundsStruct& operator =(
            const SequenceSequenceBoundsStruct& x)
    {

                    m_my_sequence_sequence = x.m_my_sequence_sequence;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SequenceSequenceBoundsStruct that will be copied.
     */
    eProsima_user_DllExport SequenceSequenceBoundsStruct& operator =(
            SequenceSequenceBoundsStruct&& x) noexcept
    {

        m_my_sequence_sequence = std::move(x.m_my_sequence_sequence);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceSequenceBoundsStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SequenceSequenceBoundsStruct& x) const
    {
        return (m_my_sequence_sequence == x.m_my_sequence_sequence);
    }

    /*!
     * @brief Comparison operator.
     * @param x SequenceSequenceBoundsStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SequenceSequenceBoundsStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_sequence_sequence
     * @param _my_sequence_sequence New value to be copied in member my_sequence_sequence
     */
    eProsima_user_DllExport void my_sequence_sequence(
            const std::vector<std::vector<int32_t>>& _my_sequence_sequence)
    {
        m_my_sequence_sequence = _my_sequence_sequence;
    }

    /*!
     * @brief This function moves the value in member my_sequence_sequence
     * @param _my_sequence_sequence New value to be moved in member my_sequence_sequence
     */
    eProsima_user_DllExport void my_sequence_sequence(
            std::vector<std::vector<int32_t>>&& _my_sequence_sequence)
    {
        m_my_sequence_sequence = std::move(_my_sequence_sequence);
    }

    /*!
     * @brief This function returns a constant reference to member my_sequence_sequence
     * @return Constant reference to member my_sequence_sequence
     */
    eProsima_user_DllExport const std::vector<std::vector<int32_t>>& my_sequence_sequence() const
    {
        return m_my_sequence_sequence;
    }

    /*!
     * @brief This function returns a reference to member my_sequence_sequence
     * @return Reference to member my_sequence_sequence
     */
    eProsima_user_DllExport std::vector<std::vector<int32_t>>& my_sequence_sequence()
    {
        return m_my_sequence_sequence;
    }



private:

    std::vector<std::vector<int32_t>> m_my_sequence_sequence;

};
/*!
 * @brief This class represents the structure MapStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class MapStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapStruct that will be copied.
     */
    eProsima_user_DllExport MapStruct(
            const MapStruct& x)
    {
                    m_my_map = x.m_my_map;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapStruct that will be copied.
     */
    eProsima_user_DllExport MapStruct(
            MapStruct&& x) noexcept
    {
        m_my_map = std::move(x.m_my_map);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapStruct that will be copied.
     */
    eProsima_user_DllExport MapStruct& operator =(
            const MapStruct& x)
    {

                    m_my_map = x.m_my_map;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapStruct that will be copied.
     */
    eProsima_user_DllExport MapStruct& operator =(
            MapStruct&& x) noexcept
    {

        m_my_map = std::move(x.m_my_map);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MapStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MapStruct& x) const
    {
        return (m_my_map == x.m_my_map);
    }

    /*!
     * @brief Comparison operator.
     * @param x MapStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MapStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_map
     * @param _my_map New value to be copied in member my_map
     */
    eProsima_user_DllExport void my_map(
            const std::map<int32_t, int32_t>& _my_map)
    {
        m_my_map = _my_map;
    }

    /*!
     * @brief This function moves the value in member my_map
     * @param _my_map New value to be moved in member my_map
     */
    eProsima_user_DllExport void my_map(
            std::map<int32_t, int32_t>&& _my_map)
    {
        m_my_map = std::move(_my_map);
    }

    /*!
     * @brief This function returns a constant reference to member my_map
     * @return Constant reference to member my_map
     */
    eProsima_user_DllExport const std::map<int32_t, int32_t>& my_map() const
    {
        return m_my_map;
    }

    /*!
     * @brief This function returns a reference to member my_map
     * @return Reference to member my_map
     */
    eProsima_user_DllExport std::map<int32_t, int32_t>& my_map()
    {
        return m_my_map;
    }



private:

    std::map<int32_t, int32_t> m_my_map;

};
/*!
 * @brief This class represents the structure MapStructEqual defined by the user in the IDL file.
 * @ingroup Types
 */
class MapStructEqual
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapStructEqual()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapStructEqual()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapStructEqual that will be copied.
     */
    eProsima_user_DllExport MapStructEqual(
            const MapStructEqual& x)
    {
                    m_my_map_equal = x.m_my_map_equal;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapStructEqual that will be copied.
     */
    eProsima_user_DllExport MapStructEqual(
            MapStructEqual&& x) noexcept
    {
        m_my_map_equal = std::move(x.m_my_map_equal);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapStructEqual that will be copied.
     */
    eProsima_user_DllExport MapStructEqual& operator =(
            const MapStructEqual& x)
    {

                    m_my_map_equal = x.m_my_map_equal;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapStructEqual that will be copied.
     */
    eProsima_user_DllExport MapStructEqual& operator =(
            MapStructEqual&& x) noexcept
    {

        m_my_map_equal = std::move(x.m_my_map_equal);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MapStructEqual object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MapStructEqual& x) const
    {
        return (m_my_map_equal == x.m_my_map_equal);
    }

    /*!
     * @brief Comparison operator.
     * @param x MapStructEqual object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MapStructEqual& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_map_equal
     * @param _my_map_equal New value to be copied in member my_map_equal
     */
    eProsima_user_DllExport void my_map_equal(
            const std::map<int32_t, int32_t>& _my_map_equal)
    {
        m_my_map_equal = _my_map_equal;
    }

    /*!
     * @brief This function moves the value in member my_map_equal
     * @param _my_map_equal New value to be moved in member my_map_equal
     */
    eProsima_user_DllExport void my_map_equal(
            std::map<int32_t, int32_t>&& _my_map_equal)
    {
        m_my_map_equal = std::move(_my_map_equal);
    }

    /*!
     * @brief This function returns a constant reference to member my_map_equal
     * @return Constant reference to member my_map_equal
     */
    eProsima_user_DllExport const std::map<int32_t, int32_t>& my_map_equal() const
    {
        return m_my_map_equal;
    }

    /*!
     * @brief This function returns a reference to member my_map_equal
     * @return Reference to member my_map_equal
     */
    eProsima_user_DllExport std::map<int32_t, int32_t>& my_map_equal()
    {
        return m_my_map_equal;
    }



private:

    std::map<int32_t, int32_t> m_my_map_equal;

};
/*!
 * @brief This class represents the structure MapBadKeyStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class MapBadKeyStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapBadKeyStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapBadKeyStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapBadKeyStruct that will be copied.
     */
    eProsima_user_DllExport MapBadKeyStruct(
            const MapBadKeyStruct& x)
    {
                    m_my_map = x.m_my_map;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapBadKeyStruct that will be copied.
     */
    eProsima_user_DllExport MapBadKeyStruct(
            MapBadKeyStruct&& x) noexcept
    {
        m_my_map = std::move(x.m_my_map);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapBadKeyStruct that will be copied.
     */
    eProsima_user_DllExport MapBadKeyStruct& operator =(
            const MapBadKeyStruct& x)
    {

                    m_my_map = x.m_my_map;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapBadKeyStruct that will be copied.
     */
    eProsima_user_DllExport MapBadKeyStruct& operator =(
            MapBadKeyStruct&& x) noexcept
    {

        m_my_map = std::move(x.m_my_map);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MapBadKeyStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MapBadKeyStruct& x) const
    {
        return (m_my_map == x.m_my_map);
    }

    /*!
     * @brief Comparison operator.
     * @param x MapBadKeyStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MapBadKeyStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_map
     * @param _my_map New value to be copied in member my_map
     */
    eProsima_user_DllExport void my_map(
            const std::map<uint8_t, int32_t>& _my_map)
    {
        m_my_map = _my_map;
    }

    /*!
     * @brief This function moves the value in member my_map
     * @param _my_map New value to be moved in member my_map
     */
    eProsima_user_DllExport void my_map(
            std::map<uint8_t, int32_t>&& _my_map)
    {
        m_my_map = std::move(_my_map);
    }

    /*!
     * @brief This function returns a constant reference to member my_map
     * @return Constant reference to member my_map
     */
    eProsima_user_DllExport const std::map<uint8_t, int32_t>& my_map() const
    {
        return m_my_map;
    }

    /*!
     * @brief This function returns a reference to member my_map
     * @return Reference to member my_map
     */
    eProsima_user_DllExport std::map<uint8_t, int32_t>& my_map()
    {
        return m_my_map;
    }



private:

    std::map<uint8_t, int32_t> m_my_map;

};
/*!
 * @brief This class represents the structure MapBadElemStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class MapBadElemStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapBadElemStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapBadElemStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapBadElemStruct that will be copied.
     */
    eProsima_user_DllExport MapBadElemStruct(
            const MapBadElemStruct& x)
    {
                    m_my_map = x.m_my_map;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapBadElemStruct that will be copied.
     */
    eProsima_user_DllExport MapBadElemStruct(
            MapBadElemStruct&& x) noexcept
    {
        m_my_map = std::move(x.m_my_map);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapBadElemStruct that will be copied.
     */
    eProsima_user_DllExport MapBadElemStruct& operator =(
            const MapBadElemStruct& x)
    {

                    m_my_map = x.m_my_map;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapBadElemStruct that will be copied.
     */
    eProsima_user_DllExport MapBadElemStruct& operator =(
            MapBadElemStruct&& x) noexcept
    {

        m_my_map = std::move(x.m_my_map);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MapBadElemStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MapBadElemStruct& x) const
    {
        return (m_my_map == x.m_my_map);
    }

    /*!
     * @brief Comparison operator.
     * @param x MapBadElemStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MapBadElemStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_map
     * @param _my_map New value to be copied in member my_map
     */
    eProsima_user_DllExport void my_map(
            const std::map<int32_t, int64_t>& _my_map)
    {
        m_my_map = _my_map;
    }

    /*!
     * @brief This function moves the value in member my_map
     * @param _my_map New value to be moved in member my_map
     */
    eProsima_user_DllExport void my_map(
            std::map<int32_t, int64_t>&& _my_map)
    {
        m_my_map = std::move(_my_map);
    }

    /*!
     * @brief This function returns a constant reference to member my_map
     * @return Constant reference to member my_map
     */
    eProsima_user_DllExport const std::map<int32_t, int64_t>& my_map() const
    {
        return m_my_map;
    }

    /*!
     * @brief This function returns a reference to member my_map
     * @return Reference to member my_map
     */
    eProsima_user_DllExport std::map<int32_t, int64_t>& my_map()
    {
        return m_my_map;
    }



private:

    std::map<int32_t, int64_t> m_my_map;

};
/*!
 * @brief This class represents the structure MapBoundsStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class MapBoundsStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapBoundsStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapBoundsStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapBoundsStruct that will be copied.
     */
    eProsima_user_DllExport MapBoundsStruct(
            const MapBoundsStruct& x)
    {
                    m_my_map = x.m_my_map;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapBoundsStruct that will be copied.
     */
    eProsima_user_DllExport MapBoundsStruct(
            MapBoundsStruct&& x) noexcept
    {
        m_my_map = std::move(x.m_my_map);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapBoundsStruct that will be copied.
     */
    eProsima_user_DllExport MapBoundsStruct& operator =(
            const MapBoundsStruct& x)
    {

                    m_my_map = x.m_my_map;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapBoundsStruct that will be copied.
     */
    eProsima_user_DllExport MapBoundsStruct& operator =(
            MapBoundsStruct&& x) noexcept
    {

        m_my_map = std::move(x.m_my_map);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MapBoundsStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MapBoundsStruct& x) const
    {
        return (m_my_map == x.m_my_map);
    }

    /*!
     * @brief Comparison operator.
     * @param x MapBoundsStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MapBoundsStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_map
     * @param _my_map New value to be copied in member my_map
     */
    eProsima_user_DllExport void my_map(
            const std::map<int32_t, int32_t>& _my_map)
    {
        m_my_map = _my_map;
    }

    /*!
     * @brief This function moves the value in member my_map
     * @param _my_map New value to be moved in member my_map
     */
    eProsima_user_DllExport void my_map(
            std::map<int32_t, int32_t>&& _my_map)
    {
        m_my_map = std::move(_my_map);
    }

    /*!
     * @brief This function returns a constant reference to member my_map
     * @return Constant reference to member my_map
     */
    eProsima_user_DllExport const std::map<int32_t, int32_t>& my_map() const
    {
        return m_my_map;
    }

    /*!
     * @brief This function returns a reference to member my_map
     * @return Reference to member my_map
     */
    eProsima_user_DllExport std::map<int32_t, int32_t>& my_map()
    {
        return m_my_map;
    }



private:

    std::map<int32_t, int32_t> m_my_map;

};
/*!
 * @brief This class represents the structure MapMapStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class MapMapStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapMapStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapMapStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapMapStruct that will be copied.
     */
    eProsima_user_DllExport MapMapStruct(
            const MapMapStruct& x)
    {
                    m_my_map_map = x.m_my_map_map;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapMapStruct that will be copied.
     */
    eProsima_user_DllExport MapMapStruct(
            MapMapStruct&& x) noexcept
    {
        m_my_map_map = std::move(x.m_my_map_map);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapMapStruct that will be copied.
     */
    eProsima_user_DllExport MapMapStruct& operator =(
            const MapMapStruct& x)
    {

                    m_my_map_map = x.m_my_map_map;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapMapStruct that will be copied.
     */
    eProsima_user_DllExport MapMapStruct& operator =(
            MapMapStruct&& x) noexcept
    {

        m_my_map_map = std::move(x.m_my_map_map);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MapMapStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MapMapStruct& x) const
    {
        return (m_my_map_map == x.m_my_map_map);
    }

    /*!
     * @brief Comparison operator.
     * @param x MapMapStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MapMapStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_map_map
     * @param _my_map_map New value to be copied in member my_map_map
     */
    eProsima_user_DllExport void my_map_map(
            const std::map<int32_t, std::map<int32_t, int32_t>>& _my_map_map)
    {
        m_my_map_map = _my_map_map;
    }

    /*!
     * @brief This function moves the value in member my_map_map
     * @param _my_map_map New value to be moved in member my_map_map
     */
    eProsima_user_DllExport void my_map_map(
            std::map<int32_t, std::map<int32_t, int32_t>>&& _my_map_map)
    {
        m_my_map_map = std::move(_my_map_map);
    }

    /*!
     * @brief This function returns a constant reference to member my_map_map
     * @return Constant reference to member my_map_map
     */
    eProsima_user_DllExport const std::map<int32_t, std::map<int32_t, int32_t>>& my_map_map() const
    {
        return m_my_map_map;
    }

    /*!
     * @brief This function returns a reference to member my_map_map
     * @return Reference to member my_map_map
     */
    eProsima_user_DllExport std::map<int32_t, std::map<int32_t, int32_t>>& my_map_map()
    {
        return m_my_map_map;
    }



private:

    std::map<int32_t, std::map<int32_t, int32_t>> m_my_map_map;

};
/*!
 * @brief This class represents the structure MapMapBoundsStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class MapMapBoundsStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MapMapBoundsStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MapMapBoundsStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MapMapBoundsStruct that will be copied.
     */
    eProsima_user_DllExport MapMapBoundsStruct(
            const MapMapBoundsStruct& x)
    {
                    m_my_map_map = x.m_my_map_map;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MapMapBoundsStruct that will be copied.
     */
    eProsima_user_DllExport MapMapBoundsStruct(
            MapMapBoundsStruct&& x) noexcept
    {
        m_my_map_map = std::move(x.m_my_map_map);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MapMapBoundsStruct that will be copied.
     */
    eProsima_user_DllExport MapMapBoundsStruct& operator =(
            const MapMapBoundsStruct& x)
    {

                    m_my_map_map = x.m_my_map_map;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MapMapBoundsStruct that will be copied.
     */
    eProsima_user_DllExport MapMapBoundsStruct& operator =(
            MapMapBoundsStruct&& x) noexcept
    {

        m_my_map_map = std::move(x.m_my_map_map);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MapMapBoundsStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MapMapBoundsStruct& x) const
    {
        return (m_my_map_map == x.m_my_map_map);
    }

    /*!
     * @brief Comparison operator.
     * @param x MapMapBoundsStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MapMapBoundsStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_map_map
     * @param _my_map_map New value to be copied in member my_map_map
     */
    eProsima_user_DllExport void my_map_map(
            const std::map<int32_t, std::map<int32_t, int32_t>>& _my_map_map)
    {
        m_my_map_map = _my_map_map;
    }

    /*!
     * @brief This function moves the value in member my_map_map
     * @param _my_map_map New value to be moved in member my_map_map
     */
    eProsima_user_DllExport void my_map_map(
            std::map<int32_t, std::map<int32_t, int32_t>>&& _my_map_map)
    {
        m_my_map_map = std::move(_my_map_map);
    }

    /*!
     * @brief This function returns a constant reference to member my_map_map
     * @return Constant reference to member my_map_map
     */
    eProsima_user_DllExport const std::map<int32_t, std::map<int32_t, int32_t>>& my_map_map() const
    {
        return m_my_map_map;
    }

    /*!
     * @brief This function returns a reference to member my_map_map
     * @return Reference to member my_map_map
     */
    eProsima_user_DllExport std::map<int32_t, std::map<int32_t, int32_t>>& my_map_map()
    {
        return m_my_map_map;
    }



private:

    std::map<int32_t, std::map<int32_t, int32_t>> m_my_map_map;

};
/*!
 * @brief This class represents the union SimpleUnion defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleUnion()
    {
        m__d = 0;
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleUnion()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleUnion that will be copied.
     */
    eProsima_user_DllExport SimpleUnion(
            const SimpleUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleUnion that will be copied.
     */
    eProsima_user_DllExport SimpleUnion(
            SimpleUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleUnion that will be copied.
     */
    eProsima_user_DllExport SimpleUnion& operator =(
            const SimpleUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleUnion that will be copied.
     */
    eProsima_user_DllExport SimpleUnion& operator =(
            SimpleUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleUnion& x) const
    {
        if (m__d != x.m__d)
        {
            return false;
        }

        switch (m__d)
        {
            case 0:
                return (m_first == x.m_first);
                break;


            case 1:
                return (m_second == x.m_second);
                break;

            default:
                break;
        }
        return false;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleUnion& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d)
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                switch (__d)
                {
                    case 0:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case 1:
                switch (__d)
                {
                    case 1:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;

            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d()
    {
        return m__d;
    }

    /*!
     * @brief This function sets a value in member first
     * @param _first New value for member first
     */
    eProsima_user_DllExport void first(
            int32_t _first)
    {
        m_first = _first;
        m__d = 0;

    }

    /*!
     * @brief This function returns the value of member first
     * @return Value of member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t first() const
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }

    /*!
     * @brief This function returns a reference to member first
     * @return Reference to member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& first()
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }


    /*!
     * @brief This function sets a value in member second
     * @param _second New value for member second
     */
    eProsima_user_DllExport void second(
            int64_t _second)
    {
        m_second = _second;
        m__d = 1;

    }

    /*!
     * @brief This function returns the value of member second
     * @return Value of member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t second() const
    {
        bool b = false;

        switch (m__d)
        {
            case 1:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t& second()
    {
        bool b = false;

        switch (m__d)
        {
            case 1:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }



private:

    int32_t m__d;

    int32_t m_first{0};
    int64_t m_second{0};
};
/*!
 * @brief This class represents the union SimpleUnionNames defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleUnionNames
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleUnionNames()
    {
        m__d = 0;
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleUnionNames()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleUnionNames that will be copied.
     */
    eProsima_user_DllExport SimpleUnionNames(
            const SimpleUnionNames& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first_case = x.m_first_case;
                break;


            case 1:
                m_second_case = x.m_second_case;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleUnionNames that will be copied.
     */
    eProsima_user_DllExport SimpleUnionNames(
            SimpleUnionNames&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first_case = x.m_first_case;
                break;


            case 1:
                m_second_case = x.m_second_case;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleUnionNames that will be copied.
     */
    eProsima_user_DllExport SimpleUnionNames& operator =(
            const SimpleUnionNames& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first_case = x.m_first_case;
                break;


            case 1:
                m_second_case = x.m_second_case;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleUnionNames that will be copied.
     */
    eProsima_user_DllExport SimpleUnionNames& operator =(
            SimpleUnionNames&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first_case = x.m_first_case;
                break;


            case 1:
                m_second_case = x.m_second_case;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnionNames object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleUnionNames& x) const
    {
        if (m__d != x.m__d)
        {
            return false;
        }

        switch (m__d)
        {
            case 0:
                return (m_first_case == x.m_first_case);
                break;


            case 1:
                return (m_second_case == x.m_second_case);
                break;

            default:
                break;
        }
        return false;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnionNames object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleUnionNames& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d)
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                switch (__d)
                {
                    case 0:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case 1:
                switch (__d)
                {
                    case 1:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;

            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d()
    {
        return m__d;
    }

    /*!
     * @brief This function sets a value in member first_case
     * @param _first_case New value for member first_case
     */
    eProsima_user_DllExport void first_case(
            int32_t _first_case)
    {
        m_first_case = _first_case;
        m__d = 0;

    }

    /*!
     * @brief This function returns the value of member first_case
     * @return Value of member first_case
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t first_case() const
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first_case;
    }

    /*!
     * @brief This function returns a reference to member first_case
     * @return Reference to member first_case
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& first_case()
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first_case;
    }


    /*!
     * @brief This function sets a value in member second_case
     * @param _second_case New value for member second_case
     */
    eProsima_user_DllExport void second_case(
            int64_t _second_case)
    {
        m_second_case = _second_case;
        m__d = 1;

    }

    /*!
     * @brief This function returns the value of member second_case
     * @return Value of member second_case
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t second_case() const
    {
        bool b = false;

        switch (m__d)
        {
            case 1:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second_case;
    }

    /*!
     * @brief This function returns a reference to member second_case
     * @return Reference to member second_case
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t& second_case()
    {
        bool b = false;

        switch (m__d)
        {
            case 1:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second_case;
    }



private:

    int32_t m__d;

    int32_t m_first_case{0};
    int64_t m_second_case{0};
};
/*!
 * @brief This class represents the union SimpleTypeUnion defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleTypeUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleTypeUnion()
    {
        m__d = 0;
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleTypeUnion()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleTypeUnion that will be copied.
     */
    eProsima_user_DllExport SimpleTypeUnion(
            const SimpleTypeUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleTypeUnion that will be copied.
     */
    eProsima_user_DllExport SimpleTypeUnion(
            SimpleTypeUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleTypeUnion that will be copied.
     */
    eProsima_user_DllExport SimpleTypeUnion& operator =(
            const SimpleTypeUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleTypeUnion that will be copied.
     */
    eProsima_user_DllExport SimpleTypeUnion& operator =(
            SimpleTypeUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleTypeUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleTypeUnion& x) const
    {
        if (m__d != x.m__d)
        {
            return false;
        }

        switch (m__d)
        {
            case 0:
                return (m_first == x.m_first);
                break;


            case 1:
                return (m_second == x.m_second);
                break;

            default:
                break;
        }
        return false;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleTypeUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleTypeUnion& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d)
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                switch (__d)
                {
                    case 0:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case 1:
                switch (__d)
                {
                    case 1:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;

            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d()
    {
        return m__d;
    }

    /*!
     * @brief This function sets a value in member first
     * @param _first New value for member first
     */
    eProsima_user_DllExport void first(
            uint8_t _first)
    {
        m_first = _first;
        m__d = 0;

    }

    /*!
     * @brief This function returns the value of member first
     * @return Value of member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint8_t first() const
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }

    /*!
     * @brief This function returns a reference to member first
     * @return Reference to member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint8_t& first()
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }


    /*!
     * @brief This function sets a value in member second
     * @param _second New value for member second
     */
    eProsima_user_DllExport void second(
            int64_t _second)
    {
        m_second = _second;
        m__d = 1;

    }

    /*!
     * @brief This function returns the value of member second
     * @return Value of member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t second() const
    {
        bool b = false;

        switch (m__d)
        {
            case 1:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t& second()
    {
        bool b = false;

        switch (m__d)
        {
            case 1:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }



private:

    int32_t m__d;

    uint8_t m_first{0};
    int64_t m_second{0};
};
/*!
 * @brief This class represents the union SimpleBadUnion defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleBadUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleBadUnion()
    {
        m__d = 0;
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleBadUnion()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleBadUnion that will be copied.
     */
    eProsima_user_DllExport SimpleBadUnion(
            const SimpleBadUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 2:
                m_second = x.m_second;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleBadUnion that will be copied.
     */
    eProsima_user_DllExport SimpleBadUnion(
            SimpleBadUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 2:
                m_second = x.m_second;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleBadUnion that will be copied.
     */
    eProsima_user_DllExport SimpleBadUnion& operator =(
            const SimpleBadUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 2:
                m_second = x.m_second;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleBadUnion that will be copied.
     */
    eProsima_user_DllExport SimpleBadUnion& operator =(
            SimpleBadUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 2:
                m_second = x.m_second;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleBadUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleBadUnion& x) const
    {
        if (m__d != x.m__d)
        {
            return false;
        }

        switch (m__d)
        {
            case 0:
                return (m_first == x.m_first);
                break;


            case 2:
                return (m_second == x.m_second);
                break;

            default:
                break;
        }
        return false;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleBadUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleBadUnion& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d)
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                switch (__d)
                {
                    case 0:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case 2:
                switch (__d)
                {
                    case 2:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;

            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d()
    {
        return m__d;
    }

    /*!
     * @brief This function sets a value in member first
     * @param _first New value for member first
     */
    eProsima_user_DllExport void first(
            int32_t _first)
    {
        m_first = _first;
        m__d = 0;

    }

    /*!
     * @brief This function returns the value of member first
     * @return Value of member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t first() const
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }

    /*!
     * @brief This function returns a reference to member first
     * @return Reference to member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& first()
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }


    /*!
     * @brief This function sets a value in member second
     * @param _second New value for member second
     */
    eProsima_user_DllExport void second(
            int64_t _second)
    {
        m_second = _second;
        m__d = 2;

    }

    /*!
     * @brief This function returns the value of member second
     * @return Value of member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t second() const
    {
        bool b = false;

        switch (m__d)
        {
            case 2:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t& second()
    {
        bool b = false;

        switch (m__d)
        {
            case 2:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }



private:

    int32_t m__d;

    int32_t m_first{0};
    int64_t m_second{0};
};
/*!
 * @brief This class represents the union SimpleBadDiscUnion defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleBadDiscUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleBadDiscUnion()
    {
        m__d = 0;
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleBadDiscUnion()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleBadDiscUnion that will be copied.
     */
    eProsima_user_DllExport SimpleBadDiscUnion(
            const SimpleBadDiscUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleBadDiscUnion that will be copied.
     */
    eProsima_user_DllExport SimpleBadDiscUnion(
            SimpleBadDiscUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleBadDiscUnion that will be copied.
     */
    eProsima_user_DllExport SimpleBadDiscUnion& operator =(
            const SimpleBadDiscUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleBadDiscUnion that will be copied.
     */
    eProsima_user_DllExport SimpleBadDiscUnion& operator =(
            SimpleBadDiscUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case 0:
                m_first = x.m_first;
                break;


            case 1:
                m_second = x.m_second;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleBadDiscUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleBadDiscUnion& x) const
    {
        if (m__d != x.m__d)
        {
            return false;
        }

        switch (m__d)
        {
            case 0:
                return (m_first == x.m_first);
                break;


            case 1:
                return (m_second == x.m_second);
                break;

            default:
                break;
        }
        return false;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleBadDiscUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleBadDiscUnion& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            uint8_t __d)
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                switch (__d)
                {
                    case 0:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case 1:
                switch (__d)
                {
                    case 1:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;

            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport uint8_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport uint8_t& _d()
    {
        return m__d;
    }

    /*!
     * @brief This function sets a value in member first
     * @param _first New value for member first
     */
    eProsima_user_DllExport void first(
            int32_t _first)
    {
        m_first = _first;
        m__d = 0;

    }

    /*!
     * @brief This function returns the value of member first
     * @return Value of member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t first() const
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }

    /*!
     * @brief This function returns a reference to member first
     * @return Reference to member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& first()
    {
        bool b = false;

        switch (m__d)
        {
            case 0:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }


    /*!
     * @brief This function sets a value in member second
     * @param _second New value for member second
     */
    eProsima_user_DllExport void second(
            int64_t _second)
    {
        m_second = _second;
        m__d = 1;

    }

    /*!
     * @brief This function returns the value of member second
     * @return Value of member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t second() const
    {
        bool b = false;

        switch (m__d)
        {
            case 1:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t& second()
    {
        bool b = false;

        switch (m__d)
        {
            case 1:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }



private:

    uint8_t m__d;

    int32_t m_first{0};
    int64_t m_second{0};
};
/*!
 * @brief This class represents the structure SimpleUnionStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleUnionStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleUnionStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleUnionStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleUnionStruct(
            const SimpleUnionStruct& x)
    {
                    m_my_union = x.m_my_union;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleUnionStruct(
            SimpleUnionStruct&& x) noexcept
    {
        m_my_union = std::move(x.m_my_union);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleUnionStruct& operator =(
            const SimpleUnionStruct& x)
    {

                    m_my_union = x.m_my_union;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleUnionStruct& operator =(
            SimpleUnionStruct&& x) noexcept
    {

        m_my_union = std::move(x.m_my_union);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleUnionStruct& x) const
    {
        return (m_my_union == x.m_my_union);
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleUnionStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_union
     * @param _my_union New value to be copied in member my_union
     */
    eProsima_user_DllExport void my_union(
            const SimpleUnion& _my_union)
    {
        m_my_union = _my_union;
    }

    /*!
     * @brief This function moves the value in member my_union
     * @param _my_union New value to be moved in member my_union
     */
    eProsima_user_DllExport void my_union(
            SimpleUnion&& _my_union)
    {
        m_my_union = std::move(_my_union);
    }

    /*!
     * @brief This function returns a constant reference to member my_union
     * @return Constant reference to member my_union
     */
    eProsima_user_DllExport const SimpleUnion& my_union() const
    {
        return m_my_union;
    }

    /*!
     * @brief This function returns a reference to member my_union
     * @return Reference to member my_union
     */
    eProsima_user_DllExport SimpleUnion& my_union()
    {
        return m_my_union;
    }



private:

    SimpleUnion m_my_union;

};
/*!
 * @brief This class represents the structure SimpleUnionStructEqual defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleUnionStructEqual
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleUnionStructEqual()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleUnionStructEqual()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleUnionStructEqual that will be copied.
     */
    eProsima_user_DllExport SimpleUnionStructEqual(
            const SimpleUnionStructEqual& x)
    {
                    m_my_union_equal = x.m_my_union_equal;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleUnionStructEqual that will be copied.
     */
    eProsima_user_DllExport SimpleUnionStructEqual(
            SimpleUnionStructEqual&& x) noexcept
    {
        m_my_union_equal = std::move(x.m_my_union_equal);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleUnionStructEqual that will be copied.
     */
    eProsima_user_DllExport SimpleUnionStructEqual& operator =(
            const SimpleUnionStructEqual& x)
    {

                    m_my_union_equal = x.m_my_union_equal;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleUnionStructEqual that will be copied.
     */
    eProsima_user_DllExport SimpleUnionStructEqual& operator =(
            SimpleUnionStructEqual&& x) noexcept
    {

        m_my_union_equal = std::move(x.m_my_union_equal);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnionStructEqual object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleUnionStructEqual& x) const
    {
        return (m_my_union_equal == x.m_my_union_equal);
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnionStructEqual object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleUnionStructEqual& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_union_equal
     * @param _my_union_equal New value to be copied in member my_union_equal
     */
    eProsima_user_DllExport void my_union_equal(
            const SimpleUnion& _my_union_equal)
    {
        m_my_union_equal = _my_union_equal;
    }

    /*!
     * @brief This function moves the value in member my_union_equal
     * @param _my_union_equal New value to be moved in member my_union_equal
     */
    eProsima_user_DllExport void my_union_equal(
            SimpleUnion&& _my_union_equal)
    {
        m_my_union_equal = std::move(_my_union_equal);
    }

    /*!
     * @brief This function returns a constant reference to member my_union_equal
     * @return Constant reference to member my_union_equal
     */
    eProsima_user_DllExport const SimpleUnion& my_union_equal() const
    {
        return m_my_union_equal;
    }

    /*!
     * @brief This function returns a reference to member my_union_equal
     * @return Reference to member my_union_equal
     */
    eProsima_user_DllExport SimpleUnion& my_union_equal()
    {
        return m_my_union_equal;
    }



private:

    SimpleUnion m_my_union_equal;

};
/*!
 * @brief This class represents the structure SimpleUnionNamesStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleUnionNamesStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleUnionNamesStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleUnionNamesStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleUnionNamesStruct that will be copied.
     */
    eProsima_user_DllExport SimpleUnionNamesStruct(
            const SimpleUnionNamesStruct& x)
    {
                    m_my_union = x.m_my_union;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleUnionNamesStruct that will be copied.
     */
    eProsima_user_DllExport SimpleUnionNamesStruct(
            SimpleUnionNamesStruct&& x) noexcept
    {
        m_my_union = std::move(x.m_my_union);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleUnionNamesStruct that will be copied.
     */
    eProsima_user_DllExport SimpleUnionNamesStruct& operator =(
            const SimpleUnionNamesStruct& x)
    {

                    m_my_union = x.m_my_union;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleUnionNamesStruct that will be copied.
     */
    eProsima_user_DllExport SimpleUnionNamesStruct& operator =(
            SimpleUnionNamesStruct&& x) noexcept
    {

        m_my_union = std::move(x.m_my_union);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnionNamesStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleUnionNamesStruct& x) const
    {
        return (m_my_union == x.m_my_union);
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleUnionNamesStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleUnionNamesStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_union
     * @param _my_union New value to be copied in member my_union
     */
    eProsima_user_DllExport void my_union(
            const SimpleUnionNames& _my_union)
    {
        m_my_union = _my_union;
    }

    /*!
     * @brief This function moves the value in member my_union
     * @param _my_union New value to be moved in member my_union
     */
    eProsima_user_DllExport void my_union(
            SimpleUnionNames&& _my_union)
    {
        m_my_union = std::move(_my_union);
    }

    /*!
     * @brief This function returns a constant reference to member my_union
     * @return Constant reference to member my_union
     */
    eProsima_user_DllExport const SimpleUnionNames& my_union() const
    {
        return m_my_union;
    }

    /*!
     * @brief This function returns a reference to member my_union
     * @return Reference to member my_union
     */
    eProsima_user_DllExport SimpleUnionNames& my_union()
    {
        return m_my_union;
    }



private:

    SimpleUnionNames m_my_union;

};
/*!
 * @brief This class represents the structure SimpleTypeUnionStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleTypeUnionStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleTypeUnionStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleTypeUnionStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleTypeUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleTypeUnionStruct(
            const SimpleTypeUnionStruct& x)
    {
                    m_my_union = x.m_my_union;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleTypeUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleTypeUnionStruct(
            SimpleTypeUnionStruct&& x) noexcept
    {
        m_my_union = std::move(x.m_my_union);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleTypeUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleTypeUnionStruct& operator =(
            const SimpleTypeUnionStruct& x)
    {

                    m_my_union = x.m_my_union;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleTypeUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleTypeUnionStruct& operator =(
            SimpleTypeUnionStruct&& x) noexcept
    {

        m_my_union = std::move(x.m_my_union);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleTypeUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleTypeUnionStruct& x) const
    {
        return (m_my_union == x.m_my_union);
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleTypeUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleTypeUnionStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_union
     * @param _my_union New value to be copied in member my_union
     */
    eProsima_user_DllExport void my_union(
            const SimpleTypeUnion& _my_union)
    {
        m_my_union = _my_union;
    }

    /*!
     * @brief This function moves the value in member my_union
     * @param _my_union New value to be moved in member my_union
     */
    eProsima_user_DllExport void my_union(
            SimpleTypeUnion&& _my_union)
    {
        m_my_union = std::move(_my_union);
    }

    /*!
     * @brief This function returns a constant reference to member my_union
     * @return Constant reference to member my_union
     */
    eProsima_user_DllExport const SimpleTypeUnion& my_union() const
    {
        return m_my_union;
    }

    /*!
     * @brief This function returns a reference to member my_union
     * @return Reference to member my_union
     */
    eProsima_user_DllExport SimpleTypeUnion& my_union()
    {
        return m_my_union;
    }



private:

    SimpleTypeUnion m_my_union;

};
/*!
 * @brief This class represents the structure SimpleBadUnionStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SimpleBadUnionStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleBadUnionStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleBadUnionStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleBadUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleBadUnionStruct(
            const SimpleBadUnionStruct& x)
    {
                    m_my_union = x.m_my_union;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleBadUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleBadUnionStruct(
            SimpleBadUnionStruct&& x) noexcept
    {
        m_my_union = std::move(x.m_my_union);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleBadUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleBadUnionStruct& operator =(
            const SimpleBadUnionStruct& x)
    {

                    m_my_union = x.m_my_union;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleBadUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleBadUnionStruct& operator =(
            SimpleBadUnionStruct&& x) noexcept
    {

        m_my_union = std::move(x.m_my_union);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleBadUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleBadUnionStruct& x) const
    {
        return (m_my_union == x.m_my_union);
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleBadUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleBadUnionStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_union
     * @param _my_union New value to be copied in member my_union
     */
    eProsima_user_DllExport void my_union(
            const SimpleBadUnion& _my_union)
    {
        m_my_union = _my_union;
    }

    /*!
     * @brief This function moves the value in member my_union
     * @param _my_union New value to be moved in member my_union
     */
    eProsima_user_DllExport void my_union(
            SimpleBadUnion&& _my_union)
    {
        m_my_union = std::move(_my_union);
    }

    /*!
     * @brief This function returns a constant reference to member my_union
     * @return Constant reference to member my_union
     */
    eProsima_user_DllExport const SimpleBadUnion& my_union() const
    {
        return m_my_union;
    }

    /*!
     * @brief This function returns a reference to member my_union
     * @return Reference to member my_union
     */
    eProsima_user_DllExport SimpleBadUnion& my_union()
    {
        return m_my_union;
    }



private:

    SimpleBadUnion m_my_union;

};
/*!
 * @brief This class represents the structure SimplBadDiscUnionStruct defined by the user in the IDL file.
 * @ingroup Types
 */
class SimplBadDiscUnionStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimplBadDiscUnionStruct()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimplBadDiscUnionStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimplBadDiscUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimplBadDiscUnionStruct(
            const SimplBadDiscUnionStruct& x)
    {
                    m_my_union = x.m_my_union;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimplBadDiscUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimplBadDiscUnionStruct(
            SimplBadDiscUnionStruct&& x) noexcept
    {
        m_my_union = std::move(x.m_my_union);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimplBadDiscUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimplBadDiscUnionStruct& operator =(
            const SimplBadDiscUnionStruct& x)
    {

                    m_my_union = x.m_my_union;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimplBadDiscUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimplBadDiscUnionStruct& operator =(
            SimplBadDiscUnionStruct&& x) noexcept
    {

        m_my_union = std::move(x.m_my_union);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimplBadDiscUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimplBadDiscUnionStruct& x) const
    {
        return (m_my_union == x.m_my_union);
    }

    /*!
     * @brief Comparison operator.
     * @param x SimplBadDiscUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimplBadDiscUnionStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_union
     * @param _my_union New value to be copied in member my_union
     */
    eProsima_user_DllExport void my_union(
            const SimpleBadDiscUnion& _my_union)
    {
        m_my_union = _my_union;
    }

    /*!
     * @brief This function moves the value in member my_union
     * @param _my_union New value to be moved in member my_union
     */
    eProsima_user_DllExport void my_union(
            SimpleBadDiscUnion&& _my_union)
    {
        m_my_union = std::move(_my_union);
    }

    /*!
     * @brief This function returns a constant reference to member my_union
     * @return Constant reference to member my_union
     */
    eProsima_user_DllExport const SimpleBadDiscUnion& my_union() const
    {
        return m_my_union;
    }

    /*!
     * @brief This function returns a reference to member my_union
     * @return Reference to member my_union
     */
    eProsima_user_DllExport SimpleBadDiscUnion& my_union()
    {
        return m_my_union;
    }



private:

    SimpleBadDiscUnion m_my_union;

};

#endif // _FAST_DDS_GENERATED_TYPES_HPP_


