// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file TypesTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "TypesTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "Types.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_Types_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_MyEnumStruct_type_identifier();

                register_MyBadEnumStruct_type_identifier();

                register_MyAliasEnumStruct_type_identifier();

                register_BasicStruct_type_identifier();

                register_BasicNamesStruct_type_identifier();

                register_BasicBadStruct_type_identifier();

                register_BasicWideStruct_type_identifier();

                register_BadBasicWideStruct_type_identifier();

                register_StringStruct_type_identifier();

                register_LargeStringStruct_type_identifier();

                register_WStringStruct_type_identifier();

                register_LargeWStringStruct_type_identifier();

                register_ArrayStruct_type_identifier();

                register_ArrayStructEqual_type_identifier();

                register_ArrayBadStruct_type_identifier();

                register_ArrayDimensionsStruct_type_identifier();

                register_ArraySizeStruct_type_identifier();

                register_SequenceStruct_type_identifier();

                register_SequenceStructEqual_type_identifier();

                register_SequenceBadStruct_type_identifier();

                register_SequenceBoundsStruct_type_identifier();

                register_SequenceSequenceStruct_type_identifier();

                register_SequenceSequenceBoundsStruct_type_identifier();

                register_MapStruct_type_identifier();

                register_MapStructEqual_type_identifier();

                register_MapBadKeyStruct_type_identifier();

                register_MapBadElemStruct_type_identifier();

                register_MapBoundsStruct_type_identifier();

                register_MapMapStruct_type_identifier();

                register_MapMapBoundsStruct_type_identifier();

                register_SimpleUnion_type_identifier();

                register_SimpleUnionNames_type_identifier();

                register_SimpleTypeUnion_type_identifier();

                register_SimpleBadUnion_type_identifier();

                register_SimpleBadDiscUnion_type_identifier();

                register_SimpleUnionStruct_type_identifier();

                register_SimpleUnionStructEqual_type_identifier();

                register_SimpleUnionNamesStruct_type_identifier();

                register_SimpleTypeUnionStruct_type_identifier();

                register_SimpleBadUnionStruct_type_identifier();

                register_SimplBadDiscUnionStruct_type_identifier();

            });
}

void register_MyEnumStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MyEnumStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MyEnumStruct;
        TypeIdentifierPair type_ids_MyEnumStruct;
        QualifiedTypeName type_name_MyEnumStruct = "MyEnumStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnumStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnumStruct;
        CompleteTypeDetail detail_MyEnumStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnumStruct, ann_custom_MyEnumStruct, type_name_MyEnumStruct.to_string());
        CompleteStructHeader header_MyEnumStruct;
        header_MyEnumStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MyEnumStruct);
        CompleteStructMemberSeq member_seq_MyEnumStruct;
        {
            return_code_MyEnumStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyEnum", type_ids_MyEnumStruct);

            if (return_code_MyEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EnumTypeFlag enum_flags_MyEnum = 0;
                BitBound bit_bound_MyEnum = 32;
                CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                QualifiedTypeName type_name_MyEnum = "MyEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                {
                    EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                    ann_custom_MyEnum.reset();
                    MemberName name_A = "A";
                    CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                    CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                }
                {
                    EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                    ann_custom_MyEnum.reset();
                    MemberName name_B = "B";
                    CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                    CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                }
                {
                    EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                    ann_custom_MyEnum.reset();
                    MemberName name_C = "C";
                    CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                    CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                }
                CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                        literal_seq_MyEnum);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code_MyEnumStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyEnum", type_ids_MyEnumStruct);
                if (return_code_MyEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_enum;
            MemberId member_id_my_enum = 0x00000000;
            if (EK_COMPLETE == type_ids_MyEnumStruct.type_identifier1()._d() || TK_NONE == type_ids_MyEnumStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MyEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MyEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MyEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MyEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MyEnumStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MyEnumStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MyEnumStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MyEnumStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_MyEnumStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MyEnumStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MyEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MyEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MyEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MyEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MyEnumStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MyEnumStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MyEnumStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MyEnumStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyEnumStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_MyEnumStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_enum = "my_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_enum;
            ann_custom_MyEnumStruct.reset();
            CompleteMemberDetail detail_my_enum = TypeObjectUtils::build_complete_member_detail(name_my_enum, member_ann_builtin_my_enum, ann_custom_MyEnumStruct);
            CompleteStructMember member_my_enum = TypeObjectUtils::build_complete_struct_member(common_my_enum, detail_my_enum);
            TypeObjectUtils::add_complete_struct_member(member_seq_MyEnumStruct, member_my_enum);
        }
        CompleteStructType struct_type_MyEnumStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MyEnumStruct, header_MyEnumStruct, member_seq_MyEnumStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MyEnumStruct, type_name_MyEnumStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyEnumStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MyEnumStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MyEnumStruct", type_ids_MyEnumStruct);
        if (return_code_MyEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyEnumStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MyBadEnumStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MyBadEnumStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MyBadEnumStruct;
        TypeIdentifierPair type_ids_MyBadEnumStruct;
        QualifiedTypeName type_name_MyBadEnumStruct = "MyBadEnumStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBadEnumStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBadEnumStruct;
        CompleteTypeDetail detail_MyBadEnumStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBadEnumStruct, ann_custom_MyBadEnumStruct, type_name_MyBadEnumStruct.to_string());
        CompleteStructHeader header_MyBadEnumStruct;
        header_MyBadEnumStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MyBadEnumStruct);
        CompleteStructMemberSeq member_seq_MyBadEnumStruct;
        {
            return_code_MyBadEnumStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyBadEnum", type_ids_MyBadEnumStruct);

            if (return_code_MyBadEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EnumTypeFlag enum_flags_MyBadEnum = 0;
                BitBound bit_bound_MyBadEnum = 32;
                CommonEnumeratedHeader common_MyBadEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyBadEnum);
                QualifiedTypeName type_name_MyBadEnum = "MyBadEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyBadEnum;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyBadEnum;
                CompleteTypeDetail detail_MyBadEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyBadEnum, ann_custom_MyBadEnum, type_name_MyBadEnum.to_string());
                CompleteEnumeratedHeader header_MyBadEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyBadEnum, detail_MyBadEnum);
                CompleteEnumeratedLiteralSeq literal_seq_MyBadEnum;
                {
                    EnumeratedLiteralFlag flags_A1 = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_A1 = TypeObjectUtils::build_common_enumerated_literal(0, flags_A1);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A1;
                    ann_custom_MyBadEnum.reset();
                    MemberName name_A1 = "A1";
                    CompleteMemberDetail detail_A1 = TypeObjectUtils::build_complete_member_detail(name_A1, member_ann_builtin_A1, ann_custom_MyBadEnum);
                    CompleteEnumeratedLiteral literal_A1 = TypeObjectUtils::build_complete_enumerated_literal(common_A1, detail_A1);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyBadEnum, literal_A1);
                }
                {
                    EnumeratedLiteralFlag flags_B1 = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_B1 = TypeObjectUtils::build_common_enumerated_literal(1, flags_B1);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B1;
                    ann_custom_MyBadEnum.reset();
                    MemberName name_B1 = "B1";
                    CompleteMemberDetail detail_B1 = TypeObjectUtils::build_complete_member_detail(name_B1, member_ann_builtin_B1, ann_custom_MyBadEnum);
                    CompleteEnumeratedLiteral literal_B1 = TypeObjectUtils::build_complete_enumerated_literal(common_B1, detail_B1);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyBadEnum, literal_B1);
                }
                {
                    EnumeratedLiteralFlag flags_C1 = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common_C1 = TypeObjectUtils::build_common_enumerated_literal(2, flags_C1);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C1;
                    ann_custom_MyBadEnum.reset();
                    MemberName name_C1 = "C1";
                    CompleteMemberDetail detail_C1 = TypeObjectUtils::build_complete_member_detail(name_C1, member_ann_builtin_C1, ann_custom_MyBadEnum);
                    CompleteEnumeratedLiteral literal_C1 = TypeObjectUtils::build_complete_enumerated_literal(common_C1, detail_C1);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyBadEnum, literal_C1);
                }
                CompleteEnumeratedType enumerated_type_MyBadEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyBadEnum, header_MyBadEnum,
                        literal_seq_MyBadEnum);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyBadEnum, type_name_MyBadEnum.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyBadEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code_MyBadEnumStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyBadEnum", type_ids_MyBadEnumStruct);
                if (return_code_MyBadEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyBadEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_enum;
            MemberId member_id_my_enum = 0x00000000;
            if (EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier1()._d() || TK_NONE == type_ids_MyBadEnumStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MyBadEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MyBadEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MyBadEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MyBadEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MyBadEnumStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MyBadEnumStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_MyBadEnumStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MyBadEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MyBadEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MyBadEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MyBadEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MyBadEnumStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MyBadEnumStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyBadEnumStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_MyBadEnumStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_enum = "my_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_enum;
            ann_custom_MyBadEnumStruct.reset();
            CompleteMemberDetail detail_my_enum = TypeObjectUtils::build_complete_member_detail(name_my_enum, member_ann_builtin_my_enum, ann_custom_MyBadEnumStruct);
            CompleteStructMember member_my_enum = TypeObjectUtils::build_complete_struct_member(common_my_enum, detail_my_enum);
            TypeObjectUtils::add_complete_struct_member(member_seq_MyBadEnumStruct, member_my_enum);
        }
        CompleteStructType struct_type_MyBadEnumStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MyBadEnumStruct, header_MyBadEnumStruct, member_seq_MyBadEnumStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MyBadEnumStruct, type_name_MyBadEnumStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyBadEnumStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MyBadEnumStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MyBadEnumStruct", type_ids_MyBadEnumStruct);
        if (return_code_MyBadEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyBadEnumStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MyAliasEnumStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MyAliasEnumStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MyAliasEnumStruct;
        TypeIdentifierPair type_ids_MyAliasEnumStruct;
        QualifiedTypeName type_name_MyAliasEnumStruct = "MyAliasEnumStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasEnumStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasEnumStruct;
        CompleteTypeDetail detail_MyAliasEnumStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasEnumStruct, ann_custom_MyAliasEnumStruct, type_name_MyAliasEnumStruct.to_string());
        CompleteStructHeader header_MyAliasEnumStruct;
        header_MyAliasEnumStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MyAliasEnumStruct);
        CompleteStructMemberSeq member_seq_MyAliasEnumStruct;
        {
            return_code_MyAliasEnumStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyAliasEnum", type_ids_MyAliasEnumStruct);

            if (return_code_MyAliasEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                AliasTypeFlag alias_flags_MyAliasEnum = 0;
                QualifiedTypeName type_name_MyAliasEnum = "MyAliasEnum";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyAliasEnum;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyAliasEnum;
                CompleteTypeDetail detail_MyAliasEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyAliasEnum, ann_custom_MyAliasEnum, type_name_MyAliasEnum.to_string());
                CompleteAliasHeader header_MyAliasEnum = TypeObjectUtils::build_complete_alias_header(detail_MyAliasEnum);
                AliasMemberFlag related_flags_MyAliasEnum = 0;
                return_code_MyAliasEnumStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyEnum", type_ids_MyAliasEnumStruct);

                if (return_code_MyAliasEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EnumTypeFlag enum_flags_MyEnum = 0;
                    BitBound bit_bound_MyEnum = 32;
                    CommonEnumeratedHeader common_MyEnum = TypeObjectUtils::build_common_enumerated_header(bit_bound_MyEnum);
                    QualifiedTypeName type_name_MyEnum = "MyEnum";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MyEnum;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MyEnum;
                    CompleteTypeDetail detail_MyEnum = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MyEnum, ann_custom_MyEnum, type_name_MyEnum.to_string());
                    CompleteEnumeratedHeader header_MyEnum = TypeObjectUtils::build_complete_enumerated_header(common_MyEnum, detail_MyEnum);
                    CompleteEnumeratedLiteralSeq literal_seq_MyEnum;
                    {
                        EnumeratedLiteralFlag flags_A = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_A = TypeObjectUtils::build_common_enumerated_literal(0, flags_A);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_A;
                        ann_custom_MyEnum.reset();
                        MemberName name_A = "A";
                        CompleteMemberDetail detail_A = TypeObjectUtils::build_complete_member_detail(name_A, member_ann_builtin_A, ann_custom_MyEnum);
                        CompleteEnumeratedLiteral literal_A = TypeObjectUtils::build_complete_enumerated_literal(common_A, detail_A);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_A);
                    }
                    {
                        EnumeratedLiteralFlag flags_B = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_B = TypeObjectUtils::build_common_enumerated_literal(1, flags_B);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_B;
                        ann_custom_MyEnum.reset();
                        MemberName name_B = "B";
                        CompleteMemberDetail detail_B = TypeObjectUtils::build_complete_member_detail(name_B, member_ann_builtin_B, ann_custom_MyEnum);
                        CompleteEnumeratedLiteral literal_B = TypeObjectUtils::build_complete_enumerated_literal(common_B, detail_B);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_B);
                    }
                    {
                        EnumeratedLiteralFlag flags_C = TypeObjectUtils::build_enumerated_literal_flag(false);
                        CommonEnumeratedLiteral common_C = TypeObjectUtils::build_common_enumerated_literal(2, flags_C);
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_C;
                        ann_custom_MyEnum.reset();
                        MemberName name_C = "C";
                        CompleteMemberDetail detail_C = TypeObjectUtils::build_complete_member_detail(name_C, member_ann_builtin_C, ann_custom_MyEnum);
                        CompleteEnumeratedLiteral literal_C = TypeObjectUtils::build_complete_enumerated_literal(common_C, detail_C);
                        TypeObjectUtils::add_complete_enumerated_literal(literal_seq_MyEnum, literal_C);
                    }
                    CompleteEnumeratedType enumerated_type_MyEnum = TypeObjectUtils::build_complete_enumerated_type(enum_flags_MyEnum, header_MyEnum,
                            literal_seq_MyEnum);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type_MyEnum, type_name_MyEnum.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyEnum already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_MyAliasEnumStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyEnum", type_ids_MyAliasEnumStruct);
                    if (return_code_MyAliasEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "MyEnum: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                CommonAliasBody common_MyAliasEnum;
                if (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1()._d() || TK_NONE == type_ids_MyAliasEnumStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasEnum, type_ids_MyAliasEnumStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    common_MyAliasEnum = TypeObjectUtils::build_common_alias_body(related_flags_MyAliasEnum, type_ids_MyAliasEnumStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyAliasEnum related TypeIdentifier inconsistent.");
                    return;
                }
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_MyAliasEnum;
                ann_custom_MyAliasEnum.reset();
                CompleteAliasBody body_MyAliasEnum = TypeObjectUtils::build_complete_alias_body(common_MyAliasEnum, member_ann_builtin_MyAliasEnum, ann_custom_MyAliasEnum);
                CompleteAliasType alias_type_MyAliasEnum = TypeObjectUtils::build_complete_alias_type(alias_flags_MyAliasEnum, header_MyAliasEnum, body_MyAliasEnum);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_alias_type_object(alias_type_MyAliasEnum, type_name_MyAliasEnum.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyAliasEnum already registered in TypeObjectRegistry for a different type.");
                }
                return_code_MyAliasEnumStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyAliasEnum", type_ids_MyAliasEnumStruct);
                if (return_code_MyAliasEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyAliasEnum: Given Alias TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_enum = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_enum;
            MemberId member_id_my_enum = 0x00000000;
            if (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1()._d() || TK_NONE == type_ids_MyAliasEnumStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MyAliasEnumStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_MyAliasEnumStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MyAliasEnumStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MyAliasEnumStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_enum = TypeObjectUtils::build_common_struct_member(member_id_my_enum, member_flags_my_enum, type_ids_MyAliasEnumStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_enum member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_enum = "my_enum";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_enum;
            ann_custom_MyAliasEnumStruct.reset();
            CompleteMemberDetail detail_my_enum = TypeObjectUtils::build_complete_member_detail(name_my_enum, member_ann_builtin_my_enum, ann_custom_MyAliasEnumStruct);
            CompleteStructMember member_my_enum = TypeObjectUtils::build_complete_struct_member(common_my_enum, detail_my_enum);
            TypeObjectUtils::add_complete_struct_member(member_seq_MyAliasEnumStruct, member_my_enum);
        }
        CompleteStructType struct_type_MyAliasEnumStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MyAliasEnumStruct, header_MyAliasEnumStruct, member_seq_MyAliasEnumStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MyAliasEnumStruct, type_name_MyAliasEnumStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyAliasEnumStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MyAliasEnumStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MyAliasEnumStruct", type_ids_MyAliasEnumStruct);
        if (return_code_MyAliasEnumStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyAliasEnumStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_BasicStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_BasicStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BasicStruct;
        TypeIdentifierPair type_ids_BasicStruct;
        QualifiedTypeName type_name_BasicStruct = "BasicStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BasicStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BasicStruct;
        CompleteTypeDetail detail_BasicStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BasicStruct, ann_custom_BasicStruct, type_name_BasicStruct.to_string());
        CompleteStructHeader header_BasicStruct;
        header_BasicStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BasicStruct);
        CompleteStructMemberSeq member_seq_BasicStruct;
        {
            return_code_BasicStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_BasicStruct);

            if (return_code_BasicStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_bool;
            MemberId member_id_my_bool = 0x00000000;
            if (EK_COMPLETE == type_ids_BasicStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BasicStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BasicStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bool member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_bool = "my_bool";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
            ann_custom_BasicStruct.reset();
            CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_BasicStruct);
            CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicStruct, member_my_bool);
        }
        {
            return_code_BasicStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_BasicStruct);

            if (return_code_BasicStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_int32 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_int32;
            MemberId member_id_my_int32 = 0x00000001;
            if (EK_COMPLETE == type_ids_BasicStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_BasicStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_BasicStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_int32 = "my_int32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int32;
            ann_custom_BasicStruct.reset();
            CompleteMemberDetail detail_my_int32 = TypeObjectUtils::build_complete_member_detail(name_my_int32, member_ann_builtin_my_int32, ann_custom_BasicStruct);
            CompleteStructMember member_my_int32 = TypeObjectUtils::build_complete_struct_member(common_my_int32, detail_my_int32);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicStruct, member_my_int32);
        }
        {
            return_code_BasicStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_BasicStruct);

            if (return_code_BasicStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_BasicStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_BasicStruct);
                if (return_code_BasicStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_string;
            MemberId member_id_my_string = 0x00000002;
            if (EK_COMPLETE == type_ids_BasicStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_BasicStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_BasicStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_string = "my_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
            ann_custom_BasicStruct.reset();
            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_BasicStruct);
            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicStruct, member_my_string);
        }
        CompleteStructType struct_type_BasicStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_BasicStruct, header_BasicStruct, member_seq_BasicStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BasicStruct, type_name_BasicStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BasicStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BasicStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BasicStruct", type_ids_BasicStruct);
        if (return_code_BasicStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BasicStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_BasicNamesStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_BasicNamesStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BasicNamesStruct;
        TypeIdentifierPair type_ids_BasicNamesStruct;
        QualifiedTypeName type_name_BasicNamesStruct = "BasicNamesStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BasicNamesStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BasicNamesStruct;
        CompleteTypeDetail detail_BasicNamesStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BasicNamesStruct, ann_custom_BasicNamesStruct, type_name_BasicNamesStruct.to_string());
        CompleteStructHeader header_BasicNamesStruct;
        header_BasicNamesStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BasicNamesStruct);
        CompleteStructMemberSeq member_seq_BasicNamesStruct;
        {
            return_code_BasicNamesStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_BasicNamesStruct);

            if (return_code_BasicNamesStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_bool_name Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_bool_name = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_bool_name;
            MemberId member_id_my_bool_name = 0x00000000;
            if (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicNamesStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool_name = TypeObjectUtils::build_common_struct_member(member_id_my_bool_name, member_flags_my_bool_name, type_ids_BasicNamesStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool_name = TypeObjectUtils::build_common_struct_member(member_id_my_bool_name, member_flags_my_bool_name, type_ids_BasicNamesStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bool_name member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_bool_name = "my_bool_name";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool_name;
            ann_custom_BasicNamesStruct.reset();
            CompleteMemberDetail detail_my_bool_name = TypeObjectUtils::build_complete_member_detail(name_my_bool_name, member_ann_builtin_my_bool_name, ann_custom_BasicNamesStruct);
            CompleteStructMember member_my_bool_name = TypeObjectUtils::build_complete_struct_member(common_my_bool_name, detail_my_bool_name);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicNamesStruct, member_my_bool_name);
        }
        {
            return_code_BasicNamesStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_BasicNamesStruct);

            if (return_code_BasicNamesStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int32_name Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_int32_name = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_int32_name;
            MemberId member_id_my_int32_name = 0x00000001;
            if (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicNamesStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32_name = TypeObjectUtils::build_common_struct_member(member_id_my_int32_name, member_flags_my_int32_name, type_ids_BasicNamesStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32_name = TypeObjectUtils::build_common_struct_member(member_id_my_int32_name, member_flags_my_int32_name, type_ids_BasicNamesStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int32_name member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_int32_name = "my_int32_name";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int32_name;
            ann_custom_BasicNamesStruct.reset();
            CompleteMemberDetail detail_my_int32_name = TypeObjectUtils::build_complete_member_detail(name_my_int32_name, member_ann_builtin_my_int32_name, ann_custom_BasicNamesStruct);
            CompleteStructMember member_my_int32_name = TypeObjectUtils::build_complete_struct_member(common_my_int32_name, detail_my_int32_name);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicNamesStruct, member_my_int32_name);
        }
        {
            return_code_BasicNamesStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_BasicNamesStruct);

            if (return_code_BasicNamesStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_BasicNamesStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_BasicNamesStruct);
                if (return_code_BasicNamesStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_string_name = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_string_name;
            MemberId member_id_my_string_name = 0x00000002;
            if (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicNamesStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicNamesStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_string_name = TypeObjectUtils::build_common_struct_member(member_id_my_string_name, member_flags_my_string_name, type_ids_BasicNamesStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicNamesStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicNamesStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_string_name = TypeObjectUtils::build_common_struct_member(member_id_my_string_name, member_flags_my_string_name, type_ids_BasicNamesStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_string_name member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_string_name = "my_string_name";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string_name;
            ann_custom_BasicNamesStruct.reset();
            CompleteMemberDetail detail_my_string_name = TypeObjectUtils::build_complete_member_detail(name_my_string_name, member_ann_builtin_my_string_name, ann_custom_BasicNamesStruct);
            CompleteStructMember member_my_string_name = TypeObjectUtils::build_complete_struct_member(common_my_string_name, detail_my_string_name);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicNamesStruct, member_my_string_name);
        }
        CompleteStructType struct_type_BasicNamesStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_BasicNamesStruct, header_BasicNamesStruct, member_seq_BasicNamesStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BasicNamesStruct, type_name_BasicNamesStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BasicNamesStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BasicNamesStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BasicNamesStruct", type_ids_BasicNamesStruct);
        if (return_code_BasicNamesStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BasicNamesStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_BasicBadStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_BasicBadStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BasicBadStruct;
        TypeIdentifierPair type_ids_BasicBadStruct;
        QualifiedTypeName type_name_BasicBadStruct = "BasicBadStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BasicBadStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BasicBadStruct;
        CompleteTypeDetail detail_BasicBadStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BasicBadStruct, ann_custom_BasicBadStruct, type_name_BasicBadStruct.to_string());
        CompleteStructHeader header_BasicBadStruct;
        header_BasicBadStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BasicBadStruct);
        CompleteStructMemberSeq member_seq_BasicBadStruct;
        {
            return_code_BasicBadStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_BasicBadStruct);

            if (return_code_BasicBadStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_bool;
            MemberId member_id_my_bool = 0x00000000;
            if (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BasicBadStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BasicBadStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bool member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_bool = "my_bool";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
            ann_custom_BasicBadStruct.reset();
            CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_BasicBadStruct);
            CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicBadStruct, member_my_bool);
        }
        {
            return_code_BasicBadStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_BasicBadStruct);

            if (return_code_BasicBadStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_int32 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_int32;
            MemberId member_id_my_int32 = 0x00000001;
            if (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_BasicBadStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_BasicBadStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_int32 = "my_int32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int32;
            ann_custom_BasicBadStruct.reset();
            CompleteMemberDetail detail_my_int32 = TypeObjectUtils::build_complete_member_detail(name_my_int32, member_ann_builtin_my_int32, ann_custom_BasicBadStruct);
            CompleteStructMember member_my_int32 = TypeObjectUtils::build_complete_struct_member(common_my_int32, detail_my_int32);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicBadStruct, member_my_int32);
        }
        {
            return_code_BasicBadStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_BasicBadStruct);

            if (return_code_BasicBadStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_BasicBadStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_BasicBadStruct);
                if (return_code_BasicBadStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_string;
            MemberId member_id_my_string = 0x00000002;
            if (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_BasicBadStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicBadStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_BasicBadStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_string = "my_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
            ann_custom_BasicBadStruct.reset();
            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_BasicBadStruct);
            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicBadStruct, member_my_string);
        }
        CompleteStructType struct_type_BasicBadStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_BasicBadStruct, header_BasicBadStruct, member_seq_BasicBadStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BasicBadStruct, type_name_BasicBadStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BasicBadStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BasicBadStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BasicBadStruct", type_ids_BasicBadStruct);
        if (return_code_BasicBadStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BasicBadStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_BasicWideStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_BasicWideStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BasicWideStruct;
        TypeIdentifierPair type_ids_BasicWideStruct;
        QualifiedTypeName type_name_BasicWideStruct = "BasicWideStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BasicWideStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BasicWideStruct;
        CompleteTypeDetail detail_BasicWideStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BasicWideStruct, ann_custom_BasicWideStruct, type_name_BasicWideStruct.to_string());
        CompleteStructHeader header_BasicWideStruct;
        header_BasicWideStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BasicWideStruct);
        CompleteStructMemberSeq member_seq_BasicWideStruct;
        {
            return_code_BasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_BasicWideStruct);

            if (return_code_BasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_bool;
            MemberId member_id_my_bool = 0x00000000;
            if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bool member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_bool = "my_bool";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
            ann_custom_BasicWideStruct.reset();
            CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_BasicWideStruct);
            CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicWideStruct, member_my_bool);
        }
        {
            return_code_BasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_BasicWideStruct);

            if (return_code_BasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_int32 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_int32;
            MemberId member_id_my_int32 = 0x00000001;
            if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_BasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_BasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_int32 = "my_int32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int32;
            ann_custom_BasicWideStruct.reset();
            CompleteMemberDetail detail_my_int32 = TypeObjectUtils::build_complete_member_detail(name_my_int32, member_ann_builtin_my_int32, ann_custom_BasicWideStruct);
            CompleteStructMember member_my_int32 = TypeObjectUtils::build_complete_struct_member(common_my_int32, detail_my_int32);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicWideStruct, member_my_int32);
        }
        {
            return_code_BasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_BasicWideStruct);

            if (return_code_BasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_BasicWideStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_BasicWideStruct);
                if (return_code_BasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_string;
            MemberId member_id_my_string = 0x00000002;
            if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_BasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_BasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_string = "my_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
            ann_custom_BasicWideStruct.reset();
            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_BasicWideStruct);
            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicWideStruct, member_my_string);
        }
        {
            return_code_BasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_BasicWideStruct);

            if (return_code_BasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "new_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_new_int32 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_new_int32;
            MemberId member_id_new_int32 = 0x00000003;
            if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_new_int32 = TypeObjectUtils::build_common_struct_member(member_id_new_int32, member_flags_new_int32, type_ids_BasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_new_int32 = TypeObjectUtils::build_common_struct_member(member_id_new_int32, member_flags_new_int32, type_ids_BasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure new_int32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_new_int32 = "new_int32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_new_int32;
            ann_custom_BasicWideStruct.reset();
            CompleteMemberDetail detail_new_int32 = TypeObjectUtils::build_complete_member_detail(name_new_int32, member_ann_builtin_new_int32, ann_custom_BasicWideStruct);
            CompleteStructMember member_new_int32 = TypeObjectUtils::build_complete_struct_member(common_new_int32, detail_new_int32);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicWideStruct, member_new_int32);
        }
        {
            return_code_BasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_BasicWideStruct);

            if (return_code_BasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_BasicWideStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_BasicWideStruct);
                if (return_code_BasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_new_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_new_string;
            MemberId member_id_new_string = 0x00000004;
            if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_new_string = TypeObjectUtils::build_common_struct_member(member_id_new_string, member_flags_new_string, type_ids_BasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_new_string = TypeObjectUtils::build_common_struct_member(member_id_new_string, member_flags_new_string, type_ids_BasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure new_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_new_string = "new_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_new_string;
            ann_custom_BasicWideStruct.reset();
            CompleteMemberDetail detail_new_string = TypeObjectUtils::build_complete_member_detail(name_new_string, member_ann_builtin_new_string, ann_custom_BasicWideStruct);
            CompleteStructMember member_new_string = TypeObjectUtils::build_complete_struct_member(common_new_string, detail_new_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_BasicWideStruct, member_new_string);
        }
        CompleteStructType struct_type_BasicWideStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_BasicWideStruct, header_BasicWideStruct, member_seq_BasicWideStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BasicWideStruct, type_name_BasicWideStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BasicWideStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BasicWideStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BasicWideStruct", type_ids_BasicWideStruct);
        if (return_code_BasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BasicWideStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_BadBasicWideStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_BadBasicWideStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_BadBasicWideStruct;
        TypeIdentifierPair type_ids_BadBasicWideStruct;
        QualifiedTypeName type_name_BadBasicWideStruct = "BadBasicWideStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_BadBasicWideStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_BadBasicWideStruct;
        CompleteTypeDetail detail_BadBasicWideStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_BadBasicWideStruct, ann_custom_BadBasicWideStruct, type_name_BadBasicWideStruct.to_string());
        CompleteStructHeader header_BadBasicWideStruct;
        header_BadBasicWideStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_BadBasicWideStruct);
        CompleteStructMemberSeq member_seq_BadBasicWideStruct;
        {
            return_code_BadBasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_BadBasicWideStruct);

            if (return_code_BadBasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "new_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_new_int32 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_new_int32;
            MemberId member_id_new_int32 = 0x00000000;
            if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_new_int32 = TypeObjectUtils::build_common_struct_member(member_id_new_int32, member_flags_new_int32, type_ids_BadBasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_new_int32 = TypeObjectUtils::build_common_struct_member(member_id_new_int32, member_flags_new_int32, type_ids_BadBasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure new_int32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_new_int32 = "new_int32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_new_int32;
            ann_custom_BadBasicWideStruct.reset();
            CompleteMemberDetail detail_new_int32 = TypeObjectUtils::build_complete_member_detail(name_new_int32, member_ann_builtin_new_int32, ann_custom_BadBasicWideStruct);
            CompleteStructMember member_new_int32 = TypeObjectUtils::build_complete_struct_member(common_new_int32, detail_new_int32);
            TypeObjectUtils::add_complete_struct_member(member_seq_BadBasicWideStruct, member_new_int32);
        }
        {
            return_code_BadBasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_BadBasicWideStruct);

            if (return_code_BadBasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_BadBasicWideStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_BadBasicWideStruct);
                if (return_code_BadBasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_new_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_new_string;
            MemberId member_id_new_string = 0x00000001;
            if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_new_string = TypeObjectUtils::build_common_struct_member(member_id_new_string, member_flags_new_string, type_ids_BadBasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_new_string = TypeObjectUtils::build_common_struct_member(member_id_new_string, member_flags_new_string, type_ids_BadBasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure new_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_new_string = "new_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_new_string;
            ann_custom_BadBasicWideStruct.reset();
            CompleteMemberDetail detail_new_string = TypeObjectUtils::build_complete_member_detail(name_new_string, member_ann_builtin_new_string, ann_custom_BadBasicWideStruct);
            CompleteStructMember member_new_string = TypeObjectUtils::build_complete_struct_member(common_new_string, detail_new_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_BadBasicWideStruct, member_new_string);
        }
        {
            return_code_BadBasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_bool", type_ids_BadBasicWideStruct);

            if (return_code_BadBasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_bool Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_bool = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_bool;
            MemberId member_id_my_bool = 0x00000002;
            if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BadBasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_bool = TypeObjectUtils::build_common_struct_member(member_id_my_bool, member_flags_my_bool, type_ids_BadBasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_bool member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_bool = "my_bool";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_bool;
            ann_custom_BadBasicWideStruct.reset();
            CompleteMemberDetail detail_my_bool = TypeObjectUtils::build_complete_member_detail(name_my_bool, member_ann_builtin_my_bool, ann_custom_BadBasicWideStruct);
            CompleteStructMember member_my_bool = TypeObjectUtils::build_complete_struct_member(common_my_bool, detail_my_bool);
            TypeObjectUtils::add_complete_struct_member(member_seq_BadBasicWideStruct, member_my_bool);
        }
        {
            return_code_BadBasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_BadBasicWideStruct);

            if (return_code_BadBasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "my_int32 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_my_int32 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_int32;
            MemberId member_id_my_int32 = 0x00000003;
            if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_BadBasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_int32 = TypeObjectUtils::build_common_struct_member(member_id_my_int32, member_flags_my_int32, type_ids_BadBasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_int32 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_int32 = "my_int32";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_int32;
            ann_custom_BadBasicWideStruct.reset();
            CompleteMemberDetail detail_my_int32 = TypeObjectUtils::build_complete_member_detail(name_my_int32, member_ann_builtin_my_int32, ann_custom_BadBasicWideStruct);
            CompleteStructMember member_my_int32 = TypeObjectUtils::build_complete_struct_member(common_my_int32, detail_my_int32);
            TypeObjectUtils::add_complete_struct_member(member_seq_BadBasicWideStruct, member_my_int32);
        }
        {
            return_code_BadBasicWideStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_BadBasicWideStruct);

            if (return_code_BadBasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_BadBasicWideStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_BadBasicWideStruct);
                if (return_code_BadBasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_string;
            MemberId member_id_my_string = 0x00000004;
            if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1()._d() || TK_NONE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_BadBasicWideStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_BadBasicWideStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_BadBasicWideStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_BadBasicWideStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_string = "my_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
            ann_custom_BadBasicWideStruct.reset();
            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_BadBasicWideStruct);
            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_BadBasicWideStruct, member_my_string);
        }
        CompleteStructType struct_type_BadBasicWideStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_BadBasicWideStruct, header_BadBasicWideStruct, member_seq_BadBasicWideStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_BadBasicWideStruct, type_name_BadBasicWideStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "BadBasicWideStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_BadBasicWideStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "BadBasicWideStruct", type_ids_BadBasicWideStruct);
        if (return_code_BadBasicWideStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "BadBasicWideStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_StringStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_StringStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_StringStruct;
        TypeIdentifierPair type_ids_StringStruct;
        QualifiedTypeName type_name_StringStruct = "StringStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_StringStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_StringStruct;
        CompleteTypeDetail detail_StringStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_StringStruct, ann_custom_StringStruct, type_name_StringStruct.to_string());
        CompleteStructHeader header_StringStruct;
        header_StringStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_StringStruct);
        CompleteStructMemberSeq member_seq_StringStruct;
        {
            return_code_StringStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_StringStruct);

            if (return_code_StringStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_unbounded("TI_STRING8_SMALL");
                if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_unbounded == "TI_STRING8_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_unbounded"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Unknown String kind.");
                    return;
                }
                return_code_StringStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_unbounded", type_ids_StringStruct);
                if (return_code_StringStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_unbounded: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_string;
            MemberId member_id_my_string = 0x00000000;
            if (EK_COMPLETE == type_ids_StringStruct.type_identifier1()._d() || TK_NONE == type_ids_StringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StringStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_StringStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StringStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_StringStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_StringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_StringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_StringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_StringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_StringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_StringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StringStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_StringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_StringStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_StringStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_string = TypeObjectUtils::build_common_struct_member(member_id_my_string, member_flags_my_string, type_ids_StringStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_string = "my_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_string;
            ann_custom_StringStruct.reset();
            CompleteMemberDetail detail_my_string = TypeObjectUtils::build_complete_member_detail(name_my_string, member_ann_builtin_my_string, ann_custom_StringStruct);
            CompleteStructMember member_my_string = TypeObjectUtils::build_complete_struct_member(common_my_string, detail_my_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_StringStruct, member_my_string);
        }
        CompleteStructType struct_type_StringStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_StringStruct, header_StringStruct, member_seq_StringStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_StringStruct, type_name_StringStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "StringStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_StringStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "StringStruct", type_ids_StringStruct);
        if (return_code_StringStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "StringStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_LargeStringStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_LargeStringStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_LargeStringStruct;
        TypeIdentifierPair type_ids_LargeStringStruct;
        QualifiedTypeName type_name_LargeStringStruct = "LargeStringStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LargeStringStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LargeStringStruct;
        CompleteTypeDetail detail_LargeStringStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LargeStringStruct, ann_custom_LargeStringStruct, type_name_LargeStringStruct.to_string());
        CompleteStructHeader header_LargeStringStruct;
        header_LargeStringStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LargeStringStruct);
        CompleteStructMemberSeq member_seq_LargeStringStruct;
        {
            return_code_LargeStringStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_41925", type_ids_LargeStringStruct);

            if (return_code_LargeStringStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_string_41925("TI_STRING8_LARGE");
                if (type_id_kind_anonymous_string_41925 == "TI_STRING8_SMALL")
                {
                    SBound bound = static_cast<SBound>(41925);
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_41925"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_string_41925 == "TI_STRING8_LARGE")
                {
                    LBound bound = 41925;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_string_41925"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_41925: Unknown String kind.");
                    return;
                }
                return_code_LargeStringStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_string_41925", type_ids_LargeStringStruct);
                if (return_code_LargeStringStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_string_41925: Given String TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_large_string = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_large_string;
            MemberId member_id_my_large_string = 0x00000000;
            if (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1()._d() || TK_NONE == type_ids_LargeStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LargeStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_large_string = TypeObjectUtils::build_common_struct_member(member_id_my_large_string, member_flags_my_large_string, type_ids_LargeStringStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LargeStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeStringStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_large_string = TypeObjectUtils::build_common_struct_member(member_id_my_large_string, member_flags_my_large_string, type_ids_LargeStringStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_large_string member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_large_string = "my_large_string";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_large_string;
            ann_custom_LargeStringStruct.reset();
            CompleteMemberDetail detail_my_large_string = TypeObjectUtils::build_complete_member_detail(name_my_large_string, member_ann_builtin_my_large_string, ann_custom_LargeStringStruct);
            CompleteStructMember member_my_large_string = TypeObjectUtils::build_complete_struct_member(common_my_large_string, detail_my_large_string);
            TypeObjectUtils::add_complete_struct_member(member_seq_LargeStringStruct, member_my_large_string);
        }
        CompleteStructType struct_type_LargeStringStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_LargeStringStruct, header_LargeStringStruct, member_seq_LargeStringStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LargeStringStruct, type_name_LargeStringStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LargeStringStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_LargeStringStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "LargeStringStruct", type_ids_LargeStringStruct);
        if (return_code_LargeStringStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LargeStringStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_WStringStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_WStringStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_WStringStruct;
        TypeIdentifierPair type_ids_WStringStruct;
        QualifiedTypeName type_name_WStringStruct = "WStringStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_WStringStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_WStringStruct;
        CompleteTypeDetail detail_WStringStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_WStringStruct, ann_custom_WStringStruct, type_name_WStringStruct.to_string());
        CompleteStructHeader header_WStringStruct;
        header_WStringStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_WStringStruct);
        CompleteStructMemberSeq member_seq_WStringStruct;
        {
            return_code_WStringStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_wstring_unbounded", type_ids_WStringStruct);

            if (return_code_WStringStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_wstring_unbounded("TI_STRING16_SMALL");
                if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_SMALL")
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_wstring_unbounded", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_wstring_unbounded == "TI_STRING16_LARGE")
                {
                    LBound bound = 255;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_wstring_unbounded", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded: Unknown WString kind.");
                    return;
                }
                return_code_WStringStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_unbounded", type_ids_WStringStruct);
                if (return_code_WStringStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_unbounded: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_wstring;
            MemberId member_id_my_wstring = 0x00000000;
            if (EK_COMPLETE == type_ids_WStringStruct.type_identifier1()._d() || TK_NONE == type_ids_WStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WStringStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_WStringStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_WStringStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_WStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_WStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_WStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_WStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_WStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_WStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WStringStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_WStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_WStringStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_WStringStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_wstring, member_flags_my_wstring, type_ids_WStringStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_wstring = "my_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_wstring;
            ann_custom_WStringStruct.reset();
            CompleteMemberDetail detail_my_wstring = TypeObjectUtils::build_complete_member_detail(name_my_wstring, member_ann_builtin_my_wstring, ann_custom_WStringStruct);
            CompleteStructMember member_my_wstring = TypeObjectUtils::build_complete_struct_member(common_my_wstring, detail_my_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_WStringStruct, member_my_wstring);
        }
        CompleteStructType struct_type_WStringStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_WStringStruct, header_WStringStruct, member_seq_WStringStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_WStringStruct, type_name_WStringStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "WStringStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_WStringStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "WStringStruct", type_ids_WStringStruct);
        if (return_code_WStringStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "WStringStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_LargeWStringStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_LargeWStringStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_LargeWStringStruct;
        TypeIdentifierPair type_ids_LargeWStringStruct;
        QualifiedTypeName type_name_LargeWStringStruct = "LargeWStringStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_LargeWStringStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_LargeWStringStruct;
        CompleteTypeDetail detail_LargeWStringStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_LargeWStringStruct, ann_custom_LargeWStringStruct, type_name_LargeWStringStruct.to_string());
        CompleteStructHeader header_LargeWStringStruct;
        header_LargeWStringStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_LargeWStringStruct);
        CompleteStructMemberSeq member_seq_LargeWStringStruct;
        {
            return_code_LargeWStringStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_wstring_41925", type_ids_LargeWStringStruct);

            if (return_code_LargeWStringStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                std::string type_id_kind_anonymous_wstring_41925("TI_STRING16_LARGE");
                if (type_id_kind_anonymous_wstring_41925 == "TI_STRING16_SMALL")
                {
                    SBound bound = static_cast<SBound>(41925);
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_wstring_41925", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else if (type_id_kind_anonymous_wstring_41925 == "TI_STRING16_LARGE")
                {
                    LBound bound = 41925;
                    StringLTypeDefn string_ldefn = TypeObjectUtils::build_string_l_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_string_type_identifier(string_ldefn,
                            "anonymous_wstring_41925", true))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_wstring_41925 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_41925: Unknown WString kind.");
                    return;
                }
                return_code_LargeWStringStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_wstring_41925", type_ids_LargeWStringStruct);
                if (return_code_LargeWStringStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_wstring_41925: Given WString TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_large_wstring = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_large_wstring;
            MemberId member_id_my_large_wstring = 0x00000000;
            if (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1()._d() || TK_NONE == type_ids_LargeWStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LargeWStringStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_large_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_large_wstring, member_flags_my_large_wstring, type_ids_LargeWStringStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_LargeWStringStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_LargeWStringStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_large_wstring = TypeObjectUtils::build_common_struct_member(member_id_my_large_wstring, member_flags_my_large_wstring, type_ids_LargeWStringStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_large_wstring member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_large_wstring = "my_large_wstring";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_large_wstring;
            ann_custom_LargeWStringStruct.reset();
            CompleteMemberDetail detail_my_large_wstring = TypeObjectUtils::build_complete_member_detail(name_my_large_wstring, member_ann_builtin_my_large_wstring, ann_custom_LargeWStringStruct);
            CompleteStructMember member_my_large_wstring = TypeObjectUtils::build_complete_struct_member(common_my_large_wstring, detail_my_large_wstring);
            TypeObjectUtils::add_complete_struct_member(member_seq_LargeWStringStruct, member_my_large_wstring);
        }
        CompleteStructType struct_type_LargeWStringStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_LargeWStringStruct, header_LargeWStringStruct, member_seq_LargeWStringStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_LargeWStringStruct, type_name_LargeWStringStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "LargeWStringStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_LargeWStringStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "LargeWStringStruct", type_ids_LargeWStringStruct);
        if (return_code_LargeWStringStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "LargeWStringStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ArrayStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_ArrayStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ArrayStruct;
        TypeIdentifierPair type_ids_ArrayStruct;
        QualifiedTypeName type_name_ArrayStruct = "ArrayStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ArrayStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ArrayStruct;
        CompleteTypeDetail detail_ArrayStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ArrayStruct, ann_custom_ArrayStruct, type_name_ArrayStruct.to_string());
        CompleteStructHeader header_ArrayStruct;
        header_ArrayStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ArrayStruct);
        CompleteStructMemberSeq member_seq_ArrayStruct;
        {
            return_code_ArrayStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int32_t_2", type_ids_ArrayStruct);

            if (return_code_ArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_ArrayStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_ArrayStruct);

                if (return_code_ArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_array_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_ArrayStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2 = new TypeIdentifier(type_ids_ArrayStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_ArrayStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2 = new TypeIdentifier(type_ids_ArrayStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int32_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_ArrayStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int32_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_array_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2, element_flags_anonymous_array_int32_t_2);
                std::string type_id_kind_anonymous_array_int32_t_2("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_int32_t_2 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_ArrayStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_int32_t_2", type_ids_ArrayStruct);
                if (return_code_ArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_int32_t_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_array;
            MemberId member_id_my_array = 0x00000000;
            if (EK_COMPLETE == type_ids_ArrayStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArrayStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ArrayStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArrayStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_array = "my_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_array;
            ann_custom_ArrayStruct.reset();
            CompleteMemberDetail detail_my_array = TypeObjectUtils::build_complete_member_detail(name_my_array, member_ann_builtin_my_array, ann_custom_ArrayStruct);
            CompleteStructMember member_my_array = TypeObjectUtils::build_complete_struct_member(common_my_array, detail_my_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_ArrayStruct, member_my_array);
        }
        CompleteStructType struct_type_ArrayStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ArrayStruct, header_ArrayStruct, member_seq_ArrayStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ArrayStruct, type_name_ArrayStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ArrayStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ArrayStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ArrayStruct", type_ids_ArrayStruct);
        if (return_code_ArrayStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ArrayStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ArrayStructEqual_type_identifier()
{
    {
        StructTypeFlag struct_flags_ArrayStructEqual = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ArrayStructEqual;
        TypeIdentifierPair type_ids_ArrayStructEqual;
        QualifiedTypeName type_name_ArrayStructEqual = "ArrayStructEqual";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ArrayStructEqual;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ArrayStructEqual;
        CompleteTypeDetail detail_ArrayStructEqual = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ArrayStructEqual, ann_custom_ArrayStructEqual, type_name_ArrayStructEqual.to_string());
        CompleteStructHeader header_ArrayStructEqual;
        header_ArrayStructEqual = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ArrayStructEqual);
        CompleteStructMemberSeq member_seq_ArrayStructEqual;
        {
            return_code_ArrayStructEqual =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int32_t_2", type_ids_ArrayStructEqual);

            if (return_code_ArrayStructEqual != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_ArrayStructEqual =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_ArrayStructEqual);

                if (return_code_ArrayStructEqual != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_array_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1()._d() || TK_NONE == type_ids_ArrayStructEqual.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2 = new TypeIdentifier(type_ids_ArrayStructEqual.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2 = new TypeIdentifier(type_ids_ArrayStructEqual.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int32_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_ArrayStructEqual.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int32_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_array_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2, element_flags_anonymous_array_int32_t_2);
                std::string type_id_kind_anonymous_array_int32_t_2("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_int32_t_2 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_ArrayStructEqual =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_int32_t_2", type_ids_ArrayStructEqual);
                if (return_code_ArrayStructEqual != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_int32_t_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_array_equal = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_array_equal;
            MemberId member_id_my_array_equal = 0x00000000;
            if (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1()._d() || TK_NONE == type_ids_ArrayStructEqual.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayStructEqual.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_array_equal = TypeObjectUtils::build_common_struct_member(member_id_my_array_equal, member_flags_my_array_equal, type_ids_ArrayStructEqual.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayStructEqual.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayStructEqual.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_array_equal = TypeObjectUtils::build_common_struct_member(member_id_my_array_equal, member_flags_my_array_equal, type_ids_ArrayStructEqual.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array_equal member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_array_equal = "my_array_equal";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_array_equal;
            ann_custom_ArrayStructEqual.reset();
            CompleteMemberDetail detail_my_array_equal = TypeObjectUtils::build_complete_member_detail(name_my_array_equal, member_ann_builtin_my_array_equal, ann_custom_ArrayStructEqual);
            CompleteStructMember member_my_array_equal = TypeObjectUtils::build_complete_struct_member(common_my_array_equal, detail_my_array_equal);
            TypeObjectUtils::add_complete_struct_member(member_seq_ArrayStructEqual, member_my_array_equal);
        }
        CompleteStructType struct_type_ArrayStructEqual = TypeObjectUtils::build_complete_struct_type(struct_flags_ArrayStructEqual, header_ArrayStructEqual, member_seq_ArrayStructEqual);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ArrayStructEqual, type_name_ArrayStructEqual.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ArrayStructEqual already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ArrayStructEqual =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ArrayStructEqual", type_ids_ArrayStructEqual);
        if (return_code_ArrayStructEqual != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ArrayStructEqual: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ArrayBadStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_ArrayBadStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ArrayBadStruct;
        TypeIdentifierPair type_ids_ArrayBadStruct;
        QualifiedTypeName type_name_ArrayBadStruct = "ArrayBadStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ArrayBadStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ArrayBadStruct;
        CompleteTypeDetail detail_ArrayBadStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ArrayBadStruct, ann_custom_ArrayBadStruct, type_name_ArrayBadStruct.to_string());
        CompleteStructHeader header_ArrayBadStruct;
        header_ArrayBadStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ArrayBadStruct);
        CompleteStructMemberSeq member_seq_ArrayBadStruct;
        {
            return_code_ArrayBadStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_uint8_t_2", type_ids_ArrayBadStruct);

            if (return_code_ArrayBadStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_ArrayBadStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_ArrayBadStruct);

                if (return_code_ArrayBadStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_array_uint8_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayBadStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_uint8_t_2 = new TypeIdentifier(type_ids_ArrayBadStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_uint8_t_2 = new TypeIdentifier(type_ids_ArrayBadStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_uint8_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_ArrayBadStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_uint8_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_uint8_t_2 = 0;
                PlainCollectionHeader header_anonymous_array_uint8_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_uint8_t_2, element_flags_anonymous_array_uint8_t_2);
                std::string type_id_kind_anonymous_array_uint8_t_2("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_uint8_t_2 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_uint8_t_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_uint8_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_uint8_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_uint8_t_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_uint8_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_uint8_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_uint8_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_ArrayBadStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_uint8_t_2", type_ids_ArrayBadStruct);
                if (return_code_ArrayBadStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_uint8_t_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_array;
            MemberId member_id_my_array = 0x00000000;
            if (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArrayBadStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayBadStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArrayBadStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_array = "my_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_array;
            ann_custom_ArrayBadStruct.reset();
            CompleteMemberDetail detail_my_array = TypeObjectUtils::build_complete_member_detail(name_my_array, member_ann_builtin_my_array, ann_custom_ArrayBadStruct);
            CompleteStructMember member_my_array = TypeObjectUtils::build_complete_struct_member(common_my_array, detail_my_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_ArrayBadStruct, member_my_array);
        }
        CompleteStructType struct_type_ArrayBadStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ArrayBadStruct, header_ArrayBadStruct, member_seq_ArrayBadStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ArrayBadStruct, type_name_ArrayBadStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ArrayBadStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ArrayBadStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ArrayBadStruct", type_ids_ArrayBadStruct);
        if (return_code_ArrayBadStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ArrayBadStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ArrayDimensionsStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_ArrayDimensionsStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ArrayDimensionsStruct;
        TypeIdentifierPair type_ids_ArrayDimensionsStruct;
        QualifiedTypeName type_name_ArrayDimensionsStruct = "ArrayDimensionsStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ArrayDimensionsStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ArrayDimensionsStruct;
        CompleteTypeDetail detail_ArrayDimensionsStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ArrayDimensionsStruct, ann_custom_ArrayDimensionsStruct, type_name_ArrayDimensionsStruct.to_string());
        CompleteStructHeader header_ArrayDimensionsStruct;
        header_ArrayDimensionsStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ArrayDimensionsStruct);
        CompleteStructMemberSeq member_seq_ArrayDimensionsStruct;
        {
            return_code_ArrayDimensionsStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int32_t_2_2", type_ids_ArrayDimensionsStruct);

            if (return_code_ArrayDimensionsStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_ArrayDimensionsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_ArrayDimensionsStruct);

                if (return_code_ArrayDimensionsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_array_int32_t_2_2 {nullptr};
                if (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2_2 = new TypeIdentifier(type_ids_ArrayDimensionsStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_2_2 = new TypeIdentifier(type_ids_ArrayDimensionsStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int32_t_2_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_ArrayDimensionsStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int32_t_2_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int32_t_2_2 = 0;
                PlainCollectionHeader header_anonymous_array_int32_t_2_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_2_2, element_flags_anonymous_array_int32_t_2_2);
                std::string type_id_kind_anonymous_array_int32_t_2_2("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_int32_t_2_2 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(2));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_2_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(2));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_2_2, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_ArrayDimensionsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_int32_t_2_2", type_ids_ArrayDimensionsStruct);
                if (return_code_ArrayDimensionsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_int32_t_2_2: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_array;
            MemberId member_id_my_array = 0x00000000;
            if (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1()._d() || TK_NONE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayDimensionsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArrayDimensionsStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArrayDimensionsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArrayDimensionsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArrayDimensionsStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_array = "my_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_array;
            ann_custom_ArrayDimensionsStruct.reset();
            CompleteMemberDetail detail_my_array = TypeObjectUtils::build_complete_member_detail(name_my_array, member_ann_builtin_my_array, ann_custom_ArrayDimensionsStruct);
            CompleteStructMember member_my_array = TypeObjectUtils::build_complete_struct_member(common_my_array, detail_my_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_ArrayDimensionsStruct, member_my_array);
        }
        CompleteStructType struct_type_ArrayDimensionsStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ArrayDimensionsStruct, header_ArrayDimensionsStruct, member_seq_ArrayDimensionsStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ArrayDimensionsStruct, type_name_ArrayDimensionsStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ArrayDimensionsStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ArrayDimensionsStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ArrayDimensionsStruct", type_ids_ArrayDimensionsStruct);
        if (return_code_ArrayDimensionsStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ArrayDimensionsStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_ArraySizeStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_ArraySizeStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_ArraySizeStruct;
        TypeIdentifierPair type_ids_ArraySizeStruct;
        QualifiedTypeName type_name_ArraySizeStruct = "ArraySizeStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_ArraySizeStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_ArraySizeStruct;
        CompleteTypeDetail detail_ArraySizeStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_ArraySizeStruct, ann_custom_ArraySizeStruct, type_name_ArraySizeStruct.to_string());
        CompleteStructHeader header_ArraySizeStruct;
        header_ArraySizeStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_ArraySizeStruct);
        CompleteStructMemberSeq member_seq_ArraySizeStruct;
        {
            return_code_ArraySizeStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_array_int32_t_5", type_ids_ArraySizeStruct);

            if (return_code_ArraySizeStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_ArraySizeStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_ArraySizeStruct);

                if (return_code_ArraySizeStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Array element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_array_int32_t_5 {nullptr};
                if (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1()._d() || TK_NONE == type_ids_ArraySizeStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_5 = new TypeIdentifier(type_ids_ArraySizeStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_array_int32_t_5 = new TypeIdentifier(type_ids_ArraySizeStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Array element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_array_int32_t_5 = EK_COMPLETE;
                if (TK_NONE == type_ids_ArraySizeStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_array_int32_t_5 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_array_int32_t_5 = 0;
                PlainCollectionHeader header_anonymous_array_int32_t_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_array_int32_t_5, element_flags_anonymous_array_int32_t_5);
                std::string type_id_kind_anonymous_array_int32_t_5("TI_PLAIN_ARRAY_SMALL");
                if (type_id_kind_anonymous_array_int32_t_5 == "TI_PLAIN_ARRAY_SMALL")
                {
                    SBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<SBound>(5));

                    PlainArraySElemDefn array_sdefn = TypeObjectUtils::build_plain_array_s_elem_defn(header_anonymous_array_int32_t_5, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_array_type_identifier(array_sdefn, "anonymous_array_int32_t_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBoundSeq array_bound_seq;
                        TypeObjectUtils::add_array_dimension(array_bound_seq, static_cast<LBound>(5));

                    PlainArrayLElemDefn array_ldefn = TypeObjectUtils::build_plain_array_l_elem_defn(header_anonymous_array_int32_t_5, array_bound_seq,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_array_int32_t_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_array_type_identifier(array_ldefn, "anonymous_array_int32_t_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_array_int32_t_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_ArraySizeStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_array_int32_t_5", type_ids_ArraySizeStruct);
                if (return_code_ArraySizeStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_array_int32_t_5: Given Array TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_array = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_array;
            MemberId member_id_my_array = 0x00000000;
            if (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1()._d() || TK_NONE == type_ids_ArraySizeStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArraySizeStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArraySizeStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_ArraySizeStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_ArraySizeStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_array = TypeObjectUtils::build_common_struct_member(member_id_my_array, member_flags_my_array, type_ids_ArraySizeStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_array member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_array = "my_array";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_array;
            ann_custom_ArraySizeStruct.reset();
            CompleteMemberDetail detail_my_array = TypeObjectUtils::build_complete_member_detail(name_my_array, member_ann_builtin_my_array, ann_custom_ArraySizeStruct);
            CompleteStructMember member_my_array = TypeObjectUtils::build_complete_struct_member(common_my_array, detail_my_array);
            TypeObjectUtils::add_complete_struct_member(member_seq_ArraySizeStruct, member_my_array);
        }
        CompleteStructType struct_type_ArraySizeStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_ArraySizeStruct, header_ArraySizeStruct, member_seq_ArraySizeStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_ArraySizeStruct, type_name_ArraySizeStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "ArraySizeStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_ArraySizeStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "ArraySizeStruct", type_ids_ArraySizeStruct);
        if (return_code_ArraySizeStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ArraySizeStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceStruct;
        TypeIdentifierPair type_ids_SequenceStruct;
        QualifiedTypeName type_name_SequenceStruct = "SequenceStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceStruct;
        CompleteTypeDetail detail_SequenceStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceStruct, ann_custom_SequenceStruct, type_name_SequenceStruct.to_string());
        CompleteStructHeader header_SequenceStruct;
        header_SequenceStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceStruct);
        CompleteStructMemberSeq member_seq_SequenceStruct;
        {
            return_code_SequenceStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int32_t_2", type_ids_SequenceStruct);

            if (return_code_SequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_SequenceStruct);

                if (return_code_SequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int32_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int32_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_sequence_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_2, element_flags_anonymous_sequence_int32_t_2);
                std::string type_id_kind_anonymous_sequence_int32_t_2("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int32_t_2 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int32_t_2", type_ids_SequenceStruct);
                if (return_code_SequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_2: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_sequence;
            MemberId member_id_my_sequence = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence, member_flags_my_sequence, type_ids_SequenceStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence, member_flags_my_sequence, type_ids_SequenceStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_sequence = "my_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_sequence;
            ann_custom_SequenceStruct.reset();
            CompleteMemberDetail detail_my_sequence = TypeObjectUtils::build_complete_member_detail(name_my_sequence, member_ann_builtin_my_sequence, ann_custom_SequenceStruct);
            CompleteStructMember member_my_sequence = TypeObjectUtils::build_complete_struct_member(common_my_sequence, detail_my_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceStruct, member_my_sequence);
        }
        CompleteStructType struct_type_SequenceStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceStruct, header_SequenceStruct, member_seq_SequenceStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceStruct, type_name_SequenceStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceStruct", type_ids_SequenceStruct);
        if (return_code_SequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceStructEqual_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceStructEqual = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceStructEqual;
        TypeIdentifierPair type_ids_SequenceStructEqual;
        QualifiedTypeName type_name_SequenceStructEqual = "SequenceStructEqual";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceStructEqual;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceStructEqual;
        CompleteTypeDetail detail_SequenceStructEqual = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceStructEqual, ann_custom_SequenceStructEqual, type_name_SequenceStructEqual.to_string());
        CompleteStructHeader header_SequenceStructEqual;
        header_SequenceStructEqual = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceStructEqual);
        CompleteStructMemberSeq member_seq_SequenceStructEqual;
        {
            return_code_SequenceStructEqual =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int32_t_2", type_ids_SequenceStructEqual);

            if (return_code_SequenceStructEqual != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceStructEqual =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_SequenceStructEqual);

                if (return_code_SequenceStructEqual != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1()._d() || TK_NONE == type_ids_SequenceStructEqual.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceStructEqual.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceStructEqual.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int32_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceStructEqual.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int32_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_sequence_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_2, element_flags_anonymous_sequence_int32_t_2);
                std::string type_id_kind_anonymous_sequence_int32_t_2("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int32_t_2 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceStructEqual =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int32_t_2", type_ids_SequenceStructEqual);
                if (return_code_SequenceStructEqual != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_2: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_sequence_equal = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_sequence_equal;
            MemberId member_id_my_sequence_equal = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1()._d() || TK_NONE == type_ids_SequenceStructEqual.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStructEqual.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence_equal = TypeObjectUtils::build_common_struct_member(member_id_my_sequence_equal, member_flags_my_sequence_equal, type_ids_SequenceStructEqual.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceStructEqual.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceStructEqual.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence_equal = TypeObjectUtils::build_common_struct_member(member_id_my_sequence_equal, member_flags_my_sequence_equal, type_ids_SequenceStructEqual.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence_equal member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_sequence_equal = "my_sequence_equal";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_sequence_equal;
            ann_custom_SequenceStructEqual.reset();
            CompleteMemberDetail detail_my_sequence_equal = TypeObjectUtils::build_complete_member_detail(name_my_sequence_equal, member_ann_builtin_my_sequence_equal, ann_custom_SequenceStructEqual);
            CompleteStructMember member_my_sequence_equal = TypeObjectUtils::build_complete_struct_member(common_my_sequence_equal, detail_my_sequence_equal);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceStructEqual, member_my_sequence_equal);
        }
        CompleteStructType struct_type_SequenceStructEqual = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceStructEqual, header_SequenceStructEqual, member_seq_SequenceStructEqual);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceStructEqual, type_name_SequenceStructEqual.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceStructEqual already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceStructEqual =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceStructEqual", type_ids_SequenceStructEqual);
        if (return_code_SequenceStructEqual != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceStructEqual: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceBadStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceBadStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceBadStruct;
        TypeIdentifierPair type_ids_SequenceBadStruct;
        QualifiedTypeName type_name_SequenceBadStruct = "SequenceBadStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceBadStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceBadStruct;
        CompleteTypeDetail detail_SequenceBadStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceBadStruct, ann_custom_SequenceBadStruct, type_name_SequenceBadStruct.to_string());
        CompleteStructHeader header_SequenceBadStruct;
        header_SequenceBadStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceBadStruct);
        CompleteStructMemberSeq member_seq_SequenceBadStruct;
        {
            return_code_SequenceBadStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_uint8_t_2", type_ids_SequenceBadStruct);

            if (return_code_SequenceBadStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceBadStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_SequenceBadStruct);

                if (return_code_SequenceBadStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_uint8_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceBadStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint8_t_2 = new TypeIdentifier(type_ids_SequenceBadStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_uint8_t_2 = new TypeIdentifier(type_ids_SequenceBadStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_uint8_t_2 = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceBadStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_uint8_t_2 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_uint8_t_2 = 0;
                PlainCollectionHeader header_anonymous_sequence_uint8_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_uint8_t_2, element_flags_anonymous_sequence_uint8_t_2);
                std::string type_id_kind_anonymous_sequence_uint8_t_2("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_uint8_t_2 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_uint8_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint8_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_uint8_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint8_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_uint8_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_uint8_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_uint8_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_uint8_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceBadStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_uint8_t_2", type_ids_SequenceBadStruct);
                if (return_code_SequenceBadStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_uint8_t_2: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_sequence;
            MemberId member_id_my_sequence = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBadStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence, member_flags_my_sequence, type_ids_SequenceBadStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBadStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBadStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence, member_flags_my_sequence, type_ids_SequenceBadStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_sequence = "my_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_sequence;
            ann_custom_SequenceBadStruct.reset();
            CompleteMemberDetail detail_my_sequence = TypeObjectUtils::build_complete_member_detail(name_my_sequence, member_ann_builtin_my_sequence, ann_custom_SequenceBadStruct);
            CompleteStructMember member_my_sequence = TypeObjectUtils::build_complete_struct_member(common_my_sequence, detail_my_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceBadStruct, member_my_sequence);
        }
        CompleteStructType struct_type_SequenceBadStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceBadStruct, header_SequenceBadStruct, member_seq_SequenceBadStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceBadStruct, type_name_SequenceBadStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceBadStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceBadStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceBadStruct", type_ids_SequenceBadStruct);
        if (return_code_SequenceBadStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceBadStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceBoundsStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceBoundsStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceBoundsStruct;
        TypeIdentifierPair type_ids_SequenceBoundsStruct;
        QualifiedTypeName type_name_SequenceBoundsStruct = "SequenceBoundsStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceBoundsStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceBoundsStruct;
        CompleteTypeDetail detail_SequenceBoundsStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceBoundsStruct, ann_custom_SequenceBoundsStruct, type_name_SequenceBoundsStruct.to_string());
        CompleteStructHeader header_SequenceBoundsStruct;
        header_SequenceBoundsStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceBoundsStruct);
        CompleteStructMemberSeq member_seq_SequenceBoundsStruct;
        {
            return_code_SequenceBoundsStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_int32_t_4", type_ids_SequenceBoundsStruct);

            if (return_code_SequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_SequenceBoundsStruct);

                if (return_code_SequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_sequence_int32_t_4 {nullptr};
                if (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_4 = new TypeIdentifier(type_ids_SequenceBoundsStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_int32_t_4 = new TypeIdentifier(type_ids_SequenceBoundsStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_int32_t_4 = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceBoundsStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_int32_t_4 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_int32_t_4 = 0;
                PlainCollectionHeader header_anonymous_sequence_int32_t_4 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_4, element_flags_anonymous_sequence_int32_t_4);
                std::string type_id_kind_anonymous_sequence_int32_t_4("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_int32_t_4 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(4);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_4, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_4));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 4;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_4, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_4));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_int32_t_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int32_t_4", type_ids_SequenceBoundsStruct);
                if (return_code_SequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_4: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_sequence;
            MemberId member_id_my_sequence = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceBoundsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBoundsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence, member_flags_my_sequence, type_ids_SequenceBoundsStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceBoundsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence, member_flags_my_sequence, type_ids_SequenceBoundsStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_sequence = "my_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_sequence;
            ann_custom_SequenceBoundsStruct.reset();
            CompleteMemberDetail detail_my_sequence = TypeObjectUtils::build_complete_member_detail(name_my_sequence, member_ann_builtin_my_sequence, ann_custom_SequenceBoundsStruct);
            CompleteStructMember member_my_sequence = TypeObjectUtils::build_complete_struct_member(common_my_sequence, detail_my_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceBoundsStruct, member_my_sequence);
        }
        CompleteStructType struct_type_SequenceBoundsStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceBoundsStruct, header_SequenceBoundsStruct, member_seq_SequenceBoundsStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceBoundsStruct, type_name_SequenceBoundsStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceBoundsStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceBoundsStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceBoundsStruct", type_ids_SequenceBoundsStruct);
        if (return_code_SequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceBoundsStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceSequenceStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceSequenceStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceSequenceStruct;
        TypeIdentifierPair type_ids_SequenceSequenceStruct;
        QualifiedTypeName type_name_SequenceSequenceStruct = "SequenceSequenceStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceSequenceStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceSequenceStruct;
        CompleteTypeDetail detail_SequenceSequenceStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceSequenceStruct, ann_custom_SequenceSequenceStruct, type_name_SequenceSequenceStruct.to_string());
        CompleteStructHeader header_SequenceSequenceStruct;
        header_SequenceSequenceStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceSequenceStruct);
        CompleteStructMemberSeq member_seq_SequenceSequenceStruct;
        {
            return_code_SequenceSequenceStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_sequence_int32_t_2_3", type_ids_SequenceSequenceStruct);

            if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceSequenceStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int32_t_2", type_ids_SequenceSequenceStruct);

                if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code_SequenceSequenceStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SequenceSequenceStruct);

                    if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* element_identifier_anonymous_sequence_int32_t_2 {nullptr};
                    if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceSequenceStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_sequence_int32_t_2 = new TypeIdentifier(type_ids_SequenceSequenceStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier inconsistent.");
                        return;
                    }
                    EquivalenceKind equiv_kind_anonymous_sequence_int32_t_2 = EK_COMPLETE;
                    if (TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d())
                    {
                        equiv_kind_anonymous_sequence_int32_t_2 = EK_BOTH;
                    }
                    CollectionElementFlag element_flags_anonymous_sequence_int32_t_2 = 0;
                    PlainCollectionHeader header_anonymous_sequence_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_2, element_flags_anonymous_sequence_int32_t_2);
                    std::string type_id_kind_anonymous_sequence_int32_t_2("TI_PLAIN_SEQUENCE_SMALL");
                    if (type_id_kind_anonymous_sequence_int32_t_2 == "TI_PLAIN_SEQUENCE_SMALL")
                    {
                        SBound bound = static_cast<SBound>(2);
                        PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_2"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBound bound = 2;
                        PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_2, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_2));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_2"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code_SequenceSequenceStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_sequence_int32_t_2", type_ids_SequenceSequenceStruct);
                    if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_int32_t_2: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3 {nullptr};
                if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3 = new TypeIdentifier(type_ids_SequenceSequenceStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3 = new TypeIdentifier(type_ids_SequenceSequenceStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3 = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_sequence_int32_t_2_3 = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_sequence_int32_t_2_3 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3, element_flags_anonymous_sequence_anonymous_sequence_int32_t_2_3);
                std::string type_id_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_sequence_int32_t_2_3 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(3);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_sequence_int32_t_2_3, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_sequence_int32_t_2_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_sequence_int32_t_2_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 3;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_sequence_int32_t_2_3, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_sequence_int32_t_2_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_sequence_int32_t_2_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_sequence_int32_t_2_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceSequenceStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_sequence_int32_t_2_3", type_ids_SequenceSequenceStruct);
                if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_sequence_int32_t_2_3: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_sequence_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_sequence_sequence;
            MemberId member_id_my_sequence_sequence = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence_sequence, member_flags_my_sequence_sequence, type_ids_SequenceSequenceStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence_sequence, member_flags_my_sequence_sequence, type_ids_SequenceSequenceStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_sequence_sequence = "my_sequence_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_sequence_sequence;
            ann_custom_SequenceSequenceStruct.reset();
            CompleteMemberDetail detail_my_sequence_sequence = TypeObjectUtils::build_complete_member_detail(name_my_sequence_sequence, member_ann_builtin_my_sequence_sequence, ann_custom_SequenceSequenceStruct);
            CompleteStructMember member_my_sequence_sequence = TypeObjectUtils::build_complete_struct_member(common_my_sequence_sequence, detail_my_sequence_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceSequenceStruct, member_my_sequence_sequence);
        }
        CompleteStructType struct_type_SequenceSequenceStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceSequenceStruct, header_SequenceSequenceStruct, member_seq_SequenceSequenceStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceSequenceStruct, type_name_SequenceSequenceStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceSequenceStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceSequenceStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceSequenceStruct", type_ids_SequenceSequenceStruct);
        if (return_code_SequenceSequenceStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceSequenceStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SequenceSequenceBoundsStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SequenceSequenceBoundsStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SequenceSequenceBoundsStruct;
        TypeIdentifierPair type_ids_SequenceSequenceBoundsStruct;
        QualifiedTypeName type_name_SequenceSequenceBoundsStruct = "SequenceSequenceBoundsStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SequenceSequenceBoundsStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SequenceSequenceBoundsStruct;
        CompleteTypeDetail detail_SequenceSequenceBoundsStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SequenceSequenceBoundsStruct, ann_custom_SequenceSequenceBoundsStruct, type_name_SequenceSequenceBoundsStruct.to_string());
        CompleteStructHeader header_SequenceSequenceBoundsStruct;
        header_SequenceSequenceBoundsStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SequenceSequenceBoundsStruct);
        CompleteStructMemberSeq member_seq_SequenceSequenceBoundsStruct;
        {
            return_code_SequenceSequenceBoundsStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_sequence_anonymous_sequence_int32_t_5_5", type_ids_SequenceSequenceBoundsStruct);

            if (return_code_SequenceSequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_SequenceSequenceBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_int32_t_5", type_ids_SequenceSequenceBoundsStruct);

                if (return_code_SequenceSequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code_SequenceSequenceBoundsStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SequenceSequenceBoundsStruct);

                    if (return_code_SequenceSequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Sequence element TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* element_identifier_anonymous_sequence_int32_t_5 {nullptr};
                    if (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_sequence_int32_t_5 = new TypeIdentifier(type_ids_SequenceSequenceBoundsStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_sequence_int32_t_5 = new TypeIdentifier(type_ids_SequenceSequenceBoundsStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Sequence element TypeIdentifier inconsistent.");
                        return;
                    }
                    EquivalenceKind equiv_kind_anonymous_sequence_int32_t_5 = EK_COMPLETE;
                    if (TK_NONE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d())
                    {
                        equiv_kind_anonymous_sequence_int32_t_5 = EK_BOTH;
                    }
                    CollectionElementFlag element_flags_anonymous_sequence_int32_t_5 = 0;
                    PlainCollectionHeader header_anonymous_sequence_int32_t_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_int32_t_5, element_flags_anonymous_sequence_int32_t_5);
                    std::string type_id_kind_anonymous_sequence_int32_t_5("TI_PLAIN_SEQUENCE_SMALL");
                    if (type_id_kind_anonymous_sequence_int32_t_5 == "TI_PLAIN_SEQUENCE_SMALL")
                    {
                        SBound bound = static_cast<SBound>(5);
                        PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_int32_t_5, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_5));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_int32_t_5"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_5 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBound bound = 5;
                        PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_int32_t_5, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_int32_t_5));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_int32_t_5"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_int32_t_5 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code_SequenceSequenceBoundsStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_sequence_int32_t_5", type_ids_SequenceSequenceBoundsStruct);
                    if (return_code_SequenceSequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_sequence_int32_t_5: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_sequence_anonymous_sequence_int32_t_5_5 {nullptr};
                if (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_sequence_int32_t_5_5 = new TypeIdentifier(type_ids_SequenceSequenceBoundsStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_sequence_anonymous_sequence_int32_t_5_5 = new TypeIdentifier(type_ids_SequenceSequenceBoundsStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Sequence element TypeIdentifier inconsistent.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_sequence_anonymous_sequence_int32_t_5_5 = EK_COMPLETE;
                if (TK_NONE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d())
                {
                    equiv_kind_anonymous_sequence_anonymous_sequence_int32_t_5_5 = EK_BOTH;
                }
                CollectionElementFlag element_flags_anonymous_sequence_anonymous_sequence_int32_t_5_5 = 0;
                PlainCollectionHeader header_anonymous_sequence_anonymous_sequence_int32_t_5_5 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_sequence_anonymous_sequence_int32_t_5_5, element_flags_anonymous_sequence_anonymous_sequence_int32_t_5_5);
                std::string type_id_kind_anonymous_sequence_anonymous_sequence_int32_t_5_5("TI_PLAIN_SEQUENCE_SMALL");
                if (type_id_kind_anonymous_sequence_anonymous_sequence_int32_t_5_5 == "TI_PLAIN_SEQUENCE_SMALL")
                {
                    SBound bound = static_cast<SBound>(5);
                    PlainSequenceSElemDefn seq_sdefn = TypeObjectUtils::build_plain_sequence_s_elem_defn(header_anonymous_sequence_anonymous_sequence_int32_t_5_5, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_sequence_int32_t_5_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_sequence_type_identifier(seq_sdefn, "anonymous_sequence_anonymous_sequence_int32_t_5_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_sequence_int32_t_5_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 5;
                    PlainSequenceLElemDefn seq_ldefn = TypeObjectUtils::build_plain_sequence_l_elem_defn(header_anonymous_sequence_anonymous_sequence_int32_t_5_5, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_sequence_anonymous_sequence_int32_t_5_5));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_sequence_type_identifier(seq_ldefn, "anonymous_sequence_anonymous_sequence_int32_t_5_5"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_sequence_anonymous_sequence_int32_t_5_5 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_SequenceSequenceBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_sequence_anonymous_sequence_int32_t_5_5", type_ids_SequenceSequenceBoundsStruct);
                if (return_code_SequenceSequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_sequence_anonymous_sequence_int32_t_5_5: Given Sequence TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_sequence_sequence = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_sequence_sequence;
            MemberId member_id_my_sequence_sequence = 0x00000000;
            if (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence_sequence, member_flags_my_sequence_sequence, type_ids_SequenceSequenceBoundsStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SequenceSequenceBoundsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SequenceSequenceBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_sequence_sequence = TypeObjectUtils::build_common_struct_member(member_id_my_sequence_sequence, member_flags_my_sequence_sequence, type_ids_SequenceSequenceBoundsStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_sequence_sequence member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_sequence_sequence = "my_sequence_sequence";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_sequence_sequence;
            ann_custom_SequenceSequenceBoundsStruct.reset();
            CompleteMemberDetail detail_my_sequence_sequence = TypeObjectUtils::build_complete_member_detail(name_my_sequence_sequence, member_ann_builtin_my_sequence_sequence, ann_custom_SequenceSequenceBoundsStruct);
            CompleteStructMember member_my_sequence_sequence = TypeObjectUtils::build_complete_struct_member(common_my_sequence_sequence, detail_my_sequence_sequence);
            TypeObjectUtils::add_complete_struct_member(member_seq_SequenceSequenceBoundsStruct, member_my_sequence_sequence);
        }
        CompleteStructType struct_type_SequenceSequenceBoundsStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SequenceSequenceBoundsStruct, header_SequenceSequenceBoundsStruct, member_seq_SequenceSequenceBoundsStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SequenceSequenceBoundsStruct, type_name_SequenceSequenceBoundsStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SequenceSequenceBoundsStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SequenceSequenceBoundsStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SequenceSequenceBoundsStruct", type_ids_SequenceSequenceBoundsStruct);
        if (return_code_SequenceSequenceBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SequenceSequenceBoundsStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MapStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MapStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MapStruct;
        TypeIdentifierPair type_ids_MapStruct;
        QualifiedTypeName type_name_MapStruct = "MapStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStruct;
        CompleteTypeDetail detail_MapStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStruct, ann_custom_MapStruct, type_name_MapStruct.to_string());
        CompleteStructHeader header_MapStruct;
        header_MapStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStruct);
        CompleteStructMemberSeq member_seq_MapStruct;
        {
            return_code_MapStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int32_t_2", type_ids_MapStruct);

            if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_MapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapStruct);

                if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_2 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_MapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapStruct);

                if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_2 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_BOTH;
                if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_ldefn().header().equiv_kind()))
                {
                    equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_2 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_2, element_flags_anonymous_map_int32_t_int32_t_2);
                std::string type_id_kind_anonymous_map_int32_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int32_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_MapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_int32_t_2", type_ids_MapStruct);
                if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_map;
            MemberId member_id_my_map = 0x00000000;
            if (EK_COMPLETE == type_ids_MapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MapStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_map = "my_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_map;
            ann_custom_MapStruct.reset();
            CompleteMemberDetail detail_my_map = TypeObjectUtils::build_complete_member_detail(name_my_map, member_ann_builtin_my_map, ann_custom_MapStruct);
            CompleteStructMember member_my_map = TypeObjectUtils::build_complete_struct_member(common_my_map, detail_my_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStruct, member_my_map);
        }
        CompleteStructType struct_type_MapStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStruct, header_MapStruct, member_seq_MapStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStruct, type_name_MapStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MapStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MapStruct", type_ids_MapStruct);
        if (return_code_MapStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MapStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MapStructEqual_type_identifier()
{
    {
        StructTypeFlag struct_flags_MapStructEqual = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MapStructEqual;
        TypeIdentifierPair type_ids_MapStructEqual;
        QualifiedTypeName type_name_MapStructEqual = "MapStructEqual";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapStructEqual;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapStructEqual;
        CompleteTypeDetail detail_MapStructEqual = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapStructEqual, ann_custom_MapStructEqual, type_name_MapStructEqual.to_string());
        CompleteStructHeader header_MapStructEqual;
        header_MapStructEqual = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapStructEqual);
        CompleteStructMemberSeq member_seq_MapStructEqual;
        {
            return_code_MapStructEqual =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int32_t_2", type_ids_MapStructEqual);

            if (return_code_MapStructEqual != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_MapStructEqual =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapStructEqual);

                if (return_code_MapStructEqual != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapStructEqual.type_identifier1()._d() || TK_NONE == type_ids_MapStructEqual.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStructEqual.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStructEqual.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStructEqual.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapStructEqual.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStructEqual.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStructEqual.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStructEqual.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_2 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_MapStructEqual =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapStructEqual);

                if (return_code_MapStructEqual != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapStructEqual.type_identifier1()._d() || TK_NONE == type_ids_MapStructEqual.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStructEqual.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStructEqual.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStructEqual.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStructEqual.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapStructEqual.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapStructEqual.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapStructEqual.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapStructEqual.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapStructEqual.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_2 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_BOTH;
                if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_ldefn().header().equiv_kind()))
                {
                    equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_2 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_2, element_flags_anonymous_map_int32_t_int32_t_2);
                std::string type_id_kind_anonymous_map_int32_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int32_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_MapStructEqual =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_int32_t_2", type_ids_MapStructEqual);
                if (return_code_MapStructEqual != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_map_equal = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_map_equal;
            MemberId member_id_my_map_equal = 0x00000000;
            if (EK_COMPLETE == type_ids_MapStructEqual.type_identifier1()._d() || TK_NONE == type_ids_MapStructEqual.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapStructEqual.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapStructEqual.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_map_equal = TypeObjectUtils::build_common_struct_member(member_id_my_map_equal, member_flags_my_map_equal, type_ids_MapStructEqual.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MapStructEqual.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapStructEqual.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapStructEqual.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapStructEqual.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_map_equal = TypeObjectUtils::build_common_struct_member(member_id_my_map_equal, member_flags_my_map_equal, type_ids_MapStructEqual.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map_equal member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_map_equal = "my_map_equal";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_map_equal;
            ann_custom_MapStructEqual.reset();
            CompleteMemberDetail detail_my_map_equal = TypeObjectUtils::build_complete_member_detail(name_my_map_equal, member_ann_builtin_my_map_equal, ann_custom_MapStructEqual);
            CompleteStructMember member_my_map_equal = TypeObjectUtils::build_complete_struct_member(common_my_map_equal, detail_my_map_equal);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapStructEqual, member_my_map_equal);
        }
        CompleteStructType struct_type_MapStructEqual = TypeObjectUtils::build_complete_struct_type(struct_flags_MapStructEqual, header_MapStructEqual, member_seq_MapStructEqual);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapStructEqual, type_name_MapStructEqual.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapStructEqual already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MapStructEqual =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MapStructEqual", type_ids_MapStructEqual);
        if (return_code_MapStructEqual != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MapStructEqual: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MapBadKeyStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MapBadKeyStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MapBadKeyStruct;
        TypeIdentifierPair type_ids_MapBadKeyStruct;
        QualifiedTypeName type_name_MapBadKeyStruct = "MapBadKeyStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapBadKeyStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapBadKeyStruct;
        CompleteTypeDetail detail_MapBadKeyStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapBadKeyStruct, ann_custom_MapBadKeyStruct, type_name_MapBadKeyStruct.to_string());
        CompleteStructHeader header_MapBadKeyStruct;
        header_MapBadKeyStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapBadKeyStruct);
        CompleteStructMemberSeq member_seq_MapBadKeyStruct;
        {
            return_code_MapBadKeyStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_uint8_t_int32_t_2", type_ids_MapBadKeyStruct);

            if (return_code_MapBadKeyStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_MapBadKeyStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapBadKeyStruct);

                if (return_code_MapBadKeyStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_map_uint8_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1()._d() || TK_NONE == type_ids_MapBadKeyStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_uint8_t_int32_t_2 = new TypeIdentifier(type_ids_MapBadKeyStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_uint8_t_int32_t_2 = new TypeIdentifier(type_ids_MapBadKeyStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint8_t_int32_t_2 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_MapBadKeyStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_byte", type_ids_MapBadKeyStruct);

                if (return_code_MapBadKeyStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_uint8_t_int32_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1()._d() || TK_NONE == type_ids_MapBadKeyStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_uint8_t_int32_t_2 = new TypeIdentifier(type_ids_MapBadKeyStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_uint8_t_int32_t_2 = new TypeIdentifier(type_ids_MapBadKeyStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_uint8_t_int32_t_2 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_uint8_t_int32_t_2 = EK_BOTH;
                if (EK_COMPLETE == element_identifier_anonymous_map_uint8_t_int32_t_2->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_uint8_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint8_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_uint8_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint8_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_uint8_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint8_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_uint8_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint8_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_uint8_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint8_t_int32_t_2->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_uint8_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_uint8_t_int32_t_2->map_ldefn().header().equiv_kind()))
                {
                    equiv_kind_anonymous_map_uint8_t_int32_t_2 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_uint8_t_int32_t_2 = 0;
                CollectionElementFlag key_flags_anonymous_map_uint8_t_int32_t_2 = 0;
                PlainCollectionHeader header_anonymous_map_uint8_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_uint8_t_int32_t_2, element_flags_anonymous_map_uint8_t_int32_t_2);
                std::string type_id_kind_anonymous_map_uint8_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_uint8_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_uint8_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint8_t_int32_t_2), key_flags_anonymous_map_uint8_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint8_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_uint8_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint8_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_uint8_t_int32_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_uint8_t_int32_t_2), key_flags_anonymous_map_uint8_t_int32_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_uint8_t_int32_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_uint8_t_int32_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_uint8_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_MapBadKeyStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_uint8_t_int32_t_2", type_ids_MapBadKeyStruct);
                if (return_code_MapBadKeyStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_uint8_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_map;
            MemberId member_id_my_map = 0x00000000;
            if (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1()._d() || TK_NONE == type_ids_MapBadKeyStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapBadKeyStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapBadKeyStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapBadKeyStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBadKeyStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapBadKeyStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_map = "my_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_map;
            ann_custom_MapBadKeyStruct.reset();
            CompleteMemberDetail detail_my_map = TypeObjectUtils::build_complete_member_detail(name_my_map, member_ann_builtin_my_map, ann_custom_MapBadKeyStruct);
            CompleteStructMember member_my_map = TypeObjectUtils::build_complete_struct_member(common_my_map, detail_my_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapBadKeyStruct, member_my_map);
        }
        CompleteStructType struct_type_MapBadKeyStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MapBadKeyStruct, header_MapBadKeyStruct, member_seq_MapBadKeyStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapBadKeyStruct, type_name_MapBadKeyStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapBadKeyStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MapBadKeyStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MapBadKeyStruct", type_ids_MapBadKeyStruct);
        if (return_code_MapBadKeyStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MapBadKeyStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MapBadElemStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MapBadElemStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MapBadElemStruct;
        TypeIdentifierPair type_ids_MapBadElemStruct;
        QualifiedTypeName type_name_MapBadElemStruct = "MapBadElemStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapBadElemStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapBadElemStruct;
        CompleteTypeDetail detail_MapBadElemStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapBadElemStruct, ann_custom_MapBadElemStruct, type_name_MapBadElemStruct.to_string());
        CompleteStructHeader header_MapBadElemStruct;
        header_MapBadElemStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapBadElemStruct);
        CompleteStructMemberSeq member_seq_MapBadElemStruct;
        {
            return_code_MapBadElemStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int64_t_2", type_ids_MapBadElemStruct);

            if (return_code_MapBadElemStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_MapBadElemStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int64_t", type_ids_MapBadElemStruct);

                if (return_code_MapBadElemStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int64_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1()._d() || TK_NONE == type_ids_MapBadElemStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int64_t_2 = new TypeIdentifier(type_ids_MapBadElemStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int64_t_2 = new TypeIdentifier(type_ids_MapBadElemStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int64_t_2 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_MapBadElemStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapBadElemStruct);

                if (return_code_MapBadElemStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int64_t_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1()._d() || TK_NONE == type_ids_MapBadElemStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int64_t_2 = new TypeIdentifier(type_ids_MapBadElemStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int64_t_2 = new TypeIdentifier(type_ids_MapBadElemStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int64_t_2 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int64_t_2 = EK_BOTH;
                if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_2->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int64_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_2->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int64_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_2->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int64_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_2->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int64_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_2->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int64_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_2->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int64_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int64_t_2->map_ldefn().header().equiv_kind()))
                {
                    equiv_kind_anonymous_map_int32_t_int64_t_2 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int64_t_2 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int64_t_2 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int64_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int64_t_2, element_flags_anonymous_map_int32_t_int64_t_2);
                std::string type_id_kind_anonymous_map_int32_t_int64_t_2("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int32_t_int64_t_2 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int64_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int64_t_2), key_flags_anonymous_map_int32_t_int64_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int64_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int64_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int64_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int64_t_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int64_t_2), key_flags_anonymous_map_int32_t_int64_t_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int64_t_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int64_t_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int64_t_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_MapBadElemStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_int64_t_2", type_ids_MapBadElemStruct);
                if (return_code_MapBadElemStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int64_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_map;
            MemberId member_id_my_map = 0x00000000;
            if (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1()._d() || TK_NONE == type_ids_MapBadElemStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapBadElemStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapBadElemStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapBadElemStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBadElemStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapBadElemStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_map = "my_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_map;
            ann_custom_MapBadElemStruct.reset();
            CompleteMemberDetail detail_my_map = TypeObjectUtils::build_complete_member_detail(name_my_map, member_ann_builtin_my_map, ann_custom_MapBadElemStruct);
            CompleteStructMember member_my_map = TypeObjectUtils::build_complete_struct_member(common_my_map, detail_my_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapBadElemStruct, member_my_map);
        }
        CompleteStructType struct_type_MapBadElemStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MapBadElemStruct, header_MapBadElemStruct, member_seq_MapBadElemStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapBadElemStruct, type_name_MapBadElemStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapBadElemStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MapBadElemStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MapBadElemStruct", type_ids_MapBadElemStruct);
        if (return_code_MapBadElemStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MapBadElemStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MapBoundsStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MapBoundsStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MapBoundsStruct;
        TypeIdentifierPair type_ids_MapBoundsStruct;
        QualifiedTypeName type_name_MapBoundsStruct = "MapBoundsStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapBoundsStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapBoundsStruct;
        CompleteTypeDetail detail_MapBoundsStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapBoundsStruct, ann_custom_MapBoundsStruct, type_name_MapBoundsStruct.to_string());
        CompleteStructHeader header_MapBoundsStruct;
        header_MapBoundsStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapBoundsStruct);
        CompleteStructMemberSeq member_seq_MapBoundsStruct;
        {
            return_code_MapBoundsStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_int32_t_4", type_ids_MapBoundsStruct);

            if (return_code_MapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_MapBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapBoundsStruct);

                if (return_code_MapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_4 {nullptr};
                if (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_MapBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_4 = new TypeIdentifier(type_ids_MapBoundsStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_int32_t_4 = new TypeIdentifier(type_ids_MapBoundsStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_4 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_MapBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapBoundsStruct);

                if (return_code_MapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_4 {nullptr};
                if (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_MapBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_4 = new TypeIdentifier(type_ids_MapBoundsStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_int32_t_4 = new TypeIdentifier(type_ids_MapBoundsStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_int32_t_4 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_4 = EK_BOTH;
                if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_4->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_4->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_4->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_4->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_4->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_4->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_4->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_4->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_4->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_4->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_4->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_4->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_4->map_ldefn().header().equiv_kind()))
                {
                    equiv_kind_anonymous_map_int32_t_int32_t_4 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_4 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_4 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_int32_t_4 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_4, element_flags_anonymous_map_int32_t_int32_t_4);
                std::string type_id_kind_anonymous_map_int32_t_int32_t_4("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int32_t_int32_t_4 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(4);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_4, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_4), key_flags_anonymous_map_int32_t_int32_t_4,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_4));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 4;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_4, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_4), key_flags_anonymous_map_int32_t_int32_t_4,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_4));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_4"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_4 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_MapBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_int32_t_4", type_ids_MapBoundsStruct);
                if (return_code_MapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_4: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_map;
            MemberId member_id_my_map = 0x00000000;
            if (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_MapBoundsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapBoundsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapBoundsStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapBoundsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_map = TypeObjectUtils::build_common_struct_member(member_id_my_map, member_flags_my_map, type_ids_MapBoundsStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_map = "my_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_map;
            ann_custom_MapBoundsStruct.reset();
            CompleteMemberDetail detail_my_map = TypeObjectUtils::build_complete_member_detail(name_my_map, member_ann_builtin_my_map, ann_custom_MapBoundsStruct);
            CompleteStructMember member_my_map = TypeObjectUtils::build_complete_struct_member(common_my_map, detail_my_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapBoundsStruct, member_my_map);
        }
        CompleteStructType struct_type_MapBoundsStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MapBoundsStruct, header_MapBoundsStruct, member_seq_MapBoundsStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapBoundsStruct, type_name_MapBoundsStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapBoundsStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MapBoundsStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MapBoundsStruct", type_ids_MapBoundsStruct);
        if (return_code_MapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MapBoundsStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MapMapStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MapMapStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MapMapStruct;
        TypeIdentifierPair type_ids_MapMapStruct;
        QualifiedTypeName type_name_MapMapStruct = "MapMapStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapMapStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapMapStruct;
        CompleteTypeDetail detail_MapMapStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapMapStruct, ann_custom_MapMapStruct, type_name_MapMapStruct.to_string());
        CompleteStructHeader header_MapMapStruct;
        header_MapMapStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapMapStruct);
        CompleteStructMemberSeq member_seq_MapMapStruct;
        {
            return_code_MapMapStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2", type_ids_MapMapStruct);

            if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_MapMapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_int32_t_2", type_ids_MapMapStruct);

                if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code_MapMapStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_MapMapStruct);

                    if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                    if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 inconsistent element TypeIdentifier.");
                        return;
                    }
                    return_code_MapMapStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_MapMapStruct);

                    if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_2 {nullptr};
                    if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        key_identifier_anonymous_map_int32_t_int32_t_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_2 inconsistent key TypeIdentifier.");
                        return;
                    }
                    EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_BOTH;
                    if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_2->map_ldefn().header().equiv_kind()))
                    {
                        equiv_kind_anonymous_map_int32_t_int32_t_2 = EK_COMPLETE;
                    }
                    CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_2 = 0;
                    CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_2 = 0;
                    PlainCollectionHeader header_anonymous_map_int32_t_int32_t_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_2, element_flags_anonymous_map_int32_t_int32_t_2);
                    std::string type_id_kind_anonymous_map_int32_t_int32_t_2("TI_PLAIN_MAP_SMALL");
                    if (type_id_kind_anonymous_map_int32_t_int32_t_2 == "TI_PLAIN_MAP_SMALL")
                    {
                        SBound bound = static_cast<SBound>(2);
                        PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                    eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_2"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBound bound = 2;
                        PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_2, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_2), key_flags_anonymous_map_int32_t_int32_t_2,
                                    eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_2));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_2"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_2 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code_MapMapStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_map_int32_t_int32_t_2", type_ids_MapMapStruct);
                    if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_int32_t_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_MapMapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapMapStruct);

                if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 {nullptr};
                if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = new TypeIdentifier(type_ids_MapMapStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = EK_BOTH;
                if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2->map_ldefn().header().equiv_kind()))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2, element_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2);
                std::string type_id_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(2);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2), key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 2;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2), key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_MapMapStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2", type_ids_MapMapStruct);
                if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_2_2: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_map_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_map_map;
            MemberId member_id_my_map_map = 0x00000000;
            if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_map_map = TypeObjectUtils::build_common_struct_member(member_id_my_map_map, member_flags_my_map_map, type_ids_MapMapStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapMapStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapMapStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_map_map = TypeObjectUtils::build_common_struct_member(member_id_my_map_map, member_flags_my_map_map, type_ids_MapMapStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_map_map = "my_map_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_map_map;
            ann_custom_MapMapStruct.reset();
            CompleteMemberDetail detail_my_map_map = TypeObjectUtils::build_complete_member_detail(name_my_map_map, member_ann_builtin_my_map_map, ann_custom_MapMapStruct);
            CompleteStructMember member_my_map_map = TypeObjectUtils::build_complete_struct_member(common_my_map_map, detail_my_map_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapMapStruct, member_my_map_map);
        }
        CompleteStructType struct_type_MapMapStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MapMapStruct, header_MapMapStruct, member_seq_MapMapStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapMapStruct, type_name_MapMapStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapMapStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MapMapStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MapMapStruct", type_ids_MapMapStruct);
        if (return_code_MapMapStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MapMapStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_MapMapBoundsStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_MapMapBoundsStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_MapMapBoundsStruct;
        TypeIdentifierPair type_ids_MapMapBoundsStruct;
        QualifiedTypeName type_name_MapMapBoundsStruct = "MapMapBoundsStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_MapMapBoundsStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_MapMapBoundsStruct;
        CompleteTypeDetail detail_MapMapBoundsStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_MapMapBoundsStruct, ann_custom_MapMapBoundsStruct, type_name_MapMapBoundsStruct.to_string());
        CompleteStructHeader header_MapMapBoundsStruct;
        header_MapMapBoundsStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_MapMapBoundsStruct);
        CompleteStructMemberSeq member_seq_MapMapBoundsStruct;
        {
            return_code_MapMapBoundsStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3", type_ids_MapMapBoundsStruct);

            if (return_code_MapMapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                return_code_MapMapBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_int32_t_3", type_ids_MapMapBoundsStruct);

                if (return_code_MapMapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    return_code_MapMapBoundsStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_MapMapBoundsStruct);

                    if (return_code_MapMapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Map element TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* element_identifier_anonymous_map_int32_t_int32_t_3 {nullptr};
                    if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_map_int32_t_int32_t_3 = new TypeIdentifier(type_ids_MapMapBoundsStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        element_identifier_anonymous_map_int32_t_int32_t_3 = new TypeIdentifier(type_ids_MapMapBoundsStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_3 inconsistent element TypeIdentifier.");
                        return;
                    }
                    return_code_MapMapBoundsStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_MapMapBoundsStruct);

                    if (return_code_MapMapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    TypeIdentifier* key_identifier_anonymous_map_int32_t_int32_t_3 {nullptr};
                    if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                            (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                    {
                        key_identifier_anonymous_map_int32_t_int32_t_3 = new TypeIdentifier(type_ids_MapMapBoundsStruct.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                            (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                            (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                            EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                    {
                        key_identifier_anonymous_map_int32_t_int32_t_3 = new TypeIdentifier(type_ids_MapMapBoundsStruct.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_int32_t_3 inconsistent key TypeIdentifier.");
                        return;
                    }
                    EquivalenceKind equiv_kind_anonymous_map_int32_t_int32_t_3 = EK_BOTH;
                    if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_3->_d() ||
                            (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_int32_t_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_3->seq_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_int32_t_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_3->seq_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_int32_t_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_3->array_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_int32_t_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_3->array_ldefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_int32_t_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_3->map_sdefn().header().equiv_kind()) ||
                            (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_int32_t_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_int32_t_3->map_ldefn().header().equiv_kind()))
                    {
                        equiv_kind_anonymous_map_int32_t_int32_t_3 = EK_COMPLETE;
                    }
                    CollectionElementFlag element_flags_anonymous_map_int32_t_int32_t_3 = 0;
                    CollectionElementFlag key_flags_anonymous_map_int32_t_int32_t_3 = 0;
                    PlainCollectionHeader header_anonymous_map_int32_t_int32_t_3 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_int32_t_3, element_flags_anonymous_map_int32_t_int32_t_3);
                    std::string type_id_kind_anonymous_map_int32_t_int32_t_3("TI_PLAIN_MAP_SMALL");
                    if (type_id_kind_anonymous_map_int32_t_int32_t_3 == "TI_PLAIN_MAP_SMALL")
                    {
                        SBound bound = static_cast<SBound>(3);
                        PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_int32_t_3, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_3), key_flags_anonymous_map_int32_t_int32_t_3,
                                    eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_3));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_int32_t_3"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_3 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    else
                    {
                        LBound bound = 3;
                        PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_int32_t_3, bound,
                                    eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_int32_t_3), key_flags_anonymous_map_int32_t_int32_t_3,
                                    eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_int32_t_3));
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_int32_t_3"))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_int32_t_3 already registered in TypeObjectRegistry for a different type.");
                        }
                    }
                    return_code_MapMapBoundsStruct =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "anonymous_map_int32_t_int32_t_3", type_ids_MapMapBoundsStruct);
                    if (return_code_MapMapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "anonymous_map_int32_t_int32_t_3: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
                TypeIdentifier* element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 {nullptr};
                if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 = new TypeIdentifier(type_ids_MapMapBoundsStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 = new TypeIdentifier(type_ids_MapMapBoundsStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 inconsistent element TypeIdentifier.");
                    return;
                }
                return_code_MapMapBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "_int32_t", type_ids_MapMapBoundsStruct);

                if (return_code_MapMapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "Map key TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
                TypeIdentifier* key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 {nullptr};
                if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                        (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 = new TypeIdentifier(type_ids_MapMapBoundsStruct.type_identifier1());
                }
                else if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                        (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                        (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                        EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
                {
                    key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 = new TypeIdentifier(type_ids_MapMapBoundsStruct.type_identifier2());
                }
                else
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 inconsistent key TypeIdentifier.");
                    return;
                }
                EquivalenceKind equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 = EK_BOTH;
                if (EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->_d() ||
                        (TI_PLAIN_SEQUENCE_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->seq_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_SEQUENCE_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->seq_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->array_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_ARRAY_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->array_ldefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_SMALL == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->map_sdefn().header().equiv_kind()) ||
                        (TI_PLAIN_MAP_LARGE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->_d() && EK_COMPLETE == element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3->map_ldefn().header().equiv_kind()))
                {
                    equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 = EK_COMPLETE;
                }
                CollectionElementFlag element_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 = 0;
                CollectionElementFlag key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 = 0;
                PlainCollectionHeader header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 = TypeObjectUtils::build_plain_collection_header(equiv_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3, element_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3);
                std::string type_id_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3("TI_PLAIN_MAP_SMALL");
                if (type_id_kind_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 == "TI_PLAIN_MAP_SMALL")
                {
                    SBound bound = static_cast<SBound>(3);
                    PlainMapSTypeDefn map_sdefn = TypeObjectUtils::build_plain_map_s_type_defn(header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3), key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_map_type_identifier(map_sdefn, "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                else
                {
                    LBound bound = 3;
                    PlainMapLTypeDefn map_ldefn = TypeObjectUtils::build_plain_map_l_type_defn(header_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3, bound,
                                eprosima::fastcdr::external<TypeIdentifier>(element_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3), key_flags_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3,
                                eprosima::fastcdr::external<TypeIdentifier>(key_identifier_anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3));
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_l_map_type_identifier(map_ldefn, "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3"))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3 already registered in TypeObjectRegistry for a different type.");
                    }
                }
                return_code_MapMapBoundsStruct =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3", type_ids_MapMapBoundsStruct);
                if (return_code_MapMapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "anonymous_map_int32_t_anonymous_map_int32_t_int32_t_3_3: Given Map TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            StructMemberFlag member_flags_my_map_map = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_map_map;
            MemberId member_id_my_map_map = 0x00000000;
            if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1()._d() || TK_NONE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_map_map = TypeObjectUtils::build_common_struct_member(member_id_my_map_map, member_flags_my_map_map, type_ids_MapMapBoundsStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_MapMapBoundsStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_MapMapBoundsStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_map_map = TypeObjectUtils::build_common_struct_member(member_id_my_map_map, member_flags_my_map_map, type_ids_MapMapBoundsStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_map_map member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_map_map = "my_map_map";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_map_map;
            ann_custom_MapMapBoundsStruct.reset();
            CompleteMemberDetail detail_my_map_map = TypeObjectUtils::build_complete_member_detail(name_my_map_map, member_ann_builtin_my_map_map, ann_custom_MapMapBoundsStruct);
            CompleteStructMember member_my_map_map = TypeObjectUtils::build_complete_struct_member(common_my_map_map, detail_my_map_map);
            TypeObjectUtils::add_complete_struct_member(member_seq_MapMapBoundsStruct, member_my_map_map);
        }
        CompleteStructType struct_type_MapMapBoundsStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_MapMapBoundsStruct, header_MapMapBoundsStruct, member_seq_MapMapBoundsStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_MapMapBoundsStruct, type_name_MapMapBoundsStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MapMapBoundsStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_MapMapBoundsStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MapMapBoundsStruct", type_ids_MapMapBoundsStruct);
        if (return_code_MapMapBoundsStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MapMapBoundsStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleUnion_type_identifier()
{
    {
        ReturnCode_t return_code_SimpleUnion;
        TypeIdentifierPair type_ids_SimpleUnion;
        UnionTypeFlag union_flags_SimpleUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_SimpleUnion = "SimpleUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnion;
        CompleteTypeDetail detail_SimpleUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion, type_name_SimpleUnion.to_string());
        CompleteUnionHeader header_SimpleUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleUnion);
        UnionDiscriminatorFlag member_flags_SimpleUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_SimpleUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_SimpleUnion);

        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_SimpleUnion;
        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d())
        {
            common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d())
        {
            common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_SimpleUnion.reset();
        ann_custom_SimpleUnion.reset();
        CompleteDiscriminatorMember discriminator_SimpleUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleUnion,
                type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion);
        CompleteUnionMemberSeq member_seq_SimpleUnion;
        {
            return_code_SimpleUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_SimpleUnion);

            if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_first;
            TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
            CommonUnionMember common_first;
            MemberId member_id_first = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier1(),
                        label_seq_first);
            }
            else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier2(),
                        label_seq_first);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
            ann_custom_SimpleUnion.reset();
            CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleUnion);
            CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_first);
        }
        {
            return_code_SimpleUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_SimpleUnion);

            if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_second;
            TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
            CommonUnionMember common_second;
            MemberId member_id_second = 0x00000001;
            if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier1(),
                        label_seq_second);
            }
            else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier2(),
                        label_seq_second);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
            ann_custom_SimpleUnion.reset();
            CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleUnion);
            CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_second);
        }
        CompleteUnionType union_type_SimpleUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleUnion, header_SimpleUnion, discriminator_SimpleUnion,
                member_seq_SimpleUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleUnion, type_name_SimpleUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleUnion", type_ids_SimpleUnion);
        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleUnionNames_type_identifier()
{
    {
        ReturnCode_t return_code_SimpleUnionNames;
        TypeIdentifierPair type_ids_SimpleUnionNames;
        UnionTypeFlag union_flags_SimpleUnionNames = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_SimpleUnionNames = "SimpleUnionNames";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnionNames;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnionNames;
        CompleteTypeDetail detail_SimpleUnionNames = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnionNames, ann_custom_SimpleUnionNames, type_name_SimpleUnionNames.to_string());
        CompleteUnionHeader header_SimpleUnionNames = TypeObjectUtils::build_complete_union_header(detail_SimpleUnionNames);
        UnionDiscriminatorFlag member_flags_SimpleUnionNames = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_SimpleUnionNames =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_SimpleUnionNames);

        if (return_code_SimpleUnionNames != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_SimpleUnionNames;
        if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionNames.type_identifier2()._d())
        {
            common_SimpleUnionNames = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnionNames, type_ids_SimpleUnionNames.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2()._d())
        {
            common_SimpleUnionNames = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnionNames, type_ids_SimpleUnionNames.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnionNames discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_SimpleUnionNames.reset();
        ann_custom_SimpleUnionNames.reset();
        CompleteDiscriminatorMember discriminator_SimpleUnionNames = TypeObjectUtils::build_complete_discriminator_member(common_SimpleUnionNames,
                type_ann_builtin_SimpleUnionNames, ann_custom_SimpleUnionNames);
        CompleteUnionMemberSeq member_seq_SimpleUnionNames;
        {
            return_code_SimpleUnionNames =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_SimpleUnionNames);

            if (return_code_SimpleUnionNames != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "first_case Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_first_case = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_first_case;
            TypeObjectUtils::add_union_case_label(label_seq_first_case, static_cast<int32_t>(0));
            CommonUnionMember common_first_case;
            MemberId member_id_first_case = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionNames.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_first_case = TypeObjectUtils::build_common_union_member(member_id_first_case, member_flags_first_case, type_ids_SimpleUnionNames.type_identifier1(),
                        label_seq_first_case);
            }
            else if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_first_case = TypeObjectUtils::build_common_union_member(member_id_first_case, member_flags_first_case, type_ids_SimpleUnionNames.type_identifier2(),
                        label_seq_first_case);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union first_case member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first_case = "first_case";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first_case;
            ann_custom_SimpleUnionNames.reset();
            CompleteMemberDetail detail_first_case = TypeObjectUtils::build_complete_member_detail(name_first_case, member_ann_builtin_first_case, ann_custom_SimpleUnionNames);
            CompleteUnionMember member_first_case = TypeObjectUtils::build_complete_union_member(common_first_case, detail_first_case);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnionNames, member_first_case);
        }
        {
            return_code_SimpleUnionNames =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_SimpleUnionNames);

            if (return_code_SimpleUnionNames != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "second_case Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_second_case = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_second_case;
            TypeObjectUtils::add_union_case_label(label_seq_second_case, static_cast<int32_t>(1));
            CommonUnionMember common_second_case;
            MemberId member_id_second_case = 0x00000001;
            if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionNames.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_second_case = TypeObjectUtils::build_common_union_member(member_id_second_case, member_flags_second_case, type_ids_SimpleUnionNames.type_identifier1(),
                        label_seq_second_case);
            }
            else if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_second_case = TypeObjectUtils::build_common_union_member(member_id_second_case, member_flags_second_case, type_ids_SimpleUnionNames.type_identifier2(),
                        label_seq_second_case);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union second_case member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second_case = "second_case";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second_case;
            ann_custom_SimpleUnionNames.reset();
            CompleteMemberDetail detail_second_case = TypeObjectUtils::build_complete_member_detail(name_second_case, member_ann_builtin_second_case, ann_custom_SimpleUnionNames);
            CompleteUnionMember member_second_case = TypeObjectUtils::build_complete_union_member(common_second_case, detail_second_case);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnionNames, member_second_case);
        }
        CompleteUnionType union_type_SimpleUnionNames = TypeObjectUtils::build_complete_union_type(union_flags_SimpleUnionNames, header_SimpleUnionNames, discriminator_SimpleUnionNames,
                member_seq_SimpleUnionNames);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleUnionNames, type_name_SimpleUnionNames.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnionNames already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleUnionNames =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleUnionNames", type_ids_SimpleUnionNames);
        if (return_code_SimpleUnionNames != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleUnionNames: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleTypeUnion_type_identifier()
{
    {
        ReturnCode_t return_code_SimpleTypeUnion;
        TypeIdentifierPair type_ids_SimpleTypeUnion;
        UnionTypeFlag union_flags_SimpleTypeUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_SimpleTypeUnion = "SimpleTypeUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleTypeUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleTypeUnion;
        CompleteTypeDetail detail_SimpleTypeUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleTypeUnion, ann_custom_SimpleTypeUnion, type_name_SimpleTypeUnion.to_string());
        CompleteUnionHeader header_SimpleTypeUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleTypeUnion);
        UnionDiscriminatorFlag member_flags_SimpleTypeUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_SimpleTypeUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_SimpleTypeUnion);

        if (return_code_SimpleTypeUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_SimpleTypeUnion;
        if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleTypeUnion.type_identifier2()._d())
        {
            common_SimpleTypeUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleTypeUnion, type_ids_SimpleTypeUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2()._d())
        {
            common_SimpleTypeUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleTypeUnion, type_ids_SimpleTypeUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleTypeUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_SimpleTypeUnion.reset();
        ann_custom_SimpleTypeUnion.reset();
        CompleteDiscriminatorMember discriminator_SimpleTypeUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleTypeUnion,
                type_ann_builtin_SimpleTypeUnion, ann_custom_SimpleTypeUnion);
        CompleteUnionMemberSeq member_seq_SimpleTypeUnion;
        {
            return_code_SimpleTypeUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_SimpleTypeUnion);

            if (return_code_SimpleTypeUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_first;
            TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
            CommonUnionMember common_first;
            MemberId member_id_first = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleTypeUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleTypeUnion.type_identifier1(),
                        label_seq_first);
            }
            else if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleTypeUnion.type_identifier2(),
                        label_seq_first);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
            ann_custom_SimpleTypeUnion.reset();
            CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleTypeUnion);
            CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleTypeUnion, member_first);
        }
        {
            return_code_SimpleTypeUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_SimpleTypeUnion);

            if (return_code_SimpleTypeUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_second;
            TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
            CommonUnionMember common_second;
            MemberId member_id_second = 0x00000001;
            if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleTypeUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleTypeUnion.type_identifier1(),
                        label_seq_second);
            }
            else if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleTypeUnion.type_identifier2(),
                        label_seq_second);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
            ann_custom_SimpleTypeUnion.reset();
            CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleTypeUnion);
            CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleTypeUnion, member_second);
        }
        CompleteUnionType union_type_SimpleTypeUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleTypeUnion, header_SimpleTypeUnion, discriminator_SimpleTypeUnion,
                member_seq_SimpleTypeUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleTypeUnion, type_name_SimpleTypeUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleTypeUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleTypeUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleTypeUnion", type_ids_SimpleTypeUnion);
        if (return_code_SimpleTypeUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleTypeUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleBadUnion_type_identifier()
{
    {
        ReturnCode_t return_code_SimpleBadUnion;
        TypeIdentifierPair type_ids_SimpleBadUnion;
        UnionTypeFlag union_flags_SimpleBadUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_SimpleBadUnion = "SimpleBadUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleBadUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleBadUnion;
        CompleteTypeDetail detail_SimpleBadUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleBadUnion, ann_custom_SimpleBadUnion, type_name_SimpleBadUnion.to_string());
        CompleteUnionHeader header_SimpleBadUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleBadUnion);
        UnionDiscriminatorFlag member_flags_SimpleBadUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_SimpleBadUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_int32_t", type_ids_SimpleBadUnion);

        if (return_code_SimpleBadUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_SimpleBadUnion;
        if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadUnion.type_identifier2()._d())
        {
            common_SimpleBadUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleBadUnion, type_ids_SimpleBadUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2()._d())
        {
            common_SimpleBadUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleBadUnion, type_ids_SimpleBadUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleBadUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_SimpleBadUnion.reset();
        ann_custom_SimpleBadUnion.reset();
        CompleteDiscriminatorMember discriminator_SimpleBadUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleBadUnion,
                type_ann_builtin_SimpleBadUnion, ann_custom_SimpleBadUnion);
        CompleteUnionMemberSeq member_seq_SimpleBadUnion;
        {
            return_code_SimpleBadUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_SimpleBadUnion);

            if (return_code_SimpleBadUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_first;
            TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
            CommonUnionMember common_first;
            MemberId member_id_first = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleBadUnion.type_identifier1(),
                        label_seq_first);
            }
            else if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleBadUnion.type_identifier2(),
                        label_seq_first);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
            ann_custom_SimpleBadUnion.reset();
            CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleBadUnion);
            CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleBadUnion, member_first);
        }
        {
            return_code_SimpleBadUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_SimpleBadUnion);

            if (return_code_SimpleBadUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_second;
            TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(2));
            CommonUnionMember common_second;
            MemberId member_id_second = 0x00000001;
            if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleBadUnion.type_identifier1(),
                        label_seq_second);
            }
            else if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleBadUnion.type_identifier2(),
                        label_seq_second);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
            ann_custom_SimpleBadUnion.reset();
            CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleBadUnion);
            CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleBadUnion, member_second);
        }
        CompleteUnionType union_type_SimpleBadUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleBadUnion, header_SimpleBadUnion, discriminator_SimpleBadUnion,
                member_seq_SimpleBadUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleBadUnion, type_name_SimpleBadUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleBadUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleBadUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleBadUnion", type_ids_SimpleBadUnion);
        if (return_code_SimpleBadUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleBadUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleBadDiscUnion_type_identifier()
{
    {
        ReturnCode_t return_code_SimpleBadDiscUnion;
        TypeIdentifierPair type_ids_SimpleBadDiscUnion;
        UnionTypeFlag union_flags_SimpleBadDiscUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name_SimpleBadDiscUnion = "SimpleBadDiscUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleBadDiscUnion;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleBadDiscUnion;
        CompleteTypeDetail detail_SimpleBadDiscUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleBadDiscUnion, ann_custom_SimpleBadDiscUnion, type_name_SimpleBadDiscUnion.to_string());
        CompleteUnionHeader header_SimpleBadDiscUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleBadDiscUnion);
        UnionDiscriminatorFlag member_flags_SimpleBadDiscUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code_SimpleBadDiscUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "_byte", type_ids_SimpleBadDiscUnion);

        if (return_code_SimpleBadDiscUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
        CommonDiscriminatorMember common_SimpleBadDiscUnion;
        if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadDiscUnion.type_identifier2()._d())
        {
            common_SimpleBadDiscUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleBadDiscUnion, type_ids_SimpleBadDiscUnion.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2()._d())
        {
            common_SimpleBadDiscUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleBadDiscUnion, type_ids_SimpleBadDiscUnion.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleBadDiscUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin_SimpleBadDiscUnion.reset();
        ann_custom_SimpleBadDiscUnion.reset();
        CompleteDiscriminatorMember discriminator_SimpleBadDiscUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleBadDiscUnion,
                type_ann_builtin_SimpleBadDiscUnion, ann_custom_SimpleBadDiscUnion);
        CompleteUnionMemberSeq member_seq_SimpleBadDiscUnion;
        {
            return_code_SimpleBadDiscUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids_SimpleBadDiscUnion);

            if (return_code_SimpleBadDiscUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_first;
            TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
            CommonUnionMember common_first;
            MemberId member_id_first = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleBadDiscUnion.type_identifier1(),
                        label_seq_first);
            }
            else if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleBadDiscUnion.type_identifier2(),
                        label_seq_first);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_first = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
            ann_custom_SimpleBadDiscUnion.reset();
            CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleBadDiscUnion);
            CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleBadDiscUnion, member_first);
        }
        {
            return_code_SimpleBadDiscUnion =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids_SimpleBadDiscUnion);

            if (return_code_SimpleBadDiscUnion != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            UnionCaseLabelSeq label_seq_second;
            TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
            CommonUnionMember common_second;
            MemberId member_id_second = 0x00000001;
            if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleBadDiscUnion.type_identifier1(),
                        label_seq_second);
            }
            else if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleBadDiscUnion.type_identifier2(),
                        label_seq_second);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_second = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
            ann_custom_SimpleBadDiscUnion.reset();
            CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleBadDiscUnion);
            CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
            TypeObjectUtils::add_complete_union_member(member_seq_SimpleBadDiscUnion, member_second);
        }
        CompleteUnionType union_type_SimpleBadDiscUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleBadDiscUnion, header_SimpleBadDiscUnion, discriminator_SimpleBadDiscUnion,
                member_seq_SimpleBadDiscUnion);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleBadDiscUnion, type_name_SimpleBadDiscUnion.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleBadDiscUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleBadDiscUnion =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleBadDiscUnion", type_ids_SimpleBadDiscUnion);
        if (return_code_SimpleBadDiscUnion != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleBadDiscUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleUnionStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SimpleUnionStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SimpleUnionStruct;
        TypeIdentifierPair type_ids_SimpleUnionStruct;
        QualifiedTypeName type_name_SimpleUnionStruct = "SimpleUnionStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnionStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnionStruct;
        CompleteTypeDetail detail_SimpleUnionStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnionStruct, ann_custom_SimpleUnionStruct, type_name_SimpleUnionStruct.to_string());
        CompleteStructHeader header_SimpleUnionStruct;
        header_SimpleUnionStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SimpleUnionStruct);
        CompleteStructMemberSeq member_seq_SimpleUnionStruct;
        {
            return_code_SimpleUnionStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SimpleUnion", type_ids_SimpleUnionStruct);

            if (return_code_SimpleUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_SimpleUnion;
                    TypeIdentifierPair type_ids_SimpleUnion;
                    UnionTypeFlag union_flags_SimpleUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_SimpleUnion = "SimpleUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnion;
                    CompleteTypeDetail detail_SimpleUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion, type_name_SimpleUnion.to_string());
                    CompleteUnionHeader header_SimpleUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleUnion);
                    UnionDiscriminatorFlag member_flags_SimpleUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_SimpleUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SimpleUnion);

                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_SimpleUnion;
                    if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d())
                    {
                        common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d())
                    {
                        common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_SimpleUnion.reset();
                    ann_custom_SimpleUnion.reset();
                    CompleteDiscriminatorMember discriminator_SimpleUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleUnion,
                            type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion);
                    CompleteUnionMemberSeq member_seq_SimpleUnion;
                    {
                        return_code_SimpleUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_SimpleUnion);

                        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first;
                        TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
                        CommonUnionMember common_first;
                        MemberId member_id_first = 0x00000000;
                        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier1(),
                                    label_seq_first);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier2(),
                                    label_seq_first);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                        ann_custom_SimpleUnion.reset();
                        CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleUnion);
                        CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_first);
                    }
                    {
                        return_code_SimpleUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_SimpleUnion);

                        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second;
                        TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
                        CommonUnionMember common_second;
                        MemberId member_id_second = 0x00000001;
                        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier1(),
                                    label_seq_second);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier2(),
                                    label_seq_second);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                        ann_custom_SimpleUnion.reset();
                        CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleUnion);
                        CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_second);
                    }
                    CompleteUnionType union_type_SimpleUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleUnion, header_SimpleUnion, discriminator_SimpleUnion,
                            member_seq_SimpleUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleUnion, type_name_SimpleUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SimpleUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "SimpleUnion", type_ids_SimpleUnion);
                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "SimpleUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_my_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_union;
            MemberId member_id_my_union = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleUnionStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleUnionStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_union = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_union;
            ann_custom_SimpleUnionStruct.reset();
            CompleteMemberDetail detail_my_union = TypeObjectUtils::build_complete_member_detail(name_my_union, member_ann_builtin_my_union, ann_custom_SimpleUnionStruct);
            CompleteStructMember member_my_union = TypeObjectUtils::build_complete_struct_member(common_my_union, detail_my_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleUnionStruct, member_my_union);
        }
        CompleteStructType struct_type_SimpleUnionStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SimpleUnionStruct, header_SimpleUnionStruct, member_seq_SimpleUnionStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SimpleUnionStruct, type_name_SimpleUnionStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnionStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleUnionStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleUnionStruct", type_ids_SimpleUnionStruct);
        if (return_code_SimpleUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleUnionStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleUnionStructEqual_type_identifier()
{
    {
        StructTypeFlag struct_flags_SimpleUnionStructEqual = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SimpleUnionStructEqual;
        TypeIdentifierPair type_ids_SimpleUnionStructEqual;
        QualifiedTypeName type_name_SimpleUnionStructEqual = "SimpleUnionStructEqual";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnionStructEqual;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnionStructEqual;
        CompleteTypeDetail detail_SimpleUnionStructEqual = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnionStructEqual, ann_custom_SimpleUnionStructEqual, type_name_SimpleUnionStructEqual.to_string());
        CompleteStructHeader header_SimpleUnionStructEqual;
        header_SimpleUnionStructEqual = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SimpleUnionStructEqual);
        CompleteStructMemberSeq member_seq_SimpleUnionStructEqual;
        {
            return_code_SimpleUnionStructEqual =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SimpleUnion", type_ids_SimpleUnionStructEqual);

            if (return_code_SimpleUnionStructEqual != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_SimpleUnion;
                    TypeIdentifierPair type_ids_SimpleUnion;
                    UnionTypeFlag union_flags_SimpleUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_SimpleUnion = "SimpleUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnion;
                    CompleteTypeDetail detail_SimpleUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion, type_name_SimpleUnion.to_string());
                    CompleteUnionHeader header_SimpleUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleUnion);
                    UnionDiscriminatorFlag member_flags_SimpleUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_SimpleUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SimpleUnion);

                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_SimpleUnion;
                    if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d())
                    {
                        common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d())
                    {
                        common_SimpleUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnion, type_ids_SimpleUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_SimpleUnion.reset();
                    ann_custom_SimpleUnion.reset();
                    CompleteDiscriminatorMember discriminator_SimpleUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleUnion,
                            type_ann_builtin_SimpleUnion, ann_custom_SimpleUnion);
                    CompleteUnionMemberSeq member_seq_SimpleUnion;
                    {
                        return_code_SimpleUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_SimpleUnion);

                        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first;
                        TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
                        CommonUnionMember common_first;
                        MemberId member_id_first = 0x00000000;
                        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier1(),
                                    label_seq_first);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleUnion.type_identifier2(),
                                    label_seq_first);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                        ann_custom_SimpleUnion.reset();
                        CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleUnion);
                        CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_first);
                    }
                    {
                        return_code_SimpleUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_SimpleUnion);

                        if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second;
                        TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
                        CommonUnionMember common_second;
                        MemberId member_id_second = 0x00000001;
                        if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier1(),
                                    label_seq_second);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleUnion.type_identifier2(),
                                    label_seq_second);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                        ann_custom_SimpleUnion.reset();
                        CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleUnion);
                        CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnion, member_second);
                    }
                    CompleteUnionType union_type_SimpleUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleUnion, header_SimpleUnion, discriminator_SimpleUnion,
                            member_seq_SimpleUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleUnion, type_name_SimpleUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SimpleUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "SimpleUnion", type_ids_SimpleUnion);
                    if (return_code_SimpleUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "SimpleUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_my_union_equal = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_union_equal;
            MemberId member_id_my_union_equal = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionStructEqual.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionStructEqual.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionStructEqual.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionStructEqual.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_union_equal = TypeObjectUtils::build_common_struct_member(member_id_my_union_equal, member_flags_my_union_equal, type_ids_SimpleUnionStructEqual.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionStructEqual.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionStructEqual.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionStructEqual.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionStructEqual.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_union_equal = TypeObjectUtils::build_common_struct_member(member_id_my_union_equal, member_flags_my_union_equal, type_ids_SimpleUnionStructEqual.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union_equal member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_union_equal = "my_union_equal";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_union_equal;
            ann_custom_SimpleUnionStructEqual.reset();
            CompleteMemberDetail detail_my_union_equal = TypeObjectUtils::build_complete_member_detail(name_my_union_equal, member_ann_builtin_my_union_equal, ann_custom_SimpleUnionStructEqual);
            CompleteStructMember member_my_union_equal = TypeObjectUtils::build_complete_struct_member(common_my_union_equal, detail_my_union_equal);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleUnionStructEqual, member_my_union_equal);
        }
        CompleteStructType struct_type_SimpleUnionStructEqual = TypeObjectUtils::build_complete_struct_type(struct_flags_SimpleUnionStructEqual, header_SimpleUnionStructEqual, member_seq_SimpleUnionStructEqual);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SimpleUnionStructEqual, type_name_SimpleUnionStructEqual.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnionStructEqual already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleUnionStructEqual =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleUnionStructEqual", type_ids_SimpleUnionStructEqual);
        if (return_code_SimpleUnionStructEqual != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleUnionStructEqual: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleUnionNamesStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SimpleUnionNamesStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SimpleUnionNamesStruct;
        TypeIdentifierPair type_ids_SimpleUnionNamesStruct;
        QualifiedTypeName type_name_SimpleUnionNamesStruct = "SimpleUnionNamesStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnionNamesStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnionNamesStruct;
        CompleteTypeDetail detail_SimpleUnionNamesStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnionNamesStruct, ann_custom_SimpleUnionNamesStruct, type_name_SimpleUnionNamesStruct.to_string());
        CompleteStructHeader header_SimpleUnionNamesStruct;
        header_SimpleUnionNamesStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SimpleUnionNamesStruct);
        CompleteStructMemberSeq member_seq_SimpleUnionNamesStruct;
        {
            return_code_SimpleUnionNamesStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SimpleUnionNames", type_ids_SimpleUnionNamesStruct);

            if (return_code_SimpleUnionNamesStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_SimpleUnionNames;
                    TypeIdentifierPair type_ids_SimpleUnionNames;
                    UnionTypeFlag union_flags_SimpleUnionNames = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_SimpleUnionNames = "SimpleUnionNames";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleUnionNames;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleUnionNames;
                    CompleteTypeDetail detail_SimpleUnionNames = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleUnionNames, ann_custom_SimpleUnionNames, type_name_SimpleUnionNames.to_string());
                    CompleteUnionHeader header_SimpleUnionNames = TypeObjectUtils::build_complete_union_header(detail_SimpleUnionNames);
                    UnionDiscriminatorFlag member_flags_SimpleUnionNames = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_SimpleUnionNames =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SimpleUnionNames);

                    if (return_code_SimpleUnionNames != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_SimpleUnionNames;
                    if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionNames.type_identifier2()._d())
                    {
                        common_SimpleUnionNames = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnionNames, type_ids_SimpleUnionNames.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2()._d())
                    {
                        common_SimpleUnionNames = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleUnionNames, type_ids_SimpleUnionNames.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnionNames discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_SimpleUnionNames.reset();
                    ann_custom_SimpleUnionNames.reset();
                    CompleteDiscriminatorMember discriminator_SimpleUnionNames = TypeObjectUtils::build_complete_discriminator_member(common_SimpleUnionNames,
                            type_ann_builtin_SimpleUnionNames, ann_custom_SimpleUnionNames);
                    CompleteUnionMemberSeq member_seq_SimpleUnionNames;
                    {
                        return_code_SimpleUnionNames =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_SimpleUnionNames);

                        if (return_code_SimpleUnionNames != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first_case Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first_case = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first_case;
                        TypeObjectUtils::add_union_case_label(label_seq_first_case, static_cast<int32_t>(0));
                        CommonUnionMember common_first_case;
                        MemberId member_id_first_case = 0x00000000;
                        if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionNames.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first_case = TypeObjectUtils::build_common_union_member(member_id_first_case, member_flags_first_case, type_ids_SimpleUnionNames.type_identifier1(),
                                    label_seq_first_case);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first_case = TypeObjectUtils::build_common_union_member(member_id_first_case, member_flags_first_case, type_ids_SimpleUnionNames.type_identifier2(),
                                    label_seq_first_case);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first_case member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first_case = "first_case";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first_case;
                        ann_custom_SimpleUnionNames.reset();
                        CompleteMemberDetail detail_first_case = TypeObjectUtils::build_complete_member_detail(name_first_case, member_ann_builtin_first_case, ann_custom_SimpleUnionNames);
                        CompleteUnionMember member_first_case = TypeObjectUtils::build_complete_union_member(common_first_case, detail_first_case);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnionNames, member_first_case);
                    }
                    {
                        return_code_SimpleUnionNames =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_SimpleUnionNames);

                        if (return_code_SimpleUnionNames != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second_case Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_second_case = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second_case;
                        TypeObjectUtils::add_union_case_label(label_seq_second_case, static_cast<int32_t>(1));
                        CommonUnionMember common_second_case;
                        MemberId member_id_second_case = 0x00000001;
                        if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionNames.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNames.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second_case = TypeObjectUtils::build_common_union_member(member_id_second_case, member_flags_second_case, type_ids_SimpleUnionNames.type_identifier1(),
                                    label_seq_second_case);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNames.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleUnionNames.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second_case = TypeObjectUtils::build_common_union_member(member_id_second_case, member_flags_second_case, type_ids_SimpleUnionNames.type_identifier2(),
                                    label_seq_second_case);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second_case member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second_case = "second_case";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second_case;
                        ann_custom_SimpleUnionNames.reset();
                        CompleteMemberDetail detail_second_case = TypeObjectUtils::build_complete_member_detail(name_second_case, member_ann_builtin_second_case, ann_custom_SimpleUnionNames);
                        CompleteUnionMember member_second_case = TypeObjectUtils::build_complete_union_member(common_second_case, detail_second_case);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleUnionNames, member_second_case);
                    }
                    CompleteUnionType union_type_SimpleUnionNames = TypeObjectUtils::build_complete_union_type(union_flags_SimpleUnionNames, header_SimpleUnionNames, discriminator_SimpleUnionNames,
                            member_seq_SimpleUnionNames);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleUnionNames, type_name_SimpleUnionNames.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleUnionNames already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SimpleUnionNames =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "SimpleUnionNames", type_ids_SimpleUnionNames);
                    if (return_code_SimpleUnionNames != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "SimpleUnionNames: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_my_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_union;
            MemberId member_id_my_union = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier1()._d() || TK_NONE == type_ids_SimpleUnionNamesStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNamesStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNamesStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNamesStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleUnionNamesStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleUnionNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleUnionNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleUnionNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleUnionNamesStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleUnionNamesStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleUnionNamesStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleUnionNamesStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleUnionNamesStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_union = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_union;
            ann_custom_SimpleUnionNamesStruct.reset();
            CompleteMemberDetail detail_my_union = TypeObjectUtils::build_complete_member_detail(name_my_union, member_ann_builtin_my_union, ann_custom_SimpleUnionNamesStruct);
            CompleteStructMember member_my_union = TypeObjectUtils::build_complete_struct_member(common_my_union, detail_my_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleUnionNamesStruct, member_my_union);
        }
        CompleteStructType struct_type_SimpleUnionNamesStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SimpleUnionNamesStruct, header_SimpleUnionNamesStruct, member_seq_SimpleUnionNamesStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SimpleUnionNamesStruct, type_name_SimpleUnionNamesStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleUnionNamesStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleUnionNamesStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleUnionNamesStruct", type_ids_SimpleUnionNamesStruct);
        if (return_code_SimpleUnionNamesStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleUnionNamesStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleTypeUnionStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SimpleTypeUnionStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SimpleTypeUnionStruct;
        TypeIdentifierPair type_ids_SimpleTypeUnionStruct;
        QualifiedTypeName type_name_SimpleTypeUnionStruct = "SimpleTypeUnionStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleTypeUnionStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleTypeUnionStruct;
        CompleteTypeDetail detail_SimpleTypeUnionStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleTypeUnionStruct, ann_custom_SimpleTypeUnionStruct, type_name_SimpleTypeUnionStruct.to_string());
        CompleteStructHeader header_SimpleTypeUnionStruct;
        header_SimpleTypeUnionStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SimpleTypeUnionStruct);
        CompleteStructMemberSeq member_seq_SimpleTypeUnionStruct;
        {
            return_code_SimpleTypeUnionStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SimpleTypeUnion", type_ids_SimpleTypeUnionStruct);

            if (return_code_SimpleTypeUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_SimpleTypeUnion;
                    TypeIdentifierPair type_ids_SimpleTypeUnion;
                    UnionTypeFlag union_flags_SimpleTypeUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_SimpleTypeUnion = "SimpleTypeUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleTypeUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleTypeUnion;
                    CompleteTypeDetail detail_SimpleTypeUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleTypeUnion, ann_custom_SimpleTypeUnion, type_name_SimpleTypeUnion.to_string());
                    CompleteUnionHeader header_SimpleTypeUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleTypeUnion);
                    UnionDiscriminatorFlag member_flags_SimpleTypeUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_SimpleTypeUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SimpleTypeUnion);

                    if (return_code_SimpleTypeUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_SimpleTypeUnion;
                    if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleTypeUnion.type_identifier2()._d())
                    {
                        common_SimpleTypeUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleTypeUnion, type_ids_SimpleTypeUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2()._d())
                    {
                        common_SimpleTypeUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleTypeUnion, type_ids_SimpleTypeUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleTypeUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_SimpleTypeUnion.reset();
                    ann_custom_SimpleTypeUnion.reset();
                    CompleteDiscriminatorMember discriminator_SimpleTypeUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleTypeUnion,
                            type_ann_builtin_SimpleTypeUnion, ann_custom_SimpleTypeUnion);
                    CompleteUnionMemberSeq member_seq_SimpleTypeUnion;
                    {
                        return_code_SimpleTypeUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids_SimpleTypeUnion);

                        if (return_code_SimpleTypeUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first;
                        TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
                        CommonUnionMember common_first;
                        MemberId member_id_first = 0x00000000;
                        if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleTypeUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleTypeUnion.type_identifier1(),
                                    label_seq_first);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleTypeUnion.type_identifier2(),
                                    label_seq_first);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                        ann_custom_SimpleTypeUnion.reset();
                        CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleTypeUnion);
                        CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleTypeUnion, member_first);
                    }
                    {
                        return_code_SimpleTypeUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_SimpleTypeUnion);

                        if (return_code_SimpleTypeUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second;
                        TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
                        CommonUnionMember common_second;
                        MemberId member_id_second = 0x00000001;
                        if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleTypeUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleTypeUnion.type_identifier1(),
                                    label_seq_second);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleTypeUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleTypeUnion.type_identifier2(),
                                    label_seq_second);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                        ann_custom_SimpleTypeUnion.reset();
                        CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleTypeUnion);
                        CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleTypeUnion, member_second);
                    }
                    CompleteUnionType union_type_SimpleTypeUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleTypeUnion, header_SimpleTypeUnion, discriminator_SimpleTypeUnion,
                            member_seq_SimpleTypeUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleTypeUnion, type_name_SimpleTypeUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleTypeUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SimpleTypeUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "SimpleTypeUnion", type_ids_SimpleTypeUnion);
                    if (return_code_SimpleTypeUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "SimpleTypeUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_my_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_union;
            MemberId member_id_my_union = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier1()._d() || TK_NONE == type_ids_SimpleTypeUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleTypeUnionStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleTypeUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleTypeUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleTypeUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleTypeUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleTypeUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleTypeUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleTypeUnionStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleTypeUnionStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_union = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_union;
            ann_custom_SimpleTypeUnionStruct.reset();
            CompleteMemberDetail detail_my_union = TypeObjectUtils::build_complete_member_detail(name_my_union, member_ann_builtin_my_union, ann_custom_SimpleTypeUnionStruct);
            CompleteStructMember member_my_union = TypeObjectUtils::build_complete_struct_member(common_my_union, detail_my_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleTypeUnionStruct, member_my_union);
        }
        CompleteStructType struct_type_SimpleTypeUnionStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SimpleTypeUnionStruct, header_SimpleTypeUnionStruct, member_seq_SimpleTypeUnionStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SimpleTypeUnionStruct, type_name_SimpleTypeUnionStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleTypeUnionStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleTypeUnionStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleTypeUnionStruct", type_ids_SimpleTypeUnionStruct);
        if (return_code_SimpleTypeUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleTypeUnionStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleBadUnionStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SimpleBadUnionStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SimpleBadUnionStruct;
        TypeIdentifierPair type_ids_SimpleBadUnionStruct;
        QualifiedTypeName type_name_SimpleBadUnionStruct = "SimpleBadUnionStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleBadUnionStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleBadUnionStruct;
        CompleteTypeDetail detail_SimpleBadUnionStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleBadUnionStruct, ann_custom_SimpleBadUnionStruct, type_name_SimpleBadUnionStruct.to_string());
        CompleteStructHeader header_SimpleBadUnionStruct;
        header_SimpleBadUnionStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SimpleBadUnionStruct);
        CompleteStructMemberSeq member_seq_SimpleBadUnionStruct;
        {
            return_code_SimpleBadUnionStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SimpleBadUnion", type_ids_SimpleBadUnionStruct);

            if (return_code_SimpleBadUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_SimpleBadUnion;
                    TypeIdentifierPair type_ids_SimpleBadUnion;
                    UnionTypeFlag union_flags_SimpleBadUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_SimpleBadUnion = "SimpleBadUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleBadUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleBadUnion;
                    CompleteTypeDetail detail_SimpleBadUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleBadUnion, ann_custom_SimpleBadUnion, type_name_SimpleBadUnion.to_string());
                    CompleteUnionHeader header_SimpleBadUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleBadUnion);
                    UnionDiscriminatorFlag member_flags_SimpleBadUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_SimpleBadUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_int32_t", type_ids_SimpleBadUnion);

                    if (return_code_SimpleBadUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_SimpleBadUnion;
                    if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadUnion.type_identifier2()._d())
                    {
                        common_SimpleBadUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleBadUnion, type_ids_SimpleBadUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2()._d())
                    {
                        common_SimpleBadUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleBadUnion, type_ids_SimpleBadUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleBadUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_SimpleBadUnion.reset();
                    ann_custom_SimpleBadUnion.reset();
                    CompleteDiscriminatorMember discriminator_SimpleBadUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleBadUnion,
                            type_ann_builtin_SimpleBadUnion, ann_custom_SimpleBadUnion);
                    CompleteUnionMemberSeq member_seq_SimpleBadUnion;
                    {
                        return_code_SimpleBadUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_SimpleBadUnion);

                        if (return_code_SimpleBadUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first;
                        TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
                        CommonUnionMember common_first;
                        MemberId member_id_first = 0x00000000;
                        if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleBadUnion.type_identifier1(),
                                    label_seq_first);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleBadUnion.type_identifier2(),
                                    label_seq_first);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                        ann_custom_SimpleBadUnion.reset();
                        CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleBadUnion);
                        CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleBadUnion, member_first);
                    }
                    {
                        return_code_SimpleBadUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_SimpleBadUnion);

                        if (return_code_SimpleBadUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second;
                        TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(2));
                        CommonUnionMember common_second;
                        MemberId member_id_second = 0x00000001;
                        if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleBadUnion.type_identifier1(),
                                    label_seq_second);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleBadUnion.type_identifier2(),
                                    label_seq_second);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                        ann_custom_SimpleBadUnion.reset();
                        CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleBadUnion);
                        CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleBadUnion, member_second);
                    }
                    CompleteUnionType union_type_SimpleBadUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleBadUnion, header_SimpleBadUnion, discriminator_SimpleBadUnion,
                            member_seq_SimpleBadUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleBadUnion, type_name_SimpleBadUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleBadUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SimpleBadUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "SimpleBadUnion", type_ids_SimpleBadUnion);
                    if (return_code_SimpleBadUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "SimpleBadUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_my_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_union;
            MemberId member_id_my_union = 0x00000000;
            if (EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleBadUnionStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimpleBadUnionStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimpleBadUnionStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_union = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_union;
            ann_custom_SimpleBadUnionStruct.reset();
            CompleteMemberDetail detail_my_union = TypeObjectUtils::build_complete_member_detail(name_my_union, member_ann_builtin_my_union, ann_custom_SimpleBadUnionStruct);
            CompleteStructMember member_my_union = TypeObjectUtils::build_complete_struct_member(common_my_union, detail_my_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimpleBadUnionStruct, member_my_union);
        }
        CompleteStructType struct_type_SimpleBadUnionStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SimpleBadUnionStruct, header_SimpleBadUnionStruct, member_seq_SimpleBadUnionStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SimpleBadUnionStruct, type_name_SimpleBadUnionStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleBadUnionStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimpleBadUnionStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleBadUnionStruct", type_ids_SimpleBadUnionStruct);
        if (return_code_SimpleBadUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleBadUnionStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimplBadDiscUnionStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags_SimplBadDiscUnionStruct = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code_SimplBadDiscUnionStruct;
        TypeIdentifierPair type_ids_SimplBadDiscUnionStruct;
        QualifiedTypeName type_name_SimplBadDiscUnionStruct = "SimplBadDiscUnionStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimplBadDiscUnionStruct;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimplBadDiscUnionStruct;
        CompleteTypeDetail detail_SimplBadDiscUnionStruct = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimplBadDiscUnionStruct, ann_custom_SimplBadDiscUnionStruct, type_name_SimplBadDiscUnionStruct.to_string());
        CompleteStructHeader header_SimplBadDiscUnionStruct;
        header_SimplBadDiscUnionStruct = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_SimplBadDiscUnionStruct);
        CompleteStructMemberSeq member_seq_SimplBadDiscUnionStruct;
        {
            return_code_SimplBadDiscUnionStruct =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SimpleBadDiscUnion", type_ids_SimplBadDiscUnionStruct);

            if (return_code_SimplBadDiscUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code_SimpleBadDiscUnion;
                    TypeIdentifierPair type_ids_SimpleBadDiscUnion;
                    UnionTypeFlag union_flags_SimpleBadDiscUnion = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name_SimpleBadDiscUnion = "SimpleBadDiscUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_SimpleBadDiscUnion;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_SimpleBadDiscUnion;
                    CompleteTypeDetail detail_SimpleBadDiscUnion = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_SimpleBadDiscUnion, ann_custom_SimpleBadDiscUnion, type_name_SimpleBadDiscUnion.to_string());
                    CompleteUnionHeader header_SimpleBadDiscUnion = TypeObjectUtils::build_complete_union_header(detail_SimpleBadDiscUnion);
                    UnionDiscriminatorFlag member_flags_SimpleBadDiscUnion = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code_SimpleBadDiscUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "_byte", type_ids_SimpleBadDiscUnion);

                    if (return_code_SimpleBadDiscUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "Union discriminator TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                    CommonDiscriminatorMember common_SimpleBadDiscUnion;
                    if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadDiscUnion.type_identifier2()._d())
                    {
                        common_SimpleBadDiscUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleBadDiscUnion, type_ids_SimpleBadDiscUnion.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2()._d())
                    {
                        common_SimpleBadDiscUnion = TypeObjectUtils::build_common_discriminator_member(member_flags_SimpleBadDiscUnion, type_ids_SimpleBadDiscUnion.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleBadDiscUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin_SimpleBadDiscUnion.reset();
                    ann_custom_SimpleBadDiscUnion.reset();
                    CompleteDiscriminatorMember discriminator_SimpleBadDiscUnion = TypeObjectUtils::build_complete_discriminator_member(common_SimpleBadDiscUnion,
                            type_ann_builtin_SimpleBadDiscUnion, ann_custom_SimpleBadDiscUnion);
                    CompleteUnionMemberSeq member_seq_SimpleBadDiscUnion;
                    {
                        return_code_SimpleBadDiscUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids_SimpleBadDiscUnion);

                        if (return_code_SimpleBadDiscUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_first = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_first;
                        TypeObjectUtils::add_union_case_label(label_seq_first, static_cast<int32_t>(0));
                        CommonUnionMember common_first;
                        MemberId member_id_first = 0x00000000;
                        if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleBadDiscUnion.type_identifier1(),
                                    label_seq_first);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_first = TypeObjectUtils::build_common_union_member(member_id_first, member_flags_first, type_ids_SimpleBadDiscUnion.type_identifier2(),
                                    label_seq_first);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_first = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_first;
                        ann_custom_SimpleBadDiscUnion.reset();
                        CompleteMemberDetail detail_first = TypeObjectUtils::build_complete_member_detail(name_first, member_ann_builtin_first, ann_custom_SimpleBadDiscUnion);
                        CompleteUnionMember member_first = TypeObjectUtils::build_complete_union_member(common_first, detail_first);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleBadDiscUnion, member_first);
                    }
                    {
                        return_code_SimpleBadDiscUnion =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids_SimpleBadDiscUnion);

                        if (return_code_SimpleBadDiscUnion != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionMemberFlag member_flags_second = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        UnionCaseLabelSeq label_seq_second;
                        TypeObjectUtils::add_union_case_label(label_seq_second, static_cast<int32_t>(1));
                        CommonUnionMember common_second;
                        MemberId member_id_second = 0x00000001;
                        if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() || TK_NONE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadDiscUnion.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleBadDiscUnion.type_identifier1(),
                                    label_seq_second);
                        }
                        else if (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids_SimpleBadDiscUnion.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids_SimpleBadDiscUnion.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common_second = TypeObjectUtils::build_common_union_member(member_id_second, member_flags_second, type_ids_SimpleBadDiscUnion.type_identifier2(),
                                    label_seq_second);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name_second = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_second;
                        ann_custom_SimpleBadDiscUnion.reset();
                        CompleteMemberDetail detail_second = TypeObjectUtils::build_complete_member_detail(name_second, member_ann_builtin_second, ann_custom_SimpleBadDiscUnion);
                        CompleteUnionMember member_second = TypeObjectUtils::build_complete_union_member(common_second, detail_second);
                        TypeObjectUtils::add_complete_union_member(member_seq_SimpleBadDiscUnion, member_second);
                    }
                    CompleteUnionType union_type_SimpleBadDiscUnion = TypeObjectUtils::build_complete_union_type(union_flags_SimpleBadDiscUnion, header_SimpleBadDiscUnion, discriminator_SimpleBadDiscUnion,
                            member_seq_SimpleBadDiscUnion);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type_SimpleBadDiscUnion, type_name_SimpleBadDiscUnion.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleBadDiscUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code_SimpleBadDiscUnion =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "SimpleBadDiscUnion", type_ids_SimpleBadDiscUnion);
                    if (return_code_SimpleBadDiscUnion != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "SimpleBadDiscUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            StructMemberFlag member_flags_my_union = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            CommonStructMember common_my_union;
            MemberId member_id_my_union = 0x00000000;
            if (EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier1()._d() || TK_NONE == type_ids_SimplBadDiscUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimplBadDiscUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimplBadDiscUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimplBadDiscUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimplBadDiscUnionStruct.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimplBadDiscUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimplBadDiscUnionStruct.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimplBadDiscUnionStruct.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids_SimplBadDiscUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids_SimplBadDiscUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids_SimplBadDiscUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids_SimplBadDiscUnionStruct.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids_SimplBadDiscUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids_SimplBadDiscUnionStruct.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids_SimplBadDiscUnionStruct.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common_my_union = TypeObjectUtils::build_common_struct_member(member_id_my_union, member_flags_my_union, type_ids_SimplBadDiscUnionStruct.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_my_union = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_my_union;
            ann_custom_SimplBadDiscUnionStruct.reset();
            CompleteMemberDetail detail_my_union = TypeObjectUtils::build_complete_member_detail(name_my_union, member_ann_builtin_my_union, ann_custom_SimplBadDiscUnionStruct);
            CompleteStructMember member_my_union = TypeObjectUtils::build_complete_struct_member(common_my_union, detail_my_union);
            TypeObjectUtils::add_complete_struct_member(member_seq_SimplBadDiscUnionStruct, member_my_union);
        }
        CompleteStructType struct_type_SimplBadDiscUnionStruct = TypeObjectUtils::build_complete_struct_type(struct_flags_SimplBadDiscUnionStruct, header_SimplBadDiscUnionStruct, member_seq_SimplBadDiscUnionStruct);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_SimplBadDiscUnionStruct, type_name_SimplBadDiscUnionStruct.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimplBadDiscUnionStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code_SimplBadDiscUnionStruct =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimplBadDiscUnionStruct", type_ids_SimplBadDiscUnionStruct);
        if (return_code_SimplBadDiscUnionStruct != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimplBadDiscUnionStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

