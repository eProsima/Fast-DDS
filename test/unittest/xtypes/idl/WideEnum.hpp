// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file WideEnum.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_WIDEENUM_HPP_
#define _FAST_DDS_GENERATED_WIDEENUM_HPP_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <utility>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastcdr/exceptions/BadParamException.h>


#include "WideEnumTypeObject.h"

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(WIDEENUM_SOURCE)
#define WIDEENUM_DllAPI __declspec( dllexport )
#else
#define WIDEENUM_DllAPI __declspec( dllimport )
#endif // WIDEENUM_SOURCE
#else
#define WIDEENUM_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define WIDEENUM_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the enumeration MyEnumWide defined by the user in the IDL file.
 * @ingroup WideEnum
 */
enum MyEnumWide : uint32_t
{
    A,
    B,
    C,
    D
};


/*!
 * @brief This class represents the structure MyEnumWideStruct defined by the user in the IDL file.
 * @ingroup WideEnum
 */
class MyEnumWideStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport MyEnumWideStruct()
    {
        // Just to register all known types
        registerWideEnumTypes();
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~MyEnumWideStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object MyEnumWideStruct that will be copied.
     */
    eProsima_user_DllExport MyEnumWideStruct(
            const MyEnumWideStruct& x)
    {
                    m_my_enum_wide = x.m_my_enum_wide;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object MyEnumWideStruct that will be copied.
     */
    eProsima_user_DllExport MyEnumWideStruct(
            MyEnumWideStruct&& x) noexcept
    {
        m_my_enum_wide = x.m_my_enum_wide;
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object MyEnumWideStruct that will be copied.
     */
    eProsima_user_DllExport MyEnumWideStruct& operator =(
            const MyEnumWideStruct& x)
    {

                    m_my_enum_wide = x.m_my_enum_wide;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object MyEnumWideStruct that will be copied.
     */
    eProsima_user_DllExport MyEnumWideStruct& operator =(
            MyEnumWideStruct&& x) noexcept
    {

        m_my_enum_wide = x.m_my_enum_wide;
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x MyEnumWideStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const MyEnumWideStruct& x) const
    {
        return (m_my_enum_wide == x.m_my_enum_wide);
    }

    /*!
     * @brief Comparison operator.
     * @param x MyEnumWideStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const MyEnumWideStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member my_enum_wide
     * @param _my_enum_wide New value for member my_enum_wide
     */
    eProsima_user_DllExport void my_enum_wide(
            MyEnumWide _my_enum_wide)
    {
        m_my_enum_wide = _my_enum_wide;
    }

    /*!
     * @brief This function returns the value of member my_enum_wide
     * @return Value of member my_enum_wide
     */
    eProsima_user_DllExport MyEnumWide my_enum_wide() const
    {
        return m_my_enum_wide;
    }

    /*!
     * @brief This function returns a reference to member my_enum_wide
     * @return Reference to member my_enum_wide
     */
    eProsima_user_DllExport MyEnumWide& my_enum_wide()
    {
        return m_my_enum_wide;
    }



private:

    MyEnumWide m_my_enum_wide{::A};

};


/*!
 * @brief This class represents the union SimpleWideUnion defined by the user in the IDL file.
 * @ingroup WideEnum
 */
class SimpleWideUnion
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleWideUnion()
    {
        m__d = A;
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleWideUnion()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleWideUnion that will be copied.
     */
    eProsima_user_DllExport SimpleWideUnion(
            const SimpleWideUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case A:
                m_first = x.m_first;
                break;


            case B:
                m_second = x.m_second;
                break;


            case D:
                m_third = x.m_third;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleWideUnion that will be copied.
     */
    eProsima_user_DllExport SimpleWideUnion(
            SimpleWideUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case A:
                m_first = x.m_first;
                break;


            case B:
                m_second = x.m_second;
                break;


            case D:
                m_third = x.m_third;
                break;

            default:
                break;
        }
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleWideUnion that will be copied.
     */
    eProsima_user_DllExport SimpleWideUnion& operator =(
            const SimpleWideUnion& x)
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case A:
                m_first = x.m_first;
                break;


            case B:
                m_second = x.m_second;
                break;


            case D:
                m_third = x.m_third;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleWideUnion that will be copied.
     */
    eProsima_user_DllExport SimpleWideUnion& operator =(
            SimpleWideUnion&& x) noexcept
    {
        m__d = x.m__d;

        switch (m__d)
        {
            case A:
                m_first = x.m_first;
                break;


            case B:
                m_second = x.m_second;
                break;


            case D:
                m_third = x.m_third;
                break;

            default:
                break;
        }

        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleWideUnion object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleWideUnion& x) const
    {
        if (m__d != x.m__d)
        {
            return false;
        }

        switch (m__d)
        {
            case A:
                return (m_first == x.m_first);
                break;


            case B:
                return (m_second == x.m_second);
                break;


            case D:
                return (m_third == x.m_third);
                break;

            default:
                break;
        }
        return false;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleWideUnion object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleWideUnion& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    eProsima_user_DllExport void _d(
            int32_t __d)
    {
        bool b = false;

        switch (m__d)
        {
            case A:
                switch (__d)
                {
                    case A:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case B:
                switch (__d)
                {
                    case B:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;


            case D:
                switch (__d)
                {
                    case D:
                        b = true;
                        break;
                    default:
                        break;
                }
                break;

            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
        }

        m__d = __d;
    }

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    eProsima_user_DllExport int32_t _d() const
    {
        return m__d;
    }

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    eProsima_user_DllExport int32_t& _d()
    {
        return m__d;
    }

    /*!
     * @brief This function sets a value in member first
     * @param _first New value for member first
     */
    eProsima_user_DllExport void first(
            int32_t _first)
    {
        m_first = _first;
        m__d = A;

    }

    /*!
     * @brief This function returns the value of member first
     * @return Value of member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t first() const
    {
        bool b = false;

        switch (m__d)
        {
            case A:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }

    /*!
     * @brief This function returns a reference to member first
     * @return Reference to member first
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int32_t& first()
    {
        bool b = false;

        switch (m__d)
        {
            case A:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_first;
    }


    /*!
     * @brief This function sets a value in member second
     * @param _second New value for member second
     */
    eProsima_user_DllExport void second(
            int64_t _second)
    {
        m_second = _second;
        m__d = B;

    }

    /*!
     * @brief This function returns the value of member second
     * @return Value of member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t second() const
    {
        bool b = false;

        switch (m__d)
        {
            case B:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }

    /*!
     * @brief This function returns a reference to member second
     * @return Reference to member second
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport int64_t& second()
    {
        bool b = false;

        switch (m__d)
        {
            case B:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_second;
    }


    /*!
     * @brief This function sets a value in member third
     * @param _third New value for member third
     */
    eProsima_user_DllExport void third(
            uint8_t _third)
    {
        m_third = _third;
        m__d = D;

    }

    /*!
     * @brief This function returns the value of member third
     * @return Value of member third
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint8_t third() const
    {
        bool b = false;

        switch (m__d)
        {
            case D:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_third;
    }

    /*!
     * @brief This function returns a reference to member third
     * @return Reference to member third
     * @exception eprosima::fastcdr::exception::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    eProsima_user_DllExport uint8_t& third()
    {
        bool b = false;

        switch (m__d)
        {
            case D:
                b = true;
                break;
            default:
                break;
        }

        if (!b)
        {
            throw eprosima::fastcdr::exception::BadParamException("This member has not been selected");
        }

        return m_third;
    }



private:

    int32_t m__d;

    int32_t m_first{0};
    int64_t m_second{0};
    uint8_t m_third{0};
};


/*!
 * @brief This class represents the structure SimpleWideUnionStruct defined by the user in the IDL file.
 * @ingroup WideEnum
 */
class SimpleWideUnionStruct
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport SimpleWideUnionStruct()
    {
        // Just to register all known types
        registerWideEnumTypes();
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~SimpleWideUnionStruct()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object SimpleWideUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleWideUnionStruct(
            const SimpleWideUnionStruct& x)
    {
                    m_my_union = x.m_my_union;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object SimpleWideUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleWideUnionStruct(
            SimpleWideUnionStruct&& x) noexcept
    {
        m_my_union = std::move(x.m_my_union);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object SimpleWideUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleWideUnionStruct& operator =(
            const SimpleWideUnionStruct& x)
    {

                    m_my_union = x.m_my_union;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object SimpleWideUnionStruct that will be copied.
     */
    eProsima_user_DllExport SimpleWideUnionStruct& operator =(
            SimpleWideUnionStruct&& x) noexcept
    {

        m_my_union = std::move(x.m_my_union);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleWideUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const SimpleWideUnionStruct& x) const
    {
        return (m_my_union == x.m_my_union);
    }

    /*!
     * @brief Comparison operator.
     * @param x SimpleWideUnionStruct object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const SimpleWideUnionStruct& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function copies the value in member my_union
     * @param _my_union New value to be copied in member my_union
     */
    eProsima_user_DllExport void my_union(
            const SimpleWideUnion& _my_union)
    {
        m_my_union = _my_union;
    }

    /*!
     * @brief This function moves the value in member my_union
     * @param _my_union New value to be moved in member my_union
     */
    eProsima_user_DllExport void my_union(
            SimpleWideUnion&& _my_union)
    {
        m_my_union = std::move(_my_union);
    }

    /*!
     * @brief This function returns a constant reference to member my_union
     * @return Constant reference to member my_union
     */
    eProsima_user_DllExport const SimpleWideUnion& my_union() const
    {
        return m_my_union;
    }

    /*!
     * @brief This function returns a reference to member my_union
     * @return Reference to member my_union
     */
    eProsima_user_DllExport SimpleWideUnion& my_union()
    {
        return m_my_union;
    }



private:

    SimpleWideUnion m_my_union;

};

#endif // _FAST_DDS_GENERATED_WIDEENUM_HPP_


