// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file WideEnumTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "WideEnumTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "WideEnum.hpp"


using namespace eprosima::fastdds::dds::xtypes;

void register_WideEnum_type_objects()
{
    static std::once_flag once_flag;
    std::call_once(once_flag, []()
            {
                register_MyEnumWideStruct_type_identifier();

                register_SimpleWideUnion_type_identifier();

                register_SimpleWideUnionStruct_type_identifier();

            });
}

void register_MyEnumWideStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "MyEnumWideStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyEnumWide", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EnumTypeFlag enum_flags = 0;
                BitBound bit_bound = 32;
                CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                QualifiedTypeName type_name = "MyEnumWide";
                eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                CompleteEnumeratedLiteralSeq literal_seq;
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(0, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "A";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(1, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "B";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(2, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "C";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                {
                    EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                    CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(3, flags);
                    eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                    ann_custom.reset();
                    MemberName name = "D";
                    CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                    CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                    TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                }
                CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                        literal_seq);
                if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                        TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyEnumWide already registered in TypeObjectRegistry for a different type.");
                }
                return_code =
                    eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                    "MyEnumWide", type_ids);
                if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                {
                    EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyEnumWide: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                    return;
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_enum_wide member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_enum_wide";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyEnumWideStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MyEnumWideStruct", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "MyEnumWideStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleWideUnion_type_identifier()
{
    {
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        QualifiedTypeName type_name = "SimpleWideUnion";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
        UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                false);
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "MyEnumWide", type_ids);

        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EnumTypeFlag enum_flags = 0;
            BitBound bit_bound = 32;
            CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
            QualifiedTypeName type_name = "MyEnumWide";
            eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
            eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
            CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
            CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
            CompleteEnumeratedLiteralSeq literal_seq;
            {
                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(0, flags);
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                MemberName name = "A";
                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
            }
            {
                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(1, flags);
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                MemberName name = "B";
                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
            }
            {
                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(2, flags);
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                MemberName name = "C";
                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
            }
            {
                EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(3, flags);
                eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                ann_custom.reset();
                MemberName name = "D";
                CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
            }
            CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                    literal_seq);
            if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                    TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "MyEnumWide already registered in TypeObjectRegistry for a different type.");
            }
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "MyEnumWide", type_ids);
            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "MyEnumWide: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
        }
        CommonDiscriminatorMember common;
        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
        }
        else if (EK_COMPLETE == type_ids.type_identifier2()._d())
        {
            common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
        }
        else
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleWideUnion discriminator TypeIdentifier inconsistent.");
            return;
        }
        type_ann_builtin.reset();
        ann_custom.reset();
        CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                type_ann_builtin, ann_custom);
        CompleteUnionMemberSeq member_seq;
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int32_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnumWide::A));
            CommonUnionMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union first member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "first";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_int64_t", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnumWide::B));
            CommonUnionMember common;
            MemberId member_id = 0x00000001;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union second member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "second";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        {
            UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "third Union member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            UnionCaseLabelSeq label_seq;
            TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnumWide::D));
            CommonUnionMember common;
            MemberId member_id = 0x00000002;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                        label_seq);
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                        label_seq);
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Union third member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "third";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
            TypeObjectUtils::add_complete_union_member(member_seq, member);
        }
        CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleWideUnion already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleWideUnion", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleWideUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}
void register_SimpleWideUnionStruct_type_identifier()
{
    {
        StructTypeFlag struct_flags = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                false, false);
        ReturnCode_t return_code;
        TypeIdentifierPair type_ids;
        QualifiedTypeName type_name = "SimpleWideUnionStruct";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
        CompleteStructHeader header;
        header = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail);
        CompleteStructMemberSeq member_seq;
        {
            StructMemberFlag member_flags = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                    false, false, false, false);
            return_code =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "SimpleWideUnion", type_ids);

            if (return_code != eprosima::fastdds::dds::RETCODE_OK)
            {
                {
                    ReturnCode_t return_code;
                    TypeIdentifierPair type_ids;
                    UnionTypeFlag union_flags = TypeObjectUtils::build_union_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::NOT_APPLIED,
                            false, false);
                    QualifiedTypeName type_name = "SimpleWideUnion";
                    eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                    eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                    CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                    CompleteUnionHeader header = TypeObjectUtils::build_complete_union_header(detail);
                    UnionDiscriminatorFlag member_flags = TypeObjectUtils::build_union_discriminator_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                            false);
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "MyEnumWide", type_ids);

                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EnumTypeFlag enum_flags = 0;
                        BitBound bit_bound = 32;
                        CommonEnumeratedHeader common = TypeObjectUtils::build_common_enumerated_header(bit_bound);
                        QualifiedTypeName type_name = "MyEnumWide";
                        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin;
                        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom;
                        CompleteTypeDetail detail = TypeObjectUtils::build_complete_type_detail(type_ann_builtin, ann_custom, type_name.to_string());
                        CompleteEnumeratedHeader header = TypeObjectUtils::build_complete_enumerated_header(common, detail);
                        CompleteEnumeratedLiteralSeq literal_seq;
                        {
                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(0, flags);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "A";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                        }
                        {
                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(1, flags);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "B";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                        }
                        {
                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(2, flags);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "C";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                        }
                        {
                            EnumeratedLiteralFlag flags = TypeObjectUtils::build_enumerated_literal_flag(false);
                            CommonEnumeratedLiteral common = TypeObjectUtils::build_common_enumerated_literal(3, flags);
                            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                            ann_custom.reset();
                            MemberName name = "D";
                            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                            CompleteEnumeratedLiteral literal = TypeObjectUtils::build_complete_enumerated_literal(common, detail);
                            TypeObjectUtils::add_complete_enumerated_literal(literal_seq, literal);
                        }
                        CompleteEnumeratedType enumerated_type = TypeObjectUtils::build_complete_enumerated_type(enum_flags, header,
                                literal_seq);
                        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                                TypeObjectUtils::build_and_register_enumerated_type_object(enumerated_type, type_name.to_string()))
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "MyEnumWide already registered in TypeObjectRegistry for a different type.");
                        }
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "MyEnumWide", type_ids);
                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                        "MyEnumWide: Given Enum TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                    }
                    CommonDiscriminatorMember common;
                    if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier1());
                    }
                    else if (EK_COMPLETE == type_ids.type_identifier2()._d())
                    {
                        common = TypeObjectUtils::build_common_discriminator_member(member_flags, type_ids.type_identifier2());
                    }
                    else
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleWideUnion discriminator TypeIdentifier inconsistent.");
                        return;
                    }
                    type_ann_builtin.reset();
                    ann_custom.reset();
                    CompleteDiscriminatorMember discriminator = TypeObjectUtils::build_complete_discriminator_member(common,
                            type_ann_builtin, ann_custom);
                    CompleteUnionMemberSeq member_seq;
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int32_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "first Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnumWide::A));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000000;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union first member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "first";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_int64_t", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "second Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnumWide::B));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000001;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union second member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "second";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    {
                        UnionMemberFlag member_flags = TypeObjectUtils::build_union_member_flag(eprosima::fastdds::dds::xtypes::TryConstructKind::NOT_APPLIED,
                                false, false);
                        return_code =
                            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                            "_byte", type_ids);

                        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "third Union member TypeIdentifier unknown to TypeObjectRegistry.");
                            return;
                        }
                        UnionCaseLabelSeq label_seq;
                        TypeObjectUtils::add_union_case_label(label_seq, static_cast<int32_t>(MyEnumWide::D));
                        CommonUnionMember common;
                        MemberId member_id = 0x00000002;
                        if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                                EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier1().map_ldefn().key_identifier()->_d())))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier1(),
                                    label_seq);
                        }
                        else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                                (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                                (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                                EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                                (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                                (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                                (EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind() ||
                                EK_COMPLETE == type_ids.type_identifier2().map_ldefn().key_identifier()->_d())))
                        {
                            common = TypeObjectUtils::build_common_union_member(member_id, member_flags, type_ids.type_identifier2(),
                                    label_seq);
                        }
                        else
                        {
                            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "Union third member TypeIdentifier inconsistent.");
                            return;
                        }
                        MemberName name = "third";
                        eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
                        ann_custom.reset();
                        CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
                        CompleteUnionMember member = TypeObjectUtils::build_complete_union_member(common, detail);
                        TypeObjectUtils::add_complete_union_member(member_seq, member);
                    }
                    CompleteUnionType union_type = TypeObjectUtils::build_complete_union_type(union_flags, header, discriminator,
                            member_seq);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_union_type_object(union_type, type_name.to_string()))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                "SimpleWideUnion already registered in TypeObjectRegistry for a different type.");
                    }
                    return_code =
                        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                        "SimpleWideUnion", type_ids);
                    if (return_code != eprosima::fastdds::dds::RETCODE_OK)
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                                    "SimpleWideUnion: Given Union TypeIdentifier unknown to TypeObjectRegistry.");
                        return;
                    }
                }
            }
            CommonStructMember common;
            MemberId member_id = 0x00000000;
            if (EK_COMPLETE == type_ids.type_identifier1()._d() || TK_NONE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier1()._d() &&
                    EK_COMPLETE == type_ids.type_identifier1().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier1()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier1().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier1().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier1());
            }
            else if (EK_COMPLETE == type_ids.type_identifier2()._d() ||
                    (TI_PLAIN_SEQUENCE_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_SEQUENCE_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().seq_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_SMALL == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_sdefn().header().equiv_kind()) ||
                    (TI_PLAIN_ARRAY_LARGE == type_ids.type_identifier2()._d() &&
                    EK_COMPLETE == type_ids.type_identifier2().array_ldefn().header().equiv_kind()) ||
                    (TI_PLAIN_MAP_SMALL == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_sdefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_sdefn().key_identifier()->_d())) ||
                    (TI_PLAIN_MAP_LARGE == type_ids.type_identifier2()._d() &&
                    (EK_COMPLETE == type_ids.type_identifier2().map_ldefn().header().equiv_kind() ||
                    EK_COMPLETE == type_ids.type_identifier2().map_ldefn().key_identifier()->_d())))
            {
                common = TypeObjectUtils::build_common_struct_member(member_id, member_flags, type_ids.type_identifier2());
            }
            else
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "Structure my_union member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name = "my_union";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin;
            ann_custom.reset();
            CompleteMemberDetail detail = TypeObjectUtils::build_complete_member_detail(name, member_ann_builtin, ann_custom);
            CompleteStructMember member = TypeObjectUtils::build_complete_struct_member(common, detail);
            TypeObjectUtils::add_complete_struct_member(member_seq, member);
        }
        CompleteStructType struct_type = TypeObjectUtils::build_complete_struct_type(struct_flags, header, member_seq);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type, type_name.to_string()))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "SimpleWideUnionStruct already registered in TypeObjectRegistry for a different type.");
        }
        return_code =
            eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
            "SimpleWideUnionStruct", type_ids);
        if (return_code != eprosima::fastdds::dds::RETCODE_OK)
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "SimpleWideUnionStruct: Given Struct TypeIdentifier unknown to TypeObjectRegistry.");
            return;
        }
    }
}

